
STM32Utils.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b480  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800b608  0800b608  0000c608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b62c  0800b62c  0000d07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b62c  0800b62c  0000c62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b634  0800b634  0000d07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b634  0800b634  0000c634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b638  0800b638  0000c638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800b63c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d07c  2**0
                  CONTENTS
 10 .bss          00000b48  2000007c  2000007c  0000d07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bc4  20000bc4  0000d07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e10d  00000000  00000000  0000d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a9f  00000000  00000000  0002b1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001980  00000000  00000000  0002fc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013ab  00000000  00000000  000315d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006452  00000000  00000000  00032983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002388c  00000000  00000000  00038dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1237  00000000  00000000  0005c661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013d898  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006eb4  00000000  00000000  0013d8dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003c  00000000  00000000  00144790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b5f0 	.word	0x0800b5f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800b5f0 	.word	0x0800b5f0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <status_led_init>:
// status led config >> for four leds
void status_led_init(Status_led_s *status_led, GPIO_TypeDef * Led1_GPIOx, uint16_t Led1_GPIO_pin,
		GPIO_TypeDef * Led2_GPIOx, uint16_t Led2_GPIO_pin,
		GPIO_TypeDef * Led3_GPIOx, uint16_t Led3_GPIO_pin,
		GPIO_TypeDef * Led4_GPIOx, uint16_t Led4_GPIO_pin)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	60b9      	str	r1, [r7, #8]
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	4613      	mov	r3, r2
 80004c6:	80fb      	strh	r3, [r7, #6]
	status_led->Led1_GPIOx = Led1_GPIOx;
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	68ba      	ldr	r2, [r7, #8]
 80004cc:	601a      	str	r2, [r3, #0]
	status_led->Led1_GPIO_pin = Led1_GPIO_pin;
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	88fa      	ldrh	r2, [r7, #6]
 80004d2:	809a      	strh	r2, [r3, #4]

	status_led->Led2_GPIOx = Led2_GPIOx;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	683a      	ldr	r2, [r7, #0]
 80004d8:	609a      	str	r2, [r3, #8]
	status_led->Led2_GPIO_pin = Led2_GPIO_pin;
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	8b3a      	ldrh	r2, [r7, #24]
 80004de:	819a      	strh	r2, [r3, #12]

	status_led->Led3_GPIOx = Led3_GPIOx;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	69fa      	ldr	r2, [r7, #28]
 80004e4:	611a      	str	r2, [r3, #16]
	status_led->Led3_GPIO_pin = Led3_GPIO_pin;
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	8c3a      	ldrh	r2, [r7, #32]
 80004ea:	829a      	strh	r2, [r3, #20]

	status_led->Led4_GPIOx = Led4_GPIOx;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80004f0:	619a      	str	r2, [r3, #24]
	status_led->Led4_GPIO_pin = Led4_GPIO_pin;
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80004f6:	839a      	strh	r2, [r3, #28]

}
 80004f8:	bf00      	nop
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <status_led_process>:

void status_led_process(Status_led_s* status_led, Status_led_mode_e Mode){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	70fb      	strb	r3, [r7, #3]
	switch (Mode) {
 8000510:	78fb      	ldrb	r3, [r7, #3]
 8000512:	2b03      	cmp	r3, #3
 8000514:	f200 80c8 	bhi.w	80006a8 <status_led_process+0x1a4>
 8000518:	a201      	add	r2, pc, #4	@ (adr r2, 8000520 <status_led_process+0x1c>)
 800051a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051e:	bf00      	nop
 8000520:	08000531 	.word	0x08000531
 8000524:	0800055f 	.word	0x0800055f
 8000528:	080005ad 	.word	0x080005ad
 800052c:	0800061b 	.word	0x0800061b
		case LED_Mode1 :
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 1);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	6818      	ldr	r0, [r3, #0]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	889b      	ldrh	r3, [r3, #4]
 8000538:	2201      	movs	r2, #1
 800053a:	4619      	mov	r1, r3
 800053c:	f002 f95a 	bl	80027f4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000540:	20c8      	movs	r0, #200	@ 0xc8
 8000542:	f000 ffdf 	bl	8001504 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 0);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6818      	ldr	r0, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	889b      	ldrh	r3, [r3, #4]
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	f002 f94f 	bl	80027f4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000556:	20c8      	movs	r0, #200	@ 0xc8
 8000558:	f000 ffd4 	bl	8001504 <HAL_Delay>
			break;
 800055c:	e0a5      	b.n	80006aa <status_led_process+0x1a6>
		case LED_Mode2 :
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 1);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6818      	ldr	r0, [r3, #0]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	889b      	ldrh	r3, [r3, #4]
 8000566:	2201      	movs	r2, #1
 8000568:	4619      	mov	r1, r3
 800056a:	f002 f943 	bl	80027f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 1);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6898      	ldr	r0, [r3, #8]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	899b      	ldrh	r3, [r3, #12]
 8000576:	2201      	movs	r2, #1
 8000578:	4619      	mov	r1, r3
 800057a:	f002 f93b 	bl	80027f4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 800057e:	20c8      	movs	r0, #200	@ 0xc8
 8000580:	f000 ffc0 	bl	8001504 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 0);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	889b      	ldrh	r3, [r3, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	4619      	mov	r1, r3
 8000590:	f002 f930 	bl	80027f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 0);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6898      	ldr	r0, [r3, #8]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	899b      	ldrh	r3, [r3, #12]
 800059c:	2200      	movs	r2, #0
 800059e:	4619      	mov	r1, r3
 80005a0:	f002 f928 	bl	80027f4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80005a4:	20c8      	movs	r0, #200	@ 0xc8
 80005a6:	f000 ffad 	bl	8001504 <HAL_Delay>
			break;
 80005aa:	e07e      	b.n	80006aa <status_led_process+0x1a6>
		case LED_Mode3 :
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 1);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	6818      	ldr	r0, [r3, #0]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	889b      	ldrh	r3, [r3, #4]
 80005b4:	2201      	movs	r2, #1
 80005b6:	4619      	mov	r1, r3
 80005b8:	f002 f91c 	bl	80027f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 1);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6898      	ldr	r0, [r3, #8]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	899b      	ldrh	r3, [r3, #12]
 80005c4:	2201      	movs	r2, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	f002 f914 	bl	80027f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led3_GPIOx, status_led->Led3_GPIO_pin, 1);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	6918      	ldr	r0, [r3, #16]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	8a9b      	ldrh	r3, [r3, #20]
 80005d4:	2201      	movs	r2, #1
 80005d6:	4619      	mov	r1, r3
 80005d8:	f002 f90c 	bl	80027f4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80005dc:	20c8      	movs	r0, #200	@ 0xc8
 80005de:	f000 ff91 	bl	8001504 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 0);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6818      	ldr	r0, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	889b      	ldrh	r3, [r3, #4]
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	f002 f901 	bl	80027f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 0);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6898      	ldr	r0, [r3, #8]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	899b      	ldrh	r3, [r3, #12]
 80005fa:	2200      	movs	r2, #0
 80005fc:	4619      	mov	r1, r3
 80005fe:	f002 f8f9 	bl	80027f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led3_GPIOx, status_led->Led3_GPIO_pin, 0);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6918      	ldr	r0, [r3, #16]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	8a9b      	ldrh	r3, [r3, #20]
 800060a:	2200      	movs	r2, #0
 800060c:	4619      	mov	r1, r3
 800060e:	f002 f8f1 	bl	80027f4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000612:	20c8      	movs	r0, #200	@ 0xc8
 8000614:	f000 ff76 	bl	8001504 <HAL_Delay>
			break;
 8000618:	e047      	b.n	80006aa <status_led_process+0x1a6>
		case LED_Mode4 :
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 1);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6818      	ldr	r0, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	889b      	ldrh	r3, [r3, #4]
 8000622:	2201      	movs	r2, #1
 8000624:	4619      	mov	r1, r3
 8000626:	f002 f8e5 	bl	80027f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 1);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6898      	ldr	r0, [r3, #8]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	899b      	ldrh	r3, [r3, #12]
 8000632:	2201      	movs	r2, #1
 8000634:	4619      	mov	r1, r3
 8000636:	f002 f8dd 	bl	80027f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led3_GPIOx, status_led->Led3_GPIO_pin, 1);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6918      	ldr	r0, [r3, #16]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	8a9b      	ldrh	r3, [r3, #20]
 8000642:	2201      	movs	r2, #1
 8000644:	4619      	mov	r1, r3
 8000646:	f002 f8d5 	bl	80027f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 1);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6998      	ldr	r0, [r3, #24]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	8b9b      	ldrh	r3, [r3, #28]
 8000652:	2201      	movs	r2, #1
 8000654:	4619      	mov	r1, r3
 8000656:	f002 f8cd 	bl	80027f4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 800065a:	20c8      	movs	r0, #200	@ 0xc8
 800065c:	f000 ff52 	bl	8001504 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 0);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	889b      	ldrh	r3, [r3, #4]
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	f002 f8c2 	bl	80027f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 0);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6898      	ldr	r0, [r3, #8]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	899b      	ldrh	r3, [r3, #12]
 8000678:	2200      	movs	r2, #0
 800067a:	4619      	mov	r1, r3
 800067c:	f002 f8ba 	bl	80027f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led3_GPIOx, status_led->Led3_GPIO_pin, 0);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6918      	ldr	r0, [r3, #16]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	8a9b      	ldrh	r3, [r3, #20]
 8000688:	2200      	movs	r2, #0
 800068a:	4619      	mov	r1, r3
 800068c:	f002 f8b2 	bl	80027f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 0);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6998      	ldr	r0, [r3, #24]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	8b9b      	ldrh	r3, [r3, #28]
 8000698:	2200      	movs	r2, #0
 800069a:	4619      	mov	r1, r3
 800069c:	f002 f8aa 	bl	80027f4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80006a0:	20c8      	movs	r0, #200	@ 0xc8
 80006a2:	f000 ff2f 	bl	8001504 <HAL_Delay>
			break;
 80006a6:	e000      	b.n	80006aa <status_led_process+0x1a6>

		default:
			break;
 80006a8:	bf00      	nop
	}
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop

080006b4 <LIS302DL_init>:


#define CS_ENABLE()   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET)
#define CS_DISABLE()  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET)

void LIS302DL_init(LIS302DL_Mode Mode) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
    LIS302DL_WriteReg(LIS302DL_Ctrl_Reg1, Mode);
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	4619      	mov	r1, r3
 80006c2:	2020      	movs	r0, #32
 80006c4:	f000 f804 	bl	80006d0 <LIS302DL_WriteReg>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <LIS302DL_WriteReg>:

void LIS302DL_WriteReg(uint8_t reg, uint8_t data){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	71bb      	strb	r3, [r7, #6]
	uint8_t SendData[2] = {reg,data};
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	733b      	strb	r3, [r7, #12]
 80006e4:	79bb      	ldrb	r3, [r7, #6]
 80006e6:	737b      	strb	r3, [r7, #13]
	CS_ENABLE();
 80006e8:	2200      	movs	r2, #0
 80006ea:	2108      	movs	r1, #8
 80006ec:	4809      	ldr	r0, [pc, #36]	@ (8000714 <LIS302DL_WriteReg+0x44>)
 80006ee:	f002 f881 	bl	80027f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SendData, 2, HAL_MAX_DELAY);
 80006f2:	f107 010c 	add.w	r1, r7, #12
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	2202      	movs	r2, #2
 80006fc:	4806      	ldr	r0, [pc, #24]	@ (8000718 <LIS302DL_WriteReg+0x48>)
 80006fe:	f005 fdfa 	bl	80062f6 <HAL_SPI_Transmit>
	CS_DISABLE();
 8000702:	2201      	movs	r2, #1
 8000704:	2108      	movs	r1, #8
 8000706:	4803      	ldr	r0, [pc, #12]	@ (8000714 <LIS302DL_WriteReg+0x44>)
 8000708:	f002 f874 	bl	80027f4 <HAL_GPIO_WritePin>
}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000
 8000718:	200001dc 	.word	0x200001dc

0800071c <step_durdur>:
			__HAL_TIM_SET_COMPARE(step_config->Timer_handle, step_config->Timer_channel, 100);
		}
	}
}

void step_durdur(step_config* step_config){
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	if (step_config->step_set.sayac == step_config->step_set.adim){
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	691a      	ldr	r2, [r3, #16]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	429a      	cmp	r2, r3
 800072e:	d10d      	bne.n	800074c <step_durdur+0x30>
		HAL_TIM_PWM_Stop_IT(step_config->Timer_handle, step_config->Timer_channel);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	4619      	mov	r1, r3
 800073a:	4610      	mov	r0, r2
 800073c:	f006 f9b6 	bl	8006aac <HAL_TIM_PWM_Stop_IT>
		step_config->step_set.durum = Step_DURDU;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
		step_config->step_set.sayac =0;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
	}

}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef * htim)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	if (htim-> Instance == TIM1){
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a09      	ldr	r2, [pc, #36]	@ (8000788 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d10b      	bne.n	800077e <HAL_TIM_PWM_PulseFinishedCallback+0x2a>

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7f1b      	ldrb	r3, [r3, #28]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d104      	bne.n	8000778 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
		{
			step1.step_set.sayac++;
 800076e:	4b07      	ldr	r3, [pc, #28]	@ (800078c <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000770:	691b      	ldr	r3, [r3, #16]
 8000772:	3301      	adds	r3, #1
 8000774:	4a05      	ldr	r2, [pc, #20]	@ (800078c <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000776:	6113      	str	r3, [r2, #16]
		}

		step_durdur(&step1);
 8000778:	4804      	ldr	r0, [pc, #16]	@ (800078c <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 800077a:	f7ff ffcf 	bl	800071c <step_durdur>

		}

}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40010000 	.word	0x40010000
 800078c:	2000027c 	.word	0x2000027c

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000796:	f000 fe43 	bl	8001420 <HAL_Init>

  /* USER CODE BEGIN Init */
  LIS302DL_init(Normal_Mode);
 800079a:	2047      	movs	r0, #71	@ 0x47
 800079c:	f7ff ff8a 	bl	80006b4 <LIS302DL_init>
  status_led_init(&statusLED, GPIOD, GPIO_PIN_12, GPIOD, GPIO_PIN_13, GPIOD, GPIO_PIN_14, GPIOD, GPIO_PIN_15);
 80007a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007a4:	9304      	str	r3, [sp, #16]
 80007a6:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <main+0x74>)
 80007a8:	9303      	str	r3, [sp, #12]
 80007aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80007ae:	9302      	str	r3, [sp, #8]
 80007b0:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <main+0x74>)
 80007b2:	9301      	str	r3, [sp, #4]
 80007b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <main+0x74>)
 80007bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80007c0:	4910      	ldr	r1, [pc, #64]	@ (8000804 <main+0x74>)
 80007c2:	4811      	ldr	r0, [pc, #68]	@ (8000808 <main+0x78>)
 80007c4:	f7ff fe78 	bl	80004b8 <status_led_init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c8:	f000 f820 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007cc:	f000 fa30 	bl	8000c30 <MX_GPIO_Init>
  MX_DMA_Init();
 80007d0:	f000 fa0e 	bl	8000bf0 <MX_DMA_Init>
  MX_I2C1_Init();
 80007d4:	f000 f8d6 	bl	8000984 <MX_I2C1_Init>
  MX_I2S3_Init();
 80007d8:	f000 f902 	bl	80009e0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80007dc:	f000 f930 	bl	8000a40 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80007e0:	f00a fab0 	bl	800ad44 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80007e4:	f000 f87c 	bl	80008e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80007e8:	f000 f960 	bl	8000aac <MX_TIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80007ec:	f00a fad0 	bl	800ad90 <MX_USB_HOST_Process>
//	step(&step1, 200, Step_ILERI);
//	HAL_Delay(1000);
//	step(&step1, 200, Step_GERI);
//	HAL_Delay(1000);

    status_led_process(&statusLED, LED_Mode4);
 80007f0:	2103      	movs	r1, #3
 80007f2:	4805      	ldr	r0, [pc, #20]	@ (8000808 <main+0x78>)
 80007f4:	f7ff fe86 	bl	8000504 <status_led_process>

    HAL_Delay(10);
 80007f8:	200a      	movs	r0, #10
 80007fa:	f000 fe83 	bl	8001504 <HAL_Delay>
    MX_USB_HOST_Process();
 80007fe:	bf00      	nop
 8000800:	e7f4      	b.n	80007ec <main+0x5c>
 8000802:	bf00      	nop
 8000804:	40020c00 	.word	0x40020c00
 8000808:	20000298 	.word	0x20000298

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	@ 0x50
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	2230      	movs	r2, #48	@ 0x30
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f00a fe5a 	bl	800b4d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	4b28      	ldr	r3, [pc, #160]	@ (80008d8 <SystemClock_Config+0xcc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000838:	4a27      	ldr	r2, [pc, #156]	@ (80008d8 <SystemClock_Config+0xcc>)
 800083a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000840:	4b25      	ldr	r3, [pc, #148]	@ (80008d8 <SystemClock_Config+0xcc>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	4b22      	ldr	r3, [pc, #136]	@ (80008dc <SystemClock_Config+0xd0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a21      	ldr	r2, [pc, #132]	@ (80008dc <SystemClock_Config+0xd0>)
 8000856:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <SystemClock_Config+0xd0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000868:	2301      	movs	r3, #1
 800086a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800086c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000876:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800087a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800087c:	2308      	movs	r3, #8
 800087e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000880:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000884:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000886:	2302      	movs	r3, #2
 8000888:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800088a:	2307      	movs	r3, #7
 800088c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	4618      	mov	r0, r3
 8000894:	f004 fee0 	bl	8005658 <HAL_RCC_OscConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800089e:	f000 fac5 	bl	8000e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	230f      	movs	r3, #15
 80008a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a6:	2302      	movs	r3, #2
 80008a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	2105      	movs	r1, #5
 80008c0:	4618      	mov	r0, r3
 80008c2:	f005 f941 	bl	8005b48 <HAL_RCC_ClockConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008cc:	f000 faae 	bl	8000e2c <Error_Handler>
  }
}
 80008d0:	bf00      	nop
 80008d2:	3750      	adds	r7, #80	@ 0x50
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000

080008e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008e6:	463b      	mov	r3, r7
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008f2:	4b21      	ldr	r3, [pc, #132]	@ (8000978 <MX_ADC1_Init+0x98>)
 80008f4:	4a21      	ldr	r2, [pc, #132]	@ (800097c <MX_ADC1_Init+0x9c>)
 80008f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <MX_ADC1_Init+0x98>)
 80008fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000900:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <MX_ADC1_Init+0x98>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000906:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <MX_ADC1_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800090c:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_ADC1_Init+0x98>)
 800090e:	2200      	movs	r2, #0
 8000910:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000912:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <MX_ADC1_Init+0x98>)
 8000914:	2200      	movs	r2, #0
 8000916:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <MX_ADC1_Init+0x98>)
 800091c:	2200      	movs	r2, #0
 800091e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_ADC1_Init+0x98>)
 8000922:	4a17      	ldr	r2, [pc, #92]	@ (8000980 <MX_ADC1_Init+0xa0>)
 8000924:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000926:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_ADC1_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_ADC1_Init+0x98>)
 800092e:	2201      	movs	r2, #1
 8000930:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_ADC1_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800093a:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_ADC1_Init+0x98>)
 800093c:	2201      	movs	r2, #1
 800093e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000940:	480d      	ldr	r0, [pc, #52]	@ (8000978 <MX_ADC1_Init+0x98>)
 8000942:	f000 fe03 	bl	800154c <HAL_ADC_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800094c:	f000 fa6e 	bl	8000e2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000950:	2301      	movs	r3, #1
 8000952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000954:	2301      	movs	r3, #1
 8000956:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800095c:	463b      	mov	r3, r7
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_ADC1_Init+0x98>)
 8000962:	f000 ff65 	bl	8001830 <HAL_ADC_ConfigChannel>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800096c:	f000 fa5e 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000098 	.word	0x20000098
 800097c:	40012000 	.word	0x40012000
 8000980:	0f000001 	.word	0x0f000001

08000984 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_I2C1_Init+0x50>)
 800098a:	4a13      	ldr	r2, [pc, #76]	@ (80009d8 <MX_I2C1_Init+0x54>)
 800098c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_I2C1_Init+0x50>)
 8000990:	4a12      	ldr	r2, [pc, #72]	@ (80009dc <MX_I2C1_Init+0x58>)
 8000992:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_I2C1_Init+0x50>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_I2C1_Init+0x50>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_I2C1_Init+0x50>)
 80009a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <MX_I2C1_Init+0x50>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_I2C1_Init+0x50>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b4:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <MX_I2C1_Init+0x50>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_I2C1_Init+0x50>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <MX_I2C1_Init+0x50>)
 80009c2:	f004 f865 	bl	8004a90 <HAL_I2C_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009cc:	f000 fa2e 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000140 	.word	0x20000140
 80009d8:	40005400 	.word	0x40005400
 80009dc:	000186a0 	.word	0x000186a0

080009e0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80009e4:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <MX_I2S3_Init+0x54>)
 80009e6:	4a14      	ldr	r2, [pc, #80]	@ (8000a38 <MX_I2S3_Init+0x58>)
 80009e8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80009ea:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <MX_I2S3_Init+0x54>)
 80009ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009f0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <MX_I2S3_Init+0x54>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_I2S3_Init+0x54>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <MX_I2S3_Init+0x54>)
 8000a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a04:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <MX_I2S3_Init+0x54>)
 8000a08:	4a0c      	ldr	r2, [pc, #48]	@ (8000a3c <MX_I2S3_Init+0x5c>)
 8000a0a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_I2S3_Init+0x54>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a12:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <MX_I2S3_Init+0x54>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_I2S3_Init+0x54>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_I2S3_Init+0x54>)
 8000a20:	f004 f97a 	bl	8004d18 <HAL_I2S_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000a2a:	f000 f9ff 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000194 	.word	0x20000194
 8000a38:	40003c00 	.word	0x40003c00
 8000a3c:	00017700 	.word	0x00017700

08000a40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a44:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <MX_SPI1_Init+0x64>)
 8000a46:	4a18      	ldr	r2, [pc, #96]	@ (8000aa8 <MX_SPI1_Init+0x68>)
 8000a48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	@ (8000aa4 <MX_SPI1_Init+0x64>)
 8000a4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a52:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <MX_SPI1_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <MX_SPI1_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <MX_SPI1_Init+0x64>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <MX_SPI1_Init+0x64>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <MX_SPI1_Init+0x64>)
 8000a6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a72:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <MX_SPI1_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <MX_SPI1_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <MX_SPI1_Init+0x64>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a84:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <MX_SPI1_Init+0x64>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <MX_SPI1_Init+0x64>)
 8000a8c:	220a      	movs	r2, #10
 8000a8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <MX_SPI1_Init+0x64>)
 8000a92:	f005 fba7 	bl	80061e4 <HAL_SPI_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a9c:	f000 f9c6 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200001dc 	.word	0x200001dc
 8000aa8:	40013000 	.word	0x40013000

08000aac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b096      	sub	sp, #88	@ 0x58
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
 8000ada:	615a      	str	r2, [r3, #20]
 8000adc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2220      	movs	r2, #32
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f00a fcf5 	bl	800b4d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aea:	4b3f      	ldr	r3, [pc, #252]	@ (8000be8 <MX_TIM1_Init+0x13c>)
 8000aec:	4a3f      	ldr	r2, [pc, #252]	@ (8000bec <MX_TIM1_Init+0x140>)
 8000aee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 532;
 8000af0:	4b3d      	ldr	r3, [pc, #244]	@ (8000be8 <MX_TIM1_Init+0x13c>)
 8000af2:	f44f 7205 	mov.w	r2, #532	@ 0x214
 8000af6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af8:	4b3b      	ldr	r3, [pc, #236]	@ (8000be8 <MX_TIM1_Init+0x13c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000afe:	4b3a      	ldr	r3, [pc, #232]	@ (8000be8 <MX_TIM1_Init+0x13c>)
 8000b00:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b06:	4b38      	ldr	r3, [pc, #224]	@ (8000be8 <MX_TIM1_Init+0x13c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b0c:	4b36      	ldr	r3, [pc, #216]	@ (8000be8 <MX_TIM1_Init+0x13c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b12:	4b35      	ldr	r3, [pc, #212]	@ (8000be8 <MX_TIM1_Init+0x13c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b18:	4833      	ldr	r0, [pc, #204]	@ (8000be8 <MX_TIM1_Init+0x13c>)
 8000b1a:	f005 ff1f 	bl	800695c <HAL_TIM_Base_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b24:	f000 f982 	bl	8000e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b2e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b32:	4619      	mov	r1, r3
 8000b34:	482c      	ldr	r0, [pc, #176]	@ (8000be8 <MX_TIM1_Init+0x13c>)
 8000b36:	f006 fa29 	bl	8006f8c <HAL_TIM_ConfigClockSource>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b40:	f000 f974 	bl	8000e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b44:	4828      	ldr	r0, [pc, #160]	@ (8000be8 <MX_TIM1_Init+0x13c>)
 8000b46:	f005 ff58 	bl	80069fa <HAL_TIM_PWM_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b50:	f000 f96c 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b5c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b60:	4619      	mov	r1, r3
 8000b62:	4821      	ldr	r0, [pc, #132]	@ (8000be8 <MX_TIM1_Init+0x13c>)
 8000b64:	f006 fe1e 	bl	80077a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000b6e:	f000 f95d 	bl	8000e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b72:	2360      	movs	r3, #96	@ 0x60
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b92:	2200      	movs	r2, #0
 8000b94:	4619      	mov	r1, r3
 8000b96:	4814      	ldr	r0, [pc, #80]	@ (8000be8 <MX_TIM1_Init+0x13c>)
 8000b98:	f006 f936 	bl	8006e08 <HAL_TIM_PWM_ConfigChannel>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000ba2:	f000 f943 	bl	8000e2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bbe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4807      	ldr	r0, [pc, #28]	@ (8000be8 <MX_TIM1_Init+0x13c>)
 8000bca:	f006 fe67 	bl	800789c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000bd4:	f000 f92a 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bd8:	4803      	ldr	r0, [pc, #12]	@ (8000be8 <MX_TIM1_Init+0x13c>)
 8000bda:	f000 fb13 	bl	8001204 <HAL_TIM_MspPostInit>

}
 8000bde:	bf00      	nop
 8000be0:	3758      	adds	r7, #88	@ 0x58
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000234 	.word	0x20000234
 8000bec:	40010000 	.word	0x40010000

08000bf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <MX_DMA_Init+0x3c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	@ (8000c2c <MX_DMA_Init+0x3c>)
 8000c00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <MX_DMA_Init+0x3c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2038      	movs	r0, #56	@ 0x38
 8000c18:	f001 f90d 	bl	8001e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c1c:	2038      	movs	r0, #56	@ 0x38
 8000c1e:	f001 f926 	bl	8001e6e <HAL_NVIC_EnableIRQ>

}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800

08000c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08c      	sub	sp, #48	@ 0x30
 8000c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	4b72      	ldr	r3, [pc, #456]	@ (8000e14 <MX_GPIO_Init+0x1e4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	4a71      	ldr	r2, [pc, #452]	@ (8000e14 <MX_GPIO_Init+0x1e4>)
 8000c50:	f043 0310 	orr.w	r3, r3, #16
 8000c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c56:	4b6f      	ldr	r3, [pc, #444]	@ (8000e14 <MX_GPIO_Init+0x1e4>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	f003 0310 	and.w	r3, r3, #16
 8000c5e:	61bb      	str	r3, [r7, #24]
 8000c60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	4b6b      	ldr	r3, [pc, #428]	@ (8000e14 <MX_GPIO_Init+0x1e4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a6a      	ldr	r2, [pc, #424]	@ (8000e14 <MX_GPIO_Init+0x1e4>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b68      	ldr	r3, [pc, #416]	@ (8000e14 <MX_GPIO_Init+0x1e4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b64      	ldr	r3, [pc, #400]	@ (8000e14 <MX_GPIO_Init+0x1e4>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a63      	ldr	r2, [pc, #396]	@ (8000e14 <MX_GPIO_Init+0x1e4>)
 8000c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b61      	ldr	r3, [pc, #388]	@ (8000e14 <MX_GPIO_Init+0x1e4>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b5d      	ldr	r3, [pc, #372]	@ (8000e14 <MX_GPIO_Init+0x1e4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a5c      	ldr	r2, [pc, #368]	@ (8000e14 <MX_GPIO_Init+0x1e4>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	4b5a      	ldr	r3, [pc, #360]	@ (8000e14 <MX_GPIO_Init+0x1e4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	4b56      	ldr	r3, [pc, #344]	@ (8000e14 <MX_GPIO_Init+0x1e4>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a55      	ldr	r2, [pc, #340]	@ (8000e14 <MX_GPIO_Init+0x1e4>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b53      	ldr	r3, [pc, #332]	@ (8000e14 <MX_GPIO_Init+0x1e4>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4b4f      	ldr	r3, [pc, #316]	@ (8000e14 <MX_GPIO_Init+0x1e4>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a4e      	ldr	r2, [pc, #312]	@ (8000e14 <MX_GPIO_Init+0x1e4>)
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b4c      	ldr	r3, [pc, #304]	@ (8000e14 <MX_GPIO_Init+0x1e4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	f003 0308 	and.w	r3, r3, #8
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	4849      	ldr	r0, [pc, #292]	@ (8000e18 <MX_GPIO_Init+0x1e8>)
 8000cf4:	f001 fd7e 	bl	80027f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4847      	ldr	r0, [pc, #284]	@ (8000e1c <MX_GPIO_Init+0x1ec>)
 8000cfe:	f001 fd79 	bl	80027f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d02:	2200      	movs	r2, #0
 8000d04:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000d08:	4845      	ldr	r0, [pc, #276]	@ (8000e20 <MX_GPIO_Init+0x1f0>)
 8000d0a:	f001 fd73 	bl	80027f4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d0e:	2308      	movs	r3, #8
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	483c      	ldr	r0, [pc, #240]	@ (8000e18 <MX_GPIO_Init+0x1e8>)
 8000d26:	f001 fbc9 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4836      	ldr	r0, [pc, #216]	@ (8000e1c <MX_GPIO_Init+0x1ec>)
 8000d42:	f001 fbbb 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d46:	2308      	movs	r3, #8
 8000d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d56:	2305      	movs	r3, #5
 8000d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	482e      	ldr	r0, [pc, #184]	@ (8000e1c <MX_GPIO_Init+0x1ec>)
 8000d62:	f001 fbab 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d66:	2301      	movs	r3, #1
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d6a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4619      	mov	r1, r3
 8000d7a:	482a      	ldr	r0, [pc, #168]	@ (8000e24 <MX_GPIO_Init+0x1f4>)
 8000d7c:	f001 fb9e 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d80:	2304      	movs	r3, #4
 8000d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	4825      	ldr	r0, [pc, #148]	@ (8000e28 <MX_GPIO_Init+0x1f8>)
 8000d94:	f001 fb92 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000daa:	2305      	movs	r3, #5
 8000dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	481c      	ldr	r0, [pc, #112]	@ (8000e28 <MX_GPIO_Init+0x1f8>)
 8000db6:	f001 fb81 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000dba:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000dbe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4813      	ldr	r0, [pc, #76]	@ (8000e20 <MX_GPIO_Init+0x1f0>)
 8000dd4:	f001 fb72 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000dd8:	2320      	movs	r3, #32
 8000dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	480d      	ldr	r0, [pc, #52]	@ (8000e20 <MX_GPIO_Init+0x1f0>)
 8000dec:	f001 fb66 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000df4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	4619      	mov	r1, r3
 8000e04:	4804      	ldr	r0, [pc, #16]	@ (8000e18 <MX_GPIO_Init+0x1e8>)
 8000e06:	f001 fb59 	bl	80024bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e0a:	bf00      	nop
 8000e0c:	3730      	adds	r7, #48	@ 0x30
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40020800 	.word	0x40020800
 8000e20:	40020c00 	.word	0x40020c00
 8000e24:	40020000 	.word	0x40020000
 8000e28:	40020400 	.word	0x40020400

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <Error_Handler+0x8>

08000e38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4b10      	ldr	r3, [pc, #64]	@ (8000e84 <HAL_MspInit+0x4c>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e46:	4a0f      	ldr	r2, [pc, #60]	@ (8000e84 <HAL_MspInit+0x4c>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <HAL_MspInit+0x4c>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <HAL_MspInit+0x4c>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e62:	4a08      	ldr	r2, [pc, #32]	@ (8000e84 <HAL_MspInit+0x4c>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_MspInit+0x4c>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e76:	2007      	movs	r0, #7
 8000e78:	f000 ffd2 	bl	8001e20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800

08000e88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	@ 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a32      	ldr	r2, [pc, #200]	@ (8000f70 <HAL_ADC_MspInit+0xe8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d15e      	bne.n	8000f68 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b31      	ldr	r3, [pc, #196]	@ (8000f74 <HAL_ADC_MspInit+0xec>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb2:	4a30      	ldr	r2, [pc, #192]	@ (8000f74 <HAL_ADC_MspInit+0xec>)
 8000eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eba:	4b2e      	ldr	r3, [pc, #184]	@ (8000f74 <HAL_ADC_MspInit+0xec>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b2a      	ldr	r3, [pc, #168]	@ (8000f74 <HAL_ADC_MspInit+0xec>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a29      	ldr	r2, [pc, #164]	@ (8000f74 <HAL_ADC_MspInit+0xec>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b27      	ldr	r3, [pc, #156]	@ (8000f74 <HAL_ADC_MspInit+0xec>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4820      	ldr	r0, [pc, #128]	@ (8000f78 <HAL_ADC_MspInit+0xf0>)
 8000ef6:	f001 fae1 	bl	80024bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000efa:	4b20      	ldr	r3, [pc, #128]	@ (8000f7c <HAL_ADC_MspInit+0xf4>)
 8000efc:	4a20      	ldr	r2, [pc, #128]	@ (8000f80 <HAL_ADC_MspInit+0xf8>)
 8000efe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f00:	4b1e      	ldr	r3, [pc, #120]	@ (8000f7c <HAL_ADC_MspInit+0xf4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f06:	4b1d      	ldr	r3, [pc, #116]	@ (8000f7c <HAL_ADC_MspInit+0xf4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <HAL_ADC_MspInit+0xf4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <HAL_ADC_MspInit+0xf4>)
 8000f14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <HAL_ADC_MspInit+0xf4>)
 8000f1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f22:	4b16      	ldr	r3, [pc, #88]	@ (8000f7c <HAL_ADC_MspInit+0xf4>)
 8000f24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <HAL_ADC_MspInit+0xf4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <HAL_ADC_MspInit+0xf4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f36:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <HAL_ADC_MspInit+0xf4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f3c:	480f      	ldr	r0, [pc, #60]	@ (8000f7c <HAL_ADC_MspInit+0xf4>)
 8000f3e:	f000 ffb1 	bl	8001ea4 <HAL_DMA_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000f48:	f7ff ff70 	bl	8000e2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <HAL_ADC_MspInit+0xf4>)
 8000f50:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f52:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <HAL_ADC_MspInit+0xf4>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2012      	movs	r0, #18
 8000f5e:	f000 ff6a 	bl	8001e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f62:	2012      	movs	r0, #18
 8000f64:	f000 ff83 	bl	8001e6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f68:	bf00      	nop
 8000f6a:	3728      	adds	r7, #40	@ 0x28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40012000 	.word	0x40012000
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	200000e0 	.word	0x200000e0
 8000f80:	40026410 	.word	0x40026410

08000f84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a19      	ldr	r2, [pc, #100]	@ (8001008 <HAL_I2C_MspInit+0x84>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d12c      	bne.n	8001000 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b18      	ldr	r3, [pc, #96]	@ (800100c <HAL_I2C_MspInit+0x88>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a17      	ldr	r2, [pc, #92]	@ (800100c <HAL_I2C_MspInit+0x88>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b15      	ldr	r3, [pc, #84]	@ (800100c <HAL_I2C_MspInit+0x88>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000fc2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc8:	2312      	movs	r3, #18
 8000fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480c      	ldr	r0, [pc, #48]	@ (8001010 <HAL_I2C_MspInit+0x8c>)
 8000fe0:	f001 fa6c 	bl	80024bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <HAL_I2C_MspInit+0x88>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fec:	4a07      	ldr	r2, [pc, #28]	@ (800100c <HAL_I2C_MspInit+0x88>)
 8000fee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ff2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff4:	4b05      	ldr	r3, [pc, #20]	@ (800100c <HAL_I2C_MspInit+0x88>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001000:	bf00      	nop
 8001002:	3728      	adds	r7, #40	@ 0x28
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40005400 	.word	0x40005400
 800100c:	40023800 	.word	0x40023800
 8001010:	40020400 	.word	0x40020400

08001014 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08e      	sub	sp, #56	@ 0x38
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a31      	ldr	r2, [pc, #196]	@ (8001104 <HAL_I2S_MspInit+0xf0>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d15a      	bne.n	80010fa <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001044:	2301      	movs	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001048:	23c0      	movs	r3, #192	@ 0xc0
 800104a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800104c:	2302      	movs	r3, #2
 800104e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4618      	mov	r0, r3
 8001056:	f004 ff83 	bl	8005f60 <HAL_RCCEx_PeriphCLKConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001060:	f7ff fee4 	bl	8000e2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	4b27      	ldr	r3, [pc, #156]	@ (8001108 <HAL_I2S_MspInit+0xf4>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106c:	4a26      	ldr	r2, [pc, #152]	@ (8001108 <HAL_I2S_MspInit+0xf4>)
 800106e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001072:	6413      	str	r3, [r2, #64]	@ 0x40
 8001074:	4b24      	ldr	r3, [pc, #144]	@ (8001108 <HAL_I2S_MspInit+0xf4>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001078:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	4b20      	ldr	r3, [pc, #128]	@ (8001108 <HAL_I2S_MspInit+0xf4>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001088:	4a1f      	ldr	r2, [pc, #124]	@ (8001108 <HAL_I2S_MspInit+0xf4>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001090:	4b1d      	ldr	r3, [pc, #116]	@ (8001108 <HAL_I2S_MspInit+0xf4>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <HAL_I2S_MspInit+0xf4>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a4:	4a18      	ldr	r2, [pc, #96]	@ (8001108 <HAL_I2S_MspInit+0xf4>)
 80010a6:	f043 0304 	orr.w	r3, r3, #4
 80010aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ac:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <HAL_I2S_MspInit+0xf4>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80010b8:	2310      	movs	r3, #16
 80010ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010c8:	2306      	movs	r3, #6
 80010ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d0:	4619      	mov	r1, r3
 80010d2:	480e      	ldr	r0, [pc, #56]	@ (800110c <HAL_I2S_MspInit+0xf8>)
 80010d4:	f001 f9f2 	bl	80024bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010d8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010ea:	2306      	movs	r3, #6
 80010ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f2:	4619      	mov	r1, r3
 80010f4:	4806      	ldr	r0, [pc, #24]	@ (8001110 <HAL_I2S_MspInit+0xfc>)
 80010f6:	f001 f9e1 	bl	80024bc <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80010fa:	bf00      	nop
 80010fc:	3738      	adds	r7, #56	@ 0x38
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40003c00 	.word	0x40003c00
 8001108:	40023800 	.word	0x40023800
 800110c:	40020000 	.word	0x40020000
 8001110:	40020800 	.word	0x40020800

08001114 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	@ 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a1d      	ldr	r2, [pc, #116]	@ (80011a8 <HAL_SPI_MspInit+0x94>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d133      	bne.n	800119e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ac <HAL_SPI_MspInit+0x98>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	4a1b      	ldr	r2, [pc, #108]	@ (80011ac <HAL_SPI_MspInit+0x98>)
 8001140:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001144:	6453      	str	r3, [r2, #68]	@ 0x44
 8001146:	4b19      	ldr	r3, [pc, #100]	@ (80011ac <HAL_SPI_MspInit+0x98>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <HAL_SPI_MspInit+0x98>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a14      	ldr	r2, [pc, #80]	@ (80011ac <HAL_SPI_MspInit+0x98>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <HAL_SPI_MspInit+0x98>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800116e:	23e0      	movs	r3, #224	@ 0xe0
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800117e:	2305      	movs	r3, #5
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4809      	ldr	r0, [pc, #36]	@ (80011b0 <HAL_SPI_MspInit+0x9c>)
 800118a:	f001 f997 	bl	80024bc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2023      	movs	r0, #35	@ 0x23
 8001194:	f000 fe4f 	bl	8001e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001198:	2023      	movs	r0, #35	@ 0x23
 800119a:	f000 fe68 	bl	8001e6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800119e:	bf00      	nop
 80011a0:	3728      	adds	r7, #40	@ 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40013000 	.word	0x40013000
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020000 	.word	0x40020000

080011b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0e      	ldr	r2, [pc, #56]	@ (80011fc <HAL_TIM_Base_MspInit+0x48>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d115      	bne.n	80011f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001200 <HAL_TIM_Base_MspInit+0x4c>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001200 <HAL_TIM_Base_MspInit+0x4c>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <HAL_TIM_Base_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	201b      	movs	r0, #27
 80011e8:	f000 fe25 	bl	8001e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80011ec:	201b      	movs	r0, #27
 80011ee:	f000 fe3e 	bl	8001e6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40010000 	.word	0x40010000
 8001200:	40023800 	.word	0x40023800

08001204 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a12      	ldr	r2, [pc, #72]	@ (800126c <HAL_TIM_MspPostInit+0x68>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d11e      	bne.n	8001264 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <HAL_TIM_MspPostInit+0x6c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a10      	ldr	r2, [pc, #64]	@ (8001270 <HAL_TIM_MspPostInit+0x6c>)
 8001230:	f043 0310 	orr.w	r3, r3, #16
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <HAL_TIM_MspPostInit+0x6c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001242:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001246:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001254:	2301      	movs	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	4619      	mov	r1, r3
 800125e:	4805      	ldr	r0, [pc, #20]	@ (8001274 <HAL_TIM_MspPostInit+0x70>)
 8001260:	f001 f92c 	bl	80024bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001264:	bf00      	nop
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40010000 	.word	0x40010000
 8001270:	40023800 	.word	0x40023800
 8001274:	40021000 	.word	0x40021000

08001278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <NMI_Handler+0x4>

08001280 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <HardFault_Handler+0x4>

08001288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <MemManage_Handler+0x4>

08001290 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <BusFault_Handler+0x4>

08001298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <UsageFault_Handler+0x4>

080012a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ce:	f000 f8f9 	bl	80014c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80012dc:	4802      	ldr	r0, [pc, #8]	@ (80012e8 <ADC_IRQHandler+0x10>)
 80012de:	f000 f978 	bl	80015d2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000098 	.word	0x20000098

080012ec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012f0:	4802      	ldr	r0, [pc, #8]	@ (80012fc <TIM1_CC_IRQHandler+0x10>)
 80012f2:	f005 fc99 	bl	8006c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000234 	.word	0x20000234

08001300 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001304:	4802      	ldr	r0, [pc, #8]	@ (8001310 <SPI1_IRQHandler+0x10>)
 8001306:	f005 f93b 	bl	8006580 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200001dc 	.word	0x200001dc

08001314 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <DMA2_Stream0_IRQHandler+0x10>)
 800131a:	f000 fe93 	bl	8002044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200000e0 	.word	0x200000e0

08001328 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800132c:	4802      	ldr	r0, [pc, #8]	@ (8001338 <OTG_FS_IRQHandler+0x10>)
 800132e:	f001 fd5b 	bl	8002de8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000069c 	.word	0x2000069c

0800133c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001344:	4a14      	ldr	r2, [pc, #80]	@ (8001398 <_sbrk+0x5c>)
 8001346:	4b15      	ldr	r3, [pc, #84]	@ (800139c <_sbrk+0x60>)
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001350:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <_sbrk+0x64>)
 800135a:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <_sbrk+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	429a      	cmp	r2, r3
 800136a:	d207      	bcs.n	800137c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800136c:	f00a f8ca 	bl	800b504 <__errno>
 8001370:	4603      	mov	r3, r0
 8001372:	220c      	movs	r2, #12
 8001374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e009      	b.n	8001390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800137c:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001382:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	4a05      	ldr	r2, [pc, #20]	@ (80013a0 <_sbrk+0x64>)
 800138c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20020000 	.word	0x20020000
 800139c:	00000400 	.word	0x00000400
 80013a0:	200002b8 	.word	0x200002b8
 80013a4:	20000bc8 	.word	0x20000bc8

080013a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013ac:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <SystemInit+0x20>)
 80013ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013b2:	4a05      	ldr	r2, [pc, #20]	@ (80013c8 <SystemInit+0x20>)
 80013b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001404 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013d0:	f7ff ffea 	bl	80013a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d4:	480c      	ldr	r0, [pc, #48]	@ (8001408 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013d6:	490d      	ldr	r1, [pc, #52]	@ (800140c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001410 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001418 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fa:	f00a f889 	bl	800b510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fe:	f7ff f9c7 	bl	8000790 <main>
  bx  lr    
 8001402:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001404:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001410:	0800b63c 	.word	0x0800b63c
  ldr r2, =_sbss
 8001414:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001418:	20000bc4 	.word	0x20000bc4

0800141c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800141c:	e7fe      	b.n	800141c <CAN1_RX0_IRQHandler>
	...

08001420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001424:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <HAL_Init+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0d      	ldr	r2, [pc, #52]	@ (8001460 <HAL_Init+0x40>)
 800142a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800142e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001430:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <HAL_Init+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <HAL_Init+0x40>)
 8001436:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800143a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800143c:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <HAL_Init+0x40>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a07      	ldr	r2, [pc, #28]	@ (8001460 <HAL_Init+0x40>)
 8001442:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001448:	2003      	movs	r0, #3
 800144a:	f000 fce9 	bl	8001e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144e:	2000      	movs	r0, #0
 8001450:	f000 f808 	bl	8001464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001454:	f7ff fcf0 	bl	8000e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023c00 	.word	0x40023c00

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800146c:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <HAL_InitTick+0x54>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <HAL_InitTick+0x58>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800147a:	fbb3 f3f1 	udiv	r3, r3, r1
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fd01 	bl	8001e8a <HAL_SYSTICK_Config>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e00e      	b.n	80014b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d80a      	bhi.n	80014ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001498:	2200      	movs	r2, #0
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f000 fcc9 	bl	8001e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a4:	4a06      	ldr	r2, [pc, #24]	@ (80014c0 <HAL_InitTick+0x5c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e000      	b.n	80014b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000004 	.word	0x20000004

080014c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <HAL_IncTick+0x20>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_IncTick+0x24>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <HAL_IncTick+0x24>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008
 80014e8:	200002bc 	.word	0x200002bc

080014ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b03      	ldr	r3, [pc, #12]	@ (8001500 <HAL_GetTick+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	200002bc 	.word	0x200002bc

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff ffee 	bl	80014ec <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_Delay+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffde 	bl	80014ec <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008

0800154c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e033      	b.n	80015ca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fc8c 	bl	8000e88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	2b00      	cmp	r3, #0
 8001588:	d118      	bne.n	80015bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001592:	f023 0302 	bic.w	r3, r3, #2
 8001596:	f043 0202 	orr.w	r2, r3, #2
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 fa68 	bl	8001a74 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	f023 0303 	bic.w	r3, r3, #3
 80015b2:	f043 0201 	orr.w	r2, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80015ba:	e001      	b.n	80015c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	f003 0320 	and.w	r3, r3, #32
 8001600:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d049      	beq.n	800169c <HAL_ADC_IRQHandler+0xca>
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d046      	beq.n	800169c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	2b00      	cmp	r3, #0
 8001618:	d105      	bne.n	8001626 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d12b      	bne.n	800168c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001638:	2b00      	cmp	r3, #0
 800163a:	d127      	bne.n	800168c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001642:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001646:	2b00      	cmp	r3, #0
 8001648:	d006      	beq.n	8001658 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001654:	2b00      	cmp	r3, #0
 8001656:	d119      	bne.n	800168c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0220 	bic.w	r2, r2, #32
 8001666:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001678:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d105      	bne.n	800168c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001684:	f043 0201 	orr.w	r2, r3, #1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f8b0 	bl	80017f2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f06f 0212 	mvn.w	r2, #18
 800169a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016aa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d057      	beq.n	8001762 <HAL_ADC_IRQHandler+0x190>
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d054      	beq.n	8001762 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d105      	bne.n	80016d0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d139      	bne.n	8001752 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016e4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d006      	beq.n	80016fa <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d12b      	bne.n	8001752 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001704:	2b00      	cmp	r3, #0
 8001706:	d124      	bne.n	8001752 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001712:	2b00      	cmp	r3, #0
 8001714:	d11d      	bne.n	8001752 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800171a:	2b00      	cmp	r3, #0
 800171c:	d119      	bne.n	8001752 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800172c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001742:	2b00      	cmp	r3, #0
 8001744:	d105      	bne.n	8001752 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	f043 0201 	orr.w	r2, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 fa8a 	bl	8001c6c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f06f 020c 	mvn.w	r2, #12
 8001760:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001770:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d017      	beq.n	80017a8 <HAL_ADC_IRQHandler+0x1d6>
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d014      	beq.n	80017a8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b01      	cmp	r3, #1
 800178a:	d10d      	bne.n	80017a8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001790:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f834 	bl	8001806 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f06f 0201 	mvn.w	r2, #1
 80017a6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0320 	and.w	r3, r3, #32
 80017ae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017b6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d015      	beq.n	80017ea <HAL_ADC_IRQHandler+0x218>
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d012      	beq.n	80017ea <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c8:	f043 0202 	orr.w	r2, r3, #2
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f06f 0220 	mvn.w	r2, #32
 80017d8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f81d 	bl	800181a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f06f 0220 	mvn.w	r2, #32
 80017e8:	601a      	str	r2, [r3, #0]
  }
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_ADC_ConfigChannel+0x1c>
 8001848:	2302      	movs	r3, #2
 800184a:	e105      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x228>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b09      	cmp	r3, #9
 800185a:	d925      	bls.n	80018a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68d9      	ldr	r1, [r3, #12]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	b29b      	uxth	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	3b1e      	subs	r3, #30
 8001872:	2207      	movs	r2, #7
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43da      	mvns	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	400a      	ands	r2, r1
 8001880:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68d9      	ldr	r1, [r3, #12]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	b29b      	uxth	r3, r3
 8001892:	4618      	mov	r0, r3
 8001894:	4603      	mov	r3, r0
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4403      	add	r3, r0
 800189a:	3b1e      	subs	r3, #30
 800189c:	409a      	lsls	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	e022      	b.n	80018ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6919      	ldr	r1, [r3, #16]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	461a      	mov	r2, r3
 80018b6:	4613      	mov	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	2207      	movs	r2, #7
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	400a      	ands	r2, r1
 80018ca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6919      	ldr	r1, [r3, #16]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	4618      	mov	r0, r3
 80018de:	4603      	mov	r3, r0
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4403      	add	r3, r0
 80018e4:	409a      	lsls	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b06      	cmp	r3, #6
 80018f4:	d824      	bhi.n	8001940 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	3b05      	subs	r3, #5
 8001908:	221f      	movs	r2, #31
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	400a      	ands	r2, r1
 8001916:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	b29b      	uxth	r3, r3
 8001924:	4618      	mov	r0, r3
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	3b05      	subs	r3, #5
 8001932:	fa00 f203 	lsl.w	r2, r0, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	635a      	str	r2, [r3, #52]	@ 0x34
 800193e:	e04c      	b.n	80019da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b0c      	cmp	r3, #12
 8001946:	d824      	bhi.n	8001992 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	3b23      	subs	r3, #35	@ 0x23
 800195a:	221f      	movs	r2, #31
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43da      	mvns	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	400a      	ands	r2, r1
 8001968:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	b29b      	uxth	r3, r3
 8001976:	4618      	mov	r0, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	3b23      	subs	r3, #35	@ 0x23
 8001984:	fa00 f203 	lsl.w	r2, r0, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001990:	e023      	b.n	80019da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	3b41      	subs	r3, #65	@ 0x41
 80019a4:	221f      	movs	r2, #31
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	400a      	ands	r2, r1
 80019b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	3b41      	subs	r3, #65	@ 0x41
 80019ce:	fa00 f203 	lsl.w	r2, r0, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019da:	4b22      	ldr	r3, [pc, #136]	@ (8001a64 <HAL_ADC_ConfigChannel+0x234>)
 80019dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a21      	ldr	r2, [pc, #132]	@ (8001a68 <HAL_ADC_ConfigChannel+0x238>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d109      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x1cc>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b12      	cmp	r3, #18
 80019ee:	d105      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a19      	ldr	r2, [pc, #100]	@ (8001a68 <HAL_ADC_ConfigChannel+0x238>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d123      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x21e>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	d003      	beq.n	8001a16 <HAL_ADC_ConfigChannel+0x1e6>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b11      	cmp	r3, #17
 8001a14:	d11b      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b10      	cmp	r3, #16
 8001a28:	d111      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a2a:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <HAL_ADC_ConfigChannel+0x23c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a10      	ldr	r2, [pc, #64]	@ (8001a70 <HAL_ADC_ConfigChannel+0x240>)
 8001a30:	fba2 2303 	umull	r2, r3, r2, r3
 8001a34:	0c9a      	lsrs	r2, r3, #18
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a40:	e002      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f9      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	40012300 	.word	0x40012300
 8001a68:	40012000 	.word	0x40012000
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	431bde83 	.word	0x431bde83

08001a74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a7c:	4b79      	ldr	r3, [pc, #484]	@ (8001c64 <ADC_Init+0x1f0>)
 8001a7e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001aa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6859      	ldr	r1, [r3, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	021a      	lsls	r2, r3, #8
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001acc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6859      	ldr	r1, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001aee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6899      	ldr	r1, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b06:	4a58      	ldr	r2, [pc, #352]	@ (8001c68 <ADC_Init+0x1f4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d022      	beq.n	8001b52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6899      	ldr	r1, [r3, #8]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6899      	ldr	r1, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	e00f      	b.n	8001b72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b70:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0202 	bic.w	r2, r2, #2
 8001b80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6899      	ldr	r1, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	7e1b      	ldrb	r3, [r3, #24]
 8001b8c:	005a      	lsls	r2, r3, #1
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d01b      	beq.n	8001bd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001bbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6859      	ldr	r1, [r3, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	035a      	lsls	r2, r3, #13
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	e007      	b.n	8001be8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001be6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	051a      	lsls	r2, r3, #20
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6899      	ldr	r1, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c2a:	025a      	lsls	r2, r3, #9
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6899      	ldr	r1, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	029a      	lsls	r2, r3, #10
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	609a      	str	r2, [r3, #8]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	40012300 	.word	0x40012300
 8001c68:	0f000001 	.word	0x0f000001

08001c6c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb2:	4a04      	ldr	r2, [pc, #16]	@ (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	60d3      	str	r3, [r2, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ccc:	4b04      	ldr	r3, [pc, #16]	@ (8001ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	f003 0307 	and.w	r3, r3, #7
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	db0b      	blt.n	8001d0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	f003 021f 	and.w	r2, r3, #31
 8001cfc:	4907      	ldr	r1, [pc, #28]	@ (8001d1c <__NVIC_EnableIRQ+0x38>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	2001      	movs	r0, #1
 8001d06:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000e100 	.word	0xe000e100

08001d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	db0a      	blt.n	8001d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	490c      	ldr	r1, [pc, #48]	@ (8001d6c <__NVIC_SetPriority+0x4c>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	0112      	lsls	r2, r2, #4
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	440b      	add	r3, r1
 8001d44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d48:	e00a      	b.n	8001d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4908      	ldr	r1, [pc, #32]	@ (8001d70 <__NVIC_SetPriority+0x50>)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	3b04      	subs	r3, #4
 8001d58:	0112      	lsls	r2, r2, #4
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	761a      	strb	r2, [r3, #24]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000e100 	.word	0xe000e100
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	@ 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f1c3 0307 	rsb	r3, r3, #7
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	bf28      	it	cs
 8001d92:	2304      	movcs	r3, #4
 8001d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d902      	bls.n	8001da4 <NVIC_EncodePriority+0x30>
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3b03      	subs	r3, #3
 8001da2:	e000      	b.n	8001da6 <NVIC_EncodePriority+0x32>
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	401a      	ands	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	43d9      	mvns	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	4313      	orrs	r3, r2
         );
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3724      	adds	r7, #36	@ 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dec:	d301      	bcc.n	8001df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00f      	b.n	8001e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <SysTick_Config+0x40>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dfa:	210f      	movs	r1, #15
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f7ff ff8e 	bl	8001d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e04:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <SysTick_Config+0x40>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0a:	4b04      	ldr	r3, [pc, #16]	@ (8001e1c <SysTick_Config+0x40>)
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	e000e010 	.word	0xe000e010

08001e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ff29 	bl	8001c80 <__NVIC_SetPriorityGrouping>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e48:	f7ff ff3e 	bl	8001cc8 <__NVIC_GetPriorityGrouping>
 8001e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	6978      	ldr	r0, [r7, #20]
 8001e54:	f7ff ff8e 	bl	8001d74 <NVIC_EncodePriority>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff5d 	bl	8001d20 <__NVIC_SetPriority>
}
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff31 	bl	8001ce4 <__NVIC_EnableIRQ>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ffa2 	bl	8001ddc <SysTick_Config>
 8001e98:	4603      	mov	r3, r0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001eb0:	f7ff fb1c 	bl	80014ec <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e099      	b.n	8001ff4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0201 	bic.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee0:	e00f      	b.n	8001f02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ee2:	f7ff fb03 	bl	80014ec <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	d908      	bls.n	8001f02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2203      	movs	r2, #3
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e078      	b.n	8001ff4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1e8      	bne.n	8001ee2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	4b38      	ldr	r3, [pc, #224]	@ (8001ffc <HAL_DMA_Init+0x158>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d107      	bne.n	8001f6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f64:	4313      	orrs	r3, r2
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f023 0307 	bic.w	r3, r3, #7
 8001f82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d117      	bne.n	8001fc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00e      	beq.n	8001fc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 fa0b 	bl	80023c4 <DMA_CheckFifoParam>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2240      	movs	r2, #64	@ 0x40
 8001fb8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e016      	b.n	8001ff4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f9c2 	bl	8002358 <DMA_CalcBaseAndBitshift>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fdc:	223f      	movs	r2, #63	@ 0x3f
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	f010803f 	.word	0xf010803f

08002000 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d004      	beq.n	800201e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2280      	movs	r2, #128	@ 0x80
 8002018:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e00c      	b.n	8002038 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2205      	movs	r2, #5
 8002022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0201 	bic.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002050:	4b8e      	ldr	r3, [pc, #568]	@ (800228c <HAL_DMA_IRQHandler+0x248>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a8e      	ldr	r2, [pc, #568]	@ (8002290 <HAL_DMA_IRQHandler+0x24c>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	0a9b      	lsrs	r3, r3, #10
 800205c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002062:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206e:	2208      	movs	r2, #8
 8002070:	409a      	lsls	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4013      	ands	r3, r2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d01a      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d013      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0204 	bic.w	r2, r2, #4
 8002096:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209c:	2208      	movs	r2, #8
 800209e:	409a      	lsls	r2, r3
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a8:	f043 0201 	orr.w	r2, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b4:	2201      	movs	r2, #1
 80020b6:	409a      	lsls	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d012      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00b      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d2:	2201      	movs	r2, #1
 80020d4:	409a      	lsls	r2, r3
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020de:	f043 0202 	orr.w	r2, r3, #2
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ea:	2204      	movs	r2, #4
 80020ec:	409a      	lsls	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d012      	beq.n	800211c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00b      	beq.n	800211c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002108:	2204      	movs	r2, #4
 800210a:	409a      	lsls	r2, r3
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002114:	f043 0204 	orr.w	r2, r3, #4
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002120:	2210      	movs	r2, #16
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d043      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d03c      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800213e:	2210      	movs	r2, #16
 8002140:	409a      	lsls	r2, r3
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d018      	beq.n	8002186 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d108      	bne.n	8002174 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	d024      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
 8002172:	e01f      	b.n	80021b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01b      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	4798      	blx	r3
 8002184:	e016      	b.n	80021b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d107      	bne.n	80021a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0208 	bic.w	r2, r2, #8
 80021a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b8:	2220      	movs	r2, #32
 80021ba:	409a      	lsls	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 808f 	beq.w	80022e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 8087 	beq.w	80022e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021da:	2220      	movs	r2, #32
 80021dc:	409a      	lsls	r2, r3
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b05      	cmp	r3, #5
 80021ec:	d136      	bne.n	800225c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0216 	bic.w	r2, r2, #22
 80021fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800220c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d103      	bne.n	800221e <HAL_DMA_IRQHandler+0x1da>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0208 	bic.w	r2, r2, #8
 800222c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002232:	223f      	movs	r2, #63	@ 0x3f
 8002234:	409a      	lsls	r2, r3
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800224e:	2b00      	cmp	r3, #0
 8002250:	d07e      	beq.n	8002350 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	4798      	blx	r3
        }
        return;
 800225a:	e079      	b.n	8002350 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d01d      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10d      	bne.n	8002294 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227c:	2b00      	cmp	r3, #0
 800227e:	d031      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	4798      	blx	r3
 8002288:	e02c      	b.n	80022e4 <HAL_DMA_IRQHandler+0x2a0>
 800228a:	bf00      	nop
 800228c:	20000000 	.word	0x20000000
 8002290:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002298:	2b00      	cmp	r3, #0
 800229a:	d023      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
 80022a4:	e01e      	b.n	80022e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10f      	bne.n	80022d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0210 	bic.w	r2, r2, #16
 80022c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d032      	beq.n	8002352 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d022      	beq.n	800233e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2205      	movs	r2, #5
 80022fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	3301      	adds	r3, #1
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	429a      	cmp	r2, r3
 800231a:	d307      	bcc.n	800232c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f2      	bne.n	8002310 <HAL_DMA_IRQHandler+0x2cc>
 800232a:	e000      	b.n	800232e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800232c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	4798      	blx	r3
 800234e:	e000      	b.n	8002352 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002350:	bf00      	nop
    }
  }
}
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	3b10      	subs	r3, #16
 8002368:	4a14      	ldr	r2, [pc, #80]	@ (80023bc <DMA_CalcBaseAndBitshift+0x64>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002372:	4a13      	ldr	r2, [pc, #76]	@ (80023c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4413      	add	r3, r2
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b03      	cmp	r3, #3
 8002384:	d909      	bls.n	800239a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800238e:	f023 0303 	bic.w	r3, r3, #3
 8002392:	1d1a      	adds	r2, r3, #4
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	659a      	str	r2, [r3, #88]	@ 0x58
 8002398:	e007      	b.n	80023aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023a2:	f023 0303 	bic.w	r3, r3, #3
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	aaaaaaab 	.word	0xaaaaaaab
 80023c0:	0800b624 	.word	0x0800b624

080023c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d11f      	bne.n	800241e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d856      	bhi.n	8002492 <DMA_CheckFifoParam+0xce>
 80023e4:	a201      	add	r2, pc, #4	@ (adr r2, 80023ec <DMA_CheckFifoParam+0x28>)
 80023e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ea:	bf00      	nop
 80023ec:	080023fd 	.word	0x080023fd
 80023f0:	0800240f 	.word	0x0800240f
 80023f4:	080023fd 	.word	0x080023fd
 80023f8:	08002493 	.word	0x08002493
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002400:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d046      	beq.n	8002496 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800240c:	e043      	b.n	8002496 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002412:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002416:	d140      	bne.n	800249a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800241c:	e03d      	b.n	800249a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002426:	d121      	bne.n	800246c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d837      	bhi.n	800249e <DMA_CheckFifoParam+0xda>
 800242e:	a201      	add	r2, pc, #4	@ (adr r2, 8002434 <DMA_CheckFifoParam+0x70>)
 8002430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002434:	08002445 	.word	0x08002445
 8002438:	0800244b 	.word	0x0800244b
 800243c:	08002445 	.word	0x08002445
 8002440:	0800245d 	.word	0x0800245d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
      break;
 8002448:	e030      	b.n	80024ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d025      	beq.n	80024a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800245a:	e022      	b.n	80024a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002460:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002464:	d11f      	bne.n	80024a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800246a:	e01c      	b.n	80024a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d903      	bls.n	800247a <DMA_CheckFifoParam+0xb6>
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d003      	beq.n	8002480 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002478:	e018      	b.n	80024ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
      break;
 800247e:	e015      	b.n	80024ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002484:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00e      	beq.n	80024aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
      break;
 8002490:	e00b      	b.n	80024aa <DMA_CheckFifoParam+0xe6>
      break;
 8002492:	bf00      	nop
 8002494:	e00a      	b.n	80024ac <DMA_CheckFifoParam+0xe8>
      break;
 8002496:	bf00      	nop
 8002498:	e008      	b.n	80024ac <DMA_CheckFifoParam+0xe8>
      break;
 800249a:	bf00      	nop
 800249c:	e006      	b.n	80024ac <DMA_CheckFifoParam+0xe8>
      break;
 800249e:	bf00      	nop
 80024a0:	e004      	b.n	80024ac <DMA_CheckFifoParam+0xe8>
      break;
 80024a2:	bf00      	nop
 80024a4:	e002      	b.n	80024ac <DMA_CheckFifoParam+0xe8>
      break;   
 80024a6:	bf00      	nop
 80024a8:	e000      	b.n	80024ac <DMA_CheckFifoParam+0xe8>
      break;
 80024aa:	bf00      	nop
    }
  } 
  
  return status; 
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop

080024bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	@ 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
 80024d6:	e16b      	b.n	80027b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024d8:	2201      	movs	r2, #1
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	f040 815a 	bne.w	80027aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d005      	beq.n	800250e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800250a:	2b02      	cmp	r3, #2
 800250c:	d130      	bne.n	8002570 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	2203      	movs	r2, #3
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002544:	2201      	movs	r2, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 0201 	and.w	r2, r3, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b03      	cmp	r3, #3
 800257a:	d017      	beq.n	80025ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	2203      	movs	r2, #3
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d123      	bne.n	8002600 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	08da      	lsrs	r2, r3, #3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3208      	adds	r2, #8
 80025c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	220f      	movs	r2, #15
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	08da      	lsrs	r2, r3, #3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3208      	adds	r2, #8
 80025fa:	69b9      	ldr	r1, [r7, #24]
 80025fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0203 	and.w	r2, r3, #3
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80b4 	beq.w	80027aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	4b60      	ldr	r3, [pc, #384]	@ (80027c8 <HAL_GPIO_Init+0x30c>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264a:	4a5f      	ldr	r2, [pc, #380]	@ (80027c8 <HAL_GPIO_Init+0x30c>)
 800264c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002650:	6453      	str	r3, [r2, #68]	@ 0x44
 8002652:	4b5d      	ldr	r3, [pc, #372]	@ (80027c8 <HAL_GPIO_Init+0x30c>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002656:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800265e:	4a5b      	ldr	r2, [pc, #364]	@ (80027cc <HAL_GPIO_Init+0x310>)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	089b      	lsrs	r3, r3, #2
 8002664:	3302      	adds	r3, #2
 8002666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	220f      	movs	r2, #15
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a52      	ldr	r2, [pc, #328]	@ (80027d0 <HAL_GPIO_Init+0x314>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d02b      	beq.n	80026e2 <HAL_GPIO_Init+0x226>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a51      	ldr	r2, [pc, #324]	@ (80027d4 <HAL_GPIO_Init+0x318>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d025      	beq.n	80026de <HAL_GPIO_Init+0x222>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a50      	ldr	r2, [pc, #320]	@ (80027d8 <HAL_GPIO_Init+0x31c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d01f      	beq.n	80026da <HAL_GPIO_Init+0x21e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4f      	ldr	r2, [pc, #316]	@ (80027dc <HAL_GPIO_Init+0x320>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d019      	beq.n	80026d6 <HAL_GPIO_Init+0x21a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a4e      	ldr	r2, [pc, #312]	@ (80027e0 <HAL_GPIO_Init+0x324>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d013      	beq.n	80026d2 <HAL_GPIO_Init+0x216>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a4d      	ldr	r2, [pc, #308]	@ (80027e4 <HAL_GPIO_Init+0x328>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00d      	beq.n	80026ce <HAL_GPIO_Init+0x212>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a4c      	ldr	r2, [pc, #304]	@ (80027e8 <HAL_GPIO_Init+0x32c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d007      	beq.n	80026ca <HAL_GPIO_Init+0x20e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4b      	ldr	r2, [pc, #300]	@ (80027ec <HAL_GPIO_Init+0x330>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d101      	bne.n	80026c6 <HAL_GPIO_Init+0x20a>
 80026c2:	2307      	movs	r3, #7
 80026c4:	e00e      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026c6:	2308      	movs	r3, #8
 80026c8:	e00c      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026ca:	2306      	movs	r3, #6
 80026cc:	e00a      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026ce:	2305      	movs	r3, #5
 80026d0:	e008      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026d2:	2304      	movs	r3, #4
 80026d4:	e006      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026d6:	2303      	movs	r3, #3
 80026d8:	e004      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026da:	2302      	movs	r3, #2
 80026dc:	e002      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026e2:	2300      	movs	r3, #0
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	f002 0203 	and.w	r2, r2, #3
 80026ea:	0092      	lsls	r2, r2, #2
 80026ec:	4093      	lsls	r3, r2
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f4:	4935      	ldr	r1, [pc, #212]	@ (80027cc <HAL_GPIO_Init+0x310>)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	089b      	lsrs	r3, r3, #2
 80026fa:	3302      	adds	r3, #2
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002702:	4b3b      	ldr	r3, [pc, #236]	@ (80027f0 <HAL_GPIO_Init+0x334>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002726:	4a32      	ldr	r2, [pc, #200]	@ (80027f0 <HAL_GPIO_Init+0x334>)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800272c:	4b30      	ldr	r3, [pc, #192]	@ (80027f0 <HAL_GPIO_Init+0x334>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002750:	4a27      	ldr	r2, [pc, #156]	@ (80027f0 <HAL_GPIO_Init+0x334>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002756:	4b26      	ldr	r3, [pc, #152]	@ (80027f0 <HAL_GPIO_Init+0x334>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800277a:	4a1d      	ldr	r2, [pc, #116]	@ (80027f0 <HAL_GPIO_Init+0x334>)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002780:	4b1b      	ldr	r3, [pc, #108]	@ (80027f0 <HAL_GPIO_Init+0x334>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027a4:	4a12      	ldr	r2, [pc, #72]	@ (80027f0 <HAL_GPIO_Init+0x334>)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3301      	adds	r3, #1
 80027ae:	61fb      	str	r3, [r7, #28]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	2b0f      	cmp	r3, #15
 80027b4:	f67f ae90 	bls.w	80024d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	3724      	adds	r7, #36	@ 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40013800 	.word	0x40013800
 80027d0:	40020000 	.word	0x40020000
 80027d4:	40020400 	.word	0x40020400
 80027d8:	40020800 	.word	0x40020800
 80027dc:	40020c00 	.word	0x40020c00
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40021400 	.word	0x40021400
 80027e8:	40021800 	.word	0x40021800
 80027ec:	40021c00 	.word	0x40021c00
 80027f0:	40013c00 	.word	0x40013c00

080027f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	807b      	strh	r3, [r7, #2]
 8002800:	4613      	mov	r3, r2
 8002802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002804:	787b      	ldrb	r3, [r7, #1]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280a:	887a      	ldrh	r2, [r7, #2]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002810:	e003      	b.n	800281a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002812:	887b      	ldrh	r3, [r7, #2]
 8002814:	041a      	lsls	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	619a      	str	r2, [r3, #24]
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b086      	sub	sp, #24
 800282a:	af02      	add	r7, sp, #8
 800282c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e059      	b.n	80028ec <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f008 fad4 	bl	800ae00 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2203      	movs	r2, #3
 800285c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002866:	d102      	bne.n	800286e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f005 f8ed 	bl	8007a52 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7c1a      	ldrb	r2, [r3, #16]
 8002880:	f88d 2000 	strb.w	r2, [sp]
 8002884:	3304      	adds	r3, #4
 8002886:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002888:	f005 f86e 	bl	8007968 <USB_CoreInit>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2202      	movs	r2, #2
 8002896:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e026      	b.n	80028ec <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2101      	movs	r1, #1
 80028a4:	4618      	mov	r0, r3
 80028a6:	f005 f8e5 	bl	8007a74 <USB_SetCurrentMode>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e017      	b.n	80028ec <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	7c1a      	ldrb	r2, [r3, #16]
 80028c4:	f88d 2000 	strb.w	r2, [sp]
 80028c8:	3304      	adds	r3, #4
 80028ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028cc:	f005 fa88 	bl	8007de0 <USB_HostInit>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d005      	beq.n	80028e2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2202      	movs	r2, #2
 80028da:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e004      	b.n	80028ec <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b08b      	sub	sp, #44	@ 0x2c
 80028f8:	af04      	add	r7, sp, #16
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	4608      	mov	r0, r1
 80028fe:	4611      	mov	r1, r2
 8002900:	461a      	mov	r2, r3
 8002902:	4603      	mov	r3, r0
 8002904:	70fb      	strb	r3, [r7, #3]
 8002906:	460b      	mov	r3, r1
 8002908:	70bb      	strb	r3, [r7, #2]
 800290a:	4613      	mov	r3, r2
 800290c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800290e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002910:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_HCD_HC_Init+0x2c>
 800291c:	2302      	movs	r3, #2
 800291e:	e09d      	b.n	8002a5c <HAL_HCD_HC_Init+0x168>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	3319      	adds	r3, #25
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	3314      	adds	r3, #20
 800294c:	787a      	ldrb	r2, [r7, #1]
 800294e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	3315      	adds	r3, #21
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	3326      	adds	r3, #38	@ 0x26
 8002974:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002978:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	78bb      	ldrb	r3, [r7, #2]
 800297e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002982:	b2d8      	uxtb	r0, r3
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3316      	adds	r3, #22
 8002992:	4602      	mov	r2, r0
 8002994:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	4619      	mov	r1, r3
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fbc8 	bl	8003130 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80029a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	da0a      	bge.n	80029be <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	3317      	adds	r3, #23
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]
 80029bc:	e009      	b.n	80029d2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3317      	adds	r3, #23
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f005 fb66 	bl	80080a8 <USB_GetHostSpeed>
 80029dc:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80029de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d10b      	bne.n	80029fe <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80029e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d107      	bne.n	80029fe <HAL_HCD_HC_Init+0x10a>
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d104      	bne.n	80029fe <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2bbc      	cmp	r3, #188	@ 0xbc
 80029f8:	d901      	bls.n	80029fe <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80029fa:	23bc      	movs	r3, #188	@ 0xbc
 80029fc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	3318      	adds	r3, #24
 8002a0e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002a12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002a14:	78fa      	ldrb	r2, [r7, #3]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	b298      	uxth	r0, r3
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	3328      	adds	r3, #40	@ 0x28
 8002a28:	4602      	mov	r2, r0
 8002a2a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6818      	ldr	r0, [r3, #0]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	787c      	ldrb	r4, [r7, #1]
 8002a36:	78ba      	ldrb	r2, [r7, #2]
 8002a38:	78f9      	ldrb	r1, [r7, #3]
 8002a3a:	9302      	str	r3, [sp, #8]
 8002a3c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	4623      	mov	r3, r4
 8002a4a:	f005 fb55 	bl	80080f8 <USB_HC_Init>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd90      	pop	{r4, r7, pc}

08002a64 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_HCD_HC_Halt+0x1e>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e00f      	b.n	8002aa2 <HAL_HCD_HC_Halt+0x3e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	4611      	mov	r1, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f005 fee7 	bl	8008866 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	4608      	mov	r0, r1
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4603      	mov	r3, r0
 8002abc:	70fb      	strb	r3, [r7, #3]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	70bb      	strb	r3, [r7, #2]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002ac6:	78fa      	ldrb	r2, [r7, #3]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	3317      	adds	r3, #23
 8002ad6:	78ba      	ldrb	r2, [r7, #2]
 8002ad8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	3326      	adds	r3, #38	@ 0x26
 8002aea:	787a      	ldrb	r2, [r7, #1]
 8002aec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002aee:	7c3b      	ldrb	r3, [r7, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d114      	bne.n	8002b1e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	332a      	adds	r3, #42	@ 0x2a
 8002b04:	2203      	movs	r2, #3
 8002b06:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	1a9b      	subs	r3, r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	3319      	adds	r3, #25
 8002b18:	7f3a      	ldrb	r2, [r7, #28]
 8002b1a:	701a      	strb	r2, [r3, #0]
 8002b1c:	e009      	b.n	8002b32 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	332a      	adds	r3, #42	@ 0x2a
 8002b2e:	2202      	movs	r2, #2
 8002b30:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002b32:	787b      	ldrb	r3, [r7, #1]
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	f200 8102 	bhi.w	8002d3e <HAL_HCD_HC_SubmitRequest+0x292>
 8002b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b40 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b40:	08002b51 	.word	0x08002b51
 8002b44:	08002d29 	.word	0x08002d29
 8002b48:	08002c15 	.word	0x08002c15
 8002b4c:	08002c9f 	.word	0x08002c9f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002b50:	7c3b      	ldrb	r3, [r7, #16]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	f040 80f5 	bne.w	8002d42 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002b58:	78bb      	ldrb	r3, [r7, #2]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d12d      	bne.n	8002bba <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002b5e:	8b3b      	ldrh	r3, [r7, #24]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d109      	bne.n	8002b78 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	333d      	adds	r3, #61	@ 0x3d
 8002b74:	2201      	movs	r2, #1
 8002b76:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	333d      	adds	r3, #61	@ 0x3d
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10a      	bne.n	8002ba4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	332a      	adds	r3, #42	@ 0x2a
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002ba2:	e0ce      	b.n	8002d42 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	332a      	adds	r3, #42	@ 0x2a
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	701a      	strb	r2, [r3, #0]
      break;
 8002bb8:	e0c3      	b.n	8002d42 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	331a      	adds	r3, #26
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	f040 80b8 	bne.w	8002d42 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	1a9b      	subs	r3, r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	333c      	adds	r3, #60	@ 0x3c
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10a      	bne.n	8002bfe <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002be8:	78fa      	ldrb	r2, [r7, #3]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	332a      	adds	r3, #42	@ 0x2a
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
      break;
 8002bfc:	e0a1      	b.n	8002d42 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	332a      	adds	r3, #42	@ 0x2a
 8002c0e:	2202      	movs	r2, #2
 8002c10:	701a      	strb	r2, [r3, #0]
      break;
 8002c12:	e096      	b.n	8002d42 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002c14:	78bb      	ldrb	r3, [r7, #2]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d120      	bne.n	8002c5c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	333d      	adds	r3, #61	@ 0x3d
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	332a      	adds	r3, #42	@ 0x2a
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002c44:	e07e      	b.n	8002d44 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	332a      	adds	r3, #42	@ 0x2a
 8002c56:	2202      	movs	r2, #2
 8002c58:	701a      	strb	r2, [r3, #0]
      break;
 8002c5a:	e073      	b.n	8002d44 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	333c      	adds	r3, #60	@ 0x3c
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10a      	bne.n	8002c88 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	332a      	adds	r3, #42	@ 0x2a
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
      break;
 8002c86:	e05d      	b.n	8002d44 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	1a9b      	subs	r3, r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	332a      	adds	r3, #42	@ 0x2a
 8002c98:	2202      	movs	r2, #2
 8002c9a:	701a      	strb	r2, [r3, #0]
      break;
 8002c9c:	e052      	b.n	8002d44 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002c9e:	78bb      	ldrb	r3, [r7, #2]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d120      	bne.n	8002ce6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	333d      	adds	r3, #61	@ 0x3d
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10a      	bne.n	8002cd0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	332a      	adds	r3, #42	@ 0x2a
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002cce:	e039      	b.n	8002d44 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	332a      	adds	r3, #42	@ 0x2a
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	701a      	strb	r2, [r3, #0]
      break;
 8002ce4:	e02e      	b.n	8002d44 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	333c      	adds	r3, #60	@ 0x3c
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10a      	bne.n	8002d12 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	332a      	adds	r3, #42	@ 0x2a
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
      break;
 8002d10:	e018      	b.n	8002d44 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	332a      	adds	r3, #42	@ 0x2a
 8002d22:	2202      	movs	r2, #2
 8002d24:	701a      	strb	r2, [r3, #0]
      break;
 8002d26:	e00d      	b.n	8002d44 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	332a      	adds	r3, #42	@ 0x2a
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
      break;
 8002d3c:	e002      	b.n	8002d44 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002d3e:	bf00      	nop
 8002d40:	e000      	b.n	8002d44 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002d42:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002d44:	78fa      	ldrb	r2, [r7, #3]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	332c      	adds	r3, #44	@ 0x2c
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	8b39      	ldrh	r1, [r7, #24]
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4403      	add	r3, r0
 8002d68:	3334      	adds	r3, #52	@ 0x34
 8002d6a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	334c      	adds	r3, #76	@ 0x4c
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3338      	adds	r3, #56	@ 0x38
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	3315      	adds	r3, #21
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	334d      	adds	r3, #77	@ 0x4d
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	78fa      	ldrb	r2, [r7, #3]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	3310      	adds	r3, #16
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	4413      	add	r3, r2
 8002dd0:	1d19      	adds	r1, r3, #4
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	799b      	ldrb	r3, [r3, #6]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f005 faba 	bl	8008350 <USB_HC_StartXfer>
 8002ddc:	4603      	mov	r3, r0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop

08002de8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f004 ffae 	bl	8007d60 <USB_GetMode>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	f040 80fb 	bne.w	8003002 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f004 ff71 	bl	8007cf8 <USB_ReadInterrupts>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 80f1 	beq.w	8003000 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f004 ff68 	bl	8007cf8 <USB_ReadInterrupts>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e32:	d104      	bne.n	8002e3e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002e3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f004 ff58 	bl	8007cf8 <USB_ReadInterrupts>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e52:	d104      	bne.n	8002e5e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002e5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f004 ff48 	bl	8007cf8 <USB_ReadInterrupts>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e72:	d104      	bne.n	8002e7e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002e7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f004 ff38 	bl	8007cf8 <USB_ReadInterrupts>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d103      	bne.n	8002e9a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2202      	movs	r2, #2
 8002e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f004 ff2a 	bl	8007cf8 <USB_ReadInterrupts>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002eaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eae:	d120      	bne.n	8002ef2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002eb8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d113      	bne.n	8002ef2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002eca:	2110      	movs	r1, #16
 8002ecc:	6938      	ldr	r0, [r7, #16]
 8002ece:	f004 fe1d 	bl	8007b0c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002ed2:	6938      	ldr	r0, [r7, #16]
 8002ed4:	f004 fe4c 	bl	8007b70 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7a5b      	ldrb	r3, [r3, #9]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d105      	bne.n	8002eec <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f005 f83e 	bl	8007f68 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f008 f805 	bl	800aefc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f004 fefe 	bl	8007cf8 <USB_ReadInterrupts>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f06:	d102      	bne.n	8002f0e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f001 fd4d 	bl	80049a8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f004 fef0 	bl	8007cf8 <USB_ReadInterrupts>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d106      	bne.n	8002f30 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f007 ffce 	bl	800aec4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2208      	movs	r2, #8
 8002f2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f004 fedf 	bl	8007cf8 <USB_ReadInterrupts>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f44:	d139      	bne.n	8002fba <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f005 fc7a 	bl	8008844 <USB_HC_ReadInterrupt>
 8002f50:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	e025      	b.n	8002fa4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d018      	beq.n	8002f9e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f82:	d106      	bne.n	8002f92 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	4619      	mov	r1, r3
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f905 	bl	800319a <HCD_HC_IN_IRQHandler>
 8002f90:	e005      	b.n	8002f9e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	4619      	mov	r1, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 ff67 	bl	8003e6c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	795b      	ldrb	r3, [r3, #5]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d3d3      	bcc.n	8002f58 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f004 fe9a 	bl	8007cf8 <USB_ReadInterrupts>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	2b10      	cmp	r3, #16
 8002fcc:	d101      	bne.n	8002fd2 <HAL_HCD_IRQHandler+0x1ea>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_HCD_IRQHandler+0x1ec>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d014      	beq.n	8003002 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699a      	ldr	r2, [r3, #24]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0210 	bic.w	r2, r2, #16
 8002fe6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f001 fbfe 	bl	80047ea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699a      	ldr	r2, [r3, #24]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0210 	orr.w	r2, r2, #16
 8002ffc:	619a      	str	r2, [r3, #24]
 8002ffe:	e000      	b.n	8003002 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003000:	bf00      	nop
    }
  }
}
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_HCD_Start+0x16>
 800301a:	2302      	movs	r3, #2
 800301c:	e013      	b.n	8003046 <HAL_HCD_Start+0x3e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2101      	movs	r1, #1
 800302c:	4618      	mov	r0, r3
 800302e:	f005 f802 	bl	8008036 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f004 fcfa 	bl	8007a30 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_HCD_Stop+0x16>
 8003060:	2302      	movs	r3, #2
 8003062:	e00d      	b.n	8003080 <HAL_HCD_Stop+0x32>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f005 fd55 	bl	8008b20 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f004 ffa4 	bl	8007fe2 <USB_ResetPort>
 800309a:	4603      	mov	r3, r0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	334c      	adds	r3, #76	@ 0x4c
 80030c0:	781b      	ldrb	r3, [r3, #0]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	460b      	mov	r3, r1
 80030d8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	3338      	adds	r3, #56	@ 0x38
 80030ea:	681b      	ldr	r3, [r3, #0]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f004 ffe6 	bl	80080d6 <USB_GetCurrentFrame>
 800310a:	4603      	mov	r3, r0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f004 ffc1 	bl	80080a8 <USB_GetHostSpeed>
 8003126:	4603      	mov	r3, r0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	331a      	adds	r3, #26
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	331b      	adds	r3, #27
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	3325      	adds	r3, #37	@ 0x25
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	3324      	adds	r3, #36	@ 0x24
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b086      	sub	sp, #24
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	460b      	mov	r3, r1
 80031a4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	4611      	mov	r1, r2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f004 fdb0 	bl	8007d1e <USB_ReadChInterrupts>
 80031be:	4603      	mov	r3, r0
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d11a      	bne.n	80031fe <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80031c8:	78fb      	ldrb	r3, [r7, #3]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031d4:	461a      	mov	r2, r3
 80031d6:	2304      	movs	r3, #4
 80031d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	334d      	adds	r3, #77	@ 0x4d
 80031ea:	2207      	movs	r2, #7
 80031ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f005 fb35 	bl	8008866 <USB_HC_Halt>
 80031fc:	e09e      	b.n	800333c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f004 fd89 	bl	8007d1e <USB_ReadChInterrupts>
 800320c:	4603      	mov	r3, r0
 800320e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003216:	d11b      	bne.n	8003250 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4413      	add	r3, r2
 8003220:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003224:	461a      	mov	r2, r3
 8003226:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800322a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	334d      	adds	r3, #77	@ 0x4d
 800323c:	2208      	movs	r2, #8
 800323e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f005 fb0c 	bl	8008866 <USB_HC_Halt>
 800324e:	e075      	b.n	800333c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	78fa      	ldrb	r2, [r7, #3]
 8003256:	4611      	mov	r1, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f004 fd60 	bl	8007d1e <USB_ReadChInterrupts>
 800325e:	4603      	mov	r3, r0
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b08      	cmp	r3, #8
 8003266:	d11a      	bne.n	800329e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4413      	add	r3, r2
 8003270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003274:	461a      	mov	r2, r3
 8003276:	2308      	movs	r3, #8
 8003278:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	334d      	adds	r3, #77	@ 0x4d
 800328a:	2206      	movs	r2, #6
 800328c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f005 fae5 	bl	8008866 <USB_HC_Halt>
 800329c:	e04e      	b.n	800333c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	4611      	mov	r1, r2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 fd39 	bl	8007d1e <USB_ReadChInterrupts>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032b6:	d11b      	bne.n	80032f0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032c4:	461a      	mov	r2, r3
 80032c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	1a9b      	subs	r3, r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	334d      	adds	r3, #77	@ 0x4d
 80032dc:	2209      	movs	r2, #9
 80032de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f005 fabc 	bl	8008866 <USB_HC_Halt>
 80032ee:	e025      	b.n	800333c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	4611      	mov	r1, r2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f004 fd10 	bl	8007d1e <USB_ReadChInterrupts>
 80032fe:	4603      	mov	r3, r0
 8003300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003304:	2b80      	cmp	r3, #128	@ 0x80
 8003306:	d119      	bne.n	800333c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4413      	add	r3, r2
 8003310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003314:	461a      	mov	r2, r3
 8003316:	2380      	movs	r3, #128	@ 0x80
 8003318:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	334d      	adds	r3, #77	@ 0x4d
 800332a:	2207      	movs	r2, #7
 800332c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	78fa      	ldrb	r2, [r7, #3]
 8003334:	4611      	mov	r1, r2
 8003336:	4618      	mov	r0, r3
 8003338:	f005 fa95 	bl	8008866 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f004 fcea 	bl	8007d1e <USB_ReadChInterrupts>
 800334a:	4603      	mov	r3, r0
 800334c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003350:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003354:	d112      	bne.n	800337c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f005 fa81 	bl	8008866 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003370:	461a      	mov	r2, r3
 8003372:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003376:	6093      	str	r3, [r2, #8]
 8003378:	f000 bd75 	b.w	8003e66 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	4611      	mov	r1, r2
 8003384:	4618      	mov	r0, r3
 8003386:	f004 fcca 	bl	8007d1e <USB_ReadChInterrupts>
 800338a:	4603      	mov	r3, r0
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b01      	cmp	r3, #1
 8003392:	f040 8128 	bne.w	80035e6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4413      	add	r3, r2
 800339e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033a2:	461a      	mov	r2, r3
 80033a4:	2320      	movs	r3, #32
 80033a6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	331b      	adds	r3, #27
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d119      	bne.n	80033f2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	331b      	adds	r3, #27
 80033ce:	2200      	movs	r2, #0
 80033d0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033d2:	78fb      	ldrb	r3, [r7, #3]
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	0151      	lsls	r1, r2, #5
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	440a      	add	r2, r1
 80033e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033f0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	799b      	ldrb	r3, [r3, #6]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d01b      	beq.n	8003432 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	3330      	adds	r3, #48	@ 0x30
 800340a:	6819      	ldr	r1, [r3, #0]
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4413      	add	r3, r2
 8003414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	1ac9      	subs	r1, r1, r3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4403      	add	r3, r0
 800342e:	3338      	adds	r3, #56	@ 0x38
 8003430:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	334d      	adds	r3, #77	@ 0x4d
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	3344      	adds	r3, #68	@ 0x44
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4413      	add	r3, r2
 8003462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003466:	461a      	mov	r2, r3
 8003468:	2301      	movs	r3, #1
 800346a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	3326      	adds	r3, #38	@ 0x26
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	3326      	adds	r3, #38	@ 0x26
 8003492:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003494:	2b02      	cmp	r3, #2
 8003496:	d110      	bne.n	80034ba <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	4611      	mov	r1, r2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f005 f9e0 	bl	8008866 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b2:	461a      	mov	r2, r3
 80034b4:	2310      	movs	r3, #16
 80034b6:	6093      	str	r3, [r2, #8]
 80034b8:	e03d      	b.n	8003536 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3326      	adds	r3, #38	@ 0x26
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d00a      	beq.n	80034e6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	3326      	adds	r3, #38	@ 0x26
 80034e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d127      	bne.n	8003536 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80034e6:	78fb      	ldrb	r3, [r7, #3]
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	78fa      	ldrb	r2, [r7, #3]
 80034f6:	0151      	lsls	r1, r2, #5
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	440a      	add	r2, r1
 80034fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003500:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003504:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	334c      	adds	r3, #76	@ 0x4c
 8003516:	2201      	movs	r2, #1
 8003518:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	334c      	adds	r3, #76	@ 0x4c
 800352a:	781a      	ldrb	r2, [r3, #0]
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	4619      	mov	r1, r3
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f007 fcf1 	bl	800af18 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	799b      	ldrb	r3, [r3, #6]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d13b      	bne.n	80035b6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	3338      	adds	r3, #56	@ 0x38
 800354e:	6819      	ldr	r1, [r3, #0]
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4403      	add	r3, r0
 800355e:	3328      	adds	r3, #40	@ 0x28
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	440b      	add	r3, r1
 8003564:	1e59      	subs	r1, r3, #1
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4403      	add	r3, r0
 8003574:	3328      	adds	r3, #40	@ 0x28
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	fbb1 f3f3 	udiv	r3, r1, r3
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 8470 	beq.w	8003e66 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003586:	78fa      	ldrb	r2, [r7, #3]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	333c      	adds	r3, #60	@ 0x3c
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	78fa      	ldrb	r2, [r7, #3]
 800359a:	f083 0301 	eor.w	r3, r3, #1
 800359e:	b2d8      	uxtb	r0, r3
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	333c      	adds	r3, #60	@ 0x3c
 80035ae:	4602      	mov	r2, r0
 80035b0:	701a      	strb	r2, [r3, #0]
 80035b2:	f000 bc58 	b.w	8003e66 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	333c      	adds	r3, #60	@ 0x3c
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	f083 0301 	eor.w	r3, r3, #1
 80035ce:	b2d8      	uxtb	r0, r3
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	333c      	adds	r3, #60	@ 0x3c
 80035de:	4602      	mov	r2, r0
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	f000 bc40 	b.w	8003e66 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	4611      	mov	r1, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f004 fb95 	bl	8007d1e <USB_ReadChInterrupts>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d131      	bne.n	8003662 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800360a:	461a      	mov	r2, r3
 800360c:	2320      	movs	r3, #32
 800360e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	331a      	adds	r3, #26
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b01      	cmp	r3, #1
 8003624:	f040 841f 	bne.w	8003e66 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003628:	78fa      	ldrb	r2, [r7, #3]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	331b      	adds	r3, #27
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800363c:	78fa      	ldrb	r2, [r7, #3]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	334d      	adds	r3, #77	@ 0x4d
 800364c:	2203      	movs	r2, #3
 800364e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	4611      	mov	r1, r2
 8003658:	4618      	mov	r0, r3
 800365a:	f005 f904 	bl	8008866 <USB_HC_Halt>
 800365e:	f000 bc02 	b.w	8003e66 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	4611      	mov	r1, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f004 fb57 	bl	8007d1e <USB_ReadChInterrupts>
 8003670:	4603      	mov	r3, r0
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b02      	cmp	r3, #2
 8003678:	f040 8305 	bne.w	8003c86 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4413      	add	r3, r2
 8003684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003688:	461a      	mov	r2, r3
 800368a:	2302      	movs	r3, #2
 800368c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	334d      	adds	r3, #77	@ 0x4d
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d114      	bne.n	80036ce <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	334d      	adds	r3, #77	@ 0x4d
 80036b4:	2202      	movs	r2, #2
 80036b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	334c      	adds	r3, #76	@ 0x4c
 80036c8:	2201      	movs	r2, #1
 80036ca:	701a      	strb	r2, [r3, #0]
 80036cc:	e2cc      	b.n	8003c68 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	334d      	adds	r3, #77	@ 0x4d
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b06      	cmp	r3, #6
 80036e2:	d114      	bne.n	800370e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	334d      	adds	r3, #77	@ 0x4d
 80036f4:	2202      	movs	r2, #2
 80036f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80036f8:	78fa      	ldrb	r2, [r7, #3]
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	4613      	mov	r3, r2
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	334c      	adds	r3, #76	@ 0x4c
 8003708:	2205      	movs	r2, #5
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	e2ac      	b.n	8003c68 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	334d      	adds	r3, #77	@ 0x4d
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b07      	cmp	r3, #7
 8003722:	d00b      	beq.n	800373c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003724:	78fa      	ldrb	r2, [r7, #3]
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	4613      	mov	r3, r2
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	334d      	adds	r3, #77	@ 0x4d
 8003734:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003736:	2b09      	cmp	r3, #9
 8003738:	f040 80a6 	bne.w	8003888 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800373c:	78fa      	ldrb	r2, [r7, #3]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	334d      	adds	r3, #77	@ 0x4d
 800374c:	2202      	movs	r2, #2
 800374e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	3344      	adds	r3, #68	@ 0x44
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	1c59      	adds	r1, r3, #1
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4403      	add	r3, r0
 8003770:	3344      	adds	r3, #68	@ 0x44
 8003772:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	3344      	adds	r3, #68	@ 0x44
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d943      	bls.n	8003812 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800378a:	78fa      	ldrb	r2, [r7, #3]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	3344      	adds	r3, #68	@ 0x44
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800379e:	78fa      	ldrb	r2, [r7, #3]
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	1a9b      	subs	r3, r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	331a      	adds	r3, #26
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d123      	bne.n	80037fc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	331b      	adds	r3, #27
 80037c4:	2200      	movs	r2, #0
 80037c6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80037c8:	78fa      	ldrb	r2, [r7, #3]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	331c      	adds	r3, #28
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	78fa      	ldrb	r2, [r7, #3]
 80037ec:	0151      	lsls	r1, r2, #5
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	440a      	add	r2, r1
 80037f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037fa:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	334c      	adds	r3, #76	@ 0x4c
 800380c:	2204      	movs	r2, #4
 800380e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003810:	e229      	b.n	8003c66 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003812:	78fa      	ldrb	r2, [r7, #3]
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	334c      	adds	r3, #76	@ 0x4c
 8003822:	2202      	movs	r2, #2
 8003824:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	3326      	adds	r3, #38	@ 0x26
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00b      	beq.n	8003854 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800383c:	78fa      	ldrb	r2, [r7, #3]
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	3326      	adds	r3, #38	@ 0x26
 800384c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800384e:	2b02      	cmp	r3, #2
 8003850:	f040 8209 	bne.w	8003c66 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4413      	add	r3, r2
 800385c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800386a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003872:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4413      	add	r3, r2
 800387c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003880:	461a      	mov	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003886:	e1ee      	b.n	8003c66 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003888:	78fa      	ldrb	r2, [r7, #3]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	334d      	adds	r3, #77	@ 0x4d
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b05      	cmp	r3, #5
 800389c:	f040 80c8 	bne.w	8003a30 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	334d      	adds	r3, #77	@ 0x4d
 80038b0:	2202      	movs	r2, #2
 80038b2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80038b4:	78fa      	ldrb	r2, [r7, #3]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	331b      	adds	r3, #27
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	f040 81ce 	bne.w	8003c68 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	3326      	adds	r3, #38	@ 0x26
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d16b      	bne.n	80039ba <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80038e2:	78fa      	ldrb	r2, [r7, #3]
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	3348      	adds	r3, #72	@ 0x48
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	1c59      	adds	r1, r3, #1
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4403      	add	r3, r0
 8003902:	3348      	adds	r3, #72	@ 0x48
 8003904:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003906:	78fa      	ldrb	r2, [r7, #3]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	3348      	adds	r3, #72	@ 0x48
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b02      	cmp	r3, #2
 800391a:	d943      	bls.n	80039a4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800391c:	78fa      	ldrb	r2, [r7, #3]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	3348      	adds	r3, #72	@ 0x48
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	331b      	adds	r3, #27
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	3344      	adds	r3, #68	@ 0x44
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d809      	bhi.n	800396e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800395a:	78fa      	ldrb	r2, [r7, #3]
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	4613      	mov	r3, r2
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	1a9b      	subs	r3, r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	331c      	adds	r3, #28
 800396a:	2201      	movs	r2, #1
 800396c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800396e:	78fb      	ldrb	r3, [r7, #3]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4413      	add	r3, r2
 8003976:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	78fa      	ldrb	r2, [r7, #3]
 800397e:	0151      	lsls	r1, r2, #5
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	440a      	add	r2, r1
 8003984:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003988:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800398c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800398e:	78fa      	ldrb	r2, [r7, #3]
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	334c      	adds	r3, #76	@ 0x4c
 800399e:	2204      	movs	r2, #4
 80039a0:	701a      	strb	r2, [r3, #0]
 80039a2:	e014      	b.n	80039ce <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	334c      	adds	r3, #76	@ 0x4c
 80039b4:	2202      	movs	r2, #2
 80039b6:	701a      	strb	r2, [r3, #0]
 80039b8:	e009      	b.n	80039ce <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039ba:	78fa      	ldrb	r2, [r7, #3]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4613      	mov	r3, r2
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	1a9b      	subs	r3, r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	334c      	adds	r3, #76	@ 0x4c
 80039ca:	2202      	movs	r2, #2
 80039cc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039ce:	78fa      	ldrb	r2, [r7, #3]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	3326      	adds	r3, #38	@ 0x26
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00b      	beq.n	80039fc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80039e4:	78fa      	ldrb	r2, [r7, #3]
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	1a9b      	subs	r3, r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	3326      	adds	r3, #38	@ 0x26
 80039f4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	f040 8136 	bne.w	8003c68 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a12:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a1a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e11b      	b.n	8003c68 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	334d      	adds	r3, #77	@ 0x4d
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	f040 8081 	bne.w	8003b4a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	334d      	adds	r3, #77	@ 0x4d
 8003a58:	2202      	movs	r2, #2
 8003a5a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003a5c:	78fa      	ldrb	r2, [r7, #3]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	331b      	adds	r3, #27
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	f040 80fa 	bne.w	8003c68 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	334c      	adds	r3, #76	@ 0x4c
 8003a84:	2202      	movs	r2, #2
 8003a86:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	0151      	lsls	r1, r2, #5
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	440a      	add	r2, r1
 8003a9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003aa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	78fa      	ldrb	r2, [r7, #3]
 8003ab8:	0151      	lsls	r1, r2, #5
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	440a      	add	r2, r1
 8003abe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ac2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ac6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	0151      	lsls	r1, r2, #5
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	440a      	add	r2, r1
 8003ade:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ae2:	f023 0320 	bic.w	r3, r3, #32
 8003ae6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ae8:	78fa      	ldrb	r2, [r7, #3]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	3326      	adds	r3, #38	@ 0x26
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003afe:	78fa      	ldrb	r2, [r7, #3]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	3326      	adds	r3, #38	@ 0x26
 8003b0e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	f040 80a9 	bne.w	8003c68 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b16:	78fb      	ldrb	r3, [r7, #3]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b2c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b34:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b36:	78fb      	ldrb	r3, [r7, #3]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b42:	461a      	mov	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	e08e      	b.n	8003c68 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	334d      	adds	r3, #77	@ 0x4d
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d143      	bne.n	8003be8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	334d      	adds	r3, #77	@ 0x4d
 8003b70:	2202      	movs	r2, #2
 8003b72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b74:	78fa      	ldrb	r2, [r7, #3]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	334c      	adds	r3, #76	@ 0x4c
 8003b84:	2202      	movs	r2, #2
 8003b86:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	3326      	adds	r3, #38	@ 0x26
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003b9e:	78fa      	ldrb	r2, [r7, #3]
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	3326      	adds	r3, #38	@ 0x26
 8003bae:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d159      	bne.n	8003c68 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003bca:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bd2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003be0:	461a      	mov	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e03f      	b.n	8003c68 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003be8:	78fa      	ldrb	r2, [r7, #3]
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	1a9b      	subs	r3, r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	334d      	adds	r3, #77	@ 0x4d
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d126      	bne.n	8003c4c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bfe:	78fa      	ldrb	r2, [r7, #3]
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	334d      	adds	r3, #77	@ 0x4d
 8003c0e:	2202      	movs	r2, #2
 8003c10:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003c12:	78fa      	ldrb	r2, [r7, #3]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	3344      	adds	r3, #68	@ 0x44
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	1c59      	adds	r1, r3, #1
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4403      	add	r3, r0
 8003c32:	3344      	adds	r3, #68	@ 0x44
 8003c34:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c36:	78fa      	ldrb	r2, [r7, #3]
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	1a9b      	subs	r3, r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	334c      	adds	r3, #76	@ 0x4c
 8003c46:	2204      	movs	r2, #4
 8003c48:	701a      	strb	r2, [r3, #0]
 8003c4a:	e00d      	b.n	8003c68 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003c4c:	78fa      	ldrb	r2, [r7, #3]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	334d      	adds	r3, #77	@ 0x4d
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	f000 8100 	beq.w	8003e64 <HCD_HC_IN_IRQHandler+0xcca>
 8003c64:	e000      	b.n	8003c68 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c66:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003c68:	78fa      	ldrb	r2, [r7, #3]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	1a9b      	subs	r3, r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	334c      	adds	r3, #76	@ 0x4c
 8003c78:	781a      	ldrb	r2, [r3, #0]
 8003c7a:	78fb      	ldrb	r3, [r7, #3]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f007 f94a 	bl	800af18 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c84:	e0ef      	b.n	8003e66 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f004 f845 	bl	8007d1e <USB_ReadChInterrupts>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c9a:	2b40      	cmp	r3, #64	@ 0x40
 8003c9c:	d12f      	bne.n	8003cfe <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003c9e:	78fb      	ldrb	r3, [r7, #3]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003caa:	461a      	mov	r2, r3
 8003cac:	2340      	movs	r3, #64	@ 0x40
 8003cae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	334d      	adds	r3, #77	@ 0x4d
 8003cc0:	2205      	movs	r2, #5
 8003cc2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003cc4:	78fa      	ldrb	r2, [r7, #3]
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	331a      	adds	r3, #26
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	3344      	adds	r3, #68	@ 0x44
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	78fa      	ldrb	r2, [r7, #3]
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f004 fdb5 	bl	8008866 <USB_HC_Halt>
 8003cfc:	e0b3      	b.n	8003e66 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	4611      	mov	r1, r2
 8003d06:	4618      	mov	r0, r3
 8003d08:	f004 f809 	bl	8007d1e <USB_ReadChInterrupts>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	2b10      	cmp	r3, #16
 8003d14:	f040 80a7 	bne.w	8003e66 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003d18:	78fa      	ldrb	r2, [r7, #3]
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	3326      	adds	r3, #38	@ 0x26
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d11b      	bne.n	8003d66 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d2e:	78fa      	ldrb	r2, [r7, #3]
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	1a9b      	subs	r3, r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	3344      	adds	r3, #68	@ 0x44
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003d42:	78fa      	ldrb	r2, [r7, #3]
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	440b      	add	r3, r1
 8003d50:	334d      	adds	r3, #77	@ 0x4d
 8003d52:	2204      	movs	r2, #4
 8003d54:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	78fa      	ldrb	r2, [r7, #3]
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f004 fd81 	bl	8008866 <USB_HC_Halt>
 8003d64:	e03f      	b.n	8003de6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	3326      	adds	r3, #38	@ 0x26
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d7c:	78fa      	ldrb	r2, [r7, #3]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	3326      	adds	r3, #38	@ 0x26
 8003d8c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d129      	bne.n	8003de6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	3344      	adds	r3, #68	@ 0x44
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	799b      	ldrb	r3, [r3, #6]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HCD_HC_IN_IRQHandler+0xc2a>
 8003dae:	78fa      	ldrb	r2, [r7, #3]
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4613      	mov	r3, r2
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	440b      	add	r3, r1
 8003dbc:	331b      	adds	r3, #27
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d110      	bne.n	8003de6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003dc4:	78fa      	ldrb	r2, [r7, #3]
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	334d      	adds	r3, #77	@ 0x4d
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	78fa      	ldrb	r2, [r7, #3]
 8003dde:	4611      	mov	r1, r2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f004 fd40 	bl	8008866 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003de6:	78fa      	ldrb	r2, [r7, #3]
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	331b      	adds	r3, #27
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d129      	bne.n	8003e50 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003dfc:	78fa      	ldrb	r2, [r7, #3]
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	331b      	adds	r3, #27
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	0151      	lsls	r1, r2, #5
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	440a      	add	r2, r1
 8003e26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e2e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	78fa      	ldrb	r2, [r7, #3]
 8003e40:	0151      	lsls	r1, r2, #5
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	440a      	add	r2, r1
 8003e46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e4a:	f043 0320 	orr.w	r3, r3, #32
 8003e4e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	2310      	movs	r3, #16
 8003e60:	6093      	str	r3, [r2, #8]
 8003e62:	e000      	b.n	8003e66 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003e64:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	78fa      	ldrb	r2, [r7, #3]
 8003e88:	4611      	mov	r1, r2
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f003 ff47 	bl	8007d1e <USB_ReadChInterrupts>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d11b      	bne.n	8003ed2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003e9a:	78fb      	ldrb	r3, [r7, #3]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	334d      	adds	r3, #77	@ 0x4d
 8003ebc:	2207      	movs	r2, #7
 8003ebe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	78fa      	ldrb	r2, [r7, #3]
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f004 fccc 	bl	8008866 <USB_HC_Halt>
 8003ece:	f000 bc89 	b.w	80047e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	78fa      	ldrb	r2, [r7, #3]
 8003ed8:	4611      	mov	r1, r2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f003 ff1f 	bl	8007d1e <USB_ReadChInterrupts>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b20      	cmp	r3, #32
 8003ee8:	f040 8082 	bne.w	8003ff0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ef8:	461a      	mov	r2, r3
 8003efa:	2320      	movs	r3, #32
 8003efc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003efe:	78fa      	ldrb	r2, [r7, #3]
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	4613      	mov	r3, r2
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	3319      	adds	r3, #25
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d124      	bne.n	8003f5e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003f14:	78fa      	ldrb	r2, [r7, #3]
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	3319      	adds	r3, #25
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	334c      	adds	r3, #76	@ 0x4c
 8003f38:	2202      	movs	r2, #2
 8003f3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	334d      	adds	r3, #77	@ 0x4d
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	78fa      	ldrb	r2, [r7, #3]
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f004 fc84 	bl	8008866 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	331a      	adds	r3, #26
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	f040 8437 	bne.w	80047e4 <HCD_HC_OUT_IRQHandler+0x978>
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	331b      	adds	r3, #27
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f040 842b 	bne.w	80047e4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	3326      	adds	r3, #38	@ 0x26
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d009      	beq.n	8003fb8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003fa4:	78fa      	ldrb	r2, [r7, #3]
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	1a9b      	subs	r3, r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	331b      	adds	r3, #27
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003fb8:	78fa      	ldrb	r2, [r7, #3]
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	1a9b      	subs	r3, r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	334d      	adds	r3, #77	@ 0x4d
 8003fc8:	2203      	movs	r2, #3
 8003fca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	78fa      	ldrb	r2, [r7, #3]
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f004 fc46 	bl	8008866 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	3344      	adds	r3, #68	@ 0x44
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	e3f9      	b.n	80047e4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	78fa      	ldrb	r2, [r7, #3]
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f003 fe90 	bl	8007d1e <USB_ReadChInterrupts>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004008:	d111      	bne.n	800402e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800400a:	78fb      	ldrb	r3, [r7, #3]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4413      	add	r3, r2
 8004012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004016:	461a      	mov	r2, r3
 8004018:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800401c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f004 fc1d 	bl	8008866 <USB_HC_Halt>
 800402c:	e3da      	b.n	80047e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	78fa      	ldrb	r2, [r7, #3]
 8004034:	4611      	mov	r1, r2
 8004036:	4618      	mov	r0, r3
 8004038:	f003 fe71 	bl	8007d1e <USB_ReadChInterrupts>
 800403c:	4603      	mov	r3, r0
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b01      	cmp	r3, #1
 8004044:	d168      	bne.n	8004118 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004046:	78fa      	ldrb	r2, [r7, #3]
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	440b      	add	r3, r1
 8004054:	3344      	adds	r3, #68	@ 0x44
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	78fa      	ldrb	r2, [r7, #3]
 8004060:	4611      	mov	r1, r2
 8004062:	4618      	mov	r0, r3
 8004064:	f003 fe5b 	bl	8007d1e <USB_ReadChInterrupts>
 8004068:	4603      	mov	r3, r0
 800406a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800406e:	2b40      	cmp	r3, #64	@ 0x40
 8004070:	d112      	bne.n	8004098 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004072:	78fa      	ldrb	r2, [r7, #3]
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	4613      	mov	r3, r2
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	3319      	adds	r3, #25
 8004082:	2201      	movs	r2, #1
 8004084:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004086:	78fb      	ldrb	r3, [r7, #3]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4413      	add	r3, r2
 800408e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004092:	461a      	mov	r2, r3
 8004094:	2340      	movs	r3, #64	@ 0x40
 8004096:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	331b      	adds	r3, #27
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d019      	beq.n	80040e2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80040ae:	78fa      	ldrb	r2, [r7, #3]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	331b      	adds	r3, #27
 80040be:	2200      	movs	r2, #0
 80040c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	78fa      	ldrb	r2, [r7, #3]
 80040d2:	0151      	lsls	r1, r2, #5
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	440a      	add	r2, r1
 80040d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040ee:	461a      	mov	r2, r3
 80040f0:	2301      	movs	r3, #1
 80040f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80040f4:	78fa      	ldrb	r2, [r7, #3]
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	334d      	adds	r3, #77	@ 0x4d
 8004104:	2201      	movs	r2, #1
 8004106:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	78fa      	ldrb	r2, [r7, #3]
 800410e:	4611      	mov	r1, r2
 8004110:	4618      	mov	r0, r3
 8004112:	f004 fba8 	bl	8008866 <USB_HC_Halt>
 8004116:	e365      	b.n	80047e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	4611      	mov	r1, r2
 8004120:	4618      	mov	r0, r3
 8004122:	f003 fdfc 	bl	8007d1e <USB_ReadChInterrupts>
 8004126:	4603      	mov	r3, r0
 8004128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412c:	2b40      	cmp	r3, #64	@ 0x40
 800412e:	d139      	bne.n	80041a4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	334d      	adds	r3, #77	@ 0x4d
 8004140:	2205      	movs	r2, #5
 8004142:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004144:	78fa      	ldrb	r2, [r7, #3]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	331a      	adds	r3, #26
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800415a:	78fa      	ldrb	r2, [r7, #3]
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	3319      	adds	r3, #25
 800416a:	2201      	movs	r2, #1
 800416c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	3344      	adds	r3, #68	@ 0x44
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	78fa      	ldrb	r2, [r7, #3]
 8004188:	4611      	mov	r1, r2
 800418a:	4618      	mov	r0, r3
 800418c:	f004 fb6b 	bl	8008866 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	4413      	add	r3, r2
 8004198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800419c:	461a      	mov	r2, r3
 800419e:	2340      	movs	r3, #64	@ 0x40
 80041a0:	6093      	str	r3, [r2, #8]
 80041a2:	e31f      	b.n	80047e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	78fa      	ldrb	r2, [r7, #3]
 80041aa:	4611      	mov	r1, r2
 80041ac:	4618      	mov	r0, r3
 80041ae:	f003 fdb6 	bl	8007d1e <USB_ReadChInterrupts>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d11a      	bne.n	80041f2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041c8:	461a      	mov	r2, r3
 80041ca:	2308      	movs	r3, #8
 80041cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80041ce:	78fa      	ldrb	r2, [r7, #3]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	334d      	adds	r3, #77	@ 0x4d
 80041de:	2206      	movs	r2, #6
 80041e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	78fa      	ldrb	r2, [r7, #3]
 80041e8:	4611      	mov	r1, r2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f004 fb3b 	bl	8008866 <USB_HC_Halt>
 80041f0:	e2f8      	b.n	80047e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	78fa      	ldrb	r2, [r7, #3]
 80041f8:	4611      	mov	r1, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f003 fd8f 	bl	8007d1e <USB_ReadChInterrupts>
 8004200:	4603      	mov	r3, r0
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	2b10      	cmp	r3, #16
 8004208:	d144      	bne.n	8004294 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	4613      	mov	r3, r2
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	1a9b      	subs	r3, r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	440b      	add	r3, r1
 8004218:	3344      	adds	r3, #68	@ 0x44
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800421e:	78fa      	ldrb	r2, [r7, #3]
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	1a9b      	subs	r3, r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	334d      	adds	r3, #77	@ 0x4d
 800422e:	2204      	movs	r2, #4
 8004230:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	3319      	adds	r3, #25
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d114      	bne.n	8004272 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	3318      	adds	r3, #24
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	3319      	adds	r3, #25
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f004 faf3 	bl	8008866 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4413      	add	r3, r2
 8004288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800428c:	461a      	mov	r2, r3
 800428e:	2310      	movs	r3, #16
 8004290:	6093      	str	r3, [r2, #8]
 8004292:	e2a7      	b.n	80047e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	78fa      	ldrb	r2, [r7, #3]
 800429a:	4611      	mov	r1, r2
 800429c:	4618      	mov	r0, r3
 800429e:	f003 fd3e 	bl	8007d1e <USB_ReadChInterrupts>
 80042a2:	4603      	mov	r3, r0
 80042a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a8:	2b80      	cmp	r3, #128	@ 0x80
 80042aa:	f040 8083 	bne.w	80043b4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	799b      	ldrb	r3, [r3, #6]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d111      	bne.n	80042da <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80042b6:	78fa      	ldrb	r2, [r7, #3]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	334d      	adds	r3, #77	@ 0x4d
 80042c6:	2207      	movs	r2, #7
 80042c8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	78fa      	ldrb	r2, [r7, #3]
 80042d0:	4611      	mov	r1, r2
 80042d2:	4618      	mov	r0, r3
 80042d4:	f004 fac7 	bl	8008866 <USB_HC_Halt>
 80042d8:	e062      	b.n	80043a0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80042da:	78fa      	ldrb	r2, [r7, #3]
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	4613      	mov	r3, r2
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	1a9b      	subs	r3, r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	440b      	add	r3, r1
 80042e8:	3344      	adds	r3, #68	@ 0x44
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	1c59      	adds	r1, r3, #1
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4403      	add	r3, r0
 80042fa:	3344      	adds	r3, #68	@ 0x44
 80042fc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042fe:	78fa      	ldrb	r2, [r7, #3]
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	1a9b      	subs	r3, r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	3344      	adds	r3, #68	@ 0x44
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d922      	bls.n	800435a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	3344      	adds	r3, #68	@ 0x44
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004328:	78fa      	ldrb	r2, [r7, #3]
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	334c      	adds	r3, #76	@ 0x4c
 8004338:	2204      	movs	r2, #4
 800433a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800433c:	78fa      	ldrb	r2, [r7, #3]
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	334c      	adds	r3, #76	@ 0x4c
 800434c:	781a      	ldrb	r2, [r3, #0]
 800434e:	78fb      	ldrb	r3, [r7, #3]
 8004350:	4619      	mov	r1, r3
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f006 fde0 	bl	800af18 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004358:	e022      	b.n	80043a0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800435a:	78fa      	ldrb	r2, [r7, #3]
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	334c      	adds	r3, #76	@ 0x4c
 800436a:	2202      	movs	r2, #2
 800436c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800436e:	78fb      	ldrb	r3, [r7, #3]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	4413      	add	r3, r2
 8004376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004384:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800438c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4413      	add	r3, r2
 8004396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800439a:	461a      	mov	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80043a0:	78fb      	ldrb	r3, [r7, #3]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ac:	461a      	mov	r2, r3
 80043ae:	2380      	movs	r3, #128	@ 0x80
 80043b0:	6093      	str	r3, [r2, #8]
 80043b2:	e217      	b.n	80047e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	78fa      	ldrb	r2, [r7, #3]
 80043ba:	4611      	mov	r1, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f003 fcae 	bl	8007d1e <USB_ReadChInterrupts>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043cc:	d11b      	bne.n	8004406 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80043ce:	78fa      	ldrb	r2, [r7, #3]
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	4613      	mov	r3, r2
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	1a9b      	subs	r3, r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	334d      	adds	r3, #77	@ 0x4d
 80043de:	2209      	movs	r2, #9
 80043e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	78fa      	ldrb	r2, [r7, #3]
 80043e8:	4611      	mov	r1, r2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f004 fa3b 	bl	8008866 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043fc:	461a      	mov	r2, r3
 80043fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004402:	6093      	str	r3, [r2, #8]
 8004404:	e1ee      	b.n	80047e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	78fa      	ldrb	r2, [r7, #3]
 800440c:	4611      	mov	r1, r2
 800440e:	4618      	mov	r0, r3
 8004410:	f003 fc85 	bl	8007d1e <USB_ReadChInterrupts>
 8004414:	4603      	mov	r3, r0
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b02      	cmp	r3, #2
 800441c:	f040 81df 	bne.w	80047de <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4413      	add	r3, r2
 8004428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800442c:	461a      	mov	r2, r3
 800442e:	2302      	movs	r3, #2
 8004430:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	334d      	adds	r3, #77	@ 0x4d
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b01      	cmp	r3, #1
 8004446:	f040 8093 	bne.w	8004570 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800444a:	78fa      	ldrb	r2, [r7, #3]
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	4613      	mov	r3, r2
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	334d      	adds	r3, #77	@ 0x4d
 800445a:	2202      	movs	r2, #2
 800445c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800445e:	78fa      	ldrb	r2, [r7, #3]
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	4613      	mov	r3, r2
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	1a9b      	subs	r3, r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	334c      	adds	r3, #76	@ 0x4c
 800446e:	2201      	movs	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004472:	78fa      	ldrb	r2, [r7, #3]
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	3326      	adds	r3, #38	@ 0x26
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b02      	cmp	r3, #2
 8004486:	d00b      	beq.n	80044a0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004488:	78fa      	ldrb	r2, [r7, #3]
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	4613      	mov	r3, r2
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	3326      	adds	r3, #38	@ 0x26
 8004498:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800449a:	2b03      	cmp	r3, #3
 800449c:	f040 8190 	bne.w	80047c0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	799b      	ldrb	r3, [r3, #6]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d115      	bne.n	80044d4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80044a8:	78fa      	ldrb	r2, [r7, #3]
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	4613      	mov	r3, r2
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	1a9b      	subs	r3, r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	333d      	adds	r3, #61	@ 0x3d
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	78fa      	ldrb	r2, [r7, #3]
 80044bc:	f083 0301 	eor.w	r3, r3, #1
 80044c0:	b2d8      	uxtb	r0, r3
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	333d      	adds	r3, #61	@ 0x3d
 80044d0:	4602      	mov	r2, r0
 80044d2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	799b      	ldrb	r3, [r3, #6]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	f040 8171 	bne.w	80047c0 <HCD_HC_OUT_IRQHandler+0x954>
 80044de:	78fa      	ldrb	r2, [r7, #3]
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	440b      	add	r3, r1
 80044ec:	3334      	adds	r3, #52	@ 0x34
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8165 	beq.w	80047c0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80044f6:	78fa      	ldrb	r2, [r7, #3]
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	4613      	mov	r3, r2
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	1a9b      	subs	r3, r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	3334      	adds	r3, #52	@ 0x34
 8004506:	6819      	ldr	r1, [r3, #0]
 8004508:	78fa      	ldrb	r2, [r7, #3]
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	4613      	mov	r3, r2
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	1a9b      	subs	r3, r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4403      	add	r3, r0
 8004516:	3328      	adds	r3, #40	@ 0x28
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	440b      	add	r3, r1
 800451c:	1e59      	subs	r1, r3, #1
 800451e:	78fa      	ldrb	r2, [r7, #3]
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	4613      	mov	r3, r2
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	1a9b      	subs	r3, r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4403      	add	r3, r0
 800452c:	3328      	adds	r3, #40	@ 0x28
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	fbb1 f3f3 	udiv	r3, r1, r3
 8004534:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 813f 	beq.w	80047c0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004542:	78fa      	ldrb	r2, [r7, #3]
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	440b      	add	r3, r1
 8004550:	333d      	adds	r3, #61	@ 0x3d
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	78fa      	ldrb	r2, [r7, #3]
 8004556:	f083 0301 	eor.w	r3, r3, #1
 800455a:	b2d8      	uxtb	r0, r3
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	4613      	mov	r3, r2
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	1a9b      	subs	r3, r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	333d      	adds	r3, #61	@ 0x3d
 800456a:	4602      	mov	r2, r0
 800456c:	701a      	strb	r2, [r3, #0]
 800456e:	e127      	b.n	80047c0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004570:	78fa      	ldrb	r2, [r7, #3]
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	334d      	adds	r3, #77	@ 0x4d
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b03      	cmp	r3, #3
 8004584:	d120      	bne.n	80045c8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004586:	78fa      	ldrb	r2, [r7, #3]
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	4613      	mov	r3, r2
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	1a9b      	subs	r3, r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	440b      	add	r3, r1
 8004594:	334d      	adds	r3, #77	@ 0x4d
 8004596:	2202      	movs	r2, #2
 8004598:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800459a:	78fa      	ldrb	r2, [r7, #3]
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	1a9b      	subs	r3, r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	331b      	adds	r3, #27
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	f040 8107 	bne.w	80047c0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	334c      	adds	r3, #76	@ 0x4c
 80045c2:	2202      	movs	r2, #2
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	e0fb      	b.n	80047c0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80045c8:	78fa      	ldrb	r2, [r7, #3]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	334d      	adds	r3, #77	@ 0x4d
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d13a      	bne.n	8004654 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	334d      	adds	r3, #77	@ 0x4d
 80045ee:	2202      	movs	r2, #2
 80045f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	334c      	adds	r3, #76	@ 0x4c
 8004602:	2202      	movs	r2, #2
 8004604:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004606:	78fa      	ldrb	r2, [r7, #3]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	331b      	adds	r3, #27
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b01      	cmp	r3, #1
 800461a:	f040 80d1 	bne.w	80047c0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800461e:	78fa      	ldrb	r2, [r7, #3]
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	1a9b      	subs	r3, r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	331b      	adds	r3, #27
 800462e:	2200      	movs	r2, #0
 8004630:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004632:	78fb      	ldrb	r3, [r7, #3]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4413      	add	r3, r2
 800463a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	0151      	lsls	r1, r2, #5
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	440a      	add	r2, r1
 8004648:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800464c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004650:	6053      	str	r3, [r2, #4]
 8004652:	e0b5      	b.n	80047c0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004654:	78fa      	ldrb	r2, [r7, #3]
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	4613      	mov	r3, r2
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	334d      	adds	r3, #77	@ 0x4d
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b05      	cmp	r3, #5
 8004668:	d114      	bne.n	8004694 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800466a:	78fa      	ldrb	r2, [r7, #3]
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	4613      	mov	r3, r2
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	1a9b      	subs	r3, r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	440b      	add	r3, r1
 8004678:	334d      	adds	r3, #77	@ 0x4d
 800467a:	2202      	movs	r2, #2
 800467c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800467e:	78fa      	ldrb	r2, [r7, #3]
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	334c      	adds	r3, #76	@ 0x4c
 800468e:	2202      	movs	r2, #2
 8004690:	701a      	strb	r2, [r3, #0]
 8004692:	e095      	b.n	80047c0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004694:	78fa      	ldrb	r2, [r7, #3]
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	334d      	adds	r3, #77	@ 0x4d
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b06      	cmp	r3, #6
 80046a8:	d114      	bne.n	80046d4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046aa:	78fa      	ldrb	r2, [r7, #3]
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	440b      	add	r3, r1
 80046b8:	334d      	adds	r3, #77	@ 0x4d
 80046ba:	2202      	movs	r2, #2
 80046bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80046be:	78fa      	ldrb	r2, [r7, #3]
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	4613      	mov	r3, r2
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	1a9b      	subs	r3, r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	440b      	add	r3, r1
 80046cc:	334c      	adds	r3, #76	@ 0x4c
 80046ce:	2205      	movs	r2, #5
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	e075      	b.n	80047c0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80046d4:	78fa      	ldrb	r2, [r7, #3]
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	334d      	adds	r3, #77	@ 0x4d
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b07      	cmp	r3, #7
 80046e8:	d00a      	beq.n	8004700 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80046ea:	78fa      	ldrb	r2, [r7, #3]
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	4613      	mov	r3, r2
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	1a9b      	subs	r3, r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	440b      	add	r3, r1
 80046f8:	334d      	adds	r3, #77	@ 0x4d
 80046fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80046fc:	2b09      	cmp	r3, #9
 80046fe:	d170      	bne.n	80047e2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	334d      	adds	r3, #77	@ 0x4d
 8004710:	2202      	movs	r2, #2
 8004712:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004714:	78fa      	ldrb	r2, [r7, #3]
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	4613      	mov	r3, r2
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	3344      	adds	r3, #68	@ 0x44
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	1c59      	adds	r1, r3, #1
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4403      	add	r3, r0
 8004734:	3344      	adds	r3, #68	@ 0x44
 8004736:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004738:	78fa      	ldrb	r2, [r7, #3]
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	1a9b      	subs	r3, r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	3344      	adds	r3, #68	@ 0x44
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d914      	bls.n	8004778 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800474e:	78fa      	ldrb	r2, [r7, #3]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	3344      	adds	r3, #68	@ 0x44
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004762:	78fa      	ldrb	r2, [r7, #3]
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	334c      	adds	r3, #76	@ 0x4c
 8004772:	2204      	movs	r2, #4
 8004774:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004776:	e022      	b.n	80047be <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004778:	78fa      	ldrb	r2, [r7, #3]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	334c      	adds	r3, #76	@ 0x4c
 8004788:	2202      	movs	r2, #2
 800478a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	4413      	add	r3, r2
 8004794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047a2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80047aa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047b8:	461a      	mov	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047be:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80047c0:	78fa      	ldrb	r2, [r7, #3]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	334c      	adds	r3, #76	@ 0x4c
 80047d0:	781a      	ldrb	r2, [r3, #0]
 80047d2:	78fb      	ldrb	r3, [r7, #3]
 80047d4:	4619      	mov	r1, r3
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f006 fb9e 	bl	800af18 <HAL_HCD_HC_NotifyURBChange_Callback>
 80047dc:	e002      	b.n	80047e4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80047de:	bf00      	nop
 80047e0:	e000      	b.n	80047e4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80047e2:	bf00      	nop
  }
}
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b08a      	sub	sp, #40	@ 0x28
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	0c5b      	lsrs	r3, r3, #17
 8004810:	f003 030f 	and.w	r3, r3, #15
 8004814:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800481e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d004      	beq.n	8004830 <HCD_RXQLVL_IRQHandler+0x46>
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b05      	cmp	r3, #5
 800482a:	f000 80b6 	beq.w	800499a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800482e:	e0b7      	b.n	80049a0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 80b3 	beq.w	800499e <HCD_RXQLVL_IRQHandler+0x1b4>
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4613      	mov	r3, r2
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	332c      	adds	r3, #44	@ 0x2c
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 80a7 	beq.w	800499e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4613      	mov	r3, r2
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	1a9b      	subs	r3, r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	3338      	adds	r3, #56	@ 0x38
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	18d1      	adds	r1, r2, r3
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4613      	mov	r3, r2
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	1a9b      	subs	r3, r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4403      	add	r3, r0
 8004874:	3334      	adds	r3, #52	@ 0x34
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4299      	cmp	r1, r3
 800487a:	f200 8083 	bhi.w	8004984 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	4613      	mov	r3, r2
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	332c      	adds	r3, #44	@ 0x2c
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	b292      	uxth	r2, r2
 8004898:	4619      	mov	r1, r3
 800489a:	f003 f9d5 	bl	8007c48 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	4613      	mov	r3, r2
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	1a9b      	subs	r3, r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	332c      	adds	r3, #44	@ 0x2c
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	18d1      	adds	r1, r2, r3
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4613      	mov	r3, r2
 80048ba:	011b      	lsls	r3, r3, #4
 80048bc:	1a9b      	subs	r3, r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4403      	add	r3, r0
 80048c2:	332c      	adds	r3, #44	@ 0x2c
 80048c4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	4613      	mov	r3, r2
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	3338      	adds	r3, #56	@ 0x38
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	18d1      	adds	r1, r2, r3
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	4613      	mov	r3, r2
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4403      	add	r3, r0
 80048ea:	3338      	adds	r3, #56	@ 0x38
 80048ec:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	0cdb      	lsrs	r3, r3, #19
 80048fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004902:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4613      	mov	r3, r2
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	1a9b      	subs	r3, r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	3328      	adds	r3, #40	@ 0x28
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4293      	cmp	r3, r2
 800491c:	d13f      	bne.n	800499e <HCD_RXQLVL_IRQHandler+0x1b4>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d03c      	beq.n	800499e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	4413      	add	r3, r2
 800492c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800493a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004942:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	4413      	add	r3, r2
 800494c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004950:	461a      	mov	r2, r3
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4613      	mov	r3, r2
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	333c      	adds	r3, #60	@ 0x3c
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	f083 0301 	eor.w	r3, r3, #1
 800496c:	b2d8      	uxtb	r0, r3
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4613      	mov	r3, r2
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	1a9b      	subs	r3, r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	333c      	adds	r3, #60	@ 0x3c
 800497e:	4602      	mov	r2, r0
 8004980:	701a      	strb	r2, [r3, #0]
      break;
 8004982:	e00c      	b.n	800499e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	4613      	mov	r3, r2
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	334c      	adds	r3, #76	@ 0x4c
 8004994:	2204      	movs	r2, #4
 8004996:	701a      	strb	r2, [r3, #0]
      break;
 8004998:	e001      	b.n	800499e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800499a:	bf00      	nop
 800499c:	e000      	b.n	80049a0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800499e:	bf00      	nop
  }
}
 80049a0:	bf00      	nop
 80049a2:	3728      	adds	r7, #40	@ 0x28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80049d4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d10b      	bne.n	80049f8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d102      	bne.n	80049f0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f006 fa78 	bl	800aee0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f043 0302 	orr.w	r3, r3, #2
 80049f6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d132      	bne.n	8004a68 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f043 0308 	orr.w	r3, r3, #8
 8004a08:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d126      	bne.n	8004a62 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	7a5b      	ldrb	r3, [r3, #9]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d113      	bne.n	8004a44 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004a22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a26:	d106      	bne.n	8004a36 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2102      	movs	r1, #2
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f003 fa9a 	bl	8007f68 <USB_InitFSLSPClkSel>
 8004a34:	e011      	b.n	8004a5a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f003 fa93 	bl	8007f68 <USB_InitFSLSPClkSel>
 8004a42:	e00a      	b.n	8004a5a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	79db      	ldrb	r3, [r3, #7]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d106      	bne.n	8004a5a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a52:	461a      	mov	r2, r3
 8004a54:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004a58:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f006 fa6a 	bl	800af34 <HAL_HCD_PortEnabled_Callback>
 8004a60:	e002      	b.n	8004a68 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f006 fa74 	bl	800af50 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b20      	cmp	r3, #32
 8004a70:	d103      	bne.n	8004a7a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f043 0320 	orr.w	r3, r3, #32
 8004a78:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a80:	461a      	mov	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	6013      	str	r3, [r2, #0]
}
 8004a86:	bf00      	nop
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e12b      	b.n	8004cfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fc fa64 	bl	8000f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2224      	movs	r2, #36	@ 0x24
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0201 	bic.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004af4:	f001 fa20 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 8004af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4a81      	ldr	r2, [pc, #516]	@ (8004d04 <HAL_I2C_Init+0x274>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d807      	bhi.n	8004b14 <HAL_I2C_Init+0x84>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4a80      	ldr	r2, [pc, #512]	@ (8004d08 <HAL_I2C_Init+0x278>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	bf94      	ite	ls
 8004b0c:	2301      	movls	r3, #1
 8004b0e:	2300      	movhi	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	e006      	b.n	8004b22 <HAL_I2C_Init+0x92>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4a7d      	ldr	r2, [pc, #500]	@ (8004d0c <HAL_I2C_Init+0x27c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	bf94      	ite	ls
 8004b1c:	2301      	movls	r3, #1
 8004b1e:	2300      	movhi	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e0e7      	b.n	8004cfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4a78      	ldr	r2, [pc, #480]	@ (8004d10 <HAL_I2C_Init+0x280>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	0c9b      	lsrs	r3, r3, #18
 8004b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4a6a      	ldr	r2, [pc, #424]	@ (8004d04 <HAL_I2C_Init+0x274>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d802      	bhi.n	8004b64 <HAL_I2C_Init+0xd4>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	3301      	adds	r3, #1
 8004b62:	e009      	b.n	8004b78 <HAL_I2C_Init+0xe8>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004b6a:	fb02 f303 	mul.w	r3, r2, r3
 8004b6e:	4a69      	ldr	r2, [pc, #420]	@ (8004d14 <HAL_I2C_Init+0x284>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	099b      	lsrs	r3, r3, #6
 8004b76:	3301      	adds	r3, #1
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004b8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	495c      	ldr	r1, [pc, #368]	@ (8004d04 <HAL_I2C_Init+0x274>)
 8004b94:	428b      	cmp	r3, r1
 8004b96:	d819      	bhi.n	8004bcc <HAL_I2C_Init+0x13c>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1e59      	subs	r1, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ba6:	1c59      	adds	r1, r3, #1
 8004ba8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004bac:	400b      	ands	r3, r1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_I2C_Init+0x138>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1e59      	subs	r1, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc6:	e051      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	e04f      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d111      	bne.n	8004bf8 <HAL_I2C_Init+0x168>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	1e58      	subs	r0, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6859      	ldr	r1, [r3, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	440b      	add	r3, r1
 8004be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004be6:	3301      	adds	r3, #1
 8004be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	e012      	b.n	8004c1e <HAL_I2C_Init+0x18e>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1e58      	subs	r0, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6859      	ldr	r1, [r3, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	0099      	lsls	r1, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c0e:	3301      	adds	r3, #1
 8004c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_I2C_Init+0x196>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e022      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10e      	bne.n	8004c4c <HAL_I2C_Init+0x1bc>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1e58      	subs	r0, r3, #1
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6859      	ldr	r1, [r3, #4]
 8004c36:	460b      	mov	r3, r1
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	440b      	add	r3, r1
 8004c3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c40:	3301      	adds	r3, #1
 8004c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c4a:	e00f      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	1e58      	subs	r0, r3, #1
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6859      	ldr	r1, [r3, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	0099      	lsls	r1, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c62:	3301      	adds	r3, #1
 8004c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	6809      	ldr	r1, [r1, #0]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69da      	ldr	r2, [r3, #28]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004c9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6911      	ldr	r1, [r2, #16]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68d2      	ldr	r2, [r2, #12]
 8004ca6:	4311      	orrs	r1, r2
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	430b      	orrs	r3, r1
 8004cae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695a      	ldr	r2, [r3, #20]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	000186a0 	.word	0x000186a0
 8004d08:	001e847f 	.word	0x001e847f
 8004d0c:	003d08ff 	.word	0x003d08ff
 8004d10:	431bde83 	.word	0x431bde83
 8004d14:	10624dd3 	.word	0x10624dd3

08004d18 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e128      	b.n	8004f7c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d109      	bne.n	8004d4a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a90      	ldr	r2, [pc, #576]	@ (8004f84 <HAL_I2S_Init+0x26c>)
 8004d42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7fc f965 	bl	8001014 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6812      	ldr	r2, [r2, #0]
 8004d5c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004d60:	f023 030f 	bic.w	r3, r3, #15
 8004d64:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d060      	beq.n	8004e38 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d102      	bne.n	8004d84 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004d7e:	2310      	movs	r3, #16
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	e001      	b.n	8004d88 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004d84:	2320      	movs	r3, #32
 8004d86:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d802      	bhi.n	8004d96 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004d96:	2001      	movs	r0, #1
 8004d98:	f001 f9c4 	bl	8006124 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d9c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004da6:	d125      	bne.n	8004df4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d010      	beq.n	8004dd2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	3305      	adds	r3, #5
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	e01f      	b.n	8004e12 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	461a      	mov	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dee:	3305      	adds	r3, #5
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	e00e      	b.n	8004e12 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	461a      	mov	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0e:	3305      	adds	r3, #5
 8004e10:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	4a5c      	ldr	r2, [pc, #368]	@ (8004f88 <HAL_I2S_Init+0x270>)
 8004e16:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1a:	08db      	lsrs	r3, r3, #3
 8004e1c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	085b      	lsrs	r3, r3, #1
 8004e2e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	61bb      	str	r3, [r7, #24]
 8004e36:	e003      	b.n	8004e40 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004e38:	2302      	movs	r3, #2
 8004e3a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d902      	bls.n	8004e4c <HAL_I2S_Init+0x134>
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	2bff      	cmp	r3, #255	@ 0xff
 8004e4a:	d907      	bls.n	8004e5c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e50:	f043 0210 	orr.w	r2, r3, #16
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e08f      	b.n	8004f7c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	ea42 0103 	orr.w	r1, r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004e7a:	f023 030f 	bic.w	r3, r3, #15
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6851      	ldr	r1, [r2, #4]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6892      	ldr	r2, [r2, #8]
 8004e86:	4311      	orrs	r1, r2
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	68d2      	ldr	r2, [r2, #12]
 8004e8c:	4311      	orrs	r1, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6992      	ldr	r2, [r2, #24]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e9e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d161      	bne.n	8004f6c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a38      	ldr	r2, [pc, #224]	@ (8004f8c <HAL_I2S_Init+0x274>)
 8004eac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a37      	ldr	r2, [pc, #220]	@ (8004f90 <HAL_I2S_Init+0x278>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d101      	bne.n	8004ebc <HAL_I2S_Init+0x1a4>
 8004eb8:	4b36      	ldr	r3, [pc, #216]	@ (8004f94 <HAL_I2S_Init+0x27c>)
 8004eba:	e001      	b.n	8004ec0 <HAL_I2S_Init+0x1a8>
 8004ebc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	4932      	ldr	r1, [pc, #200]	@ (8004f90 <HAL_I2S_Init+0x278>)
 8004ec8:	428a      	cmp	r2, r1
 8004eca:	d101      	bne.n	8004ed0 <HAL_I2S_Init+0x1b8>
 8004ecc:	4a31      	ldr	r2, [pc, #196]	@ (8004f94 <HAL_I2S_Init+0x27c>)
 8004ece:	e001      	b.n	8004ed4 <HAL_I2S_Init+0x1bc>
 8004ed0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004ed4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004ed8:	f023 030f 	bic.w	r3, r3, #15
 8004edc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2b      	ldr	r2, [pc, #172]	@ (8004f90 <HAL_I2S_Init+0x278>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d101      	bne.n	8004eec <HAL_I2S_Init+0x1d4>
 8004ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8004f94 <HAL_I2S_Init+0x27c>)
 8004eea:	e001      	b.n	8004ef0 <HAL_I2S_Init+0x1d8>
 8004eec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a25      	ldr	r2, [pc, #148]	@ (8004f90 <HAL_I2S_Init+0x278>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d101      	bne.n	8004f02 <HAL_I2S_Init+0x1ea>
 8004efe:	4b25      	ldr	r3, [pc, #148]	@ (8004f94 <HAL_I2S_Init+0x27c>)
 8004f00:	e001      	b.n	8004f06 <HAL_I2S_Init+0x1ee>
 8004f02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f12:	d003      	beq.n	8004f1c <HAL_I2S_Init+0x204>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d103      	bne.n	8004f24 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004f1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	e001      	b.n	8004f28 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004f24:	2300      	movs	r3, #0
 8004f26:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004f32:	4313      	orrs	r3, r2
 8004f34:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004f46:	4313      	orrs	r3, r2
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	897b      	ldrh	r3, [r7, #10]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004f54:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a0d      	ldr	r2, [pc, #52]	@ (8004f90 <HAL_I2S_Init+0x278>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d101      	bne.n	8004f64 <HAL_I2S_Init+0x24c>
 8004f60:	4b0c      	ldr	r3, [pc, #48]	@ (8004f94 <HAL_I2S_Init+0x27c>)
 8004f62:	e001      	b.n	8004f68 <HAL_I2S_Init+0x250>
 8004f64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f68:	897a      	ldrh	r2, [r7, #10]
 8004f6a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3720      	adds	r7, #32
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	0800508f 	.word	0x0800508f
 8004f88:	cccccccd 	.word	0xcccccccd
 8004f8c:	080051a5 	.word	0x080051a5
 8004f90:	40003800 	.word	0x40003800
 8004f94:	40003400 	.word	0x40003400

08004f98 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe0:	881a      	ldrh	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fec:	1c9a      	adds	r2, r3, #2
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10e      	bne.n	8005028 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005018:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7ff ffb8 	bl	8004f98 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005028:	bf00      	nop
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005042:	b292      	uxth	r2, r2
 8005044:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504a:	1c9a      	adds	r2, r3, #2
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005062:	b29b      	uxth	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10e      	bne.n	8005086 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005076:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff ff93 	bl	8004fac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005086:	bf00      	nop
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b086      	sub	sp, #24
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d13a      	bne.n	8005120 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d109      	bne.n	80050c8 <I2S_IRQHandler+0x3a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050be:	2b40      	cmp	r3, #64	@ 0x40
 80050c0:	d102      	bne.n	80050c8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff ffb4 	bl	8005030 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ce:	2b40      	cmp	r3, #64	@ 0x40
 80050d0:	d126      	bne.n	8005120 <I2S_IRQHandler+0x92>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f003 0320 	and.w	r3, r3, #32
 80050dc:	2b20      	cmp	r3, #32
 80050de:	d11f      	bne.n	8005120 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80050ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80050f0:	2300      	movs	r3, #0
 80050f2:	613b      	str	r3, [r7, #16]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005112:	f043 0202 	orr.w	r2, r3, #2
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff ff50 	bl	8004fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b03      	cmp	r3, #3
 800512a:	d136      	bne.n	800519a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b02      	cmp	r3, #2
 8005134:	d109      	bne.n	800514a <I2S_IRQHandler+0xbc>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005140:	2b80      	cmp	r3, #128	@ 0x80
 8005142:	d102      	bne.n	800514a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff ff45 	bl	8004fd4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f003 0308 	and.w	r3, r3, #8
 8005150:	2b08      	cmp	r3, #8
 8005152:	d122      	bne.n	800519a <I2S_IRQHandler+0x10c>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f003 0320 	and.w	r3, r3, #32
 800515e:	2b20      	cmp	r3, #32
 8005160:	d11b      	bne.n	800519a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005170:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005172:	2300      	movs	r3, #0
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800518c:	f043 0204 	orr.w	r2, r3, #4
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff ff13 	bl	8004fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800519a:	bf00      	nop
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a92      	ldr	r2, [pc, #584]	@ (8005404 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d101      	bne.n	80051c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80051be:	4b92      	ldr	r3, [pc, #584]	@ (8005408 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80051c0:	e001      	b.n	80051c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80051c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a8b      	ldr	r2, [pc, #556]	@ (8005404 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d101      	bne.n	80051e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80051dc:	4b8a      	ldr	r3, [pc, #552]	@ (8005408 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80051de:	e001      	b.n	80051e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80051e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051f0:	d004      	beq.n	80051fc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f040 8099 	bne.w	800532e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b02      	cmp	r3, #2
 8005204:	d107      	bne.n	8005216 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f925 	bl	8005460 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b01      	cmp	r3, #1
 800521e:	d107      	bne.n	8005230 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f9c8 	bl	80055c0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005236:	2b40      	cmp	r3, #64	@ 0x40
 8005238:	d13a      	bne.n	80052b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f003 0320 	and.w	r3, r3, #32
 8005240:	2b00      	cmp	r3, #0
 8005242:	d035      	beq.n	80052b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a6e      	ldr	r2, [pc, #440]	@ (8005404 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d101      	bne.n	8005252 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800524e:	4b6e      	ldr	r3, [pc, #440]	@ (8005408 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005250:	e001      	b.n	8005256 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005252:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4969      	ldr	r1, [pc, #420]	@ (8005404 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800525e:	428b      	cmp	r3, r1
 8005260:	d101      	bne.n	8005266 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005262:	4b69      	ldr	r3, [pc, #420]	@ (8005408 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005264:	e001      	b.n	800526a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005266:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800526a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800526e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800527e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005280:	2300      	movs	r3, #0
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a2:	f043 0202 	orr.w	r2, r3, #2
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff fe88 	bl	8004fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	f040 80c3 	bne.w	8005442 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 80bd 	beq.w	8005442 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80052d6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a49      	ldr	r2, [pc, #292]	@ (8005404 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d101      	bne.n	80052e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80052e2:	4b49      	ldr	r3, [pc, #292]	@ (8005408 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052e4:	e001      	b.n	80052ea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80052e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4944      	ldr	r1, [pc, #272]	@ (8005404 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80052f2:	428b      	cmp	r3, r1
 80052f4:	d101      	bne.n	80052fa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80052f6:	4b44      	ldr	r3, [pc, #272]	@ (8005408 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052f8:	e001      	b.n	80052fe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80052fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052fe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005302:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005304:	2300      	movs	r3, #0
 8005306:	60bb      	str	r3, [r7, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	60bb      	str	r3, [r7, #8]
 8005310:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531e:	f043 0204 	orr.w	r2, r3, #4
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff fe4a 	bl	8004fc0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800532c:	e089      	b.n	8005442 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b02      	cmp	r3, #2
 8005336:	d107      	bne.n	8005348 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f8be 	bl	80054c4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b01      	cmp	r3, #1
 8005350:	d107      	bne.n	8005362 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f8fd 	bl	800555c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005368:	2b40      	cmp	r3, #64	@ 0x40
 800536a:	d12f      	bne.n	80053cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	d02a      	beq.n	80053cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005384:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a1e      	ldr	r2, [pc, #120]	@ (8005404 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d101      	bne.n	8005394 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005390:	4b1d      	ldr	r3, [pc, #116]	@ (8005408 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005392:	e001      	b.n	8005398 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005394:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4919      	ldr	r1, [pc, #100]	@ (8005404 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80053a0:	428b      	cmp	r3, r1
 80053a2:	d101      	bne.n	80053a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80053a4:	4b18      	ldr	r3, [pc, #96]	@ (8005408 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80053a6:	e001      	b.n	80053ac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80053a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80053b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053be:	f043 0202 	orr.w	r2, r3, #2
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7ff fdfa 	bl	8004fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d136      	bne.n	8005444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d031      	beq.n	8005444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a07      	ldr	r2, [pc, #28]	@ (8005404 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d101      	bne.n	80053ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80053ea:	4b07      	ldr	r3, [pc, #28]	@ (8005408 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80053ec:	e001      	b.n	80053f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80053ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4902      	ldr	r1, [pc, #8]	@ (8005404 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80053fa:	428b      	cmp	r3, r1
 80053fc:	d106      	bne.n	800540c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80053fe:	4b02      	ldr	r3, [pc, #8]	@ (8005408 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005400:	e006      	b.n	8005410 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005402:	bf00      	nop
 8005404:	40003800 	.word	0x40003800
 8005408:	40003400 	.word	0x40003400
 800540c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005410:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005414:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005424:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005432:	f043 0204 	orr.w	r2, r3, #4
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff fdc0 	bl	8004fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005440:	e000      	b.n	8005444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005442:	bf00      	nop
}
 8005444:	bf00      	nop
 8005446:	3720      	adds	r7, #32
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546c:	1c99      	adds	r1, r3, #2
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6251      	str	r1, [r2, #36]	@ 0x24
 8005472:	881a      	ldrh	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800547e:	b29b      	uxth	r3, r3
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d113      	bne.n	80054ba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80054a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d106      	bne.n	80054ba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7ff ffc9 	bl	800544c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80054ba:	bf00      	nop
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d0:	1c99      	adds	r1, r3, #2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6251      	str	r1, [r2, #36]	@ 0x24
 80054d6:	8819      	ldrh	r1, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005554 <I2SEx_TxISR_I2SExt+0x90>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d101      	bne.n	80054e6 <I2SEx_TxISR_I2SExt+0x22>
 80054e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005558 <I2SEx_TxISR_I2SExt+0x94>)
 80054e4:	e001      	b.n	80054ea <I2SEx_TxISR_I2SExt+0x26>
 80054e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054ea:	460a      	mov	r2, r1
 80054ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d121      	bne.n	800554a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a12      	ldr	r2, [pc, #72]	@ (8005554 <I2SEx_TxISR_I2SExt+0x90>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d101      	bne.n	8005514 <I2SEx_TxISR_I2SExt+0x50>
 8005510:	4b11      	ldr	r3, [pc, #68]	@ (8005558 <I2SEx_TxISR_I2SExt+0x94>)
 8005512:	e001      	b.n	8005518 <I2SEx_TxISR_I2SExt+0x54>
 8005514:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	490d      	ldr	r1, [pc, #52]	@ (8005554 <I2SEx_TxISR_I2SExt+0x90>)
 8005520:	428b      	cmp	r3, r1
 8005522:	d101      	bne.n	8005528 <I2SEx_TxISR_I2SExt+0x64>
 8005524:	4b0c      	ldr	r3, [pc, #48]	@ (8005558 <I2SEx_TxISR_I2SExt+0x94>)
 8005526:	e001      	b.n	800552c <I2SEx_TxISR_I2SExt+0x68>
 8005528:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800552c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005530:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005536:	b29b      	uxth	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d106      	bne.n	800554a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff ff81 	bl	800544c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	40003800 	.word	0x40003800
 8005558:	40003400 	.word	0x40003400

0800555c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68d8      	ldr	r0, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556e:	1c99      	adds	r1, r3, #2
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005574:	b282      	uxth	r2, r0
 8005576:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800557c:	b29b      	uxth	r3, r3
 800557e:	3b01      	subs	r3, #1
 8005580:	b29a      	uxth	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800558a:	b29b      	uxth	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d113      	bne.n	80055b8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800559e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff ff4a 	bl	800544c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80055b8:	bf00      	nop
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a20      	ldr	r2, [pc, #128]	@ (8005650 <I2SEx_RxISR_I2SExt+0x90>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d101      	bne.n	80055d6 <I2SEx_RxISR_I2SExt+0x16>
 80055d2:	4b20      	ldr	r3, [pc, #128]	@ (8005654 <I2SEx_RxISR_I2SExt+0x94>)
 80055d4:	e001      	b.n	80055da <I2SEx_RxISR_I2SExt+0x1a>
 80055d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055da:	68d8      	ldr	r0, [r3, #12]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e0:	1c99      	adds	r1, r3, #2
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80055e6:	b282      	uxth	r2, r0
 80055e8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d121      	bne.n	8005646 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a12      	ldr	r2, [pc, #72]	@ (8005650 <I2SEx_RxISR_I2SExt+0x90>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d101      	bne.n	8005610 <I2SEx_RxISR_I2SExt+0x50>
 800560c:	4b11      	ldr	r3, [pc, #68]	@ (8005654 <I2SEx_RxISR_I2SExt+0x94>)
 800560e:	e001      	b.n	8005614 <I2SEx_RxISR_I2SExt+0x54>
 8005610:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	490d      	ldr	r1, [pc, #52]	@ (8005650 <I2SEx_RxISR_I2SExt+0x90>)
 800561c:	428b      	cmp	r3, r1
 800561e:	d101      	bne.n	8005624 <I2SEx_RxISR_I2SExt+0x64>
 8005620:	4b0c      	ldr	r3, [pc, #48]	@ (8005654 <I2SEx_RxISR_I2SExt+0x94>)
 8005622:	e001      	b.n	8005628 <I2SEx_RxISR_I2SExt+0x68>
 8005624:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005628:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800562c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005632:	b29b      	uxth	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d106      	bne.n	8005646 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff ff03 	bl	800544c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005646:	bf00      	nop
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	40003800 	.word	0x40003800
 8005654:	40003400 	.word	0x40003400

08005658 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e267      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d075      	beq.n	8005762 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005676:	4b88      	ldr	r3, [pc, #544]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 030c 	and.w	r3, r3, #12
 800567e:	2b04      	cmp	r3, #4
 8005680:	d00c      	beq.n	800569c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005682:	4b85      	ldr	r3, [pc, #532]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800568a:	2b08      	cmp	r3, #8
 800568c:	d112      	bne.n	80056b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800568e:	4b82      	ldr	r3, [pc, #520]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005696:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800569a:	d10b      	bne.n	80056b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800569c:	4b7e      	ldr	r3, [pc, #504]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d05b      	beq.n	8005760 <HAL_RCC_OscConfig+0x108>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d157      	bne.n	8005760 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e242      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056bc:	d106      	bne.n	80056cc <HAL_RCC_OscConfig+0x74>
 80056be:	4b76      	ldr	r3, [pc, #472]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a75      	ldr	r2, [pc, #468]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80056c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	e01d      	b.n	8005708 <HAL_RCC_OscConfig+0xb0>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056d4:	d10c      	bne.n	80056f0 <HAL_RCC_OscConfig+0x98>
 80056d6:	4b70      	ldr	r3, [pc, #448]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a6f      	ldr	r2, [pc, #444]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80056dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	4b6d      	ldr	r3, [pc, #436]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a6c      	ldr	r2, [pc, #432]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80056e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	e00b      	b.n	8005708 <HAL_RCC_OscConfig+0xb0>
 80056f0:	4b69      	ldr	r3, [pc, #420]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a68      	ldr	r2, [pc, #416]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80056f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056fa:	6013      	str	r3, [r2, #0]
 80056fc:	4b66      	ldr	r3, [pc, #408]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a65      	ldr	r2, [pc, #404]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 8005702:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d013      	beq.n	8005738 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005710:	f7fb feec 	bl	80014ec <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005718:	f7fb fee8 	bl	80014ec <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b64      	cmp	r3, #100	@ 0x64
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e207      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572a:	4b5b      	ldr	r3, [pc, #364]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f0      	beq.n	8005718 <HAL_RCC_OscConfig+0xc0>
 8005736:	e014      	b.n	8005762 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005738:	f7fb fed8 	bl	80014ec <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005740:	f7fb fed4 	bl	80014ec <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b64      	cmp	r3, #100	@ 0x64
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e1f3      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005752:	4b51      	ldr	r3, [pc, #324]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f0      	bne.n	8005740 <HAL_RCC_OscConfig+0xe8>
 800575e:	e000      	b.n	8005762 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d063      	beq.n	8005836 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800576e:	4b4a      	ldr	r3, [pc, #296]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 030c 	and.w	r3, r3, #12
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00b      	beq.n	8005792 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800577a:	4b47      	ldr	r3, [pc, #284]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005782:	2b08      	cmp	r3, #8
 8005784:	d11c      	bne.n	80057c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005786:	4b44      	ldr	r3, [pc, #272]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d116      	bne.n	80057c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005792:	4b41      	ldr	r3, [pc, #260]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d005      	beq.n	80057aa <HAL_RCC_OscConfig+0x152>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d001      	beq.n	80057aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e1c7      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4937      	ldr	r1, [pc, #220]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057be:	e03a      	b.n	8005836 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d020      	beq.n	800580a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057c8:	4b34      	ldr	r3, [pc, #208]	@ (800589c <HAL_RCC_OscConfig+0x244>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ce:	f7fb fe8d 	bl	80014ec <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d4:	e008      	b.n	80057e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057d6:	f7fb fe89 	bl	80014ec <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e1a8      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0f0      	beq.n	80057d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f4:	4b28      	ldr	r3, [pc, #160]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	4925      	ldr	r1, [pc, #148]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 8005804:	4313      	orrs	r3, r2
 8005806:	600b      	str	r3, [r1, #0]
 8005808:	e015      	b.n	8005836 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800580a:	4b24      	ldr	r3, [pc, #144]	@ (800589c <HAL_RCC_OscConfig+0x244>)
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005810:	f7fb fe6c 	bl	80014ec <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005816:	e008      	b.n	800582a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005818:	f7fb fe68 	bl	80014ec <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e187      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800582a:	4b1b      	ldr	r3, [pc, #108]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1f0      	bne.n	8005818 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b00      	cmp	r3, #0
 8005840:	d036      	beq.n	80058b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d016      	beq.n	8005878 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800584a:	4b15      	ldr	r3, [pc, #84]	@ (80058a0 <HAL_RCC_OscConfig+0x248>)
 800584c:	2201      	movs	r2, #1
 800584e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005850:	f7fb fe4c 	bl	80014ec <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005858:	f7fb fe48 	bl	80014ec <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e167      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800586a:	4b0b      	ldr	r3, [pc, #44]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 800586c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0f0      	beq.n	8005858 <HAL_RCC_OscConfig+0x200>
 8005876:	e01b      	b.n	80058b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005878:	4b09      	ldr	r3, [pc, #36]	@ (80058a0 <HAL_RCC_OscConfig+0x248>)
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800587e:	f7fb fe35 	bl	80014ec <HAL_GetTick>
 8005882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005884:	e00e      	b.n	80058a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005886:	f7fb fe31 	bl	80014ec <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d907      	bls.n	80058a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e150      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
 8005898:	40023800 	.word	0x40023800
 800589c:	42470000 	.word	0x42470000
 80058a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058a4:	4b88      	ldr	r3, [pc, #544]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80058a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1ea      	bne.n	8005886 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 8097 	beq.w	80059ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058be:	2300      	movs	r3, #0
 80058c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058c2:	4b81      	ldr	r3, [pc, #516]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80058c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10f      	bne.n	80058ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ce:	2300      	movs	r3, #0
 80058d0:	60bb      	str	r3, [r7, #8]
 80058d2:	4b7d      	ldr	r3, [pc, #500]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80058d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d6:	4a7c      	ldr	r2, [pc, #496]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80058d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80058de:	4b7a      	ldr	r3, [pc, #488]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80058e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058e6:	60bb      	str	r3, [r7, #8]
 80058e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058ea:	2301      	movs	r3, #1
 80058ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ee:	4b77      	ldr	r3, [pc, #476]	@ (8005acc <HAL_RCC_OscConfig+0x474>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d118      	bne.n	800592c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058fa:	4b74      	ldr	r3, [pc, #464]	@ (8005acc <HAL_RCC_OscConfig+0x474>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a73      	ldr	r2, [pc, #460]	@ (8005acc <HAL_RCC_OscConfig+0x474>)
 8005900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005906:	f7fb fdf1 	bl	80014ec <HAL_GetTick>
 800590a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800590c:	e008      	b.n	8005920 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800590e:	f7fb fded 	bl	80014ec <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e10c      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005920:	4b6a      	ldr	r3, [pc, #424]	@ (8005acc <HAL_RCC_OscConfig+0x474>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0f0      	beq.n	800590e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d106      	bne.n	8005942 <HAL_RCC_OscConfig+0x2ea>
 8005934:	4b64      	ldr	r3, [pc, #400]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005938:	4a63      	ldr	r2, [pc, #396]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005940:	e01c      	b.n	800597c <HAL_RCC_OscConfig+0x324>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	2b05      	cmp	r3, #5
 8005948:	d10c      	bne.n	8005964 <HAL_RCC_OscConfig+0x30c>
 800594a:	4b5f      	ldr	r3, [pc, #380]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 800594c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594e:	4a5e      	ldr	r2, [pc, #376]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005950:	f043 0304 	orr.w	r3, r3, #4
 8005954:	6713      	str	r3, [r2, #112]	@ 0x70
 8005956:	4b5c      	ldr	r3, [pc, #368]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800595a:	4a5b      	ldr	r2, [pc, #364]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 800595c:	f043 0301 	orr.w	r3, r3, #1
 8005960:	6713      	str	r3, [r2, #112]	@ 0x70
 8005962:	e00b      	b.n	800597c <HAL_RCC_OscConfig+0x324>
 8005964:	4b58      	ldr	r3, [pc, #352]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005968:	4a57      	ldr	r2, [pc, #348]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 800596a:	f023 0301 	bic.w	r3, r3, #1
 800596e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005970:	4b55      	ldr	r3, [pc, #340]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005974:	4a54      	ldr	r2, [pc, #336]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005976:	f023 0304 	bic.w	r3, r3, #4
 800597a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d015      	beq.n	80059b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005984:	f7fb fdb2 	bl	80014ec <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800598a:	e00a      	b.n	80059a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800598c:	f7fb fdae 	bl	80014ec <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800599a:	4293      	cmp	r3, r2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e0cb      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059a2:	4b49      	ldr	r3, [pc, #292]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80059a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0ee      	beq.n	800598c <HAL_RCC_OscConfig+0x334>
 80059ae:	e014      	b.n	80059da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059b0:	f7fb fd9c 	bl	80014ec <HAL_GetTick>
 80059b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059b6:	e00a      	b.n	80059ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b8:	f7fb fd98 	bl	80014ec <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e0b5      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059ce:	4b3e      	ldr	r3, [pc, #248]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80059d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1ee      	bne.n	80059b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059da:	7dfb      	ldrb	r3, [r7, #23]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d105      	bne.n	80059ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059e0:	4b39      	ldr	r3, [pc, #228]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80059e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e4:	4a38      	ldr	r2, [pc, #224]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80059e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 80a1 	beq.w	8005b38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059f6:	4b34      	ldr	r3, [pc, #208]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 030c 	and.w	r3, r3, #12
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d05c      	beq.n	8005abc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d141      	bne.n	8005a8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a0a:	4b31      	ldr	r3, [pc, #196]	@ (8005ad0 <HAL_RCC_OscConfig+0x478>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a10:	f7fb fd6c 	bl	80014ec <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a18:	f7fb fd68 	bl	80014ec <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e087      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a2a:	4b27      	ldr	r3, [pc, #156]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f0      	bne.n	8005a18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69da      	ldr	r2, [r3, #28]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a44:	019b      	lsls	r3, r3, #6
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	041b      	lsls	r3, r3, #16
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a58:	061b      	lsls	r3, r3, #24
 8005a5a:	491b      	ldr	r1, [pc, #108]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a60:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad0 <HAL_RCC_OscConfig+0x478>)
 8005a62:	2201      	movs	r2, #1
 8005a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a66:	f7fb fd41 	bl	80014ec <HAL_GetTick>
 8005a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a6c:	e008      	b.n	8005a80 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a6e:	f7fb fd3d 	bl	80014ec <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e05c      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a80:	4b11      	ldr	r3, [pc, #68]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0f0      	beq.n	8005a6e <HAL_RCC_OscConfig+0x416>
 8005a8c:	e054      	b.n	8005b38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a8e:	4b10      	ldr	r3, [pc, #64]	@ (8005ad0 <HAL_RCC_OscConfig+0x478>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a94:	f7fb fd2a 	bl	80014ec <HAL_GetTick>
 8005a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a9c:	f7fb fd26 	bl	80014ec <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e045      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aae:	4b06      	ldr	r3, [pc, #24]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1f0      	bne.n	8005a9c <HAL_RCC_OscConfig+0x444>
 8005aba:	e03d      	b.n	8005b38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d107      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e038      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	40007000 	.word	0x40007000
 8005ad0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8005b44 <HAL_RCC_OscConfig+0x4ec>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d028      	beq.n	8005b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d121      	bne.n	8005b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d11a      	bne.n	8005b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005b04:	4013      	ands	r3, r2
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d111      	bne.n	8005b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1a:	085b      	lsrs	r3, r3, #1
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d107      	bne.n	8005b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d001      	beq.n	8005b38 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e000      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	40023800 	.word	0x40023800

08005b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e0cc      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b5c:	4b68      	ldr	r3, [pc, #416]	@ (8005d00 <HAL_RCC_ClockConfig+0x1b8>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d90c      	bls.n	8005b84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b6a:	4b65      	ldr	r3, [pc, #404]	@ (8005d00 <HAL_RCC_ClockConfig+0x1b8>)
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b72:	4b63      	ldr	r3, [pc, #396]	@ (8005d00 <HAL_RCC_ClockConfig+0x1b8>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d001      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e0b8      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d020      	beq.n	8005bd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b9c:	4b59      	ldr	r3, [pc, #356]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	4a58      	ldr	r2, [pc, #352]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ba6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bb4:	4b53      	ldr	r3, [pc, #332]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	4a52      	ldr	r2, [pc, #328]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005bba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005bbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bc0:	4b50      	ldr	r3, [pc, #320]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	494d      	ldr	r1, [pc, #308]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d044      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d107      	bne.n	8005bf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005be6:	4b47      	ldr	r3, [pc, #284]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d119      	bne.n	8005c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e07f      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d003      	beq.n	8005c06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d107      	bne.n	8005c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c06:	4b3f      	ldr	r3, [pc, #252]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e06f      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c16:	4b3b      	ldr	r3, [pc, #236]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e067      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c26:	4b37      	ldr	r3, [pc, #220]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f023 0203 	bic.w	r2, r3, #3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	4934      	ldr	r1, [pc, #208]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c38:	f7fb fc58 	bl	80014ec <HAL_GetTick>
 8005c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c3e:	e00a      	b.n	8005c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c40:	f7fb fc54 	bl	80014ec <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e04f      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c56:	4b2b      	ldr	r3, [pc, #172]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 020c 	and.w	r2, r3, #12
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d1eb      	bne.n	8005c40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c68:	4b25      	ldr	r3, [pc, #148]	@ (8005d00 <HAL_RCC_ClockConfig+0x1b8>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d20c      	bcs.n	8005c90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c76:	4b22      	ldr	r3, [pc, #136]	@ (8005d00 <HAL_RCC_ClockConfig+0x1b8>)
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c7e:	4b20      	ldr	r3, [pc, #128]	@ (8005d00 <HAL_RCC_ClockConfig+0x1b8>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d001      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e032      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c9c:	4b19      	ldr	r3, [pc, #100]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	4916      	ldr	r1, [pc, #88]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0308 	and.w	r3, r3, #8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d009      	beq.n	8005cce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cba:	4b12      	ldr	r3, [pc, #72]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	490e      	ldr	r1, [pc, #56]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005cce:	f000 f821 	bl	8005d14 <HAL_RCC_GetSysClockFreq>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	091b      	lsrs	r3, r3, #4
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	490a      	ldr	r1, [pc, #40]	@ (8005d08 <HAL_RCC_ClockConfig+0x1c0>)
 8005ce0:	5ccb      	ldrb	r3, [r1, r3]
 8005ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce6:	4a09      	ldr	r2, [pc, #36]	@ (8005d0c <HAL_RCC_ClockConfig+0x1c4>)
 8005ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005cea:	4b09      	ldr	r3, [pc, #36]	@ (8005d10 <HAL_RCC_ClockConfig+0x1c8>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fb fbb8 	bl	8001464 <HAL_InitTick>

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	40023c00 	.word	0x40023c00
 8005d04:	40023800 	.word	0x40023800
 8005d08:	0800b60c 	.word	0x0800b60c
 8005d0c:	20000000 	.word	0x20000000
 8005d10:	20000004 	.word	0x20000004

08005d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d18:	b094      	sub	sp, #80	@ 0x50
 8005d1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d2c:	4b79      	ldr	r3, [pc, #484]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 030c 	and.w	r3, r3, #12
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d00d      	beq.n	8005d54 <HAL_RCC_GetSysClockFreq+0x40>
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	f200 80e1 	bhi.w	8005f00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <HAL_RCC_GetSysClockFreq+0x34>
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d003      	beq.n	8005d4e <HAL_RCC_GetSysClockFreq+0x3a>
 8005d46:	e0db      	b.n	8005f00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d48:	4b73      	ldr	r3, [pc, #460]	@ (8005f18 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d4c:	e0db      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d4e:	4b73      	ldr	r3, [pc, #460]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0x208>)
 8005d50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d52:	e0d8      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d54:	4b6f      	ldr	r3, [pc, #444]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d5e:	4b6d      	ldr	r3, [pc, #436]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d063      	beq.n	8005e32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	099b      	lsrs	r3, r3, #6
 8005d70:	2200      	movs	r2, #0
 8005d72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d7e:	2300      	movs	r3, #0
 8005d80:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005d86:	4622      	mov	r2, r4
 8005d88:	462b      	mov	r3, r5
 8005d8a:	f04f 0000 	mov.w	r0, #0
 8005d8e:	f04f 0100 	mov.w	r1, #0
 8005d92:	0159      	lsls	r1, r3, #5
 8005d94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d98:	0150      	lsls	r0, r2, #5
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4621      	mov	r1, r4
 8005da0:	1a51      	subs	r1, r2, r1
 8005da2:	6139      	str	r1, [r7, #16]
 8005da4:	4629      	mov	r1, r5
 8005da6:	eb63 0301 	sbc.w	r3, r3, r1
 8005daa:	617b      	str	r3, [r7, #20]
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	f04f 0300 	mov.w	r3, #0
 8005db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005db8:	4659      	mov	r1, fp
 8005dba:	018b      	lsls	r3, r1, #6
 8005dbc:	4651      	mov	r1, sl
 8005dbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005dc2:	4651      	mov	r1, sl
 8005dc4:	018a      	lsls	r2, r1, #6
 8005dc6:	4651      	mov	r1, sl
 8005dc8:	ebb2 0801 	subs.w	r8, r2, r1
 8005dcc:	4659      	mov	r1, fp
 8005dce:	eb63 0901 	sbc.w	r9, r3, r1
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	f04f 0300 	mov.w	r3, #0
 8005dda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005de2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005de6:	4690      	mov	r8, r2
 8005de8:	4699      	mov	r9, r3
 8005dea:	4623      	mov	r3, r4
 8005dec:	eb18 0303 	adds.w	r3, r8, r3
 8005df0:	60bb      	str	r3, [r7, #8]
 8005df2:	462b      	mov	r3, r5
 8005df4:	eb49 0303 	adc.w	r3, r9, r3
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	f04f 0200 	mov.w	r2, #0
 8005dfe:	f04f 0300 	mov.w	r3, #0
 8005e02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e06:	4629      	mov	r1, r5
 8005e08:	024b      	lsls	r3, r1, #9
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e10:	4621      	mov	r1, r4
 8005e12:	024a      	lsls	r2, r1, #9
 8005e14:	4610      	mov	r0, r2
 8005e16:	4619      	mov	r1, r3
 8005e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e24:	f7fa f9d0 	bl	80001c8 <__aeabi_uldivmod>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e30:	e058      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e32:	4b38      	ldr	r3, [pc, #224]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	099b      	lsrs	r3, r3, #6
 8005e38:	2200      	movs	r2, #0
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	4611      	mov	r1, r2
 8005e3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e42:	623b      	str	r3, [r7, #32]
 8005e44:	2300      	movs	r3, #0
 8005e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e4c:	4642      	mov	r2, r8
 8005e4e:	464b      	mov	r3, r9
 8005e50:	f04f 0000 	mov.w	r0, #0
 8005e54:	f04f 0100 	mov.w	r1, #0
 8005e58:	0159      	lsls	r1, r3, #5
 8005e5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e5e:	0150      	lsls	r0, r2, #5
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4641      	mov	r1, r8
 8005e66:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e84:	ebb2 040a 	subs.w	r4, r2, sl
 8005e88:	eb63 050b 	sbc.w	r5, r3, fp
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	00eb      	lsls	r3, r5, #3
 8005e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e9a:	00e2      	lsls	r2, r4, #3
 8005e9c:	4614      	mov	r4, r2
 8005e9e:	461d      	mov	r5, r3
 8005ea0:	4643      	mov	r3, r8
 8005ea2:	18e3      	adds	r3, r4, r3
 8005ea4:	603b      	str	r3, [r7, #0]
 8005ea6:	464b      	mov	r3, r9
 8005ea8:	eb45 0303 	adc.w	r3, r5, r3
 8005eac:	607b      	str	r3, [r7, #4]
 8005eae:	f04f 0200 	mov.w	r2, #0
 8005eb2:	f04f 0300 	mov.w	r3, #0
 8005eb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005eba:	4629      	mov	r1, r5
 8005ebc:	028b      	lsls	r3, r1, #10
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	028a      	lsls	r2, r1, #10
 8005ec8:	4610      	mov	r0, r2
 8005eca:	4619      	mov	r1, r3
 8005ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ece:	2200      	movs	r2, #0
 8005ed0:	61bb      	str	r3, [r7, #24]
 8005ed2:	61fa      	str	r2, [r7, #28]
 8005ed4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ed8:	f7fa f976 	bl	80001c8 <__aeabi_uldivmod>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	0c1b      	lsrs	r3, r3, #16
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	3301      	adds	r3, #1
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005ef4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005efe:	e002      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f00:	4b05      	ldr	r3, [pc, #20]	@ (8005f18 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3750      	adds	r7, #80	@ 0x50
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f12:	bf00      	nop
 8005f14:	40023800 	.word	0x40023800
 8005f18:	00f42400 	.word	0x00f42400
 8005f1c:	007a1200 	.word	0x007a1200

08005f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f24:	4b03      	ldr	r3, [pc, #12]	@ (8005f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f26:	681b      	ldr	r3, [r3, #0]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	20000000 	.word	0x20000000

08005f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f3c:	f7ff fff0 	bl	8005f20 <HAL_RCC_GetHCLKFreq>
 8005f40:	4602      	mov	r2, r0
 8005f42:	4b05      	ldr	r3, [pc, #20]	@ (8005f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	0a9b      	lsrs	r3, r3, #10
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	4903      	ldr	r1, [pc, #12]	@ (8005f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f4e:	5ccb      	ldrb	r3, [r1, r3]
 8005f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	0800b61c 	.word	0x0800b61c

08005f60 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d105      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d035      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f88:	4b62      	ldr	r3, [pc, #392]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f8e:	f7fb faad 	bl	80014ec <HAL_GetTick>
 8005f92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f94:	e008      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f96:	f7fb faa9 	bl	80014ec <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d901      	bls.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e0b0      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fa8:	4b5b      	ldr	r3, [pc, #364]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1f0      	bne.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	019a      	lsls	r2, r3, #6
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	071b      	lsls	r3, r3, #28
 8005fc0:	4955      	ldr	r1, [pc, #340]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005fc8:	4b52      	ldr	r3, [pc, #328]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005fca:	2201      	movs	r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005fce:	f7fb fa8d 	bl	80014ec <HAL_GetTick>
 8005fd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005fd6:	f7fb fa89 	bl	80014ec <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e090      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fe8:	4b4b      	ldr	r3, [pc, #300]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0f0      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 8083 	beq.w	8006108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006002:	2300      	movs	r3, #0
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	4b44      	ldr	r3, [pc, #272]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600a:	4a43      	ldr	r2, [pc, #268]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800600c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006010:	6413      	str	r3, [r2, #64]	@ 0x40
 8006012:	4b41      	ldr	r3, [pc, #260]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800601e:	4b3f      	ldr	r3, [pc, #252]	@ (800611c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a3e      	ldr	r2, [pc, #248]	@ (800611c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006028:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800602a:	f7fb fa5f 	bl	80014ec <HAL_GetTick>
 800602e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006030:	e008      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006032:	f7fb fa5b 	bl	80014ec <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b02      	cmp	r3, #2
 800603e:	d901      	bls.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e062      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006044:	4b35      	ldr	r3, [pc, #212]	@ (800611c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0f0      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006050:	4b31      	ldr	r3, [pc, #196]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006054:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006058:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d02f      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	429a      	cmp	r2, r3
 800606c:	d028      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800606e:	4b2a      	ldr	r3, [pc, #168]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006076:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006078:	4b29      	ldr	r3, [pc, #164]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800607a:	2201      	movs	r2, #1
 800607c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800607e:	4b28      	ldr	r3, [pc, #160]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006080:	2200      	movs	r2, #0
 8006082:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006084:	4a24      	ldr	r2, [pc, #144]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800608a:	4b23      	ldr	r3, [pc, #140]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800608c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b01      	cmp	r3, #1
 8006094:	d114      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006096:	f7fb fa29 	bl	80014ec <HAL_GetTick>
 800609a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800609c:	e00a      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800609e:	f7fb fa25 	bl	80014ec <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e02a      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060b4:	4b18      	ldr	r3, [pc, #96]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d0ee      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060cc:	d10d      	bne.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80060ce:	4b12      	ldr	r3, [pc, #72]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80060de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060e2:	490d      	ldr	r1, [pc, #52]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	608b      	str	r3, [r1, #8]
 80060e8:	e005      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80060ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	4a0a      	ldr	r2, [pc, #40]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060f0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80060f4:	6093      	str	r3, [r2, #8]
 80060f6:	4b08      	ldr	r3, [pc, #32]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006102:	4905      	ldr	r1, [pc, #20]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006104:	4313      	orrs	r3, r2
 8006106:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	42470068 	.word	0x42470068
 8006118:	40023800 	.word	0x40023800
 800611c:	40007000 	.word	0x40007000
 8006120:	42470e40 	.word	0x42470e40

08006124 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006138:	2300      	movs	r3, #0
 800613a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d13f      	bne.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006142:	4b24      	ldr	r3, [pc, #144]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d006      	beq.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006158:	d12f      	bne.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800615a:	4b1f      	ldr	r3, [pc, #124]	@ (80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800615c:	617b      	str	r3, [r7, #20]
          break;
 800615e:	e02f      	b.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006160:	4b1c      	ldr	r3, [pc, #112]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006168:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800616c:	d108      	bne.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800616e:	4b19      	ldr	r3, [pc, #100]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006176:	4a19      	ldr	r2, [pc, #100]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006178:	fbb2 f3f3 	udiv	r3, r2, r3
 800617c:	613b      	str	r3, [r7, #16]
 800617e:	e007      	b.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006180:	4b14      	ldr	r3, [pc, #80]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006188:	4a15      	ldr	r2, [pc, #84]	@ (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800618a:	fbb2 f3f3 	udiv	r3, r2, r3
 800618e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006190:	4b10      	ldr	r3, [pc, #64]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006192:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006196:	099b      	lsrs	r3, r3, #6
 8006198:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	fb02 f303 	mul.w	r3, r2, r3
 80061a2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80061a4:	4b0b      	ldr	r3, [pc, #44]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80061a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061aa:	0f1b      	lsrs	r3, r3, #28
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b6:	617b      	str	r3, [r7, #20]
          break;
 80061b8:	e002      	b.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]
          break;
 80061be:	bf00      	nop
        }
      }
      break;
 80061c0:	e000      	b.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80061c2:	bf00      	nop
    }
  }
  return frequency;
 80061c4:	697b      	ldr	r3, [r7, #20]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	371c      	adds	r7, #28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	40023800 	.word	0x40023800
 80061d8:	00bb8000 	.word	0x00bb8000
 80061dc:	007a1200 	.word	0x007a1200
 80061e0:	00f42400 	.word	0x00f42400

080061e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e07b      	b.n	80062ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d108      	bne.n	8006210 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006206:	d009      	beq.n	800621c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	61da      	str	r2, [r3, #28]
 800620e:	e005      	b.n	800621c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d106      	bne.n	800623c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7fa ff6c 	bl	8001114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006252:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006264:	431a      	orrs	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	431a      	orrs	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800628c:	431a      	orrs	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a0:	ea42 0103 	orr.w	r1, r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	0c1b      	lsrs	r3, r3, #16
 80062ba:	f003 0104 	and.w	r1, r3, #4
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c2:	f003 0210 	and.w	r2, r3, #16
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69da      	ldr	r2, [r3, #28]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b088      	sub	sp, #32
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	603b      	str	r3, [r7, #0]
 8006302:	4613      	mov	r3, r2
 8006304:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006306:	f7fb f8f1 	bl	80014ec <HAL_GetTick>
 800630a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800630c:	88fb      	ldrh	r3, [r7, #6]
 800630e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b01      	cmp	r3, #1
 800631a:	d001      	beq.n	8006320 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800631c:	2302      	movs	r3, #2
 800631e:	e12a      	b.n	8006576 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <HAL_SPI_Transmit+0x36>
 8006326:	88fb      	ldrh	r3, [r7, #6]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e122      	b.n	8006576 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006336:	2b01      	cmp	r3, #1
 8006338:	d101      	bne.n	800633e <HAL_SPI_Transmit+0x48>
 800633a:	2302      	movs	r3, #2
 800633c:	e11b      	b.n	8006576 <HAL_SPI_Transmit+0x280>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2203      	movs	r2, #3
 800634a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	88fa      	ldrh	r2, [r7, #6]
 800635e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	88fa      	ldrh	r2, [r7, #6]
 8006364:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800638c:	d10f      	bne.n	80063ae <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800639c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b8:	2b40      	cmp	r3, #64	@ 0x40
 80063ba:	d007      	beq.n	80063cc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063d4:	d152      	bne.n	800647c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <HAL_SPI_Transmit+0xee>
 80063de:	8b7b      	ldrh	r3, [r7, #26]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d145      	bne.n	8006470 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e8:	881a      	ldrh	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f4:	1c9a      	adds	r2, r3, #2
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006408:	e032      	b.n	8006470 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b02      	cmp	r3, #2
 8006416:	d112      	bne.n	800643e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800641c:	881a      	ldrh	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006428:	1c9a      	adds	r2, r3, #2
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006432:	b29b      	uxth	r3, r3
 8006434:	3b01      	subs	r3, #1
 8006436:	b29a      	uxth	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800643c:	e018      	b.n	8006470 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800643e:	f7fb f855 	bl	80014ec <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	429a      	cmp	r2, r3
 800644c:	d803      	bhi.n	8006456 <HAL_SPI_Transmit+0x160>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006454:	d102      	bne.n	800645c <HAL_SPI_Transmit+0x166>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d109      	bne.n	8006470 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e082      	b.n	8006576 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1c7      	bne.n	800640a <HAL_SPI_Transmit+0x114>
 800647a:	e053      	b.n	8006524 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <HAL_SPI_Transmit+0x194>
 8006484:	8b7b      	ldrh	r3, [r7, #26]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d147      	bne.n	800651a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	330c      	adds	r3, #12
 8006494:	7812      	ldrb	r2, [r2, #0]
 8006496:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80064b0:	e033      	b.n	800651a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d113      	bne.n	80064e8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	330c      	adds	r3, #12
 80064ca:	7812      	ldrb	r2, [r2, #0]
 80064cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064dc:	b29b      	uxth	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80064e6:	e018      	b.n	800651a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064e8:	f7fb f800 	bl	80014ec <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d803      	bhi.n	8006500 <HAL_SPI_Transmit+0x20a>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fe:	d102      	bne.n	8006506 <HAL_SPI_Transmit+0x210>
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d109      	bne.n	800651a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e02d      	b.n	8006576 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800651e:	b29b      	uxth	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1c6      	bne.n	80064b2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006524:	69fa      	ldr	r2, [r7, #28]
 8006526:	6839      	ldr	r1, [r7, #0]
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 f9c3 	bl	80068b4 <SPI_EndRxTxTransaction>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2220      	movs	r2, #32
 8006538:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10a      	bne.n	8006558 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006542:	2300      	movs	r3, #0
 8006544:	617b      	str	r3, [r7, #20]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e000      	b.n	8006576 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006574:	2300      	movs	r3, #0
  }
}
 8006576:	4618      	mov	r0, r3
 8006578:	3720      	adds	r7, #32
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
	...

08006580 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10e      	bne.n	80065c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d009      	beq.n	80065c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d004      	beq.n	80065c0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	4798      	blx	r3
    return;
 80065be:	e0ce      	b.n	800675e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d009      	beq.n	80065de <HAL_SPI_IRQHandler+0x5e>
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d004      	beq.n	80065de <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	4798      	blx	r3
    return;
 80065dc:	e0bf      	b.n	800675e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	f003 0320 	and.w	r3, r3, #32
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10a      	bne.n	80065fe <HAL_SPI_IRQHandler+0x7e>
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d105      	bne.n	80065fe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 80b0 	beq.w	800675e <HAL_SPI_IRQHandler+0x1de>
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 80aa 	beq.w	800675e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	d023      	beq.n	800665c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b03      	cmp	r3, #3
 800661e:	d011      	beq.n	8006644 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006624:	f043 0204 	orr.w	r2, r3, #4
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	617b      	str	r3, [r7, #20]
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	e00b      	b.n	800665c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006644:	2300      	movs	r3, #0
 8006646:	613b      	str	r3, [r7, #16]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	693b      	ldr	r3, [r7, #16]
        return;
 800665a:	e080      	b.n	800675e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b00      	cmp	r3, #0
 8006664:	d014      	beq.n	8006690 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800666a:	f043 0201 	orr.w	r2, r3, #1
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006672:	2300      	movs	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00c      	beq.n	80066b4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800669e:	f043 0208 	orr.w	r2, r3, #8
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80066a6:	2300      	movs	r3, #0
 80066a8:	60bb      	str	r3, [r7, #8]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	60bb      	str	r3, [r7, #8]
 80066b2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d04f      	beq.n	800675c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80066ca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d104      	bne.n	80066e8 <HAL_SPI_IRQHandler+0x168>
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d034      	beq.n	8006752 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0203 	bic.w	r2, r2, #3
 80066f6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d011      	beq.n	8006724 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006704:	4a17      	ldr	r2, [pc, #92]	@ (8006764 <HAL_SPI_IRQHandler+0x1e4>)
 8006706:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800670c:	4618      	mov	r0, r3
 800670e:	f7fb fc77 	bl	8002000 <HAL_DMA_Abort_IT>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006728:	2b00      	cmp	r3, #0
 800672a:	d016      	beq.n	800675a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006730:	4a0c      	ldr	r2, [pc, #48]	@ (8006764 <HAL_SPI_IRQHandler+0x1e4>)
 8006732:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006738:	4618      	mov	r0, r3
 800673a:	f7fb fc61 	bl	8002000 <HAL_DMA_Abort_IT>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00a      	beq.n	800675a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006748:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006750:	e003      	b.n	800675a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f808 	bl	8006768 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006758:	e000      	b.n	800675c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800675a:	bf00      	nop
    return;
 800675c:	bf00      	nop
  }
}
 800675e:	3720      	adds	r7, #32
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	0800677d 	.word	0x0800677d

08006768 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006788:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f7ff ffe6 	bl	8006768 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800679c:	bf00      	nop
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	603b      	str	r3, [r7, #0]
 80067b0:	4613      	mov	r3, r2
 80067b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067b4:	f7fa fe9a 	bl	80014ec <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067bc:	1a9b      	subs	r3, r3, r2
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	4413      	add	r3, r2
 80067c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067c4:	f7fa fe92 	bl	80014ec <HAL_GetTick>
 80067c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067ca:	4b39      	ldr	r3, [pc, #228]	@ (80068b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	015b      	lsls	r3, r3, #5
 80067d0:	0d1b      	lsrs	r3, r3, #20
 80067d2:	69fa      	ldr	r2, [r7, #28]
 80067d4:	fb02 f303 	mul.w	r3, r2, r3
 80067d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067da:	e054      	b.n	8006886 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e2:	d050      	beq.n	8006886 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067e4:	f7fa fe82 	bl	80014ec <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	69fa      	ldr	r2, [r7, #28]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d902      	bls.n	80067fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d13d      	bne.n	8006876 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006808:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006812:	d111      	bne.n	8006838 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800681c:	d004      	beq.n	8006828 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006826:	d107      	bne.n	8006838 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006836:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006840:	d10f      	bne.n	8006862 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006860:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e017      	b.n	80068a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	3b01      	subs	r3, #1
 8006884:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	4013      	ands	r3, r2
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	429a      	cmp	r2, r3
 8006894:	bf0c      	ite	eq
 8006896:	2301      	moveq	r3, #1
 8006898:	2300      	movne	r3, #0
 800689a:	b2db      	uxtb	r3, r3
 800689c:	461a      	mov	r2, r3
 800689e:	79fb      	ldrb	r3, [r7, #7]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d19b      	bne.n	80067dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3720      	adds	r7, #32
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20000000 	.word	0x20000000

080068b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2201      	movs	r2, #1
 80068c8:	2102      	movs	r1, #2
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f7ff ff6a 	bl	80067a4 <SPI_WaitFlagStateUntilTimeout>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d007      	beq.n	80068e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068da:	f043 0220 	orr.w	r2, r3, #32
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e032      	b.n	800694c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80068e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006954 <SPI_EndRxTxTransaction+0xa0>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006958 <SPI_EndRxTxTransaction+0xa4>)
 80068ec:	fba2 2303 	umull	r2, r3, r2, r3
 80068f0:	0d5b      	lsrs	r3, r3, #21
 80068f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80068f6:	fb02 f303 	mul.w	r3, r2, r3
 80068fa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006904:	d112      	bne.n	800692c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2200      	movs	r2, #0
 800690e:	2180      	movs	r1, #128	@ 0x80
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f7ff ff47 	bl	80067a4 <SPI_WaitFlagStateUntilTimeout>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d016      	beq.n	800694a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006920:	f043 0220 	orr.w	r2, r3, #32
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e00f      	b.n	800694c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00a      	beq.n	8006948 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	3b01      	subs	r3, #1
 8006936:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006942:	2b80      	cmp	r3, #128	@ 0x80
 8006944:	d0f2      	beq.n	800692c <SPI_EndRxTxTransaction+0x78>
 8006946:	e000      	b.n	800694a <SPI_EndRxTxTransaction+0x96>
        break;
 8006948:	bf00      	nop
  }

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3718      	adds	r7, #24
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	20000000 	.word	0x20000000
 8006958:	165e9f81 	.word	0x165e9f81

0800695c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e041      	b.n	80069f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d106      	bne.n	8006988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7fa fc16 	bl	80011b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3304      	adds	r3, #4
 8006998:	4619      	mov	r1, r3
 800699a:	4610      	mov	r0, r2
 800699c:	f000 fbe6 	bl	800716c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b082      	sub	sp, #8
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e041      	b.n	8006a90 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d106      	bne.n	8006a26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f839 	bl	8006a98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2202      	movs	r2, #2
 8006a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	3304      	adds	r3, #4
 8006a36:	4619      	mov	r1, r3
 8006a38:	4610      	mov	r0, r2
 8006a3a:	f000 fb97 	bl	800716c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b0c      	cmp	r3, #12
 8006abe:	d841      	bhi.n	8006b44 <HAL_TIM_PWM_Stop_IT+0x98>
 8006ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac8 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8006ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac6:	bf00      	nop
 8006ac8:	08006afd 	.word	0x08006afd
 8006acc:	08006b45 	.word	0x08006b45
 8006ad0:	08006b45 	.word	0x08006b45
 8006ad4:	08006b45 	.word	0x08006b45
 8006ad8:	08006b0f 	.word	0x08006b0f
 8006adc:	08006b45 	.word	0x08006b45
 8006ae0:	08006b45 	.word	0x08006b45
 8006ae4:	08006b45 	.word	0x08006b45
 8006ae8:	08006b21 	.word	0x08006b21
 8006aec:	08006b45 	.word	0x08006b45
 8006af0:	08006b45 	.word	0x08006b45
 8006af4:	08006b45 	.word	0x08006b45
 8006af8:	08006b33 	.word	0x08006b33
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68da      	ldr	r2, [r3, #12]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0202 	bic.w	r2, r2, #2
 8006b0a:	60da      	str	r2, [r3, #12]
      break;
 8006b0c:	e01d      	b.n	8006b4a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 0204 	bic.w	r2, r2, #4
 8006b1c:	60da      	str	r2, [r3, #12]
      break;
 8006b1e:	e014      	b.n	8006b4a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0208 	bic.w	r2, r2, #8
 8006b2e:	60da      	str	r2, [r3, #12]
      break;
 8006b30:	e00b      	b.n	8006b4a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68da      	ldr	r2, [r3, #12]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 0210 	bic.w	r2, r2, #16
 8006b40:	60da      	str	r2, [r3, #12]
      break;
 8006b42:	e002      	b.n	8006b4a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	73fb      	strb	r3, [r7, #15]
      break;
 8006b48:	bf00      	nop
  }

  if (status == HAL_OK)
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d161      	bne.n	8006c14 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2200      	movs	r2, #0
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 fdfd 	bl	8007758 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a2f      	ldr	r2, [pc, #188]	@ (8006c20 <HAL_TIM_PWM_Stop_IT+0x174>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d004      	beq.n	8006b72 <HAL_TIM_PWM_Stop_IT+0xc6>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a2d      	ldr	r2, [pc, #180]	@ (8006c24 <HAL_TIM_PWM_Stop_IT+0x178>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d101      	bne.n	8006b76 <HAL_TIM_PWM_Stop_IT+0xca>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e000      	b.n	8006b78 <HAL_TIM_PWM_Stop_IT+0xcc>
 8006b76:	2300      	movs	r3, #0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d017      	beq.n	8006bac <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6a1a      	ldr	r2, [r3, #32]
 8006b82:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006b86:	4013      	ands	r3, r2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10f      	bne.n	8006bac <HAL_TIM_PWM_Stop_IT+0x100>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6a1a      	ldr	r2, [r3, #32]
 8006b92:	f240 4344 	movw	r3, #1092	@ 0x444
 8006b96:	4013      	ands	r3, r2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d107      	bne.n	8006bac <HAL_TIM_PWM_Stop_IT+0x100>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006baa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6a1a      	ldr	r2, [r3, #32]
 8006bb2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10f      	bne.n	8006bdc <HAL_TIM_PWM_Stop_IT+0x130>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6a1a      	ldr	r2, [r3, #32]
 8006bc2:	f240 4344 	movw	r3, #1092	@ 0x444
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d107      	bne.n	8006bdc <HAL_TIM_PWM_Stop_IT+0x130>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0201 	bic.w	r2, r2, #1
 8006bda:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d104      	bne.n	8006bec <HAL_TIM_PWM_Stop_IT+0x140>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bea:	e013      	b.n	8006c14 <HAL_TIM_PWM_Stop_IT+0x168>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	d104      	bne.n	8006bfc <HAL_TIM_PWM_Stop_IT+0x150>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bfa:	e00b      	b.n	8006c14 <HAL_TIM_PWM_Stop_IT+0x168>
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2b08      	cmp	r3, #8
 8006c00:	d104      	bne.n	8006c0c <HAL_TIM_PWM_Stop_IT+0x160>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c0a:	e003      	b.n	8006c14 <HAL_TIM_PWM_Stop_IT+0x168>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	40010000 	.word	0x40010000
 8006c24:	40010400 	.word	0x40010400

08006c28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d020      	beq.n	8006c8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d01b      	beq.n	8006c8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f06f 0202 	mvn.w	r2, #2
 8006c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	f003 0303 	and.w	r3, r3, #3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fa65 	bl	8007142 <HAL_TIM_IC_CaptureCallback>
 8006c78:	e005      	b.n	8006c86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fa57 	bl	800712e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7f9 fd67 	bl	8000754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	f003 0304 	and.w	r3, r3, #4
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d020      	beq.n	8006cd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f003 0304 	and.w	r3, r3, #4
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01b      	beq.n	8006cd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f06f 0204 	mvn.w	r2, #4
 8006ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2202      	movs	r2, #2
 8006cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fa3f 	bl	8007142 <HAL_TIM_IC_CaptureCallback>
 8006cc4:	e005      	b.n	8006cd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fa31 	bl	800712e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7f9 fd41 	bl	8000754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f003 0308 	and.w	r3, r3, #8
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d020      	beq.n	8006d24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f003 0308 	and.w	r3, r3, #8
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d01b      	beq.n	8006d24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f06f 0208 	mvn.w	r2, #8
 8006cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2204      	movs	r2, #4
 8006cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	f003 0303 	and.w	r3, r3, #3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fa19 	bl	8007142 <HAL_TIM_IC_CaptureCallback>
 8006d10:	e005      	b.n	8006d1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fa0b 	bl	800712e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7f9 fd1b 	bl	8000754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f003 0310 	and.w	r3, r3, #16
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d020      	beq.n	8006d70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f003 0310 	and.w	r3, r3, #16
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d01b      	beq.n	8006d70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f06f 0210 	mvn.w	r2, #16
 8006d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2208      	movs	r2, #8
 8006d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	69db      	ldr	r3, [r3, #28]
 8006d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f9f3 	bl	8007142 <HAL_TIM_IC_CaptureCallback>
 8006d5c:	e005      	b.n	8006d6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f9e5 	bl	800712e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7f9 fcf5 	bl	8000754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00c      	beq.n	8006d94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d007      	beq.n	8006d94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f06f 0201 	mvn.w	r2, #1
 8006d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f9c3 	bl	800711a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00c      	beq.n	8006db8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d007      	beq.n	8006db8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fdce 	bl	8007954 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00c      	beq.n	8006ddc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d007      	beq.n	8006ddc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f9bd 	bl	8007156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f003 0320 	and.w	r3, r3, #32
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00c      	beq.n	8006e00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d007      	beq.n	8006e00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f06f 0220 	mvn.w	r2, #32
 8006df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fda0 	bl	8007940 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e00:	bf00      	nop
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d101      	bne.n	8006e26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e22:	2302      	movs	r3, #2
 8006e24:	e0ae      	b.n	8006f84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b0c      	cmp	r3, #12
 8006e32:	f200 809f 	bhi.w	8006f74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e36:	a201      	add	r2, pc, #4	@ (adr r2, 8006e3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3c:	08006e71 	.word	0x08006e71
 8006e40:	08006f75 	.word	0x08006f75
 8006e44:	08006f75 	.word	0x08006f75
 8006e48:	08006f75 	.word	0x08006f75
 8006e4c:	08006eb1 	.word	0x08006eb1
 8006e50:	08006f75 	.word	0x08006f75
 8006e54:	08006f75 	.word	0x08006f75
 8006e58:	08006f75 	.word	0x08006f75
 8006e5c:	08006ef3 	.word	0x08006ef3
 8006e60:	08006f75 	.word	0x08006f75
 8006e64:	08006f75 	.word	0x08006f75
 8006e68:	08006f75 	.word	0x08006f75
 8006e6c:	08006f33 	.word	0x08006f33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68b9      	ldr	r1, [r7, #8]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fa24 	bl	80072c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	699a      	ldr	r2, [r3, #24]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f042 0208 	orr.w	r2, r2, #8
 8006e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699a      	ldr	r2, [r3, #24]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f022 0204 	bic.w	r2, r2, #4
 8006e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6999      	ldr	r1, [r3, #24]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	691a      	ldr	r2, [r3, #16]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	619a      	str	r2, [r3, #24]
      break;
 8006eae:	e064      	b.n	8006f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68b9      	ldr	r1, [r7, #8]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 fa74 	bl	80073a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	699a      	ldr	r2, [r3, #24]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	699a      	ldr	r2, [r3, #24]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6999      	ldr	r1, [r3, #24]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	021a      	lsls	r2, r3, #8
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	430a      	orrs	r2, r1
 8006eee:	619a      	str	r2, [r3, #24]
      break;
 8006ef0:	e043      	b.n	8006f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 fac9 	bl	8007490 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69da      	ldr	r2, [r3, #28]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f042 0208 	orr.w	r2, r2, #8
 8006f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	69da      	ldr	r2, [r3, #28]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 0204 	bic.w	r2, r2, #4
 8006f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69d9      	ldr	r1, [r3, #28]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	691a      	ldr	r2, [r3, #16]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	61da      	str	r2, [r3, #28]
      break;
 8006f30:	e023      	b.n	8006f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68b9      	ldr	r1, [r7, #8]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 fb1d 	bl	8007578 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	69da      	ldr	r2, [r3, #28]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	69da      	ldr	r2, [r3, #28]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	69d9      	ldr	r1, [r3, #28]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	021a      	lsls	r2, r3, #8
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	61da      	str	r2, [r3, #28]
      break;
 8006f72:	e002      	b.n	8006f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	75fb      	strb	r3, [r7, #23]
      break;
 8006f78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d101      	bne.n	8006fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	e0b4      	b.n	8007112 <HAL_TIM_ConfigClockSource+0x186>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fe0:	d03e      	beq.n	8007060 <HAL_TIM_ConfigClockSource+0xd4>
 8006fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fe6:	f200 8087 	bhi.w	80070f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fee:	f000 8086 	beq.w	80070fe <HAL_TIM_ConfigClockSource+0x172>
 8006ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ff6:	d87f      	bhi.n	80070f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ff8:	2b70      	cmp	r3, #112	@ 0x70
 8006ffa:	d01a      	beq.n	8007032 <HAL_TIM_ConfigClockSource+0xa6>
 8006ffc:	2b70      	cmp	r3, #112	@ 0x70
 8006ffe:	d87b      	bhi.n	80070f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007000:	2b60      	cmp	r3, #96	@ 0x60
 8007002:	d050      	beq.n	80070a6 <HAL_TIM_ConfigClockSource+0x11a>
 8007004:	2b60      	cmp	r3, #96	@ 0x60
 8007006:	d877      	bhi.n	80070f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007008:	2b50      	cmp	r3, #80	@ 0x50
 800700a:	d03c      	beq.n	8007086 <HAL_TIM_ConfigClockSource+0xfa>
 800700c:	2b50      	cmp	r3, #80	@ 0x50
 800700e:	d873      	bhi.n	80070f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007010:	2b40      	cmp	r3, #64	@ 0x40
 8007012:	d058      	beq.n	80070c6 <HAL_TIM_ConfigClockSource+0x13a>
 8007014:	2b40      	cmp	r3, #64	@ 0x40
 8007016:	d86f      	bhi.n	80070f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007018:	2b30      	cmp	r3, #48	@ 0x30
 800701a:	d064      	beq.n	80070e6 <HAL_TIM_ConfigClockSource+0x15a>
 800701c:	2b30      	cmp	r3, #48	@ 0x30
 800701e:	d86b      	bhi.n	80070f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007020:	2b20      	cmp	r3, #32
 8007022:	d060      	beq.n	80070e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007024:	2b20      	cmp	r3, #32
 8007026:	d867      	bhi.n	80070f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007028:	2b00      	cmp	r3, #0
 800702a:	d05c      	beq.n	80070e6 <HAL_TIM_ConfigClockSource+0x15a>
 800702c:	2b10      	cmp	r3, #16
 800702e:	d05a      	beq.n	80070e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007030:	e062      	b.n	80070f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007042:	f000 fb69 	bl	8007718 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007054:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	609a      	str	r2, [r3, #8]
      break;
 800705e:	e04f      	b.n	8007100 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007070:	f000 fb52 	bl	8007718 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689a      	ldr	r2, [r3, #8]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007082:	609a      	str	r2, [r3, #8]
      break;
 8007084:	e03c      	b.n	8007100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007092:	461a      	mov	r2, r3
 8007094:	f000 fac6 	bl	8007624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2150      	movs	r1, #80	@ 0x50
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fb1f 	bl	80076e2 <TIM_ITRx_SetConfig>
      break;
 80070a4:	e02c      	b.n	8007100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070b2:	461a      	mov	r2, r3
 80070b4:	f000 fae5 	bl	8007682 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2160      	movs	r1, #96	@ 0x60
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 fb0f 	bl	80076e2 <TIM_ITRx_SetConfig>
      break;
 80070c4:	e01c      	b.n	8007100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070d2:	461a      	mov	r2, r3
 80070d4:	f000 faa6 	bl	8007624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2140      	movs	r1, #64	@ 0x40
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 faff 	bl	80076e2 <TIM_ITRx_SetConfig>
      break;
 80070e4:	e00c      	b.n	8007100 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4619      	mov	r1, r3
 80070f0:	4610      	mov	r0, r2
 80070f2:	f000 faf6 	bl	80076e2 <TIM_ITRx_SetConfig>
      break;
 80070f6:	e003      	b.n	8007100 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	73fb      	strb	r3, [r7, #15]
      break;
 80070fc:	e000      	b.n	8007100 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80070fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007110:	7bfb      	ldrb	r3, [r7, #15]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800711a:	b480      	push	{r7}
 800711c:	b083      	sub	sp, #12
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007122:	bf00      	nop
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800712e:	b480      	push	{r7}
 8007130:	b083      	sub	sp, #12
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007136:	bf00      	nop
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007142:	b480      	push	{r7}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800714a:	bf00      	nop
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
	...

0800716c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a46      	ldr	r2, [pc, #280]	@ (8007298 <TIM_Base_SetConfig+0x12c>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d013      	beq.n	80071ac <TIM_Base_SetConfig+0x40>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800718a:	d00f      	beq.n	80071ac <TIM_Base_SetConfig+0x40>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a43      	ldr	r2, [pc, #268]	@ (800729c <TIM_Base_SetConfig+0x130>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00b      	beq.n	80071ac <TIM_Base_SetConfig+0x40>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a42      	ldr	r2, [pc, #264]	@ (80072a0 <TIM_Base_SetConfig+0x134>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d007      	beq.n	80071ac <TIM_Base_SetConfig+0x40>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a41      	ldr	r2, [pc, #260]	@ (80072a4 <TIM_Base_SetConfig+0x138>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d003      	beq.n	80071ac <TIM_Base_SetConfig+0x40>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a40      	ldr	r2, [pc, #256]	@ (80072a8 <TIM_Base_SetConfig+0x13c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d108      	bne.n	80071be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a35      	ldr	r2, [pc, #212]	@ (8007298 <TIM_Base_SetConfig+0x12c>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d02b      	beq.n	800721e <TIM_Base_SetConfig+0xb2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071cc:	d027      	beq.n	800721e <TIM_Base_SetConfig+0xb2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a32      	ldr	r2, [pc, #200]	@ (800729c <TIM_Base_SetConfig+0x130>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d023      	beq.n	800721e <TIM_Base_SetConfig+0xb2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a31      	ldr	r2, [pc, #196]	@ (80072a0 <TIM_Base_SetConfig+0x134>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d01f      	beq.n	800721e <TIM_Base_SetConfig+0xb2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a30      	ldr	r2, [pc, #192]	@ (80072a4 <TIM_Base_SetConfig+0x138>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d01b      	beq.n	800721e <TIM_Base_SetConfig+0xb2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a2f      	ldr	r2, [pc, #188]	@ (80072a8 <TIM_Base_SetConfig+0x13c>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d017      	beq.n	800721e <TIM_Base_SetConfig+0xb2>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a2e      	ldr	r2, [pc, #184]	@ (80072ac <TIM_Base_SetConfig+0x140>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d013      	beq.n	800721e <TIM_Base_SetConfig+0xb2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a2d      	ldr	r2, [pc, #180]	@ (80072b0 <TIM_Base_SetConfig+0x144>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d00f      	beq.n	800721e <TIM_Base_SetConfig+0xb2>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a2c      	ldr	r2, [pc, #176]	@ (80072b4 <TIM_Base_SetConfig+0x148>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d00b      	beq.n	800721e <TIM_Base_SetConfig+0xb2>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a2b      	ldr	r2, [pc, #172]	@ (80072b8 <TIM_Base_SetConfig+0x14c>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d007      	beq.n	800721e <TIM_Base_SetConfig+0xb2>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a2a      	ldr	r2, [pc, #168]	@ (80072bc <TIM_Base_SetConfig+0x150>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d003      	beq.n	800721e <TIM_Base_SetConfig+0xb2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a29      	ldr	r2, [pc, #164]	@ (80072c0 <TIM_Base_SetConfig+0x154>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d108      	bne.n	8007230 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	4313      	orrs	r3, r2
 800722e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	4313      	orrs	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a10      	ldr	r2, [pc, #64]	@ (8007298 <TIM_Base_SetConfig+0x12c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d003      	beq.n	8007264 <TIM_Base_SetConfig+0xf8>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a12      	ldr	r2, [pc, #72]	@ (80072a8 <TIM_Base_SetConfig+0x13c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d103      	bne.n	800726c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	691a      	ldr	r2, [r3, #16]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b01      	cmp	r3, #1
 800727c:	d105      	bne.n	800728a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f023 0201 	bic.w	r2, r3, #1
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	611a      	str	r2, [r3, #16]
  }
}
 800728a:	bf00      	nop
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	40010000 	.word	0x40010000
 800729c:	40000400 	.word	0x40000400
 80072a0:	40000800 	.word	0x40000800
 80072a4:	40000c00 	.word	0x40000c00
 80072a8:	40010400 	.word	0x40010400
 80072ac:	40014000 	.word	0x40014000
 80072b0:	40014400 	.word	0x40014400
 80072b4:	40014800 	.word	0x40014800
 80072b8:	40001800 	.word	0x40001800
 80072bc:	40001c00 	.word	0x40001c00
 80072c0:	40002000 	.word	0x40002000

080072c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	f023 0201 	bic.w	r2, r3, #1
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f023 0303 	bic.w	r3, r3, #3
 80072fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	4313      	orrs	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f023 0302 	bic.w	r3, r3, #2
 800730c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	4313      	orrs	r3, r2
 8007316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a20      	ldr	r2, [pc, #128]	@ (800739c <TIM_OC1_SetConfig+0xd8>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d003      	beq.n	8007328 <TIM_OC1_SetConfig+0x64>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a1f      	ldr	r2, [pc, #124]	@ (80073a0 <TIM_OC1_SetConfig+0xdc>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d10c      	bne.n	8007342 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f023 0308 	bic.w	r3, r3, #8
 800732e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	4313      	orrs	r3, r2
 8007338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f023 0304 	bic.w	r3, r3, #4
 8007340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a15      	ldr	r2, [pc, #84]	@ (800739c <TIM_OC1_SetConfig+0xd8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d003      	beq.n	8007352 <TIM_OC1_SetConfig+0x8e>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a14      	ldr	r2, [pc, #80]	@ (80073a0 <TIM_OC1_SetConfig+0xdc>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d111      	bne.n	8007376 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	4313      	orrs	r3, r2
 800736a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	4313      	orrs	r3, r2
 8007374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	621a      	str	r2, [r3, #32]
}
 8007390:	bf00      	nop
 8007392:	371c      	adds	r7, #28
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	40010000 	.word	0x40010000
 80073a0:	40010400 	.word	0x40010400

080073a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	f023 0210 	bic.w	r2, r3, #16
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	021b      	lsls	r3, r3, #8
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	f023 0320 	bic.w	r3, r3, #32
 80073ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	011b      	lsls	r3, r3, #4
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a22      	ldr	r2, [pc, #136]	@ (8007488 <TIM_OC2_SetConfig+0xe4>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d003      	beq.n	800740c <TIM_OC2_SetConfig+0x68>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a21      	ldr	r2, [pc, #132]	@ (800748c <TIM_OC2_SetConfig+0xe8>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d10d      	bne.n	8007428 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	011b      	lsls	r3, r3, #4
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	4313      	orrs	r3, r2
 800741e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007426:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a17      	ldr	r2, [pc, #92]	@ (8007488 <TIM_OC2_SetConfig+0xe4>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d003      	beq.n	8007438 <TIM_OC2_SetConfig+0x94>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a16      	ldr	r2, [pc, #88]	@ (800748c <TIM_OC2_SetConfig+0xe8>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d113      	bne.n	8007460 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800743e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007446:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	4313      	orrs	r3, r2
 8007452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	4313      	orrs	r3, r2
 800745e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	621a      	str	r2, [r3, #32]
}
 800747a:	bf00      	nop
 800747c:	371c      	adds	r7, #28
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	40010000 	.word	0x40010000
 800748c:	40010400 	.word	0x40010400

08007490 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a1b      	ldr	r3, [r3, #32]
 80074a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f023 0303 	bic.w	r3, r3, #3
 80074c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80074d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	021b      	lsls	r3, r3, #8
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a21      	ldr	r2, [pc, #132]	@ (8007570 <TIM_OC3_SetConfig+0xe0>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d003      	beq.n	80074f6 <TIM_OC3_SetConfig+0x66>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a20      	ldr	r2, [pc, #128]	@ (8007574 <TIM_OC3_SetConfig+0xe4>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d10d      	bne.n	8007512 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80074fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	021b      	lsls	r3, r3, #8
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	4313      	orrs	r3, r2
 8007508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a16      	ldr	r2, [pc, #88]	@ (8007570 <TIM_OC3_SetConfig+0xe0>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d003      	beq.n	8007522 <TIM_OC3_SetConfig+0x92>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a15      	ldr	r2, [pc, #84]	@ (8007574 <TIM_OC3_SetConfig+0xe4>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d113      	bne.n	800754a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	011b      	lsls	r3, r3, #4
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	4313      	orrs	r3, r2
 800753c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	4313      	orrs	r3, r2
 8007548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	621a      	str	r2, [r3, #32]
}
 8007564:	bf00      	nop
 8007566:	371c      	adds	r7, #28
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	40010000 	.word	0x40010000
 8007574:	40010400 	.word	0x40010400

08007578 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007578:	b480      	push	{r7}
 800757a:	b087      	sub	sp, #28
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	021b      	lsls	r3, r3, #8
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80075c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	031b      	lsls	r3, r3, #12
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a12      	ldr	r2, [pc, #72]	@ (800761c <TIM_OC4_SetConfig+0xa4>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d003      	beq.n	80075e0 <TIM_OC4_SetConfig+0x68>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a11      	ldr	r2, [pc, #68]	@ (8007620 <TIM_OC4_SetConfig+0xa8>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d109      	bne.n	80075f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	019b      	lsls	r3, r3, #6
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	621a      	str	r2, [r3, #32]
}
 800760e:	bf00      	nop
 8007610:	371c      	adds	r7, #28
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	40010000 	.word	0x40010000
 8007620:	40010400 	.word	0x40010400

08007624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	f023 0201 	bic.w	r2, r3, #1
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800764e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	4313      	orrs	r3, r2
 8007658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f023 030a 	bic.w	r3, r3, #10
 8007660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	4313      	orrs	r3, r2
 8007668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	621a      	str	r2, [r3, #32]
}
 8007676:	bf00      	nop
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007682:	b480      	push	{r7}
 8007684:	b087      	sub	sp, #28
 8007686:	af00      	add	r7, sp, #0
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	f023 0210 	bic.w	r2, r3, #16
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80076ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	031b      	lsls	r3, r3, #12
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80076be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	011b      	lsls	r3, r3, #4
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	621a      	str	r2, [r3, #32]
}
 80076d6:	bf00      	nop
 80076d8:	371c      	adds	r7, #28
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b085      	sub	sp, #20
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4313      	orrs	r3, r2
 8007700:	f043 0307 	orr.w	r3, r3, #7
 8007704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	609a      	str	r2, [r3, #8]
}
 800770c:	bf00      	nop
 800770e:	3714      	adds	r7, #20
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007718:	b480      	push	{r7}
 800771a:	b087      	sub	sp, #28
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
 8007724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	021a      	lsls	r2, r3, #8
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	431a      	orrs	r2, r3
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	4313      	orrs	r3, r2
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	4313      	orrs	r3, r2
 8007744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	609a      	str	r2, [r3, #8]
}
 800774c:	bf00      	nop
 800774e:	371c      	adds	r7, #28
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007758:	b480      	push	{r7}
 800775a:	b087      	sub	sp, #28
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f003 031f 	and.w	r3, r3, #31
 800776a:	2201      	movs	r2, #1
 800776c:	fa02 f303 	lsl.w	r3, r2, r3
 8007770:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6a1a      	ldr	r2, [r3, #32]
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	43db      	mvns	r3, r3
 800777a:	401a      	ands	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6a1a      	ldr	r2, [r3, #32]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	f003 031f 	and.w	r3, r3, #31
 800778a:	6879      	ldr	r1, [r7, #4]
 800778c:	fa01 f303 	lsl.w	r3, r1, r3
 8007790:	431a      	orrs	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	621a      	str	r2, [r3, #32]
}
 8007796:	bf00      	nop
 8007798:	371c      	adds	r7, #28
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
	...

080077a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d101      	bne.n	80077bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077b8:	2302      	movs	r3, #2
 80077ba:	e05a      	b.n	8007872 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2202      	movs	r2, #2
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a21      	ldr	r2, [pc, #132]	@ (8007880 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d022      	beq.n	8007846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007808:	d01d      	beq.n	8007846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a1d      	ldr	r2, [pc, #116]	@ (8007884 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d018      	beq.n	8007846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a1b      	ldr	r2, [pc, #108]	@ (8007888 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d013      	beq.n	8007846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a1a      	ldr	r2, [pc, #104]	@ (800788c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d00e      	beq.n	8007846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a18      	ldr	r2, [pc, #96]	@ (8007890 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d009      	beq.n	8007846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a17      	ldr	r2, [pc, #92]	@ (8007894 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d004      	beq.n	8007846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a15      	ldr	r2, [pc, #84]	@ (8007898 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d10c      	bne.n	8007860 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800784c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	4313      	orrs	r3, r2
 8007856:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	40010000 	.word	0x40010000
 8007884:	40000400 	.word	0x40000400
 8007888:	40000800 	.word	0x40000800
 800788c:	40000c00 	.word	0x40000c00
 8007890:	40010400 	.word	0x40010400
 8007894:	40014000 	.word	0x40014000
 8007898:	40001800 	.word	0x40001800

0800789c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d101      	bne.n	80078b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80078b4:	2302      	movs	r3, #2
 80078b6:	e03d      	b.n	8007934 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	4313      	orrs	r3, r2
 80078da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	4313      	orrs	r3, r2
 8007904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	4313      	orrs	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	4313      	orrs	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007968:	b084      	sub	sp, #16
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	f107 001c 	add.w	r0, r7, #28
 8007976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800797a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800797e:	2b01      	cmp	r3, #1
 8007980:	d123      	bne.n	80079ca <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007986:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007996:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80079aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d105      	bne.n	80079be <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f9dc 	bl	8007d7c <USB_CoreReset>
 80079c4:	4603      	mov	r3, r0
 80079c6:	73fb      	strb	r3, [r7, #15]
 80079c8:	e01b      	b.n	8007a02 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f9d0 	bl	8007d7c <USB_CoreReset>
 80079dc:	4603      	mov	r3, r0
 80079de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80079e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d106      	bne.n	80079f6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80079f4:	e005      	b.n	8007a02 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007a02:	7fbb      	ldrb	r3, [r7, #30]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d10b      	bne.n	8007a20 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f043 0206 	orr.w	r2, r3, #6
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f043 0220 	orr.w	r2, r3, #32
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a2c:	b004      	add	sp, #16
 8007a2e:	4770      	bx	lr

08007a30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f043 0201 	orr.w	r2, r3, #1
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b083      	sub	sp, #12
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f023 0201 	bic.w	r2, r3, #1
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d115      	bne.n	8007ac2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007aa2:	200a      	movs	r0, #10
 8007aa4:	f7f9 fd2e 	bl	8001504 <HAL_Delay>
      ms += 10U;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	330a      	adds	r3, #10
 8007aac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f956 	bl	8007d60 <USB_GetMode>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d01e      	beq.n	8007af8 <USB_SetCurrentMode+0x84>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2bc7      	cmp	r3, #199	@ 0xc7
 8007abe:	d9f0      	bls.n	8007aa2 <USB_SetCurrentMode+0x2e>
 8007ac0:	e01a      	b.n	8007af8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ac2:	78fb      	ldrb	r3, [r7, #3]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d115      	bne.n	8007af4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ad4:	200a      	movs	r0, #10
 8007ad6:	f7f9 fd15 	bl	8001504 <HAL_Delay>
      ms += 10U;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	330a      	adds	r3, #10
 8007ade:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f93d 	bl	8007d60 <USB_GetMode>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d005      	beq.n	8007af8 <USB_SetCurrentMode+0x84>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2bc7      	cmp	r3, #199	@ 0xc7
 8007af0:	d9f0      	bls.n	8007ad4 <USB_SetCurrentMode+0x60>
 8007af2:	e001      	b.n	8007af8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e005      	b.n	8007b04 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2bc8      	cmp	r3, #200	@ 0xc8
 8007afc:	d101      	bne.n	8007b02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e000      	b.n	8007b04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b26:	d901      	bls.n	8007b2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e01b      	b.n	8007b64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	daf2      	bge.n	8007b1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b34:	2300      	movs	r3, #0
 8007b36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	019b      	lsls	r3, r3, #6
 8007b3c:	f043 0220 	orr.w	r2, r3, #32
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3301      	adds	r3, #1
 8007b48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b50:	d901      	bls.n	8007b56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007b52:	2303      	movs	r3, #3
 8007b54:	e006      	b.n	8007b64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b20      	cmp	r3, #32
 8007b60:	d0f0      	beq.n	8007b44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b88:	d901      	bls.n	8007b8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e018      	b.n	8007bc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	daf2      	bge.n	8007b7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b96:	2300      	movs	r3, #0
 8007b98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2210      	movs	r2, #16
 8007b9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bac:	d901      	bls.n	8007bb2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e006      	b.n	8007bc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f003 0310 	and.w	r3, r3, #16
 8007bba:	2b10      	cmp	r3, #16
 8007bbc:	d0f0      	beq.n	8007ba0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b089      	sub	sp, #36	@ 0x24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	4611      	mov	r1, r2
 8007bd8:	461a      	mov	r2, r3
 8007bda:	460b      	mov	r3, r1
 8007bdc:	71fb      	strb	r3, [r7, #7]
 8007bde:	4613      	mov	r3, r2
 8007be0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007bea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d123      	bne.n	8007c3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007bf2:	88bb      	ldrh	r3, [r7, #4]
 8007bf4:	3303      	adds	r3, #3
 8007bf6:	089b      	lsrs	r3, r3, #2
 8007bf8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	61bb      	str	r3, [r7, #24]
 8007bfe:	e018      	b.n	8007c32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007c00:	79fb      	ldrb	r3, [r7, #7]
 8007c02:	031a      	lsls	r2, r3, #12
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	4413      	add	r3, r2
 8007c08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	3301      	adds	r3, #1
 8007c18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	3301      	adds	r3, #1
 8007c24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	61bb      	str	r3, [r7, #24]
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d3e2      	bcc.n	8007c00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3724      	adds	r7, #36	@ 0x24
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b08b      	sub	sp, #44	@ 0x2c
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	4613      	mov	r3, r2
 8007c54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007c5e:	88fb      	ldrh	r3, [r7, #6]
 8007c60:	089b      	lsrs	r3, r3, #2
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007c66:	88fb      	ldrh	r3, [r7, #6]
 8007c68:	f003 0303 	and.w	r3, r3, #3
 8007c6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007c6e:	2300      	movs	r3, #0
 8007c70:	623b      	str	r3, [r7, #32]
 8007c72:	e014      	b.n	8007c9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c82:	3301      	adds	r3, #1
 8007c84:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c88:	3301      	adds	r3, #1
 8007c8a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8e:	3301      	adds	r3, #1
 8007c90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c94:	3301      	adds	r3, #1
 8007c96:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	623b      	str	r3, [r7, #32]
 8007c9e:	6a3a      	ldr	r2, [r7, #32]
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d3e6      	bcc.n	8007c74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007ca6:	8bfb      	ldrh	r3, [r7, #30]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d01e      	beq.n	8007cea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f107 0310 	add.w	r3, r7, #16
 8007cbc:	6812      	ldr	r2, [r2, #0]
 8007cbe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	6a3b      	ldr	r3, [r7, #32]
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd0:	701a      	strb	r2, [r3, #0]
      i++;
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	623b      	str	r3, [r7, #32]
      pDest++;
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cda:	3301      	adds	r3, #1
 8007cdc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007cde:	8bfb      	ldrh	r3, [r7, #30]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007ce4:	8bfb      	ldrh	r3, [r7, #30]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1ea      	bne.n	8007cc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	372c      	adds	r7, #44	@ 0x2c
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d10:	68fb      	ldr	r3, [r7, #12]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b085      	sub	sp, #20
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	460b      	mov	r3, r1
 8007d28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007d2e:	78fb      	ldrb	r3, [r7, #3]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007d3e:	78fb      	ldrb	r3, [r7, #3]
 8007d40:	015a      	lsls	r2, r3, #5
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	4013      	ands	r3, r2
 8007d50:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d52:	68bb      	ldr	r3, [r7, #8]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	f003 0301 	and.w	r3, r3, #1
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d94:	d901      	bls.n	8007d9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e01b      	b.n	8007dd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	daf2      	bge.n	8007d88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	f043 0201 	orr.w	r2, r3, #1
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3301      	adds	r3, #1
 8007db6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007dbe:	d901      	bls.n	8007dc4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e006      	b.n	8007dd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d0f0      	beq.n	8007db2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
	...

08007de0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007de0:	b084      	sub	sp, #16
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b086      	sub	sp, #24
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
 8007dea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e00:	461a      	mov	r2, r3
 8007e02:	2300      	movs	r3, #0
 8007e04:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e0a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e16:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e22:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d119      	bne.n	8007e6a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007e36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d10a      	bne.n	8007e54 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007e4c:	f043 0304 	orr.w	r3, r3, #4
 8007e50:	6013      	str	r3, [r2, #0]
 8007e52:	e014      	b.n	8007e7e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007e62:	f023 0304 	bic.w	r3, r3, #4
 8007e66:	6013      	str	r3, [r2, #0]
 8007e68:	e009      	b.n	8007e7e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007e78:	f023 0304 	bic.w	r3, r3, #4
 8007e7c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e7e:	2110      	movs	r1, #16
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7ff fe43 	bl	8007b0c <USB_FlushTxFifo>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7ff fe6d 	bl	8007b70 <USB_FlushRxFifo>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d001      	beq.n	8007ea0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	613b      	str	r3, [r7, #16]
 8007ea4:	e015      	b.n	8007ed2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	015a      	lsls	r2, r3, #5
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	4413      	add	r3, r2
 8007eae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007eb8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	2300      	movs	r3, #0
 8007eca:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	613b      	str	r3, [r7, #16]
 8007ed2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d3e3      	bcc.n	8007ea6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eea:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a18      	ldr	r2, [pc, #96]	@ (8007f50 <USB_HostInit+0x170>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d10b      	bne.n	8007f0c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007efa:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a15      	ldr	r2, [pc, #84]	@ (8007f54 <USB_HostInit+0x174>)
 8007f00:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a14      	ldr	r2, [pc, #80]	@ (8007f58 <USB_HostInit+0x178>)
 8007f06:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007f0a:	e009      	b.n	8007f20 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2280      	movs	r2, #128	@ 0x80
 8007f10:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a11      	ldr	r2, [pc, #68]	@ (8007f5c <USB_HostInit+0x17c>)
 8007f16:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a11      	ldr	r2, [pc, #68]	@ (8007f60 <USB_HostInit+0x180>)
 8007f1c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d105      	bne.n	8007f34 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	f043 0210 	orr.w	r2, r3, #16
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	699a      	ldr	r2, [r3, #24]
 8007f38:	4b0a      	ldr	r3, [pc, #40]	@ (8007f64 <USB_HostInit+0x184>)
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3718      	adds	r7, #24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f4c:	b004      	add	sp, #16
 8007f4e:	4770      	bx	lr
 8007f50:	40040000 	.word	0x40040000
 8007f54:	01000200 	.word	0x01000200
 8007f58:	00e00300 	.word	0x00e00300
 8007f5c:	00600080 	.word	0x00600080
 8007f60:	004000e0 	.word	0x004000e0
 8007f64:	a3200008 	.word	0xa3200008

08007f68 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007f86:	f023 0303 	bic.w	r3, r3, #3
 8007f8a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	78fb      	ldrb	r3, [r7, #3]
 8007f96:	f003 0303 	and.w	r3, r3, #3
 8007f9a:	68f9      	ldr	r1, [r7, #12]
 8007f9c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007fa4:	78fb      	ldrb	r3, [r7, #3]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d107      	bne.n	8007fba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007fb6:	6053      	str	r3, [r2, #4]
 8007fb8:	e00c      	b.n	8007fd4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007fba:	78fb      	ldrb	r3, [r7, #3]
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d107      	bne.n	8007fd0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007fcc:	6053      	str	r3, [r2, #4]
 8007fce:	e001      	b.n	8007fd4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e000      	b.n	8007fd6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008002:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800800c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008010:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008012:	2064      	movs	r0, #100	@ 0x64
 8008014:	f7f9 fa76 	bl	8001504 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008020:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008024:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008026:	200a      	movs	r0, #10
 8008028:	f7f9 fa6c 	bl	8001504 <HAL_Delay>

  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008036:	b480      	push	{r7}
 8008038:	b085      	sub	sp, #20
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	460b      	mov	r3, r1
 8008040:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800805a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008062:	2b00      	cmp	r3, #0
 8008064:	d109      	bne.n	800807a <USB_DriveVbus+0x44>
 8008066:	78fb      	ldrb	r3, [r7, #3]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d106      	bne.n	800807a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008074:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008078:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008084:	d109      	bne.n	800809a <USB_DriveVbus+0x64>
 8008086:	78fb      	ldrb	r3, [r7, #3]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d106      	bne.n	800809a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008094:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008098:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	0c5b      	lsrs	r3, r3, #17
 80080c6:	f003 0303 	and.w	r3, r3, #3
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b085      	sub	sp, #20
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	b29b      	uxth	r3, r3
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b088      	sub	sp, #32
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	4608      	mov	r0, r1
 8008102:	4611      	mov	r1, r2
 8008104:	461a      	mov	r2, r3
 8008106:	4603      	mov	r3, r0
 8008108:	70fb      	strb	r3, [r7, #3]
 800810a:	460b      	mov	r3, r1
 800810c:	70bb      	strb	r3, [r7, #2]
 800810e:	4613      	mov	r3, r2
 8008110:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800811a:	78fb      	ldrb	r3, [r7, #3]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	4413      	add	r3, r2
 8008122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008126:	461a      	mov	r2, r3
 8008128:	f04f 33ff 	mov.w	r3, #4294967295
 800812c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800812e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008132:	2b03      	cmp	r3, #3
 8008134:	d87c      	bhi.n	8008230 <USB_HC_Init+0x138>
 8008136:	a201      	add	r2, pc, #4	@ (adr r2, 800813c <USB_HC_Init+0x44>)
 8008138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813c:	0800814d 	.word	0x0800814d
 8008140:	080081f3 	.word	0x080081f3
 8008144:	0800814d 	.word	0x0800814d
 8008148:	080081b5 	.word	0x080081b5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800814c:	78fb      	ldrb	r3, [r7, #3]
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	4413      	add	r3, r2
 8008154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008158:	461a      	mov	r2, r3
 800815a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800815e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008160:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008164:	2b00      	cmp	r3, #0
 8008166:	da10      	bge.n	800818a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008168:	78fb      	ldrb	r3, [r7, #3]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	4413      	add	r3, r2
 8008170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	78fa      	ldrb	r2, [r7, #3]
 8008178:	0151      	lsls	r1, r2, #5
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	440a      	add	r2, r1
 800817e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008186:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008188:	e055      	b.n	8008236 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a6f      	ldr	r2, [pc, #444]	@ (800834c <USB_HC_Init+0x254>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d151      	bne.n	8008236 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008192:	78fb      	ldrb	r3, [r7, #3]
 8008194:	015a      	lsls	r2, r3, #5
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	4413      	add	r3, r2
 800819a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	78fa      	ldrb	r2, [r7, #3]
 80081a2:	0151      	lsls	r1, r2, #5
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	440a      	add	r2, r1
 80081a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081ac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80081b0:	60d3      	str	r3, [r2, #12]
      break;
 80081b2:	e040      	b.n	8008236 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081c0:	461a      	mov	r2, r3
 80081c2:	f240 639d 	movw	r3, #1693	@ 0x69d
 80081c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80081c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	da34      	bge.n	800823a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80081d0:	78fb      	ldrb	r3, [r7, #3]
 80081d2:	015a      	lsls	r2, r3, #5
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	4413      	add	r3, r2
 80081d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	78fa      	ldrb	r2, [r7, #3]
 80081e0:	0151      	lsls	r1, r2, #5
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	440a      	add	r2, r1
 80081e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081ee:	60d3      	str	r3, [r2, #12]
      }

      break;
 80081f0:	e023      	b.n	800823a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80081f2:	78fb      	ldrb	r3, [r7, #3]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081fe:	461a      	mov	r2, r3
 8008200:	f240 2325 	movw	r3, #549	@ 0x225
 8008204:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008206:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800820a:	2b00      	cmp	r3, #0
 800820c:	da17      	bge.n	800823e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800820e:	78fb      	ldrb	r3, [r7, #3]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	4413      	add	r3, r2
 8008216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	78fa      	ldrb	r2, [r7, #3]
 800821e:	0151      	lsls	r1, r2, #5
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	440a      	add	r2, r1
 8008224:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008228:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800822c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800822e:	e006      	b.n	800823e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	77fb      	strb	r3, [r7, #31]
      break;
 8008234:	e004      	b.n	8008240 <USB_HC_Init+0x148>
      break;
 8008236:	bf00      	nop
 8008238:	e002      	b.n	8008240 <USB_HC_Init+0x148>
      break;
 800823a:	bf00      	nop
 800823c:	e000      	b.n	8008240 <USB_HC_Init+0x148>
      break;
 800823e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	4413      	add	r3, r2
 8008248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800824c:	461a      	mov	r2, r3
 800824e:	2300      	movs	r3, #0
 8008250:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008252:	78fb      	ldrb	r3, [r7, #3]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	4413      	add	r3, r2
 800825a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	78fa      	ldrb	r2, [r7, #3]
 8008262:	0151      	lsls	r1, r2, #5
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	440a      	add	r2, r1
 8008268:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800826c:	f043 0302 	orr.w	r3, r3, #2
 8008270:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008278:	699a      	ldr	r2, [r3, #24]
 800827a:	78fb      	ldrb	r3, [r7, #3]
 800827c:	f003 030f 	and.w	r3, r3, #15
 8008280:	2101      	movs	r1, #1
 8008282:	fa01 f303 	lsl.w	r3, r1, r3
 8008286:	6939      	ldr	r1, [r7, #16]
 8008288:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800828c:	4313      	orrs	r3, r2
 800828e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800829c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	da03      	bge.n	80082ac <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80082a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082a8:	61bb      	str	r3, [r7, #24]
 80082aa:	e001      	b.n	80082b0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80082ac:	2300      	movs	r3, #0
 80082ae:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f7ff fef9 	bl	80080a8 <USB_GetHostSpeed>
 80082b6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80082b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d106      	bne.n	80082ce <USB_HC_Init+0x1d6>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d003      	beq.n	80082ce <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80082c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80082ca:	617b      	str	r3, [r7, #20]
 80082cc:	e001      	b.n	80082d2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80082d2:	787b      	ldrb	r3, [r7, #1]
 80082d4:	059b      	lsls	r3, r3, #22
 80082d6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80082da:	78bb      	ldrb	r3, [r7, #2]
 80082dc:	02db      	lsls	r3, r3, #11
 80082de:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80082e2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80082e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80082e8:	049b      	lsls	r3, r3, #18
 80082ea:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80082ee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80082f0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80082f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80082f6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	431a      	orrs	r2, r3
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008300:	78fa      	ldrb	r2, [r7, #3]
 8008302:	0151      	lsls	r1, r2, #5
 8008304:	693a      	ldr	r2, [r7, #16]
 8008306:	440a      	add	r2, r1
 8008308:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800830c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008310:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008312:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008316:	2b03      	cmp	r3, #3
 8008318:	d003      	beq.n	8008322 <USB_HC_Init+0x22a>
 800831a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800831e:	2b01      	cmp	r3, #1
 8008320:	d10f      	bne.n	8008342 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008322:	78fb      	ldrb	r3, [r7, #3]
 8008324:	015a      	lsls	r2, r3, #5
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	4413      	add	r3, r2
 800832a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	78fa      	ldrb	r2, [r7, #3]
 8008332:	0151      	lsls	r1, r2, #5
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	440a      	add	r2, r1
 8008338:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800833c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008340:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008342:	7ffb      	ldrb	r3, [r7, #31]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3720      	adds	r7, #32
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	40040000 	.word	0x40040000

08008350 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08c      	sub	sp, #48	@ 0x30
 8008354:	af02      	add	r7, sp, #8
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	4613      	mov	r3, r2
 800835c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	785b      	ldrb	r3, [r3, #1]
 8008366:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008368:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800836c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	4a5d      	ldr	r2, [pc, #372]	@ (80084e8 <USB_HC_StartXfer+0x198>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d12f      	bne.n	80083d6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008376:	79fb      	ldrb	r3, [r7, #7]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d11c      	bne.n	80083b6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	7c9b      	ldrb	r3, [r3, #18]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d003      	beq.n	800838c <USB_HC_StartXfer+0x3c>
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	7c9b      	ldrb	r3, [r3, #18]
 8008388:	2b02      	cmp	r3, #2
 800838a:	d124      	bne.n	80083d6 <USB_HC_StartXfer+0x86>
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	799b      	ldrb	r3, [r3, #6]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d120      	bne.n	80083d6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	015a      	lsls	r2, r3, #5
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	4413      	add	r3, r2
 800839c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	69fa      	ldr	r2, [r7, #28]
 80083a4:	0151      	lsls	r1, r2, #5
 80083a6:	6a3a      	ldr	r2, [r7, #32]
 80083a8:	440a      	add	r2, r1
 80083aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083b2:	60d3      	str	r3, [r2, #12]
 80083b4:	e00f      	b.n	80083d6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	791b      	ldrb	r3, [r3, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10b      	bne.n	80083d6 <USB_HC_StartXfer+0x86>
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	795b      	ldrb	r3, [r3, #5]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d107      	bne.n	80083d6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	785b      	ldrb	r3, [r3, #1]
 80083ca:	4619      	mov	r1, r3
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 fb6b 	bl	8008aa8 <USB_DoPing>
        return HAL_OK;
 80083d2:	2300      	movs	r3, #0
 80083d4:	e232      	b.n	800883c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	799b      	ldrb	r3, [r3, #6]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d158      	bne.n	8008490 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80083de:	2301      	movs	r3, #1
 80083e0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	78db      	ldrb	r3, [r3, #3]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d007      	beq.n	80083fa <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80083ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	8a92      	ldrh	r2, [r2, #20]
 80083f0:	fb03 f202 	mul.w	r2, r3, r2
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	61da      	str	r2, [r3, #28]
 80083f8:	e07c      	b.n	80084f4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	7c9b      	ldrb	r3, [r3, #18]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d130      	bne.n	8008464 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	6a1b      	ldr	r3, [r3, #32]
 8008406:	2bbc      	cmp	r3, #188	@ 0xbc
 8008408:	d918      	bls.n	800843c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	8a9b      	ldrh	r3, [r3, #20]
 800840e:	461a      	mov	r2, r3
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	69da      	ldr	r2, [r3, #28]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d003      	beq.n	800842c <USB_HC_StartXfer+0xdc>
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	2b02      	cmp	r3, #2
 800842a:	d103      	bne.n	8008434 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	2202      	movs	r2, #2
 8008430:	60da      	str	r2, [r3, #12]
 8008432:	e05f      	b.n	80084f4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2201      	movs	r2, #1
 8008438:	60da      	str	r2, [r3, #12]
 800843a:	e05b      	b.n	80084f4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	6a1a      	ldr	r2, [r3, #32]
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d007      	beq.n	800845c <USB_HC_StartXfer+0x10c>
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	2b02      	cmp	r3, #2
 8008452:	d003      	beq.n	800845c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2204      	movs	r2, #4
 8008458:	60da      	str	r2, [r3, #12]
 800845a:	e04b      	b.n	80084f4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2203      	movs	r2, #3
 8008460:	60da      	str	r2, [r3, #12]
 8008462:	e047      	b.n	80084f4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008464:	79fb      	ldrb	r3, [r7, #7]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d10d      	bne.n	8008486 <USB_HC_StartXfer+0x136>
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	8a92      	ldrh	r2, [r2, #20]
 8008472:	4293      	cmp	r3, r2
 8008474:	d907      	bls.n	8008486 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008476:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	8a92      	ldrh	r2, [r2, #20]
 800847c:	fb03 f202 	mul.w	r2, r3, r2
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	61da      	str	r2, [r3, #28]
 8008484:	e036      	b.n	80084f4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	6a1a      	ldr	r2, [r3, #32]
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	61da      	str	r2, [r3, #28]
 800848e:	e031      	b.n	80084f4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d018      	beq.n	80084ca <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	6a1b      	ldr	r3, [r3, #32]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	8a92      	ldrh	r2, [r2, #20]
 80084a0:	4413      	add	r3, r2
 80084a2:	3b01      	subs	r3, #1
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	8a92      	ldrh	r2, [r2, #20]
 80084a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80084ac:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80084ae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80084b0:	8b7b      	ldrh	r3, [r7, #26]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d90b      	bls.n	80084ce <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80084b6:	8b7b      	ldrh	r3, [r7, #26]
 80084b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80084ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	8a92      	ldrh	r2, [r2, #20]
 80084c0:	fb03 f202 	mul.w	r2, r3, r2
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	61da      	str	r2, [r3, #28]
 80084c8:	e001      	b.n	80084ce <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80084ca:	2301      	movs	r3, #1
 80084cc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	78db      	ldrb	r3, [r3, #3]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00a      	beq.n	80084ec <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80084d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	8a92      	ldrh	r2, [r2, #20]
 80084dc:	fb03 f202 	mul.w	r2, r3, r2
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	61da      	str	r2, [r3, #28]
 80084e4:	e006      	b.n	80084f4 <USB_HC_StartXfer+0x1a4>
 80084e6:	bf00      	nop
 80084e8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	6a1a      	ldr	r2, [r3, #32]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	69db      	ldr	r3, [r3, #28]
 80084f8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80084fe:	04d9      	lsls	r1, r3, #19
 8008500:	4ba3      	ldr	r3, [pc, #652]	@ (8008790 <USB_HC_StartXfer+0x440>)
 8008502:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008504:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	7d9b      	ldrb	r3, [r3, #22]
 800850a:	075b      	lsls	r3, r3, #29
 800850c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008510:	69f9      	ldr	r1, [r7, #28]
 8008512:	0148      	lsls	r0, r1, #5
 8008514:	6a39      	ldr	r1, [r7, #32]
 8008516:	4401      	add	r1, r0
 8008518:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800851c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800851e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008520:	79fb      	ldrb	r3, [r7, #7]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d009      	beq.n	800853a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	6999      	ldr	r1, [r3, #24]
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	015a      	lsls	r2, r3, #5
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	4413      	add	r3, r2
 8008532:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008536:	460a      	mov	r2, r1
 8008538:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800853a:	6a3b      	ldr	r3, [r7, #32]
 800853c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	bf0c      	ite	eq
 800854a:	2301      	moveq	r3, #1
 800854c:	2300      	movne	r3, #0
 800854e:	b2db      	uxtb	r3, r3
 8008550:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	015a      	lsls	r2, r3, #5
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	4413      	add	r3, r2
 800855a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	69fa      	ldr	r2, [r7, #28]
 8008562:	0151      	lsls	r1, r2, #5
 8008564:	6a3a      	ldr	r2, [r7, #32]
 8008566:	440a      	add	r2, r1
 8008568:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800856c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008570:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	4413      	add	r3, r2
 800857a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	7e7b      	ldrb	r3, [r7, #25]
 8008582:	075b      	lsls	r3, r3, #29
 8008584:	69f9      	ldr	r1, [r7, #28]
 8008586:	0148      	lsls	r0, r1, #5
 8008588:	6a39      	ldr	r1, [r7, #32]
 800858a:	4401      	add	r1, r0
 800858c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008590:	4313      	orrs	r3, r2
 8008592:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	799b      	ldrb	r3, [r3, #6]
 8008598:	2b01      	cmp	r3, #1
 800859a:	f040 80c3 	bne.w	8008724 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	7c5b      	ldrb	r3, [r3, #17]
 80085a2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80085a8:	4313      	orrs	r3, r2
 80085aa:	69fa      	ldr	r2, [r7, #28]
 80085ac:	0151      	lsls	r1, r2, #5
 80085ae:	6a3a      	ldr	r2, [r7, #32]
 80085b0:	440a      	add	r2, r1
 80085b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80085b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80085ba:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	6a3b      	ldr	r3, [r7, #32]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	69fa      	ldr	r2, [r7, #28]
 80085cc:	0151      	lsls	r1, r2, #5
 80085ce:	6a3a      	ldr	r2, [r7, #32]
 80085d0:	440a      	add	r2, r1
 80085d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085d6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80085da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	79db      	ldrb	r3, [r3, #7]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d123      	bne.n	800862c <USB_HC_StartXfer+0x2dc>
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	78db      	ldrb	r3, [r3, #3]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d11f      	bne.n	800862c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	6a3b      	ldr	r3, [r7, #32]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	69fa      	ldr	r2, [r7, #28]
 80085fc:	0151      	lsls	r1, r2, #5
 80085fe:	6a3a      	ldr	r2, [r7, #32]
 8008600:	440a      	add	r2, r1
 8008602:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008606:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800860a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	4413      	add	r3, r2
 8008614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	69fa      	ldr	r2, [r7, #28]
 800861c:	0151      	lsls	r1, r2, #5
 800861e:	6a3a      	ldr	r2, [r7, #32]
 8008620:	440a      	add	r2, r1
 8008622:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800862a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	7c9b      	ldrb	r3, [r3, #18]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d003      	beq.n	800863c <USB_HC_StartXfer+0x2ec>
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	7c9b      	ldrb	r3, [r3, #18]
 8008638:	2b03      	cmp	r3, #3
 800863a:	d117      	bne.n	800866c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008640:	2b01      	cmp	r3, #1
 8008642:	d113      	bne.n	800866c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	78db      	ldrb	r3, [r3, #3]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d10f      	bne.n	800866c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	6a3b      	ldr	r3, [r7, #32]
 8008652:	4413      	add	r3, r2
 8008654:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	69fa      	ldr	r2, [r7, #28]
 800865c:	0151      	lsls	r1, r2, #5
 800865e:	6a3a      	ldr	r2, [r7, #32]
 8008660:	440a      	add	r2, r1
 8008662:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008666:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800866a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	7c9b      	ldrb	r3, [r3, #18]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d162      	bne.n	800873a <USB_HC_StartXfer+0x3ea>
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	78db      	ldrb	r3, [r3, #3]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d15e      	bne.n	800873a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	3b01      	subs	r3, #1
 8008682:	2b03      	cmp	r3, #3
 8008684:	d858      	bhi.n	8008738 <USB_HC_StartXfer+0x3e8>
 8008686:	a201      	add	r2, pc, #4	@ (adr r2, 800868c <USB_HC_StartXfer+0x33c>)
 8008688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868c:	0800869d 	.word	0x0800869d
 8008690:	080086bf 	.word	0x080086bf
 8008694:	080086e1 	.word	0x080086e1
 8008698:	08008703 	.word	0x08008703
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	6a3b      	ldr	r3, [r7, #32]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	69fa      	ldr	r2, [r7, #28]
 80086ac:	0151      	lsls	r1, r2, #5
 80086ae:	6a3a      	ldr	r2, [r7, #32]
 80086b0:	440a      	add	r2, r1
 80086b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086ba:	6053      	str	r3, [r2, #4]
          break;
 80086bc:	e03d      	b.n	800873a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	69fa      	ldr	r2, [r7, #28]
 80086ce:	0151      	lsls	r1, r2, #5
 80086d0:	6a3a      	ldr	r2, [r7, #32]
 80086d2:	440a      	add	r2, r1
 80086d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086d8:	f043 030e 	orr.w	r3, r3, #14
 80086dc:	6053      	str	r3, [r2, #4]
          break;
 80086de:	e02c      	b.n	800873a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	69fa      	ldr	r2, [r7, #28]
 80086f0:	0151      	lsls	r1, r2, #5
 80086f2:	6a3a      	ldr	r2, [r7, #32]
 80086f4:	440a      	add	r2, r1
 80086f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80086fe:	6053      	str	r3, [r2, #4]
          break;
 8008700:	e01b      	b.n	800873a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	015a      	lsls	r2, r3, #5
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	4413      	add	r3, r2
 800870a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	69fa      	ldr	r2, [r7, #28]
 8008712:	0151      	lsls	r1, r2, #5
 8008714:	6a3a      	ldr	r2, [r7, #32]
 8008716:	440a      	add	r2, r1
 8008718:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800871c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008720:	6053      	str	r3, [r2, #4]
          break;
 8008722:	e00a      	b.n	800873a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	015a      	lsls	r2, r3, #5
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	4413      	add	r3, r2
 800872c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008730:	461a      	mov	r2, r3
 8008732:	2300      	movs	r3, #0
 8008734:	6053      	str	r3, [r2, #4]
 8008736:	e000      	b.n	800873a <USB_HC_StartXfer+0x3ea>
          break;
 8008738:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	015a      	lsls	r2, r3, #5
 800873e:	6a3b      	ldr	r3, [r7, #32]
 8008740:	4413      	add	r3, r2
 8008742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008750:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	78db      	ldrb	r3, [r3, #3]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d004      	beq.n	8008764 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008760:	613b      	str	r3, [r7, #16]
 8008762:	e003      	b.n	800876c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800876a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008772:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	015a      	lsls	r2, r3, #5
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	4413      	add	r3, r2
 800877c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008780:	461a      	mov	r2, r3
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008786:	79fb      	ldrb	r3, [r7, #7]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800878c:	2300      	movs	r3, #0
 800878e:	e055      	b.n	800883c <USB_HC_StartXfer+0x4ec>
 8008790:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	78db      	ldrb	r3, [r3, #3]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d14e      	bne.n	800883a <USB_HC_StartXfer+0x4ea>
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	6a1b      	ldr	r3, [r3, #32]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d04a      	beq.n	800883a <USB_HC_StartXfer+0x4ea>
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	79db      	ldrb	r3, [r3, #7]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d146      	bne.n	800883a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	7c9b      	ldrb	r3, [r3, #18]
 80087b0:	2b03      	cmp	r3, #3
 80087b2:	d831      	bhi.n	8008818 <USB_HC_StartXfer+0x4c8>
 80087b4:	a201      	add	r2, pc, #4	@ (adr r2, 80087bc <USB_HC_StartXfer+0x46c>)
 80087b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ba:	bf00      	nop
 80087bc:	080087cd 	.word	0x080087cd
 80087c0:	080087f1 	.word	0x080087f1
 80087c4:	080087cd 	.word	0x080087cd
 80087c8:	080087f1 	.word	0x080087f1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	6a1b      	ldr	r3, [r3, #32]
 80087d0:	3303      	adds	r3, #3
 80087d2:	089b      	lsrs	r3, r3, #2
 80087d4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80087d6:	8afa      	ldrh	r2, [r7, #22]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087dc:	b29b      	uxth	r3, r3
 80087de:	429a      	cmp	r2, r3
 80087e0:	d91c      	bls.n	800881c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	f043 0220 	orr.w	r2, r3, #32
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80087ee:	e015      	b.n	800881c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	6a1b      	ldr	r3, [r3, #32]
 80087f4:	3303      	adds	r3, #3
 80087f6:	089b      	lsrs	r3, r3, #2
 80087f8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80087fa:	8afa      	ldrh	r2, [r7, #22]
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	b29b      	uxth	r3, r3
 8008806:	429a      	cmp	r2, r3
 8008808:	d90a      	bls.n	8008820 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	619a      	str	r2, [r3, #24]
        }
        break;
 8008816:	e003      	b.n	8008820 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008818:	bf00      	nop
 800881a:	e002      	b.n	8008822 <USB_HC_StartXfer+0x4d2>
        break;
 800881c:	bf00      	nop
 800881e:	e000      	b.n	8008822 <USB_HC_StartXfer+0x4d2>
        break;
 8008820:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	6999      	ldr	r1, [r3, #24]
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	785a      	ldrb	r2, [r3, #1]
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	b29b      	uxth	r3, r3
 8008830:	2000      	movs	r0, #0
 8008832:	9000      	str	r0, [sp, #0]
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f7ff f9c9 	bl	8007bcc <USB_WritePacket>
  }

  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3728      	adds	r7, #40	@ 0x28
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008856:	695b      	ldr	r3, [r3, #20]
 8008858:	b29b      	uxth	r3, r3
}
 800885a:	4618      	mov	r0, r3
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr

08008866 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008866:	b480      	push	{r7}
 8008868:	b089      	sub	sp, #36	@ 0x24
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	460b      	mov	r3, r1
 8008870:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008876:	78fb      	ldrb	r3, [r7, #3]
 8008878:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800887a:	2300      	movs	r3, #0
 800887c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	4413      	add	r3, r2
 8008886:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	0c9b      	lsrs	r3, r3, #18
 800888e:	f003 0303 	and.w	r3, r3, #3
 8008892:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	015a      	lsls	r2, r3, #5
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	4413      	add	r3, r2
 800889c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	0fdb      	lsrs	r3, r3, #31
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	0fdb      	lsrs	r3, r3, #31
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	f003 0320 	and.w	r3, r3, #32
 80088c8:	2b20      	cmp	r3, #32
 80088ca:	d10d      	bne.n	80088e8 <USB_HC_Halt+0x82>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10a      	bne.n	80088e8 <USB_HC_Halt+0x82>
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d005      	beq.n	80088e4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d002      	beq.n	80088e4 <USB_HC_Halt+0x7e>
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2b03      	cmp	r3, #3
 80088e2:	d101      	bne.n	80088e8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	e0d8      	b.n	8008a9a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d002      	beq.n	80088f4 <USB_HC_Halt+0x8e>
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d173      	bne.n	80089dc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69ba      	ldr	r2, [r7, #24]
 8008904:	0151      	lsls	r1, r2, #5
 8008906:	69fa      	ldr	r2, [r7, #28]
 8008908:	440a      	add	r2, r1
 800890a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800890e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008912:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f003 0320 	and.w	r3, r3, #32
 800891c:	2b00      	cmp	r3, #0
 800891e:	d14a      	bne.n	80089b6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008924:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d133      	bne.n	8008994 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	4413      	add	r3, r2
 8008934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	69ba      	ldr	r2, [r7, #24]
 800893c:	0151      	lsls	r1, r2, #5
 800893e:	69fa      	ldr	r2, [r7, #28]
 8008940:	440a      	add	r2, r1
 8008942:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008946:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800894a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	4413      	add	r3, r2
 8008954:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	69ba      	ldr	r2, [r7, #24]
 800895c:	0151      	lsls	r1, r2, #5
 800895e:	69fa      	ldr	r2, [r7, #28]
 8008960:	440a      	add	r2, r1
 8008962:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008966:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800896a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	3301      	adds	r3, #1
 8008970:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008978:	d82e      	bhi.n	80089d8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	015a      	lsls	r2, r3, #5
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	4413      	add	r3, r2
 8008982:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800898c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008990:	d0ec      	beq.n	800896c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008992:	e081      	b.n	8008a98 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	4413      	add	r3, r2
 800899c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	69ba      	ldr	r2, [r7, #24]
 80089a4:	0151      	lsls	r1, r2, #5
 80089a6:	69fa      	ldr	r2, [r7, #28]
 80089a8:	440a      	add	r2, r1
 80089aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80089b2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80089b4:	e070      	b.n	8008a98 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	015a      	lsls	r2, r3, #5
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	4413      	add	r3, r2
 80089be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	0151      	lsls	r1, r2, #5
 80089c8:	69fa      	ldr	r2, [r7, #28]
 80089ca:	440a      	add	r2, r1
 80089cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80089d4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80089d6:	e05f      	b.n	8008a98 <USB_HC_Halt+0x232>
            break;
 80089d8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80089da:	e05d      	b.n	8008a98 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	0151      	lsls	r1, r2, #5
 80089ee:	69fa      	ldr	r2, [r7, #28]
 80089f0:	440a      	add	r2, r1
 80089f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80089fa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a02:	691b      	ldr	r3, [r3, #16]
 8008a04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d133      	bne.n	8008a74 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	015a      	lsls	r2, r3, #5
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	4413      	add	r3, r2
 8008a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	69ba      	ldr	r2, [r7, #24]
 8008a1c:	0151      	lsls	r1, r2, #5
 8008a1e:	69fa      	ldr	r2, [r7, #28]
 8008a20:	440a      	add	r2, r1
 8008a22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a2a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	015a      	lsls	r2, r3, #5
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	4413      	add	r3, r2
 8008a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	69ba      	ldr	r2, [r7, #24]
 8008a3c:	0151      	lsls	r1, r2, #5
 8008a3e:	69fa      	ldr	r2, [r7, #28]
 8008a40:	440a      	add	r2, r1
 8008a42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a4a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008a58:	d81d      	bhi.n	8008a96 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a70:	d0ec      	beq.n	8008a4c <USB_HC_Halt+0x1e6>
 8008a72:	e011      	b.n	8008a98 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	69ba      	ldr	r2, [r7, #24]
 8008a84:	0151      	lsls	r1, r2, #5
 8008a86:	69fa      	ldr	r2, [r7, #28]
 8008a88:	440a      	add	r2, r1
 8008a8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a92:	6013      	str	r3, [r2, #0]
 8008a94:	e000      	b.n	8008a98 <USB_HC_Halt+0x232>
          break;
 8008a96:	bf00      	nop
    }
  }

  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3724      	adds	r7, #36	@ 0x24
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
	...

08008aa8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b087      	sub	sp, #28
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008ab8:	78fb      	ldrb	r3, [r7, #3]
 8008aba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008abc:	2301      	movs	r3, #1
 8008abe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	04da      	lsls	r2, r3, #19
 8008ac4:	4b15      	ldr	r3, [pc, #84]	@ (8008b1c <USB_DoPing+0x74>)
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	0151      	lsls	r1, r2, #5
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	440a      	add	r2, r1
 8008ad0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ad4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ad8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	015a      	lsls	r2, r3, #5
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008af0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008af8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	015a      	lsls	r2, r3, #5
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	4413      	add	r3, r2
 8008b02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b06:	461a      	mov	r2, r3
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	371c      	adds	r7, #28
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	1ff80000 	.word	0x1ff80000

08008b20 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008b30:	2300      	movs	r3, #0
 8008b32:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f7fe ff8c 	bl	8007a52 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b3a:	2110      	movs	r1, #16
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f7fe ffe5 	bl	8007b0c <USB_FlushTxFifo>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d001      	beq.n	8008b4c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7ff f80f 	bl	8007b70 <USB_FlushRxFifo>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	61bb      	str	r3, [r7, #24]
 8008b60:	e01f      	b.n	8008ba2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	015a      	lsls	r2, r3, #5
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	4413      	add	r3, r2
 8008b6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b78:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b80:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b88:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b96:	461a      	mov	r2, r3
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	61bb      	str	r3, [r7, #24]
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	2b0f      	cmp	r3, #15
 8008ba6:	d9dc      	bls.n	8008b62 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008ba8:	2300      	movs	r3, #0
 8008baa:	61bb      	str	r3, [r7, #24]
 8008bac:	e034      	b.n	8008c18 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	015a      	lsls	r2, r3, #5
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008bc4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bcc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008bd4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	015a      	lsls	r2, r3, #5
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	4413      	add	r3, r2
 8008bde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008be2:	461a      	mov	r2, r3
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	3301      	adds	r3, #1
 8008bec:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008bf4:	d80c      	bhi.n	8008c10 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	015a      	lsls	r2, r3, #5
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c0c:	d0ec      	beq.n	8008be8 <USB_StopHost+0xc8>
 8008c0e:	e000      	b.n	8008c12 <USB_StopHost+0xf2>
        break;
 8008c10:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	3301      	adds	r3, #1
 8008c16:	61bb      	str	r3, [r7, #24]
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	2b0f      	cmp	r3, #15
 8008c1c:	d9c7      	bls.n	8008bae <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c24:	461a      	mov	r2, r3
 8008c26:	f04f 33ff 	mov.w	r3, #4294967295
 8008c2a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c32:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7fe fefb 	bl	8007a30 <USB_EnableGlobalInt>

  return ret;
 8008c3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3720      	adds	r7, #32
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008c44:	b590      	push	{r4, r7, lr}
 8008c46:	b089      	sub	sp, #36	@ 0x24
 8008c48:	af04      	add	r7, sp, #16
 8008c4a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	2202      	movs	r2, #2
 8008c50:	2102      	movs	r1, #2
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fc85 	bl	8009562 <USBH_FindInterface>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
 8008c5e:	2bff      	cmp	r3, #255	@ 0xff
 8008c60:	d002      	beq.n	8008c68 <USBH_CDC_InterfaceInit+0x24>
 8008c62:	7bfb      	ldrb	r3, [r7, #15]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d901      	bls.n	8008c6c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008c68:	2302      	movs	r3, #2
 8008c6a:	e13d      	b.n	8008ee8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	4619      	mov	r1, r3
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fc5a 	bl	800952a <USBH_SelectInterface>
 8008c76:	4603      	mov	r3, r0
 8008c78:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008c7a:	7bbb      	ldrb	r3, [r7, #14]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d001      	beq.n	8008c84 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008c80:	2302      	movs	r3, #2
 8008c82:	e131      	b.n	8008ee8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008c8a:	2050      	movs	r0, #80	@ 0x50
 8008c8c:	f002 fb64 	bl	800b358 <malloc>
 8008c90:	4603      	mov	r3, r0
 8008c92:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c9a:	69db      	ldr	r3, [r3, #28]
 8008c9c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d101      	bne.n	8008ca8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	e11f      	b.n	8008ee8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008ca8:	2250      	movs	r2, #80	@ 0x50
 8008caa:	2100      	movs	r1, #0
 8008cac:	68b8      	ldr	r0, [r7, #8]
 8008cae:	f002 fc11 	bl	800b4d4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	211a      	movs	r1, #26
 8008cb8:	fb01 f303 	mul.w	r3, r1, r3
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	b25b      	sxtb	r3, r3
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	da15      	bge.n	8008cf6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	211a      	movs	r1, #26
 8008cd0:	fb01 f303 	mul.w	r3, r1, r3
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008cda:	781a      	ldrb	r2, [r3, #0]
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	211a      	movs	r1, #26
 8008ce6:	fb01 f303 	mul.w	r3, r1, r3
 8008cea:	4413      	add	r3, r2
 8008cec:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008cf0:	881a      	ldrh	r2, [r3, #0]
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	785b      	ldrb	r3, [r3, #1]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f001 ffbe 	bl	800ac7e <USBH_AllocPipe>
 8008d02:	4603      	mov	r3, r0
 8008d04:	461a      	mov	r2, r3
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	7819      	ldrb	r1, [r3, #0]
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	7858      	ldrb	r0, [r3, #1]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	8952      	ldrh	r2, [r2, #10]
 8008d22:	9202      	str	r2, [sp, #8]
 8008d24:	2203      	movs	r2, #3
 8008d26:	9201      	str	r2, [sp, #4]
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	4623      	mov	r3, r4
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f001 ff76 	bl	800ac20 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f002 fa85 	bl	800b24c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008d42:	2300      	movs	r3, #0
 8008d44:	2200      	movs	r2, #0
 8008d46:	210a      	movs	r1, #10
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fc0a 	bl	8009562 <USBH_FindInterface>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
 8008d54:	2bff      	cmp	r3, #255	@ 0xff
 8008d56:	d002      	beq.n	8008d5e <USBH_CDC_InterfaceInit+0x11a>
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d901      	bls.n	8008d62 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008d5e:	2302      	movs	r3, #2
 8008d60:	e0c2      	b.n	8008ee8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	211a      	movs	r1, #26
 8008d68:	fb01 f303 	mul.w	r3, r1, r3
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	b25b      	sxtb	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	da16      	bge.n	8008da8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	211a      	movs	r1, #26
 8008d80:	fb01 f303 	mul.w	r3, r1, r3
 8008d84:	4413      	add	r3, r2
 8008d86:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008d8a:	781a      	ldrb	r2, [r3, #0]
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	211a      	movs	r1, #26
 8008d96:	fb01 f303 	mul.w	r3, r1, r3
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008da0:	881a      	ldrh	r2, [r3, #0]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	835a      	strh	r2, [r3, #26]
 8008da6:	e015      	b.n	8008dd4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008da8:	7bfb      	ldrb	r3, [r7, #15]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	211a      	movs	r1, #26
 8008dae:	fb01 f303 	mul.w	r3, r1, r3
 8008db2:	4413      	add	r3, r2
 8008db4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008db8:	781a      	ldrb	r2, [r3, #0]
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008dbe:	7bfb      	ldrb	r3, [r7, #15]
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	211a      	movs	r1, #26
 8008dc4:	fb01 f303 	mul.w	r3, r1, r3
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008dce:	881a      	ldrh	r2, [r3, #0]
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	211a      	movs	r1, #26
 8008dda:	fb01 f303 	mul.w	r3, r1, r3
 8008dde:	4413      	add	r3, r2
 8008de0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	b25b      	sxtb	r3, r3
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	da16      	bge.n	8008e1a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	211a      	movs	r1, #26
 8008df2:	fb01 f303 	mul.w	r3, r1, r3
 8008df6:	4413      	add	r3, r2
 8008df8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008dfc:	781a      	ldrb	r2, [r3, #0]
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	211a      	movs	r1, #26
 8008e08:	fb01 f303 	mul.w	r3, r1, r3
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008e12:	881a      	ldrh	r2, [r3, #0]
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	835a      	strh	r2, [r3, #26]
 8008e18:	e015      	b.n	8008e46 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	211a      	movs	r1, #26
 8008e20:	fb01 f303 	mul.w	r3, r1, r3
 8008e24:	4413      	add	r3, r2
 8008e26:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008e2a:	781a      	ldrb	r2, [r3, #0]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	211a      	movs	r1, #26
 8008e36:	fb01 f303 	mul.w	r3, r1, r3
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008e40:	881a      	ldrh	r2, [r3, #0]
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	7b9b      	ldrb	r3, [r3, #14]
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f001 ff16 	bl	800ac7e <USBH_AllocPipe>
 8008e52:	4603      	mov	r3, r0
 8008e54:	461a      	mov	r2, r3
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	7bdb      	ldrb	r3, [r3, #15]
 8008e5e:	4619      	mov	r1, r3
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f001 ff0c 	bl	800ac7e <USBH_AllocPipe>
 8008e66:	4603      	mov	r3, r0
 8008e68:	461a      	mov	r2, r3
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	7b59      	ldrb	r1, [r3, #13]
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	7b98      	ldrb	r0, [r3, #14]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	8b12      	ldrh	r2, [r2, #24]
 8008e86:	9202      	str	r2, [sp, #8]
 8008e88:	2202      	movs	r2, #2
 8008e8a:	9201      	str	r2, [sp, #4]
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	4623      	mov	r3, r4
 8008e90:	4602      	mov	r2, r0
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f001 fec4 	bl	800ac20 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	7b19      	ldrb	r1, [r3, #12]
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	7bd8      	ldrb	r0, [r3, #15]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	8b52      	ldrh	r2, [r2, #26]
 8008eb0:	9202      	str	r2, [sp, #8]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	9201      	str	r2, [sp, #4]
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	4623      	mov	r3, r4
 8008eba:	4602      	mov	r2, r0
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f001 feaf 	bl	800ac20 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	7b5b      	ldrb	r3, [r3, #13]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f002 f9ba 	bl	800b24c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	7b1b      	ldrb	r3, [r3, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	4619      	mov	r1, r3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f002 f9b3 	bl	800b24c <USBH_LL_SetToggle>

  return USBH_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd90      	pop	{r4, r7, pc}

08008ef0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008efe:	69db      	ldr	r3, [r3, #28]
 8008f00:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00e      	beq.n	8008f28 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f001 fea4 	bl	800ac5e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f001 fecf 	bl	800acc0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	7b1b      	ldrb	r3, [r3, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00e      	beq.n	8008f4e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	7b1b      	ldrb	r3, [r3, #12]
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f001 fe91 	bl	800ac5e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	7b1b      	ldrb	r3, [r3, #12]
 8008f40:	4619      	mov	r1, r3
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f001 febc 	bl	800acc0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	7b5b      	ldrb	r3, [r3, #13]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00e      	beq.n	8008f74 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	7b5b      	ldrb	r3, [r3, #13]
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f001 fe7e 	bl	800ac5e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	7b5b      	ldrb	r3, [r3, #13]
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f001 fea9 	bl	800acc0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f7a:	69db      	ldr	r3, [r3, #28]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00b      	beq.n	8008f98 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f002 f9ed 	bl	800b368 <free>
    phost->pActiveClass->pData = 0U;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f94:	2200      	movs	r2, #0
 8008f96:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b084      	sub	sp, #16
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fb0:	69db      	ldr	r3, [r3, #28]
 8008fb2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	3340      	adds	r3, #64	@ 0x40
 8008fb8:	4619      	mov	r1, r3
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f8b1 	bl	8009122 <GetLineCoding>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008fc4:	7afb      	ldrb	r3, [r7, #11]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d105      	bne.n	8008fd6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008fd0:	2102      	movs	r1, #2
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008fd6:	7afb      	ldrb	r3, [r7, #11]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ff6:	69db      	ldr	r3, [r3, #28]
 8008ff8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009000:	2b04      	cmp	r3, #4
 8009002:	d877      	bhi.n	80090f4 <USBH_CDC_Process+0x114>
 8009004:	a201      	add	r2, pc, #4	@ (adr r2, 800900c <USBH_CDC_Process+0x2c>)
 8009006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900a:	bf00      	nop
 800900c:	08009021 	.word	0x08009021
 8009010:	08009027 	.word	0x08009027
 8009014:	08009057 	.word	0x08009057
 8009018:	080090cb 	.word	0x080090cb
 800901c:	080090d9 	.word	0x080090d9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	73fb      	strb	r3, [r7, #15]
      break;
 8009024:	e06d      	b.n	8009102 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800902a:	4619      	mov	r1, r3
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f897 	bl	8009160 <SetLineCoding>
 8009032:	4603      	mov	r3, r0
 8009034:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009036:	7bbb      	ldrb	r3, [r7, #14]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d104      	bne.n	8009046 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	2202      	movs	r2, #2
 8009040:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009044:	e058      	b.n	80090f8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009046:	7bbb      	ldrb	r3, [r7, #14]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d055      	beq.n	80090f8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	2204      	movs	r2, #4
 8009050:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009054:	e050      	b.n	80090f8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	3340      	adds	r3, #64	@ 0x40
 800905a:	4619      	mov	r1, r3
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f860 	bl	8009122 <GetLineCoding>
 8009062:	4603      	mov	r3, r0
 8009064:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009066:	7bbb      	ldrb	r3, [r7, #14]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d126      	bne.n	80090ba <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800907e:	791b      	ldrb	r3, [r3, #4]
 8009080:	429a      	cmp	r2, r3
 8009082:	d13b      	bne.n	80090fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800908e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009090:	429a      	cmp	r2, r3
 8009092:	d133      	bne.n	80090fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800909e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d12b      	bne.n	80090fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090ac:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d124      	bne.n	80090fc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f958 	bl	8009368 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80090b8:	e020      	b.n	80090fc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d01d      	beq.n	80090fc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	2204      	movs	r2, #4
 80090c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80090c8:	e018      	b.n	80090fc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f867 	bl	800919e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f8da 	bl	800928a <CDC_ProcessReception>
      break;
 80090d6:	e014      	b.n	8009102 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80090d8:	2100      	movs	r1, #0
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f001 f81a 	bl	800a114 <USBH_ClrFeature>
 80090e0:	4603      	mov	r3, r0
 80090e2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10a      	bne.n	8009100 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80090f2:	e005      	b.n	8009100 <USBH_CDC_Process+0x120>

    default:
      break;
 80090f4:	bf00      	nop
 80090f6:	e004      	b.n	8009102 <USBH_CDC_Process+0x122>
      break;
 80090f8:	bf00      	nop
 80090fa:	e002      	b.n	8009102 <USBH_CDC_Process+0x122>
      break;
 80090fc:	bf00      	nop
 80090fe:	e000      	b.n	8009102 <USBH_CDC_Process+0x122>
      break;
 8009100:	bf00      	nop

  }

  return status;
 8009102:	7bfb      	ldrb	r3, [r7, #15]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	370c      	adds	r7, #12
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr

08009122 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b082      	sub	sp, #8
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	22a1      	movs	r2, #161	@ 0xa1
 8009130:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2221      	movs	r2, #33	@ 0x21
 8009136:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2207      	movs	r2, #7
 8009148:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	2207      	movs	r2, #7
 800914e:	4619      	mov	r1, r3
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f001 fb14 	bl	800a77e <USBH_CtlReq>
 8009156:	4603      	mov	r3, r0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3708      	adds	r7, #8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2221      	movs	r2, #33	@ 0x21
 800916e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2220      	movs	r2, #32
 8009174:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2207      	movs	r2, #7
 8009186:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	2207      	movs	r2, #7
 800918c:	4619      	mov	r1, r3
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f001 faf5 	bl	800a77e <USBH_CtlReq>
 8009194:	4603      	mov	r3, r0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b086      	sub	sp, #24
 80091a2:	af02      	add	r7, sp, #8
 80091a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80091b0:	2300      	movs	r3, #0
 80091b2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d002      	beq.n	80091c4 <CDC_ProcessTransmission+0x26>
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d023      	beq.n	800920a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80091c2:	e05e      	b.n	8009282 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	8b12      	ldrh	r2, [r2, #24]
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d90b      	bls.n	80091e8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	69d9      	ldr	r1, [r3, #28]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	8b1a      	ldrh	r2, [r3, #24]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	7b5b      	ldrb	r3, [r3, #13]
 80091dc:	2001      	movs	r0, #1
 80091de:	9000      	str	r0, [sp, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f001 fcda 	bl	800ab9a <USBH_BulkSendData>
 80091e6:	e00b      	b.n	8009200 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	7b5b      	ldrb	r3, [r3, #13]
 80091f6:	2001      	movs	r0, #1
 80091f8:	9000      	str	r0, [sp, #0]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f001 fccd 	bl	800ab9a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2202      	movs	r2, #2
 8009204:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009208:	e03b      	b.n	8009282 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	7b5b      	ldrb	r3, [r3, #13]
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f001 fff1 	bl	800b1f8 <USBH_LL_GetURBState>
 8009216:	4603      	mov	r3, r0
 8009218:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800921a:	7afb      	ldrb	r3, [r7, #11]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d128      	bne.n	8009272 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	8b12      	ldrh	r2, [r2, #24]
 8009228:	4293      	cmp	r3, r2
 800922a:	d90e      	bls.n	800924a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	8b12      	ldrh	r2, [r2, #24]
 8009234:	1a9a      	subs	r2, r3, r2
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	69db      	ldr	r3, [r3, #28]
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	8b12      	ldrh	r2, [r2, #24]
 8009242:	441a      	add	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	61da      	str	r2, [r3, #28]
 8009248:	e002      	b.n	8009250 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009254:	2b00      	cmp	r3, #0
 8009256:	d004      	beq.n	8009262 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009260:	e00e      	b.n	8009280 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f868 	bl	8009340 <USBH_CDC_TransmitCallback>
      break;
 8009270:	e006      	b.n	8009280 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009272:	7afb      	ldrb	r3, [r7, #11]
 8009274:	2b02      	cmp	r3, #2
 8009276:	d103      	bne.n	8009280 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009280:	bf00      	nop
  }
}
 8009282:	bf00      	nop
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b086      	sub	sp, #24
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009298:	69db      	ldr	r3, [r3, #28]
 800929a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800929c:	2300      	movs	r3, #0
 800929e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	d002      	beq.n	80092b0 <CDC_ProcessReception+0x26>
 80092aa:	2b04      	cmp	r3, #4
 80092ac:	d00e      	beq.n	80092cc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80092ae:	e043      	b.n	8009338 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	6a19      	ldr	r1, [r3, #32]
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	8b5a      	ldrh	r2, [r3, #26]
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	7b1b      	ldrb	r3, [r3, #12]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f001 fc91 	bl	800abe4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	2204      	movs	r2, #4
 80092c6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80092ca:	e035      	b.n	8009338 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	7b1b      	ldrb	r3, [r3, #12]
 80092d0:	4619      	mov	r1, r3
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f001 ff90 	bl	800b1f8 <USBH_LL_GetURBState>
 80092d8:	4603      	mov	r3, r0
 80092da:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80092dc:	7cfb      	ldrb	r3, [r7, #19]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d129      	bne.n	8009336 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	7b1b      	ldrb	r3, [r3, #12]
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 fef3 	bl	800b0d4 <USBH_LL_GetLastXferSize>
 80092ee:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d016      	beq.n	8009328 <CDC_ProcessReception+0x9e>
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	8b5b      	ldrh	r3, [r3, #26]
 80092fe:	461a      	mov	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	4293      	cmp	r3, r2
 8009304:	d110      	bne.n	8009328 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	1ad2      	subs	r2, r2, r3
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	6a1a      	ldr	r2, [r3, #32]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	441a      	add	r2, r3
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	2203      	movs	r2, #3
 8009322:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009326:	e006      	b.n	8009336 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f80f 	bl	8009354 <USBH_CDC_ReceiveCallback>
      break;
 8009336:	bf00      	nop
  }
}
 8009338:	bf00      	nop
 800933a:	3718      	adds	r7, #24
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800935c:	bf00      	nop
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009370:	bf00      	nop
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	4613      	mov	r3, r2
 8009388:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d101      	bne.n	8009394 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009390:	2302      	movs	r3, #2
 8009392:	e029      	b.n	80093e8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	79fa      	ldrb	r2, [r7, #7]
 8009398:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f000 f81f 	bl	80093f0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d003      	beq.n	80093e0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f001 fdc3 	bl	800af6c <USBH_LL_Init>

  return USBH_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80093f8:	2300      	movs	r3, #0
 80093fa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80093fc:	2300      	movs	r3, #0
 80093fe:	60fb      	str	r3, [r7, #12]
 8009400:	e009      	b.n	8009416 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	33e0      	adds	r3, #224	@ 0xe0
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4413      	add	r3, r2
 800940c:	2200      	movs	r2, #0
 800940e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	3301      	adds	r3, #1
 8009414:	60fb      	str	r3, [r7, #12]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2b0f      	cmp	r3, #15
 800941a:	d9f2      	bls.n	8009402 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800941c:	2300      	movs	r3, #0
 800941e:	60fb      	str	r3, [r7, #12]
 8009420:	e009      	b.n	8009436 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	4413      	add	r3, r2
 8009428:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800942c:	2200      	movs	r2, #0
 800942e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	3301      	adds	r3, #1
 8009434:	60fb      	str	r3, [r7, #12]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800943c:	d3f1      	bcc.n	8009422 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2201      	movs	r2, #1
 800944e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2240      	movs	r2, #64	@ 0x40
 8009462:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2201      	movs	r2, #1
 8009476:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	331c      	adds	r3, #28
 800948e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009492:	2100      	movs	r1, #0
 8009494:	4618      	mov	r0, r3
 8009496:	f002 f81d 	bl	800b4d4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80094a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094a4:	2100      	movs	r1, #0
 80094a6:	4618      	mov	r0, r3
 80094a8:	f002 f814 	bl	800b4d4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80094b2:	2212      	movs	r2, #18
 80094b4:	2100      	movs	r1, #0
 80094b6:	4618      	mov	r0, r3
 80094b8:	f002 f80c 	bl	800b4d4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80094c2:	223e      	movs	r2, #62	@ 0x3e
 80094c4:	2100      	movs	r1, #0
 80094c6:	4618      	mov	r0, r3
 80094c8:	f002 f804 	bl	800b4d4 <memset>

  return USBH_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80094d6:	b480      	push	{r7}
 80094d8:	b085      	sub	sp, #20
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80094e0:	2300      	movs	r3, #0
 80094e2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d016      	beq.n	8009518 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10e      	bne.n	8009512 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80094fa:	1c59      	adds	r1, r3, #1
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	33de      	adds	r3, #222	@ 0xde
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800950c:	2300      	movs	r3, #0
 800950e:	73fb      	strb	r3, [r7, #15]
 8009510:	e004      	b.n	800951c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009512:	2302      	movs	r3, #2
 8009514:	73fb      	strb	r3, [r7, #15]
 8009516:	e001      	b.n	800951c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009518:	2302      	movs	r3, #2
 800951a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800951c:	7bfb      	ldrb	r3, [r7, #15]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800952a:	b480      	push	{r7}
 800952c:	b085      	sub	sp, #20
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	460b      	mov	r3, r1
 8009534:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009540:	78fa      	ldrb	r2, [r7, #3]
 8009542:	429a      	cmp	r2, r3
 8009544:	d204      	bcs.n	8009550 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	78fa      	ldrb	r2, [r7, #3]
 800954a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800954e:	e001      	b.n	8009554 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009550:	2302      	movs	r3, #2
 8009552:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009554:	7bfb      	ldrb	r3, [r7, #15]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009562:	b480      	push	{r7}
 8009564:	b087      	sub	sp, #28
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	4608      	mov	r0, r1
 800956c:	4611      	mov	r1, r2
 800956e:	461a      	mov	r2, r3
 8009570:	4603      	mov	r3, r0
 8009572:	70fb      	strb	r3, [r7, #3]
 8009574:	460b      	mov	r3, r1
 8009576:	70bb      	strb	r3, [r7, #2]
 8009578:	4613      	mov	r3, r2
 800957a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800957c:	2300      	movs	r3, #0
 800957e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009580:	2300      	movs	r3, #0
 8009582:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800958a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800958c:	e025      	b.n	80095da <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800958e:	7dfb      	ldrb	r3, [r7, #23]
 8009590:	221a      	movs	r2, #26
 8009592:	fb02 f303 	mul.w	r3, r2, r3
 8009596:	3308      	adds	r3, #8
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	4413      	add	r3, r2
 800959c:	3302      	adds	r3, #2
 800959e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	795b      	ldrb	r3, [r3, #5]
 80095a4:	78fa      	ldrb	r2, [r7, #3]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d002      	beq.n	80095b0 <USBH_FindInterface+0x4e>
 80095aa:	78fb      	ldrb	r3, [r7, #3]
 80095ac:	2bff      	cmp	r3, #255	@ 0xff
 80095ae:	d111      	bne.n	80095d4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80095b4:	78ba      	ldrb	r2, [r7, #2]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d002      	beq.n	80095c0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80095ba:	78bb      	ldrb	r3, [r7, #2]
 80095bc:	2bff      	cmp	r3, #255	@ 0xff
 80095be:	d109      	bne.n	80095d4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80095c4:	787a      	ldrb	r2, [r7, #1]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d002      	beq.n	80095d0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80095ca:	787b      	ldrb	r3, [r7, #1]
 80095cc:	2bff      	cmp	r3, #255	@ 0xff
 80095ce:	d101      	bne.n	80095d4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80095d0:	7dfb      	ldrb	r3, [r7, #23]
 80095d2:	e006      	b.n	80095e2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
 80095d6:	3301      	adds	r3, #1
 80095d8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80095da:	7dfb      	ldrb	r3, [r7, #23]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d9d6      	bls.n	800958e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80095e0:	23ff      	movs	r3, #255	@ 0xff
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	371c      	adds	r7, #28
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr

080095ee <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b082      	sub	sp, #8
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f001 fcf4 	bl	800afe4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80095fc:	2101      	movs	r1, #1
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f001 fe0d 	bl	800b21e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
	...

08009610 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b088      	sub	sp, #32
 8009614:	af04      	add	r7, sp, #16
 8009616:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009618:	2302      	movs	r3, #2
 800961a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800961c:	2300      	movs	r3, #0
 800961e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b01      	cmp	r3, #1
 800962a:	d102      	bne.n	8009632 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2203      	movs	r2, #3
 8009630:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	b2db      	uxtb	r3, r3
 8009638:	2b0b      	cmp	r3, #11
 800963a:	f200 81bb 	bhi.w	80099b4 <USBH_Process+0x3a4>
 800963e:	a201      	add	r2, pc, #4	@ (adr r2, 8009644 <USBH_Process+0x34>)
 8009640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009644:	08009675 	.word	0x08009675
 8009648:	080096a7 	.word	0x080096a7
 800964c:	0800970f 	.word	0x0800970f
 8009650:	0800994f 	.word	0x0800994f
 8009654:	080099b5 	.word	0x080099b5
 8009658:	080097af 	.word	0x080097af
 800965c:	080098f5 	.word	0x080098f5
 8009660:	080097e5 	.word	0x080097e5
 8009664:	08009805 	.word	0x08009805
 8009668:	08009823 	.word	0x08009823
 800966c:	08009867 	.word	0x08009867
 8009670:	08009937 	.word	0x08009937
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800967a:	b2db      	uxtb	r3, r3
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 819b 	beq.w	80099b8 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009688:	20c8      	movs	r0, #200	@ 0xc8
 800968a:	f001 fe12 	bl	800b2b2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f001 fd05 	bl	800b09e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80096a4:	e188      	b.n	80099b8 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d107      	bne.n	80096c0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2202      	movs	r2, #2
 80096bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096be:	e18a      	b.n	80099d6 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80096c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80096ca:	d914      	bls.n	80096f6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80096d2:	3301      	adds	r3, #1
 80096d4:	b2da      	uxtb	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80096e2:	2b03      	cmp	r3, #3
 80096e4:	d903      	bls.n	80096ee <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	220d      	movs	r2, #13
 80096ea:	701a      	strb	r2, [r3, #0]
      break;
 80096ec:	e173      	b.n	80099d6 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	701a      	strb	r2, [r3, #0]
      break;
 80096f4:	e16f      	b.n	80099d6 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80096fc:	f103 020a 	add.w	r2, r3, #10
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009706:	200a      	movs	r0, #10
 8009708:	f001 fdd3 	bl	800b2b2 <USBH_Delay>
      break;
 800970c:	e163      	b.n	80099d6 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009714:	2b00      	cmp	r3, #0
 8009716:	d005      	beq.n	8009724 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800971e:	2104      	movs	r1, #4
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009724:	2064      	movs	r0, #100	@ 0x64
 8009726:	f001 fdc4 	bl	800b2b2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f001 fc90 	bl	800b050 <USBH_LL_GetSpeed>
 8009730:	4603      	mov	r3, r0
 8009732:	461a      	mov	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2205      	movs	r2, #5
 800973e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009740:	2100      	movs	r1, #0
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f001 fa9b 	bl	800ac7e <USBH_AllocPipe>
 8009748:	4603      	mov	r3, r0
 800974a:	461a      	mov	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009750:	2180      	movs	r1, #128	@ 0x80
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f001 fa93 	bl	800ac7e <USBH_AllocPipe>
 8009758:	4603      	mov	r3, r0
 800975a:	461a      	mov	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	7919      	ldrb	r1, [r3, #4]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009774:	9202      	str	r2, [sp, #8]
 8009776:	2200      	movs	r2, #0
 8009778:	9201      	str	r2, [sp, #4]
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	4603      	mov	r3, r0
 800977e:	2280      	movs	r2, #128	@ 0x80
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f001 fa4d 	bl	800ac20 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	7959      	ldrb	r1, [r3, #5]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800979a:	9202      	str	r2, [sp, #8]
 800979c:	2200      	movs	r2, #0
 800979e:	9201      	str	r2, [sp, #4]
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	4603      	mov	r3, r0
 80097a4:	2200      	movs	r2, #0
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f001 fa3a 	bl	800ac20 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80097ac:	e113      	b.n	80099d6 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f916 	bl	80099e0 <USBH_HandleEnum>
 80097b4:	4603      	mov	r3, r0
 80097b6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80097b8:	7bbb      	ldrb	r3, [r7, #14]
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f040 80fd 	bne.w	80099bc <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d103      	bne.n	80097dc <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2208      	movs	r2, #8
 80097d8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80097da:	e0ef      	b.n	80099bc <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2207      	movs	r2, #7
 80097e0:	701a      	strb	r2, [r3, #0]
      break;
 80097e2:	e0eb      	b.n	80099bc <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f000 80e8 	beq.w	80099c0 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80097f6:	2101      	movs	r1, #1
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2208      	movs	r2, #8
 8009800:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009802:	e0dd      	b.n	80099c0 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800980a:	4619      	mov	r1, r3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fc3a 	bl	800a086 <USBH_SetCfg>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	f040 80d5 	bne.w	80099c4 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2209      	movs	r2, #9
 800981e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009820:	e0d0      	b.n	80099c4 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009828:	f003 0320 	and.w	r3, r3, #32
 800982c:	2b00      	cmp	r3, #0
 800982e:	d016      	beq.n	800985e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009830:	2101      	movs	r1, #1
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 fc4a 	bl	800a0cc <USBH_SetFeature>
 8009838:	4603      	mov	r3, r0
 800983a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800983c:	7bbb      	ldrb	r3, [r7, #14]
 800983e:	b2db      	uxtb	r3, r3
 8009840:	2b00      	cmp	r3, #0
 8009842:	d103      	bne.n	800984c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	220a      	movs	r2, #10
 8009848:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800984a:	e0bd      	b.n	80099c8 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800984c:	7bbb      	ldrb	r3, [r7, #14]
 800984e:	b2db      	uxtb	r3, r3
 8009850:	2b03      	cmp	r3, #3
 8009852:	f040 80b9 	bne.w	80099c8 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	220a      	movs	r2, #10
 800985a:	701a      	strb	r2, [r3, #0]
      break;
 800985c:	e0b4      	b.n	80099c8 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	220a      	movs	r2, #10
 8009862:	701a      	strb	r2, [r3, #0]
      break;
 8009864:	e0b0      	b.n	80099c8 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800986c:	2b00      	cmp	r3, #0
 800986e:	f000 80ad 	beq.w	80099cc <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800987a:	2300      	movs	r3, #0
 800987c:	73fb      	strb	r3, [r7, #15]
 800987e:	e016      	b.n	80098ae <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009880:	7bfa      	ldrb	r2, [r7, #15]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	32de      	adds	r2, #222	@ 0xde
 8009886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800988a:	791a      	ldrb	r2, [r3, #4]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009892:	429a      	cmp	r2, r3
 8009894:	d108      	bne.n	80098a8 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009896:	7bfa      	ldrb	r2, [r7, #15]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	32de      	adds	r2, #222	@ 0xde
 800989c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80098a6:	e005      	b.n	80098b4 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80098a8:	7bfb      	ldrb	r3, [r7, #15]
 80098aa:	3301      	adds	r3, #1
 80098ac:	73fb      	strb	r3, [r7, #15]
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d0e5      	beq.n	8009880 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d016      	beq.n	80098ec <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	4798      	blx	r3
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d109      	bne.n	80098e4 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2206      	movs	r2, #6
 80098d4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80098dc:	2103      	movs	r1, #3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80098e2:	e073      	b.n	80099cc <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	220d      	movs	r2, #13
 80098e8:	701a      	strb	r2, [r3, #0]
      break;
 80098ea:	e06f      	b.n	80099cc <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	220d      	movs	r2, #13
 80098f0:	701a      	strb	r2, [r3, #0]
      break;
 80098f2:	e06b      	b.n	80099cc <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d017      	beq.n	800992e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	4798      	blx	r3
 800990a:	4603      	mov	r3, r0
 800990c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800990e:	7bbb      	ldrb	r3, [r7, #14]
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b00      	cmp	r3, #0
 8009914:	d103      	bne.n	800991e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	220b      	movs	r2, #11
 800991a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800991c:	e058      	b.n	80099d0 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800991e:	7bbb      	ldrb	r3, [r7, #14]
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b02      	cmp	r3, #2
 8009924:	d154      	bne.n	80099d0 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	220d      	movs	r2, #13
 800992a:	701a      	strb	r2, [r3, #0]
      break;
 800992c:	e050      	b.n	80099d0 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	220d      	movs	r2, #13
 8009932:	701a      	strb	r2, [r3, #0]
      break;
 8009934:	e04c      	b.n	80099d0 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800993c:	2b00      	cmp	r3, #0
 800993e:	d049      	beq.n	80099d4 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	4798      	blx	r3
      }
      break;
 800994c:	e042      	b.n	80099d4 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7ff fd4a 	bl	80093f0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009962:	2b00      	cmp	r3, #0
 8009964:	d009      	beq.n	800997a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009980:	2b00      	cmp	r3, #0
 8009982:	d005      	beq.n	8009990 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800998a:	2105      	movs	r1, #5
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009996:	b2db      	uxtb	r3, r3
 8009998:	2b01      	cmp	r3, #1
 800999a:	d107      	bne.n	80099ac <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7ff fe22 	bl	80095ee <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80099aa:	e014      	b.n	80099d6 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f001 fb19 	bl	800afe4 <USBH_LL_Start>
      break;
 80099b2:	e010      	b.n	80099d6 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80099b4:	bf00      	nop
 80099b6:	e00e      	b.n	80099d6 <USBH_Process+0x3c6>
      break;
 80099b8:	bf00      	nop
 80099ba:	e00c      	b.n	80099d6 <USBH_Process+0x3c6>
      break;
 80099bc:	bf00      	nop
 80099be:	e00a      	b.n	80099d6 <USBH_Process+0x3c6>
    break;
 80099c0:	bf00      	nop
 80099c2:	e008      	b.n	80099d6 <USBH_Process+0x3c6>
      break;
 80099c4:	bf00      	nop
 80099c6:	e006      	b.n	80099d6 <USBH_Process+0x3c6>
      break;
 80099c8:	bf00      	nop
 80099ca:	e004      	b.n	80099d6 <USBH_Process+0x3c6>
      break;
 80099cc:	bf00      	nop
 80099ce:	e002      	b.n	80099d6 <USBH_Process+0x3c6>
      break;
 80099d0:	bf00      	nop
 80099d2:	e000      	b.n	80099d6 <USBH_Process+0x3c6>
      break;
 80099d4:	bf00      	nop
  }
  return USBH_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af04      	add	r7, sp, #16
 80099e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80099e8:	2301      	movs	r3, #1
 80099ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80099ec:	2301      	movs	r3, #1
 80099ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	785b      	ldrb	r3, [r3, #1]
 80099f4:	2b07      	cmp	r3, #7
 80099f6:	f200 81bd 	bhi.w	8009d74 <USBH_HandleEnum+0x394>
 80099fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009a00 <USBH_HandleEnum+0x20>)
 80099fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a00:	08009a21 	.word	0x08009a21
 8009a04:	08009adb 	.word	0x08009adb
 8009a08:	08009b45 	.word	0x08009b45
 8009a0c:	08009bcf 	.word	0x08009bcf
 8009a10:	08009c39 	.word	0x08009c39
 8009a14:	08009ca9 	.word	0x08009ca9
 8009a18:	08009cef 	.word	0x08009cef
 8009a1c:	08009d35 	.word	0x08009d35
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009a20:	2108      	movs	r1, #8
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fa4c 	bl	8009ec0 <USBH_Get_DevDesc>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d12e      	bne.n	8009a90 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	7919      	ldrb	r1, [r3, #4]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009a56:	9202      	str	r2, [sp, #8]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	9201      	str	r2, [sp, #4]
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2280      	movs	r2, #128	@ 0x80
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f001 f8dc 	bl	800ac20 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	7959      	ldrb	r1, [r3, #5]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a7c:	9202      	str	r2, [sp, #8]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	9201      	str	r2, [sp, #4]
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	4603      	mov	r3, r0
 8009a86:	2200      	movs	r2, #0
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f001 f8c9 	bl	800ac20 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009a8e:	e173      	b.n	8009d78 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a90:	7bbb      	ldrb	r3, [r7, #14]
 8009a92:	2b03      	cmp	r3, #3
 8009a94:	f040 8170 	bne.w	8009d78 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	b2da      	uxtb	r2, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009aae:	2b03      	cmp	r3, #3
 8009ab0:	d903      	bls.n	8009aba <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	220d      	movs	r2, #13
 8009ab6:	701a      	strb	r2, [r3, #0]
      break;
 8009ab8:	e15e      	b.n	8009d78 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	795b      	ldrb	r3, [r3, #5]
 8009abe:	4619      	mov	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f001 f8fd 	bl	800acc0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	791b      	ldrb	r3, [r3, #4]
 8009aca:	4619      	mov	r1, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f001 f8f7 	bl	800acc0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	701a      	strb	r2, [r3, #0]
      break;
 8009ad8:	e14e      	b.n	8009d78 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009ada:	2112      	movs	r1, #18
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f9ef 	bl	8009ec0 <USBH_Get_DevDesc>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ae6:	7bbb      	ldrb	r3, [r7, #14]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d103      	bne.n	8009af4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2202      	movs	r2, #2
 8009af0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009af2:	e143      	b.n	8009d7c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009af4:	7bbb      	ldrb	r3, [r7, #14]
 8009af6:	2b03      	cmp	r3, #3
 8009af8:	f040 8140 	bne.w	8009d7c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009b02:	3301      	adds	r3, #1
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009b12:	2b03      	cmp	r3, #3
 8009b14:	d903      	bls.n	8009b1e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	220d      	movs	r2, #13
 8009b1a:	701a      	strb	r2, [r3, #0]
      break;
 8009b1c:	e12e      	b.n	8009d7c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	795b      	ldrb	r3, [r3, #5]
 8009b22:	4619      	mov	r1, r3
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f001 f8cb 	bl	800acc0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	791b      	ldrb	r3, [r3, #4]
 8009b2e:	4619      	mov	r1, r3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f001 f8c5 	bl	800acc0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	701a      	strb	r2, [r3, #0]
      break;
 8009b42:	e11b      	b.n	8009d7c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009b44:	2101      	movs	r1, #1
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fa79 	bl	800a03e <USBH_SetAddress>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b50:	7bbb      	ldrb	r3, [r7, #14]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d130      	bne.n	8009bb8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009b56:	2002      	movs	r0, #2
 8009b58:	f001 fbab 	bl	800b2b2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2203      	movs	r2, #3
 8009b68:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	7919      	ldrb	r1, [r3, #4]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009b7e:	9202      	str	r2, [sp, #8]
 8009b80:	2200      	movs	r2, #0
 8009b82:	9201      	str	r2, [sp, #4]
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	4603      	mov	r3, r0
 8009b88:	2280      	movs	r2, #128	@ 0x80
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f001 f848 	bl	800ac20 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	7959      	ldrb	r1, [r3, #5]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009ba4:	9202      	str	r2, [sp, #8]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	9201      	str	r2, [sp, #4]
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	4603      	mov	r3, r0
 8009bae:	2200      	movs	r2, #0
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f001 f835 	bl	800ac20 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009bb6:	e0e3      	b.n	8009d80 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bb8:	7bbb      	ldrb	r3, [r7, #14]
 8009bba:	2b03      	cmp	r3, #3
 8009bbc:	f040 80e0 	bne.w	8009d80 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	220d      	movs	r2, #13
 8009bc4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	705a      	strb	r2, [r3, #1]
      break;
 8009bcc:	e0d8      	b.n	8009d80 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009bce:	2109      	movs	r1, #9
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 f9a1 	bl	8009f18 <USBH_Get_CfgDesc>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009bda:	7bbb      	ldrb	r3, [r7, #14]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d103      	bne.n	8009be8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2204      	movs	r2, #4
 8009be4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009be6:	e0cd      	b.n	8009d84 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
 8009bea:	2b03      	cmp	r3, #3
 8009bec:	f040 80ca 	bne.w	8009d84 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009c06:	2b03      	cmp	r3, #3
 8009c08:	d903      	bls.n	8009c12 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	220d      	movs	r2, #13
 8009c0e:	701a      	strb	r2, [r3, #0]
      break;
 8009c10:	e0b8      	b.n	8009d84 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	795b      	ldrb	r3, [r3, #5]
 8009c16:	4619      	mov	r1, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f001 f851 	bl	800acc0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	791b      	ldrb	r3, [r3, #4]
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f001 f84b 	bl	800acc0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	701a      	strb	r2, [r3, #0]
      break;
 8009c36:	e0a5      	b.n	8009d84 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009c3e:	4619      	mov	r1, r3
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 f969 	bl	8009f18 <USBH_Get_CfgDesc>
 8009c46:	4603      	mov	r3, r0
 8009c48:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c4a:	7bbb      	ldrb	r3, [r7, #14]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d103      	bne.n	8009c58 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2205      	movs	r2, #5
 8009c54:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009c56:	e097      	b.n	8009d88 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c58:	7bbb      	ldrb	r3, [r7, #14]
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	f040 8094 	bne.w	8009d88 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009c66:	3301      	adds	r3, #1
 8009c68:	b2da      	uxtb	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009c76:	2b03      	cmp	r3, #3
 8009c78:	d903      	bls.n	8009c82 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	220d      	movs	r2, #13
 8009c7e:	701a      	strb	r2, [r3, #0]
      break;
 8009c80:	e082      	b.n	8009d88 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	795b      	ldrb	r3, [r3, #5]
 8009c86:	4619      	mov	r1, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f001 f819 	bl	800acc0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	791b      	ldrb	r3, [r3, #4]
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f001 f813 	bl	800acc0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	701a      	strb	r2, [r3, #0]
      break;
 8009ca6:	e06f      	b.n	8009d88 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d019      	beq.n	8009ce6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009cbe:	23ff      	movs	r3, #255	@ 0xff
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f953 	bl	8009f6c <USBH_Get_StringDesc>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d103      	bne.n	8009cd8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2206      	movs	r2, #6
 8009cd4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009cd6:	e059      	b.n	8009d8c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009cd8:	7bbb      	ldrb	r3, [r7, #14]
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d156      	bne.n	8009d8c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2206      	movs	r2, #6
 8009ce2:	705a      	strb	r2, [r3, #1]
      break;
 8009ce4:	e052      	b.n	8009d8c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2206      	movs	r2, #6
 8009cea:	705a      	strb	r2, [r3, #1]
      break;
 8009cec:	e04e      	b.n	8009d8c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d019      	beq.n	8009d2c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009d04:	23ff      	movs	r3, #255	@ 0xff
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f930 	bl	8009f6c <USBH_Get_StringDesc>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009d10:	7bbb      	ldrb	r3, [r7, #14]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d103      	bne.n	8009d1e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2207      	movs	r2, #7
 8009d1a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009d1c:	e038      	b.n	8009d90 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d1e:	7bbb      	ldrb	r3, [r7, #14]
 8009d20:	2b03      	cmp	r3, #3
 8009d22:	d135      	bne.n	8009d90 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2207      	movs	r2, #7
 8009d28:	705a      	strb	r2, [r3, #1]
      break;
 8009d2a:	e031      	b.n	8009d90 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2207      	movs	r2, #7
 8009d30:	705a      	strb	r2, [r3, #1]
      break;
 8009d32:	e02d      	b.n	8009d90 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d017      	beq.n	8009d6e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009d4a:	23ff      	movs	r3, #255	@ 0xff
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 f90d 	bl	8009f6c <USBH_Get_StringDesc>
 8009d52:	4603      	mov	r3, r0
 8009d54:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009d56:	7bbb      	ldrb	r3, [r7, #14]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d102      	bne.n	8009d62 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009d60:	e018      	b.n	8009d94 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d62:	7bbb      	ldrb	r3, [r7, #14]
 8009d64:	2b03      	cmp	r3, #3
 8009d66:	d115      	bne.n	8009d94 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d6c:	e012      	b.n	8009d94 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	73fb      	strb	r3, [r7, #15]
      break;
 8009d72:	e00f      	b.n	8009d94 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009d74:	bf00      	nop
 8009d76:	e00e      	b.n	8009d96 <USBH_HandleEnum+0x3b6>
      break;
 8009d78:	bf00      	nop
 8009d7a:	e00c      	b.n	8009d96 <USBH_HandleEnum+0x3b6>
      break;
 8009d7c:	bf00      	nop
 8009d7e:	e00a      	b.n	8009d96 <USBH_HandleEnum+0x3b6>
      break;
 8009d80:	bf00      	nop
 8009d82:	e008      	b.n	8009d96 <USBH_HandleEnum+0x3b6>
      break;
 8009d84:	bf00      	nop
 8009d86:	e006      	b.n	8009d96 <USBH_HandleEnum+0x3b6>
      break;
 8009d88:	bf00      	nop
 8009d8a:	e004      	b.n	8009d96 <USBH_HandleEnum+0x3b6>
      break;
 8009d8c:	bf00      	nop
 8009d8e:	e002      	b.n	8009d96 <USBH_HandleEnum+0x3b6>
      break;
 8009d90:	bf00      	nop
 8009d92:	e000      	b.n	8009d96 <USBH_HandleEnum+0x3b6>
      break;
 8009d94:	bf00      	nop
  }
  return Status;
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009db2:	bf00      	nop
 8009db4:	370c      	adds	r7, #12
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b082      	sub	sp, #8
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009dcc:	1c5a      	adds	r2, r3, #1
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f804 	bl	8009de2 <USBH_HandleSof>
}
 8009dda:	bf00      	nop
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b082      	sub	sp, #8
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	2b0b      	cmp	r3, #11
 8009df2:	d10a      	bne.n	8009e0a <USBH_HandleSof+0x28>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d005      	beq.n	8009e0a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	4798      	blx	r3
  }
}
 8009e0a:	bf00      	nop
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b083      	sub	sp, #12
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009e22:	bf00      	nop
}
 8009e24:	370c      	adds	r7, #12
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr

08009e2e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009e2e:	b480      	push	{r7}
 8009e30:	b083      	sub	sp, #12
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009e3e:	bf00      	nop
}
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	b083      	sub	sp, #12
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f001 f8be 	bl	800b01a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	791b      	ldrb	r3, [r3, #4]
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 ff0b 	bl	800acc0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	795b      	ldrb	r3, [r3, #5]
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 ff05 	bl	800acc0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af02      	add	r7, sp, #8
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	460b      	mov	r3, r1
 8009eca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009ecc:	887b      	ldrh	r3, [r7, #2]
 8009ece:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ed2:	d901      	bls.n	8009ed8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009ed4:	2303      	movs	r3, #3
 8009ed6:	e01b      	b.n	8009f10 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009ede:	887b      	ldrh	r3, [r7, #2]
 8009ee0:	9300      	str	r3, [sp, #0]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009ee8:	2100      	movs	r1, #0
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f872 	bl	8009fd4 <USBH_GetDescriptor>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d109      	bne.n	8009f0e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009f00:	887a      	ldrh	r2, [r7, #2]
 8009f02:	4619      	mov	r1, r3
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f929 	bl	800a15c <USBH_ParseDevDesc>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af02      	add	r7, sp, #8
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	460b      	mov	r3, r1
 8009f22:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	331c      	adds	r3, #28
 8009f28:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009f2a:	887b      	ldrh	r3, [r7, #2]
 8009f2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f30:	d901      	bls.n	8009f36 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009f32:	2303      	movs	r3, #3
 8009f34:	e016      	b.n	8009f64 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009f36:	887b      	ldrh	r3, [r7, #2]
 8009f38:	9300      	str	r3, [sp, #0]
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f40:	2100      	movs	r1, #0
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f846 	bl	8009fd4 <USBH_GetDescriptor>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009f4c:	7bfb      	ldrb	r3, [r7, #15]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d107      	bne.n	8009f62 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009f52:	887b      	ldrh	r3, [r7, #2]
 8009f54:	461a      	mov	r2, r3
 8009f56:	68b9      	ldr	r1, [r7, #8]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 f9af 	bl	800a2bc <USBH_ParseCfgDesc>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3710      	adds	r7, #16
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b088      	sub	sp, #32
 8009f70:	af02      	add	r7, sp, #8
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	607a      	str	r2, [r7, #4]
 8009f76:	461a      	mov	r2, r3
 8009f78:	460b      	mov	r3, r1
 8009f7a:	72fb      	strb	r3, [r7, #11]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009f80:	893b      	ldrh	r3, [r7, #8]
 8009f82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f86:	d802      	bhi.n	8009f8e <USBH_Get_StringDesc+0x22>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d101      	bne.n	8009f92 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009f8e:	2303      	movs	r3, #3
 8009f90:	e01c      	b.n	8009fcc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009f92:	7afb      	ldrb	r3, [r7, #11]
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009f9a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009fa2:	893b      	ldrh	r3, [r7, #8]
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	2100      	movs	r1, #0
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f000 f812 	bl	8009fd4 <USBH_GetDescriptor>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009fb4:	7dfb      	ldrb	r3, [r7, #23]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d107      	bne.n	8009fca <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009fc0:	893a      	ldrh	r2, [r7, #8]
 8009fc2:	6879      	ldr	r1, [r7, #4]
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f000 fb8d 	bl	800a6e4 <USBH_ParseStringDesc>
  }

  return status;
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	607b      	str	r3, [r7, #4]
 8009fde:	460b      	mov	r3, r1
 8009fe0:	72fb      	strb	r3, [r7, #11]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	789b      	ldrb	r3, [r3, #2]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d11c      	bne.n	800a028 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009fee:	7afb      	ldrb	r3, [r7, #11]
 8009ff0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009ff4:	b2da      	uxtb	r2, r3
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2206      	movs	r2, #6
 8009ffe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	893a      	ldrh	r2, [r7, #8]
 800a004:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a006:	893b      	ldrh	r3, [r7, #8]
 800a008:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a00c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a010:	d104      	bne.n	800a01c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f240 4209 	movw	r2, #1033	@ 0x409
 800a018:	829a      	strh	r2, [r3, #20]
 800a01a:	e002      	b.n	800a022 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2200      	movs	r2, #0
 800a020:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	8b3a      	ldrh	r2, [r7, #24]
 800a026:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a028:	8b3b      	ldrh	r3, [r7, #24]
 800a02a:	461a      	mov	r2, r3
 800a02c:	6879      	ldr	r1, [r7, #4]
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f000 fba5 	bl	800a77e <USBH_CtlReq>
 800a034:	4603      	mov	r3, r0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b082      	sub	sp, #8
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
 800a046:	460b      	mov	r3, r1
 800a048:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	789b      	ldrb	r3, [r3, #2]
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d10f      	bne.n	800a072 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2205      	movs	r2, #5
 800a05c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a05e:	78fb      	ldrb	r3, [r7, #3]
 800a060:	b29a      	uxth	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a072:	2200      	movs	r2, #0
 800a074:	2100      	movs	r1, #0
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 fb81 	bl	800a77e <USBH_CtlReq>
 800a07c:	4603      	mov	r3, r0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3708      	adds	r7, #8
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b082      	sub	sp, #8
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	460b      	mov	r3, r1
 800a090:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	789b      	ldrb	r3, [r3, #2]
 800a096:	2b01      	cmp	r3, #1
 800a098:	d10e      	bne.n	800a0b8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2209      	movs	r2, #9
 800a0a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	887a      	ldrh	r2, [r7, #2]
 800a0aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 fb5e 	bl	800a77e <USBH_CtlReq>
 800a0c2:	4603      	mov	r3, r0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	789b      	ldrb	r3, [r3, #2]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d10f      	bne.n	800a100 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2203      	movs	r2, #3
 800a0ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a0ec:	78fb      	ldrb	r3, [r7, #3]
 800a0ee:	b29a      	uxth	r2, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a100:	2200      	movs	r2, #0
 800a102:	2100      	movs	r1, #0
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fb3a 	bl	800a77e <USBH_CtlReq>
 800a10a:	4603      	mov	r3, r0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3708      	adds	r7, #8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	460b      	mov	r3, r1
 800a11e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	789b      	ldrb	r3, [r3, #2]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d10f      	bne.n	800a148 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2202      	movs	r2, #2
 800a12c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a13a:	78fb      	ldrb	r3, [r7, #3]
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a148:	2200      	movs	r2, #0
 800a14a:	2100      	movs	r1, #0
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 fb16 	bl	800a77e <USBH_CtlReq>
 800a152:	4603      	mov	r3, r0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b087      	sub	sp, #28
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	4613      	mov	r3, r2
 800a168:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a170:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d101      	bne.n	800a180 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a17c:	2302      	movs	r3, #2
 800a17e:	e094      	b.n	800a2aa <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	781a      	ldrb	r2, [r3, #0]
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	785a      	ldrb	r2, [r3, #1]
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	3302      	adds	r3, #2
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	461a      	mov	r2, r3
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	3303      	adds	r3, #3
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	021b      	lsls	r3, r3, #8
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	b29a      	uxth	r2, r3
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	791a      	ldrb	r2, [r3, #4]
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	795a      	ldrb	r2, [r3, #5]
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	799a      	ldrb	r2, [r3, #6]
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	79da      	ldrb	r2, [r3, #7]
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d004      	beq.n	800a1de <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d11b      	bne.n	800a216 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	79db      	ldrb	r3, [r3, #7]
 800a1e2:	2b20      	cmp	r3, #32
 800a1e4:	dc0f      	bgt.n	800a206 <USBH_ParseDevDesc+0xaa>
 800a1e6:	2b08      	cmp	r3, #8
 800a1e8:	db0f      	blt.n	800a20a <USBH_ParseDevDesc+0xae>
 800a1ea:	3b08      	subs	r3, #8
 800a1ec:	4a32      	ldr	r2, [pc, #200]	@ (800a2b8 <USBH_ParseDevDesc+0x15c>)
 800a1ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a1f2:	f003 0301 	and.w	r3, r3, #1
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	bf14      	ite	ne
 800a1fa:	2301      	movne	r3, #1
 800a1fc:	2300      	moveq	r3, #0
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	2b00      	cmp	r3, #0
 800a202:	d106      	bne.n	800a212 <USBH_ParseDevDesc+0xb6>
 800a204:	e001      	b.n	800a20a <USBH_ParseDevDesc+0xae>
 800a206:	2b40      	cmp	r3, #64	@ 0x40
 800a208:	d003      	beq.n	800a212 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	2208      	movs	r2, #8
 800a20e:	71da      	strb	r2, [r3, #7]
        break;
 800a210:	e000      	b.n	800a214 <USBH_ParseDevDesc+0xb8>
        break;
 800a212:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a214:	e00e      	b.n	800a234 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d107      	bne.n	800a230 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	79db      	ldrb	r3, [r3, #7]
 800a224:	2b08      	cmp	r3, #8
 800a226:	d005      	beq.n	800a234 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	2208      	movs	r2, #8
 800a22c:	71da      	strb	r2, [r3, #7]
 800a22e:	e001      	b.n	800a234 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a230:	2303      	movs	r3, #3
 800a232:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a234:	88fb      	ldrh	r3, [r7, #6]
 800a236:	2b08      	cmp	r3, #8
 800a238:	d936      	bls.n	800a2a8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	3308      	adds	r3, #8
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	461a      	mov	r2, r3
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	3309      	adds	r3, #9
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	021b      	lsls	r3, r3, #8
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	4313      	orrs	r3, r2
 800a24e:	b29a      	uxth	r2, r3
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	330a      	adds	r3, #10
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	461a      	mov	r2, r3
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	330b      	adds	r3, #11
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	021b      	lsls	r3, r3, #8
 800a264:	b29b      	uxth	r3, r3
 800a266:	4313      	orrs	r3, r2
 800a268:	b29a      	uxth	r2, r3
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	330c      	adds	r3, #12
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	461a      	mov	r2, r3
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	330d      	adds	r3, #13
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	021b      	lsls	r3, r3, #8
 800a27e:	b29b      	uxth	r3, r3
 800a280:	4313      	orrs	r3, r2
 800a282:	b29a      	uxth	r2, r3
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	7b9a      	ldrb	r2, [r3, #14]
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	7bda      	ldrb	r2, [r3, #15]
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	7c1a      	ldrb	r2, [r3, #16]
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	7c5a      	ldrb	r2, [r3, #17]
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a2a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	371c      	adds	r7, #28
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop
 800a2b8:	01000101 	.word	0x01000101

0800a2bc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b08c      	sub	sp, #48	@ 0x30
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a2d0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d101      	bne.n	800a2ee <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a2ea:	2302      	movs	r3, #2
 800a2ec:	e0da      	b.n	800a4a4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	2b09      	cmp	r3, #9
 800a2f8:	d002      	beq.n	800a300 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2fc:	2209      	movs	r2, #9
 800a2fe:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	781a      	ldrb	r2, [r3, #0]
 800a304:	6a3b      	ldr	r3, [r7, #32]
 800a306:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	785a      	ldrb	r2, [r3, #1]
 800a30c:	6a3b      	ldr	r3, [r7, #32]
 800a30e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	3302      	adds	r3, #2
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	461a      	mov	r2, r3
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	3303      	adds	r3, #3
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	021b      	lsls	r3, r3, #8
 800a320:	b29b      	uxth	r3, r3
 800a322:	4313      	orrs	r3, r2
 800a324:	b29b      	uxth	r3, r3
 800a326:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a32a:	bf28      	it	cs
 800a32c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a330:	b29a      	uxth	r2, r3
 800a332:	6a3b      	ldr	r3, [r7, #32]
 800a334:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	791a      	ldrb	r2, [r3, #4]
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	795a      	ldrb	r2, [r3, #5]
 800a342:	6a3b      	ldr	r3, [r7, #32]
 800a344:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	799a      	ldrb	r2, [r3, #6]
 800a34a:	6a3b      	ldr	r3, [r7, #32]
 800a34c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	79da      	ldrb	r2, [r3, #7]
 800a352:	6a3b      	ldr	r3, [r7, #32]
 800a354:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	7a1a      	ldrb	r2, [r3, #8]
 800a35a:	6a3b      	ldr	r3, [r7, #32]
 800a35c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a35e:	88fb      	ldrh	r3, [r7, #6]
 800a360:	2b09      	cmp	r3, #9
 800a362:	f240 809d 	bls.w	800a4a0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a366:	2309      	movs	r3, #9
 800a368:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a36a:	2300      	movs	r3, #0
 800a36c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a36e:	e081      	b.n	800a474 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a370:	f107 0316 	add.w	r3, r7, #22
 800a374:	4619      	mov	r1, r3
 800a376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a378:	f000 f9e7 	bl	800a74a <USBH_GetNextDesc>
 800a37c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a380:	785b      	ldrb	r3, [r3, #1]
 800a382:	2b04      	cmp	r3, #4
 800a384:	d176      	bne.n	800a474 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	2b09      	cmp	r3, #9
 800a38c:	d002      	beq.n	800a394 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a390:	2209      	movs	r2, #9
 800a392:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a398:	221a      	movs	r2, #26
 800a39a:	fb02 f303 	mul.w	r3, r2, r3
 800a39e:	3308      	adds	r3, #8
 800a3a0:	6a3a      	ldr	r2, [r7, #32]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	3302      	adds	r3, #2
 800a3a6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a3a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3aa:	69f8      	ldr	r0, [r7, #28]
 800a3ac:	f000 f87e 	bl	800a4ac <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a3ba:	e043      	b.n	800a444 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a3bc:	f107 0316 	add.w	r3, r7, #22
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3c4:	f000 f9c1 	bl	800a74a <USBH_GetNextDesc>
 800a3c8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3cc:	785b      	ldrb	r3, [r3, #1]
 800a3ce:	2b05      	cmp	r3, #5
 800a3d0:	d138      	bne.n	800a444 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	795b      	ldrb	r3, [r3, #5]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d113      	bne.n	800a402 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d003      	beq.n	800a3ea <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	799b      	ldrb	r3, [r3, #6]
 800a3e6:	2b03      	cmp	r3, #3
 800a3e8:	d10b      	bne.n	800a402 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	79db      	ldrb	r3, [r3, #7]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10b      	bne.n	800a40a <USBH_ParseCfgDesc+0x14e>
 800a3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	2b09      	cmp	r3, #9
 800a3f8:	d007      	beq.n	800a40a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3fc:	2209      	movs	r2, #9
 800a3fe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a400:	e003      	b.n	800a40a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a404:	2207      	movs	r2, #7
 800a406:	701a      	strb	r2, [r3, #0]
 800a408:	e000      	b.n	800a40c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a40a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a40c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a410:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a414:	3201      	adds	r2, #1
 800a416:	00d2      	lsls	r2, r2, #3
 800a418:	211a      	movs	r1, #26
 800a41a:	fb01 f303 	mul.w	r3, r1, r3
 800a41e:	4413      	add	r3, r2
 800a420:	3308      	adds	r3, #8
 800a422:	6a3a      	ldr	r2, [r7, #32]
 800a424:	4413      	add	r3, r2
 800a426:	3304      	adds	r3, #4
 800a428:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a42a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a42c:	69b9      	ldr	r1, [r7, #24]
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f000 f870 	bl	800a514 <USBH_ParseEPDesc>
 800a434:	4603      	mov	r3, r0
 800a436:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a43a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a43e:	3301      	adds	r3, #1
 800a440:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	791b      	ldrb	r3, [r3, #4]
 800a448:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d204      	bcs.n	800a45a <USBH_ParseCfgDesc+0x19e>
 800a450:	6a3b      	ldr	r3, [r7, #32]
 800a452:	885a      	ldrh	r2, [r3, #2]
 800a454:	8afb      	ldrh	r3, [r7, #22]
 800a456:	429a      	cmp	r2, r3
 800a458:	d8b0      	bhi.n	800a3bc <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	791b      	ldrb	r3, [r3, #4]
 800a45e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a462:	429a      	cmp	r2, r3
 800a464:	d201      	bcs.n	800a46a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a466:	2303      	movs	r3, #3
 800a468:	e01c      	b.n	800a4a4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a46a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a46e:	3301      	adds	r3, #1
 800a470:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a474:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d805      	bhi.n	800a488 <USBH_ParseCfgDesc+0x1cc>
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	885a      	ldrh	r2, [r3, #2]
 800a480:	8afb      	ldrh	r3, [r7, #22]
 800a482:	429a      	cmp	r2, r3
 800a484:	f63f af74 	bhi.w	800a370 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a488:	6a3b      	ldr	r3, [r7, #32]
 800a48a:	791b      	ldrb	r3, [r3, #4]
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	bf28      	it	cs
 800a490:	2302      	movcs	r3, #2
 800a492:	b2db      	uxtb	r3, r3
 800a494:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a498:	429a      	cmp	r2, r3
 800a49a:	d201      	bcs.n	800a4a0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e001      	b.n	800a4a4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a4a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3730      	adds	r7, #48	@ 0x30
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	781a      	ldrb	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	785a      	ldrb	r2, [r3, #1]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	789a      	ldrb	r2, [r3, #2]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	78da      	ldrb	r2, [r3, #3]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	3304      	adds	r3, #4
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	bf28      	it	cs
 800a4e0:	2302      	movcs	r3, #2
 800a4e2:	b2da      	uxtb	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	795a      	ldrb	r2, [r3, #5]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	799a      	ldrb	r2, [r3, #6]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	79da      	ldrb	r2, [r3, #7]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	7a1a      	ldrb	r2, [r3, #8]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	721a      	strb	r2, [r3, #8]
}
 800a508:	bf00      	nop
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a514:	b480      	push	{r7}
 800a516:	b087      	sub	sp, #28
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a520:	2300      	movs	r3, #0
 800a522:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	781a      	ldrb	r2, [r3, #0]
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	785a      	ldrb	r2, [r3, #1]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	789a      	ldrb	r2, [r3, #2]
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	78da      	ldrb	r2, [r3, #3]
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	3304      	adds	r3, #4
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	461a      	mov	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	3305      	adds	r3, #5
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	021b      	lsls	r3, r3, #8
 800a554:	b29b      	uxth	r3, r3
 800a556:	4313      	orrs	r3, r2
 800a558:	b29a      	uxth	r2, r3
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	799a      	ldrb	r2, [r3, #6]
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	889b      	ldrh	r3, [r3, #4]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d009      	beq.n	800a582 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a576:	d804      	bhi.n	800a582 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a57c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a580:	d901      	bls.n	800a586 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a582:	2303      	movs	r3, #3
 800a584:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d136      	bne.n	800a5fe <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	78db      	ldrb	r3, [r3, #3]
 800a594:	f003 0303 	and.w	r3, r3, #3
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d108      	bne.n	800a5ae <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	889b      	ldrh	r3, [r3, #4]
 800a5a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5a4:	f240 8097 	bls.w	800a6d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	75fb      	strb	r3, [r7, #23]
 800a5ac:	e093      	b.n	800a6d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	78db      	ldrb	r3, [r3, #3]
 800a5b2:	f003 0303 	and.w	r3, r3, #3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d107      	bne.n	800a5ca <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	889b      	ldrh	r3, [r3, #4]
 800a5be:	2b40      	cmp	r3, #64	@ 0x40
 800a5c0:	f240 8089 	bls.w	800a6d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	75fb      	strb	r3, [r7, #23]
 800a5c8:	e085      	b.n	800a6d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	78db      	ldrb	r3, [r3, #3]
 800a5ce:	f003 0303 	and.w	r3, r3, #3
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d005      	beq.n	800a5e2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	78db      	ldrb	r3, [r3, #3]
 800a5da:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a5de:	2b03      	cmp	r3, #3
 800a5e0:	d10a      	bne.n	800a5f8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	799b      	ldrb	r3, [r3, #6]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d003      	beq.n	800a5f2 <USBH_ParseEPDesc+0xde>
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	799b      	ldrb	r3, [r3, #6]
 800a5ee:	2b10      	cmp	r3, #16
 800a5f0:	d970      	bls.n	800a6d4 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a5f6:	e06d      	b.n	800a6d4 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	75fb      	strb	r3, [r7, #23]
 800a5fc:	e06b      	b.n	800a6d6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a604:	2b01      	cmp	r3, #1
 800a606:	d13c      	bne.n	800a682 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	78db      	ldrb	r3, [r3, #3]
 800a60c:	f003 0303 	and.w	r3, r3, #3
 800a610:	2b02      	cmp	r3, #2
 800a612:	d005      	beq.n	800a620 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	78db      	ldrb	r3, [r3, #3]
 800a618:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d106      	bne.n	800a62e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	889b      	ldrh	r3, [r3, #4]
 800a624:	2b40      	cmp	r3, #64	@ 0x40
 800a626:	d956      	bls.n	800a6d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a628:	2303      	movs	r3, #3
 800a62a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a62c:	e053      	b.n	800a6d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	78db      	ldrb	r3, [r3, #3]
 800a632:	f003 0303 	and.w	r3, r3, #3
 800a636:	2b01      	cmp	r3, #1
 800a638:	d10e      	bne.n	800a658 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	799b      	ldrb	r3, [r3, #6]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d007      	beq.n	800a652 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a646:	2b10      	cmp	r3, #16
 800a648:	d803      	bhi.n	800a652 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a64e:	2b40      	cmp	r3, #64	@ 0x40
 800a650:	d941      	bls.n	800a6d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a652:	2303      	movs	r3, #3
 800a654:	75fb      	strb	r3, [r7, #23]
 800a656:	e03e      	b.n	800a6d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	78db      	ldrb	r3, [r3, #3]
 800a65c:	f003 0303 	and.w	r3, r3, #3
 800a660:	2b03      	cmp	r3, #3
 800a662:	d10b      	bne.n	800a67c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	799b      	ldrb	r3, [r3, #6]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d004      	beq.n	800a676 <USBH_ParseEPDesc+0x162>
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	889b      	ldrh	r3, [r3, #4]
 800a670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a674:	d32f      	bcc.n	800a6d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a676:	2303      	movs	r3, #3
 800a678:	75fb      	strb	r3, [r7, #23]
 800a67a:	e02c      	b.n	800a6d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a67c:	2303      	movs	r3, #3
 800a67e:	75fb      	strb	r3, [r7, #23]
 800a680:	e029      	b.n	800a6d6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a688:	2b02      	cmp	r3, #2
 800a68a:	d120      	bne.n	800a6ce <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	78db      	ldrb	r3, [r3, #3]
 800a690:	f003 0303 	and.w	r3, r3, #3
 800a694:	2b00      	cmp	r3, #0
 800a696:	d106      	bne.n	800a6a6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	889b      	ldrh	r3, [r3, #4]
 800a69c:	2b08      	cmp	r3, #8
 800a69e:	d01a      	beq.n	800a6d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a6a0:	2303      	movs	r3, #3
 800a6a2:	75fb      	strb	r3, [r7, #23]
 800a6a4:	e017      	b.n	800a6d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	78db      	ldrb	r3, [r3, #3]
 800a6aa:	f003 0303 	and.w	r3, r3, #3
 800a6ae:	2b03      	cmp	r3, #3
 800a6b0:	d10a      	bne.n	800a6c8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	799b      	ldrb	r3, [r3, #6]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d003      	beq.n	800a6c2 <USBH_ParseEPDesc+0x1ae>
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	889b      	ldrh	r3, [r3, #4]
 800a6be:	2b08      	cmp	r3, #8
 800a6c0:	d909      	bls.n	800a6d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	75fb      	strb	r3, [r7, #23]
 800a6c6:	e006      	b.n	800a6d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a6c8:	2303      	movs	r3, #3
 800a6ca:	75fb      	strb	r3, [r7, #23]
 800a6cc:	e003      	b.n	800a6d6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a6ce:	2303      	movs	r3, #3
 800a6d0:	75fb      	strb	r3, [r7, #23]
 800a6d2:	e000      	b.n	800a6d6 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a6d4:	bf00      	nop
  }

  return status;
 800a6d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	371c      	adds	r7, #28
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b087      	sub	sp, #28
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	2b03      	cmp	r3, #3
 800a6fa:	d120      	bne.n	800a73e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	1e9a      	subs	r2, r3, #2
 800a702:	88fb      	ldrh	r3, [r7, #6]
 800a704:	4293      	cmp	r3, r2
 800a706:	bf28      	it	cs
 800a708:	4613      	movcs	r3, r2
 800a70a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	3302      	adds	r3, #2
 800a710:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a712:	2300      	movs	r3, #0
 800a714:	82fb      	strh	r3, [r7, #22]
 800a716:	e00b      	b.n	800a730 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a718:	8afb      	ldrh	r3, [r7, #22]
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	4413      	add	r3, r2
 800a71e:	781a      	ldrb	r2, [r3, #0]
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	3301      	adds	r3, #1
 800a728:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a72a:	8afb      	ldrh	r3, [r7, #22]
 800a72c:	3302      	adds	r3, #2
 800a72e:	82fb      	strh	r3, [r7, #22]
 800a730:	8afa      	ldrh	r2, [r7, #22]
 800a732:	8abb      	ldrh	r3, [r7, #20]
 800a734:	429a      	cmp	r2, r3
 800a736:	d3ef      	bcc.n	800a718 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	2200      	movs	r2, #0
 800a73c:	701a      	strb	r2, [r3, #0]
  }
}
 800a73e:	bf00      	nop
 800a740:	371c      	adds	r7, #28
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a74a:	b480      	push	{r7}
 800a74c:	b085      	sub	sp, #20
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	881b      	ldrh	r3, [r3, #0]
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	7812      	ldrb	r2, [r2, #0]
 800a75c:	4413      	add	r3, r2
 800a75e:	b29a      	uxth	r2, r3
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4413      	add	r3, r2
 800a76e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a770:	68fb      	ldr	r3, [r7, #12]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3714      	adds	r7, #20
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b086      	sub	sp, #24
 800a782:	af00      	add	r7, sp, #0
 800a784:	60f8      	str	r0, [r7, #12]
 800a786:	60b9      	str	r1, [r7, #8]
 800a788:	4613      	mov	r3, r2
 800a78a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a78c:	2301      	movs	r3, #1
 800a78e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	789b      	ldrb	r3, [r3, #2]
 800a794:	2b01      	cmp	r3, #1
 800a796:	d002      	beq.n	800a79e <USBH_CtlReq+0x20>
 800a798:	2b02      	cmp	r3, #2
 800a79a:	d00f      	beq.n	800a7bc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a79c:	e027      	b.n	800a7ee <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	88fa      	ldrh	r2, [r7, #6]
 800a7a8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2202      	movs	r2, #2
 800a7b4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	75fb      	strb	r3, [r7, #23]
      break;
 800a7ba:	e018      	b.n	800a7ee <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a7bc:	68f8      	ldr	r0, [r7, #12]
 800a7be:	f000 f81b 	bl	800a7f8 <USBH_HandleControl>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a7c6:	7dfb      	ldrb	r3, [r7, #23]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d002      	beq.n	800a7d2 <USBH_CtlReq+0x54>
 800a7cc:	7dfb      	ldrb	r3, [r7, #23]
 800a7ce:	2b03      	cmp	r3, #3
 800a7d0:	d106      	bne.n	800a7e0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	761a      	strb	r2, [r3, #24]
      break;
 800a7de:	e005      	b.n	800a7ec <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a7e0:	7dfb      	ldrb	r3, [r7, #23]
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d102      	bne.n	800a7ec <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	709a      	strb	r2, [r3, #2]
      break;
 800a7ec:	bf00      	nop
  }
  return status;
 800a7ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3718      	adds	r7, #24
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af02      	add	r7, sp, #8
 800a7fe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a800:	2301      	movs	r3, #1
 800a802:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a804:	2300      	movs	r3, #0
 800a806:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	7e1b      	ldrb	r3, [r3, #24]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	2b0a      	cmp	r3, #10
 800a810:	f200 8156 	bhi.w	800aac0 <USBH_HandleControl+0x2c8>
 800a814:	a201      	add	r2, pc, #4	@ (adr r2, 800a81c <USBH_HandleControl+0x24>)
 800a816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81a:	bf00      	nop
 800a81c:	0800a849 	.word	0x0800a849
 800a820:	0800a863 	.word	0x0800a863
 800a824:	0800a8cd 	.word	0x0800a8cd
 800a828:	0800a8f3 	.word	0x0800a8f3
 800a82c:	0800a92b 	.word	0x0800a92b
 800a830:	0800a955 	.word	0x0800a955
 800a834:	0800a9a7 	.word	0x0800a9a7
 800a838:	0800a9c9 	.word	0x0800a9c9
 800a83c:	0800aa05 	.word	0x0800aa05
 800a840:	0800aa2b 	.word	0x0800aa2b
 800a844:	0800aa69 	.word	0x0800aa69
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f103 0110 	add.w	r1, r3, #16
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	795b      	ldrb	r3, [r3, #5]
 800a852:	461a      	mov	r2, r3
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f943 	bl	800aae0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2202      	movs	r2, #2
 800a85e:	761a      	strb	r2, [r3, #24]
      break;
 800a860:	e139      	b.n	800aad6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	795b      	ldrb	r3, [r3, #5]
 800a866:	4619      	mov	r1, r3
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fcc5 	bl	800b1f8 <USBH_LL_GetURBState>
 800a86e:	4603      	mov	r3, r0
 800a870:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a872:	7bbb      	ldrb	r3, [r7, #14]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d11e      	bne.n	800a8b6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	7c1b      	ldrb	r3, [r3, #16]
 800a87c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a880:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	8adb      	ldrh	r3, [r3, #22]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00a      	beq.n	800a8a0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a88a:	7b7b      	ldrb	r3, [r7, #13]
 800a88c:	2b80      	cmp	r3, #128	@ 0x80
 800a88e:	d103      	bne.n	800a898 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2203      	movs	r2, #3
 800a894:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a896:	e115      	b.n	800aac4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2205      	movs	r2, #5
 800a89c:	761a      	strb	r2, [r3, #24]
      break;
 800a89e:	e111      	b.n	800aac4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a8a0:	7b7b      	ldrb	r3, [r7, #13]
 800a8a2:	2b80      	cmp	r3, #128	@ 0x80
 800a8a4:	d103      	bne.n	800a8ae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2209      	movs	r2, #9
 800a8aa:	761a      	strb	r2, [r3, #24]
      break;
 800a8ac:	e10a      	b.n	800aac4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2207      	movs	r2, #7
 800a8b2:	761a      	strb	r2, [r3, #24]
      break;
 800a8b4:	e106      	b.n	800aac4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a8b6:	7bbb      	ldrb	r3, [r7, #14]
 800a8b8:	2b04      	cmp	r3, #4
 800a8ba:	d003      	beq.n	800a8c4 <USBH_HandleControl+0xcc>
 800a8bc:	7bbb      	ldrb	r3, [r7, #14]
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	f040 8100 	bne.w	800aac4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	220b      	movs	r2, #11
 800a8c8:	761a      	strb	r2, [r3, #24]
      break;
 800a8ca:	e0fb      	b.n	800aac4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a8d2:	b29a      	uxth	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6899      	ldr	r1, [r3, #8]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	899a      	ldrh	r2, [r3, #12]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	791b      	ldrb	r3, [r3, #4]
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 f93a 	bl	800ab5e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2204      	movs	r2, #4
 800a8ee:	761a      	strb	r2, [r3, #24]
      break;
 800a8f0:	e0f1      	b.n	800aad6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	791b      	ldrb	r3, [r3, #4]
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 fc7d 	bl	800b1f8 <USBH_LL_GetURBState>
 800a8fe:	4603      	mov	r3, r0
 800a900:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a902:	7bbb      	ldrb	r3, [r7, #14]
 800a904:	2b01      	cmp	r3, #1
 800a906:	d102      	bne.n	800a90e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2209      	movs	r2, #9
 800a90c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a90e:	7bbb      	ldrb	r3, [r7, #14]
 800a910:	2b05      	cmp	r3, #5
 800a912:	d102      	bne.n	800a91a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a914:	2303      	movs	r3, #3
 800a916:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a918:	e0d6      	b.n	800aac8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a91a:	7bbb      	ldrb	r3, [r7, #14]
 800a91c:	2b04      	cmp	r3, #4
 800a91e:	f040 80d3 	bne.w	800aac8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	220b      	movs	r2, #11
 800a926:	761a      	strb	r2, [r3, #24]
      break;
 800a928:	e0ce      	b.n	800aac8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6899      	ldr	r1, [r3, #8]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	899a      	ldrh	r2, [r3, #12]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	795b      	ldrb	r3, [r3, #5]
 800a936:	2001      	movs	r0, #1
 800a938:	9000      	str	r0, [sp, #0]
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f8ea 	bl	800ab14 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a946:	b29a      	uxth	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2206      	movs	r2, #6
 800a950:	761a      	strb	r2, [r3, #24]
      break;
 800a952:	e0c0      	b.n	800aad6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	795b      	ldrb	r3, [r3, #5]
 800a958:	4619      	mov	r1, r3
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 fc4c 	bl	800b1f8 <USBH_LL_GetURBState>
 800a960:	4603      	mov	r3, r0
 800a962:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a964:	7bbb      	ldrb	r3, [r7, #14]
 800a966:	2b01      	cmp	r3, #1
 800a968:	d103      	bne.n	800a972 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2207      	movs	r2, #7
 800a96e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a970:	e0ac      	b.n	800aacc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a972:	7bbb      	ldrb	r3, [r7, #14]
 800a974:	2b05      	cmp	r3, #5
 800a976:	d105      	bne.n	800a984 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	220c      	movs	r2, #12
 800a97c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a97e:	2303      	movs	r3, #3
 800a980:	73fb      	strb	r3, [r7, #15]
      break;
 800a982:	e0a3      	b.n	800aacc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a984:	7bbb      	ldrb	r3, [r7, #14]
 800a986:	2b02      	cmp	r3, #2
 800a988:	d103      	bne.n	800a992 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2205      	movs	r2, #5
 800a98e:	761a      	strb	r2, [r3, #24]
      break;
 800a990:	e09c      	b.n	800aacc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a992:	7bbb      	ldrb	r3, [r7, #14]
 800a994:	2b04      	cmp	r3, #4
 800a996:	f040 8099 	bne.w	800aacc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	220b      	movs	r2, #11
 800a99e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a9a4:	e092      	b.n	800aacc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	791b      	ldrb	r3, [r3, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f8d5 	bl	800ab5e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2208      	movs	r2, #8
 800a9c4:	761a      	strb	r2, [r3, #24]

      break;
 800a9c6:	e086      	b.n	800aad6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	791b      	ldrb	r3, [r3, #4]
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 fc12 	bl	800b1f8 <USBH_LL_GetURBState>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d105      	bne.n	800a9ea <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	220d      	movs	r2, #13
 800a9e2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a9e8:	e072      	b.n	800aad0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a9ea:	7bbb      	ldrb	r3, [r7, #14]
 800a9ec:	2b04      	cmp	r3, #4
 800a9ee:	d103      	bne.n	800a9f8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	220b      	movs	r2, #11
 800a9f4:	761a      	strb	r2, [r3, #24]
      break;
 800a9f6:	e06b      	b.n	800aad0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a9f8:	7bbb      	ldrb	r3, [r7, #14]
 800a9fa:	2b05      	cmp	r3, #5
 800a9fc:	d168      	bne.n	800aad0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a9fe:	2303      	movs	r3, #3
 800aa00:	73fb      	strb	r3, [r7, #15]
      break;
 800aa02:	e065      	b.n	800aad0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	795b      	ldrb	r3, [r3, #5]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	9200      	str	r2, [sp, #0]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	2100      	movs	r1, #0
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 f87f 	bl	800ab14 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	220a      	movs	r2, #10
 800aa26:	761a      	strb	r2, [r3, #24]
      break;
 800aa28:	e055      	b.n	800aad6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	795b      	ldrb	r3, [r3, #5]
 800aa2e:	4619      	mov	r1, r3
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 fbe1 	bl	800b1f8 <USBH_LL_GetURBState>
 800aa36:	4603      	mov	r3, r0
 800aa38:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800aa3a:	7bbb      	ldrb	r3, [r7, #14]
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d105      	bne.n	800aa4c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800aa40:	2300      	movs	r3, #0
 800aa42:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	220d      	movs	r2, #13
 800aa48:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aa4a:	e043      	b.n	800aad4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aa4c:	7bbb      	ldrb	r3, [r7, #14]
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	d103      	bne.n	800aa5a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2209      	movs	r2, #9
 800aa56:	761a      	strb	r2, [r3, #24]
      break;
 800aa58:	e03c      	b.n	800aad4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800aa5a:	7bbb      	ldrb	r3, [r7, #14]
 800aa5c:	2b04      	cmp	r3, #4
 800aa5e:	d139      	bne.n	800aad4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	220b      	movs	r2, #11
 800aa64:	761a      	strb	r2, [r3, #24]
      break;
 800aa66:	e035      	b.n	800aad4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	7e5b      	ldrb	r3, [r3, #25]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	b2da      	uxtb	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	765a      	strb	r2, [r3, #25]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	7e5b      	ldrb	r3, [r3, #25]
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	d806      	bhi.n	800aa8a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2201      	movs	r2, #1
 800aa86:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800aa88:	e025      	b.n	800aad6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800aa90:	2106      	movs	r1, #6
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	795b      	ldrb	r3, [r3, #5]
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f90c 	bl	800acc0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	791b      	ldrb	r3, [r3, #4]
 800aaac:	4619      	mov	r1, r3
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f906 	bl	800acc0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800aaba:	2302      	movs	r3, #2
 800aabc:	73fb      	strb	r3, [r7, #15]
      break;
 800aabe:	e00a      	b.n	800aad6 <USBH_HandleControl+0x2de>

    default:
      break;
 800aac0:	bf00      	nop
 800aac2:	e008      	b.n	800aad6 <USBH_HandleControl+0x2de>
      break;
 800aac4:	bf00      	nop
 800aac6:	e006      	b.n	800aad6 <USBH_HandleControl+0x2de>
      break;
 800aac8:	bf00      	nop
 800aaca:	e004      	b.n	800aad6 <USBH_HandleControl+0x2de>
      break;
 800aacc:	bf00      	nop
 800aace:	e002      	b.n	800aad6 <USBH_HandleControl+0x2de>
      break;
 800aad0:	bf00      	nop
 800aad2:	e000      	b.n	800aad6 <USBH_HandleControl+0x2de>
      break;
 800aad4:	bf00      	nop
  }

  return status;
 800aad6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3710      	adds	r7, #16
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b088      	sub	sp, #32
 800aae4:	af04      	add	r7, sp, #16
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	4613      	mov	r3, r2
 800aaec:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aaee:	79f9      	ldrb	r1, [r7, #7]
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	9303      	str	r3, [sp, #12]
 800aaf4:	2308      	movs	r3, #8
 800aaf6:	9302      	str	r3, [sp, #8]
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	9301      	str	r3, [sp, #4]
 800aafc:	2300      	movs	r3, #0
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	2300      	movs	r3, #0
 800ab02:	2200      	movs	r2, #0
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f000 fb46 	bl	800b196 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b088      	sub	sp, #32
 800ab18:	af04      	add	r7, sp, #16
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	4611      	mov	r1, r2
 800ab20:	461a      	mov	r2, r3
 800ab22:	460b      	mov	r3, r1
 800ab24:	80fb      	strh	r3, [r7, #6]
 800ab26:	4613      	mov	r3, r2
 800ab28:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d001      	beq.n	800ab38 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ab34:	2300      	movs	r3, #0
 800ab36:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ab38:	7979      	ldrb	r1, [r7, #5]
 800ab3a:	7e3b      	ldrb	r3, [r7, #24]
 800ab3c:	9303      	str	r3, [sp, #12]
 800ab3e:	88fb      	ldrh	r3, [r7, #6]
 800ab40:	9302      	str	r3, [sp, #8]
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	9301      	str	r3, [sp, #4]
 800ab46:	2301      	movs	r3, #1
 800ab48:	9300      	str	r3, [sp, #0]
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f000 fb21 	bl	800b196 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b088      	sub	sp, #32
 800ab62:	af04      	add	r7, sp, #16
 800ab64:	60f8      	str	r0, [r7, #12]
 800ab66:	60b9      	str	r1, [r7, #8]
 800ab68:	4611      	mov	r1, r2
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	80fb      	strh	r3, [r7, #6]
 800ab70:	4613      	mov	r3, r2
 800ab72:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ab74:	7979      	ldrb	r1, [r7, #5]
 800ab76:	2300      	movs	r3, #0
 800ab78:	9303      	str	r3, [sp, #12]
 800ab7a:	88fb      	ldrh	r3, [r7, #6]
 800ab7c:	9302      	str	r3, [sp, #8]
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	9301      	str	r3, [sp, #4]
 800ab82:	2301      	movs	r3, #1
 800ab84:	9300      	str	r3, [sp, #0]
 800ab86:	2300      	movs	r3, #0
 800ab88:	2201      	movs	r2, #1
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f000 fb03 	bl	800b196 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ab90:	2300      	movs	r3, #0

}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b088      	sub	sp, #32
 800ab9e:	af04      	add	r7, sp, #16
 800aba0:	60f8      	str	r0, [r7, #12]
 800aba2:	60b9      	str	r1, [r7, #8]
 800aba4:	4611      	mov	r1, r2
 800aba6:	461a      	mov	r2, r3
 800aba8:	460b      	mov	r3, r1
 800abaa:	80fb      	strh	r3, [r7, #6]
 800abac:	4613      	mov	r3, r2
 800abae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d001      	beq.n	800abbe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800abba:	2300      	movs	r3, #0
 800abbc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800abbe:	7979      	ldrb	r1, [r7, #5]
 800abc0:	7e3b      	ldrb	r3, [r7, #24]
 800abc2:	9303      	str	r3, [sp, #12]
 800abc4:	88fb      	ldrh	r3, [r7, #6]
 800abc6:	9302      	str	r3, [sp, #8]
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	9301      	str	r3, [sp, #4]
 800abcc:	2301      	movs	r3, #1
 800abce:	9300      	str	r3, [sp, #0]
 800abd0:	2302      	movs	r3, #2
 800abd2:	2200      	movs	r2, #0
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f000 fade 	bl	800b196 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800abda:	2300      	movs	r3, #0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b088      	sub	sp, #32
 800abe8:	af04      	add	r7, sp, #16
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	4611      	mov	r1, r2
 800abf0:	461a      	mov	r2, r3
 800abf2:	460b      	mov	r3, r1
 800abf4:	80fb      	strh	r3, [r7, #6]
 800abf6:	4613      	mov	r3, r2
 800abf8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800abfa:	7979      	ldrb	r1, [r7, #5]
 800abfc:	2300      	movs	r3, #0
 800abfe:	9303      	str	r3, [sp, #12]
 800ac00:	88fb      	ldrh	r3, [r7, #6]
 800ac02:	9302      	str	r3, [sp, #8]
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	9301      	str	r3, [sp, #4]
 800ac08:	2301      	movs	r3, #1
 800ac0a:	9300      	str	r3, [sp, #0]
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	2201      	movs	r2, #1
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f000 fac0 	bl	800b196 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af04      	add	r7, sp, #16
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	4608      	mov	r0, r1
 800ac2a:	4611      	mov	r1, r2
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	4603      	mov	r3, r0
 800ac30:	70fb      	strb	r3, [r7, #3]
 800ac32:	460b      	mov	r3, r1
 800ac34:	70bb      	strb	r3, [r7, #2]
 800ac36:	4613      	mov	r3, r2
 800ac38:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ac3a:	7878      	ldrb	r0, [r7, #1]
 800ac3c:	78ba      	ldrb	r2, [r7, #2]
 800ac3e:	78f9      	ldrb	r1, [r7, #3]
 800ac40:	8b3b      	ldrh	r3, [r7, #24]
 800ac42:	9302      	str	r3, [sp, #8]
 800ac44:	7d3b      	ldrb	r3, [r7, #20]
 800ac46:	9301      	str	r3, [sp, #4]
 800ac48:	7c3b      	ldrb	r3, [r7, #16]
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 fa53 	bl	800b0fa <USBH_LL_OpenPipe>

  return USBH_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3708      	adds	r7, #8
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b082      	sub	sp, #8
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	460b      	mov	r3, r1
 800ac68:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ac6a:	78fb      	ldrb	r3, [r7, #3]
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 fa72 	bl	800b158 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b084      	sub	sp, #16
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	460b      	mov	r3, r1
 800ac88:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f836 	bl	800acfc <USBH_GetFreePipe>
 800ac90:	4603      	mov	r3, r0
 800ac92:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ac94:	89fb      	ldrh	r3, [r7, #14]
 800ac96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d00a      	beq.n	800acb4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ac9e:	78fa      	ldrb	r2, [r7, #3]
 800aca0:	89fb      	ldrh	r3, [r7, #14]
 800aca2:	f003 030f 	and.w	r3, r3, #15
 800aca6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800acaa:	6879      	ldr	r1, [r7, #4]
 800acac:	33e0      	adds	r3, #224	@ 0xe0
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	440b      	add	r3, r1
 800acb2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800acb4:	89fb      	ldrh	r3, [r7, #14]
 800acb6:	b2db      	uxtb	r3, r3
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3710      	adds	r7, #16
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	460b      	mov	r3, r1
 800acca:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800accc:	78fb      	ldrb	r3, [r7, #3]
 800acce:	2b0f      	cmp	r3, #15
 800acd0:	d80d      	bhi.n	800acee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800acd2:	78fb      	ldrb	r3, [r7, #3]
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	33e0      	adds	r3, #224	@ 0xe0
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	4413      	add	r3, r2
 800acdc:	685a      	ldr	r2, [r3, #4]
 800acde:	78fb      	ldrb	r3, [r7, #3]
 800ace0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ace4:	6879      	ldr	r1, [r7, #4]
 800ace6:	33e0      	adds	r3, #224	@ 0xe0
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	440b      	add	r3, r1
 800acec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b085      	sub	sp, #20
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ad04:	2300      	movs	r3, #0
 800ad06:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ad08:	2300      	movs	r3, #0
 800ad0a:	73fb      	strb	r3, [r7, #15]
 800ad0c:	e00f      	b.n	800ad2e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ad0e:	7bfb      	ldrb	r3, [r7, #15]
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	33e0      	adds	r3, #224	@ 0xe0
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	4413      	add	r3, r2
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d102      	bne.n	800ad28 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ad22:	7bfb      	ldrb	r3, [r7, #15]
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	e007      	b.n	800ad38 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ad28:	7bfb      	ldrb	r3, [r7, #15]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	73fb      	strb	r3, [r7, #15]
 800ad2e:	7bfb      	ldrb	r3, [r7, #15]
 800ad30:	2b0f      	cmp	r3, #15
 800ad32:	d9ec      	bls.n	800ad0e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ad34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3714      	adds	r7, #20
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ad48:	2201      	movs	r2, #1
 800ad4a:	490e      	ldr	r1, [pc, #56]	@ (800ad84 <MX_USB_HOST_Init+0x40>)
 800ad4c:	480e      	ldr	r0, [pc, #56]	@ (800ad88 <MX_USB_HOST_Init+0x44>)
 800ad4e:	f7fe fb15 	bl	800937c <USBH_Init>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d001      	beq.n	800ad5c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ad58:	f7f6 f868 	bl	8000e2c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ad5c:	490b      	ldr	r1, [pc, #44]	@ (800ad8c <MX_USB_HOST_Init+0x48>)
 800ad5e:	480a      	ldr	r0, [pc, #40]	@ (800ad88 <MX_USB_HOST_Init+0x44>)
 800ad60:	f7fe fbb9 	bl	80094d6 <USBH_RegisterClass>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d001      	beq.n	800ad6e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ad6a:	f7f6 f85f 	bl	8000e2c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ad6e:	4806      	ldr	r0, [pc, #24]	@ (800ad88 <MX_USB_HOST_Init+0x44>)
 800ad70:	f7fe fc3d 	bl	80095ee <USBH_Start>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d001      	beq.n	800ad7e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ad7a:	f7f6 f857 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ad7e:	bf00      	nop
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	0800ada5 	.word	0x0800ada5
 800ad88:	200002c0 	.word	0x200002c0
 800ad8c:	2000000c 	.word	0x2000000c

0800ad90 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ad94:	4802      	ldr	r0, [pc, #8]	@ (800ada0 <MX_USB_HOST_Process+0x10>)
 800ad96:	f7fe fc3b 	bl	8009610 <USBH_Process>
}
 800ad9a:	bf00      	nop
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	200002c0 	.word	0x200002c0

0800ada4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	460b      	mov	r3, r1
 800adae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800adb0:	78fb      	ldrb	r3, [r7, #3]
 800adb2:	3b01      	subs	r3, #1
 800adb4:	2b04      	cmp	r3, #4
 800adb6:	d819      	bhi.n	800adec <USBH_UserProcess+0x48>
 800adb8:	a201      	add	r2, pc, #4	@ (adr r2, 800adc0 <USBH_UserProcess+0x1c>)
 800adba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adbe:	bf00      	nop
 800adc0:	0800aded 	.word	0x0800aded
 800adc4:	0800addd 	.word	0x0800addd
 800adc8:	0800aded 	.word	0x0800aded
 800adcc:	0800ade5 	.word	0x0800ade5
 800add0:	0800add5 	.word	0x0800add5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800add4:	4b09      	ldr	r3, [pc, #36]	@ (800adfc <USBH_UserProcess+0x58>)
 800add6:	2203      	movs	r2, #3
 800add8:	701a      	strb	r2, [r3, #0]
  break;
 800adda:	e008      	b.n	800adee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800addc:	4b07      	ldr	r3, [pc, #28]	@ (800adfc <USBH_UserProcess+0x58>)
 800adde:	2202      	movs	r2, #2
 800ade0:	701a      	strb	r2, [r3, #0]
  break;
 800ade2:	e004      	b.n	800adee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ade4:	4b05      	ldr	r3, [pc, #20]	@ (800adfc <USBH_UserProcess+0x58>)
 800ade6:	2201      	movs	r2, #1
 800ade8:	701a      	strb	r2, [r3, #0]
  break;
 800adea:	e000      	b.n	800adee <USBH_UserProcess+0x4a>

  default:
  break;
 800adec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800adee:	bf00      	nop
 800adf0:	370c      	adds	r7, #12
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	20000698 	.word	0x20000698

0800ae00 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b08a      	sub	sp, #40	@ 0x28
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae08:	f107 0314 	add.w	r3, r7, #20
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	601a      	str	r2, [r3, #0]
 800ae10:	605a      	str	r2, [r3, #4]
 800ae12:	609a      	str	r2, [r3, #8]
 800ae14:	60da      	str	r2, [r3, #12]
 800ae16:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ae20:	d147      	bne.n	800aeb2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae22:	2300      	movs	r3, #0
 800ae24:	613b      	str	r3, [r7, #16]
 800ae26:	4b25      	ldr	r3, [pc, #148]	@ (800aebc <HAL_HCD_MspInit+0xbc>)
 800ae28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae2a:	4a24      	ldr	r2, [pc, #144]	@ (800aebc <HAL_HCD_MspInit+0xbc>)
 800ae2c:	f043 0301 	orr.w	r3, r3, #1
 800ae30:	6313      	str	r3, [r2, #48]	@ 0x30
 800ae32:	4b22      	ldr	r3, [pc, #136]	@ (800aebc <HAL_HCD_MspInit+0xbc>)
 800ae34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae36:	f003 0301 	and.w	r3, r3, #1
 800ae3a:	613b      	str	r3, [r7, #16]
 800ae3c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ae3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ae44:	2300      	movs	r3, #0
 800ae46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ae4c:	f107 0314 	add.w	r3, r7, #20
 800ae50:	4619      	mov	r1, r3
 800ae52:	481b      	ldr	r0, [pc, #108]	@ (800aec0 <HAL_HCD_MspInit+0xc0>)
 800ae54:	f7f7 fb32 	bl	80024bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ae58:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800ae5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae5e:	2302      	movs	r3, #2
 800ae60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae62:	2300      	movs	r3, #0
 800ae64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae66:	2300      	movs	r3, #0
 800ae68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ae6a:	230a      	movs	r3, #10
 800ae6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae6e:	f107 0314 	add.w	r3, r7, #20
 800ae72:	4619      	mov	r1, r3
 800ae74:	4812      	ldr	r0, [pc, #72]	@ (800aec0 <HAL_HCD_MspInit+0xc0>)
 800ae76:	f7f7 fb21 	bl	80024bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ae7a:	4b10      	ldr	r3, [pc, #64]	@ (800aebc <HAL_HCD_MspInit+0xbc>)
 800ae7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae7e:	4a0f      	ldr	r2, [pc, #60]	@ (800aebc <HAL_HCD_MspInit+0xbc>)
 800ae80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae84:	6353      	str	r3, [r2, #52]	@ 0x34
 800ae86:	2300      	movs	r3, #0
 800ae88:	60fb      	str	r3, [r7, #12]
 800ae8a:	4b0c      	ldr	r3, [pc, #48]	@ (800aebc <HAL_HCD_MspInit+0xbc>)
 800ae8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae8e:	4a0b      	ldr	r2, [pc, #44]	@ (800aebc <HAL_HCD_MspInit+0xbc>)
 800ae90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ae94:	6453      	str	r3, [r2, #68]	@ 0x44
 800ae96:	4b09      	ldr	r3, [pc, #36]	@ (800aebc <HAL_HCD_MspInit+0xbc>)
 800ae98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae9e:	60fb      	str	r3, [r7, #12]
 800aea0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aea2:	2200      	movs	r2, #0
 800aea4:	2100      	movs	r1, #0
 800aea6:	2043      	movs	r0, #67	@ 0x43
 800aea8:	f7f6 ffc5 	bl	8001e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aeac:	2043      	movs	r0, #67	@ 0x43
 800aeae:	f7f6 ffde 	bl	8001e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aeb2:	bf00      	nop
 800aeb4:	3728      	adds	r7, #40	@ 0x28
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	40023800 	.word	0x40023800
 800aec0:	40020000 	.word	0x40020000

0800aec4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7fe ff73 	bl	8009dbe <USBH_LL_IncTimer>
}
 800aed8:	bf00      	nop
 800aeda:	3708      	adds	r7, #8
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7fe ffab 	bl	8009e4a <USBH_LL_Connect>
}
 800aef4:	bf00      	nop
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7fe ffb4 	bl	8009e78 <USBH_LL_Disconnect>
}
 800af10:	bf00      	nop
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	460b      	mov	r3, r1
 800af22:	70fb      	strb	r3, [r7, #3]
 800af24:	4613      	mov	r3, r2
 800af26:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800af28:	bf00      	nop
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800af42:	4618      	mov	r0, r3
 800af44:	f7fe ff65 	bl	8009e12 <USBH_LL_PortEnabled>
}
 800af48:	bf00      	nop
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fe ff65 	bl	8009e2e <USBH_LL_PortDisabled>
}
 800af64:	bf00      	nop
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d12a      	bne.n	800afd4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800af7e:	4a18      	ldr	r2, [pc, #96]	@ (800afe0 <USBH_LL_Init+0x74>)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a15      	ldr	r2, [pc, #84]	@ (800afe0 <USBH_LL_Init+0x74>)
 800af8a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af8e:	4b14      	ldr	r3, [pc, #80]	@ (800afe0 <USBH_LL_Init+0x74>)
 800af90:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800af94:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800af96:	4b12      	ldr	r3, [pc, #72]	@ (800afe0 <USBH_LL_Init+0x74>)
 800af98:	2208      	movs	r2, #8
 800af9a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800af9c:	4b10      	ldr	r3, [pc, #64]	@ (800afe0 <USBH_LL_Init+0x74>)
 800af9e:	2201      	movs	r2, #1
 800afa0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800afa2:	4b0f      	ldr	r3, [pc, #60]	@ (800afe0 <USBH_LL_Init+0x74>)
 800afa4:	2200      	movs	r2, #0
 800afa6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800afa8:	4b0d      	ldr	r3, [pc, #52]	@ (800afe0 <USBH_LL_Init+0x74>)
 800afaa:	2202      	movs	r2, #2
 800afac:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800afae:	4b0c      	ldr	r3, [pc, #48]	@ (800afe0 <USBH_LL_Init+0x74>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800afb4:	480a      	ldr	r0, [pc, #40]	@ (800afe0 <USBH_LL_Init+0x74>)
 800afb6:	f7f7 fc36 	bl	8002826 <HAL_HCD_Init>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d001      	beq.n	800afc4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800afc0:	f7f5 ff34 	bl	8000e2c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800afc4:	4806      	ldr	r0, [pc, #24]	@ (800afe0 <USBH_LL_Init+0x74>)
 800afc6:	f7f8 f897 	bl	80030f8 <HAL_HCD_GetCurrentFrame>
 800afca:	4603      	mov	r3, r0
 800afcc:	4619      	mov	r1, r3
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f7fe fee6 	bl	8009da0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3708      	adds	r7, #8
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	2000069c 	.word	0x2000069c

0800afe4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aff0:	2300      	movs	r3, #0
 800aff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800affa:	4618      	mov	r0, r3
 800affc:	f7f8 f804 	bl	8003008 <HAL_HCD_Start>
 800b000:	4603      	mov	r3, r0
 800b002:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b004:	7bfb      	ldrb	r3, [r7, #15]
 800b006:	4618      	mov	r0, r3
 800b008:	f000 f95e 	bl	800b2c8 <USBH_Get_USB_Status>
 800b00c:	4603      	mov	r3, r0
 800b00e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b010:	7bbb      	ldrb	r3, [r7, #14]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b084      	sub	sp, #16
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b022:	2300      	movs	r3, #0
 800b024:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b026:	2300      	movs	r3, #0
 800b028:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b030:	4618      	mov	r0, r3
 800b032:	f7f8 f80c 	bl	800304e <HAL_HCD_Stop>
 800b036:	4603      	mov	r3, r0
 800b038:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b03a:	7bfb      	ldrb	r3, [r7, #15]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f000 f943 	bl	800b2c8 <USBH_Get_USB_Status>
 800b042:	4603      	mov	r3, r0
 800b044:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b046:	7bbb      	ldrb	r3, [r7, #14]
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b058:	2301      	movs	r3, #1
 800b05a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b062:	4618      	mov	r0, r3
 800b064:	f7f8 f856 	bl	8003114 <HAL_HCD_GetCurrentSpeed>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	d00c      	beq.n	800b088 <USBH_LL_GetSpeed+0x38>
 800b06e:	2b02      	cmp	r3, #2
 800b070:	d80d      	bhi.n	800b08e <USBH_LL_GetSpeed+0x3e>
 800b072:	2b00      	cmp	r3, #0
 800b074:	d002      	beq.n	800b07c <USBH_LL_GetSpeed+0x2c>
 800b076:	2b01      	cmp	r3, #1
 800b078:	d003      	beq.n	800b082 <USBH_LL_GetSpeed+0x32>
 800b07a:	e008      	b.n	800b08e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b07c:	2300      	movs	r3, #0
 800b07e:	73fb      	strb	r3, [r7, #15]
    break;
 800b080:	e008      	b.n	800b094 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b082:	2301      	movs	r3, #1
 800b084:	73fb      	strb	r3, [r7, #15]
    break;
 800b086:	e005      	b.n	800b094 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b088:	2302      	movs	r3, #2
 800b08a:	73fb      	strb	r3, [r7, #15]
    break;
 800b08c:	e002      	b.n	800b094 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b08e:	2301      	movs	r3, #1
 800b090:	73fb      	strb	r3, [r7, #15]
    break;
 800b092:	bf00      	nop
  }
  return  speed;
 800b094:	7bfb      	ldrb	r3, [r7, #15]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b084      	sub	sp, #16
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7f7 ffe7 	bl	8003088 <HAL_HCD_ResetPort>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b0be:	7bfb      	ldrb	r3, [r7, #15]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f000 f901 	bl	800b2c8 <USBH_Get_USB_Status>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	460b      	mov	r3, r1
 800b0de:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b0e6:	78fa      	ldrb	r2, [r7, #3]
 800b0e8:	4611      	mov	r1, r2
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7f7 ffef 	bl	80030ce <HAL_HCD_HC_GetXferCount>
 800b0f0:	4603      	mov	r3, r0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3708      	adds	r7, #8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b0fa:	b590      	push	{r4, r7, lr}
 800b0fc:	b089      	sub	sp, #36	@ 0x24
 800b0fe:	af04      	add	r7, sp, #16
 800b100:	6078      	str	r0, [r7, #4]
 800b102:	4608      	mov	r0, r1
 800b104:	4611      	mov	r1, r2
 800b106:	461a      	mov	r2, r3
 800b108:	4603      	mov	r3, r0
 800b10a:	70fb      	strb	r3, [r7, #3]
 800b10c:	460b      	mov	r3, r1
 800b10e:	70bb      	strb	r3, [r7, #2]
 800b110:	4613      	mov	r3, r2
 800b112:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b114:	2300      	movs	r3, #0
 800b116:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b118:	2300      	movs	r3, #0
 800b11a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b122:	787c      	ldrb	r4, [r7, #1]
 800b124:	78ba      	ldrb	r2, [r7, #2]
 800b126:	78f9      	ldrb	r1, [r7, #3]
 800b128:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b12a:	9302      	str	r3, [sp, #8]
 800b12c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b130:	9301      	str	r3, [sp, #4]
 800b132:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b136:	9300      	str	r3, [sp, #0]
 800b138:	4623      	mov	r3, r4
 800b13a:	f7f7 fbdb 	bl	80028f4 <HAL_HCD_HC_Init>
 800b13e:	4603      	mov	r3, r0
 800b140:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b142:	7bfb      	ldrb	r3, [r7, #15]
 800b144:	4618      	mov	r0, r3
 800b146:	f000 f8bf 	bl	800b2c8 <USBH_Get_USB_Status>
 800b14a:	4603      	mov	r3, r0
 800b14c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b14e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3714      	adds	r7, #20
 800b154:	46bd      	mov	sp, r7
 800b156:	bd90      	pop	{r4, r7, pc}

0800b158 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	460b      	mov	r3, r1
 800b162:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b164:	2300      	movs	r3, #0
 800b166:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b168:	2300      	movs	r3, #0
 800b16a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b172:	78fa      	ldrb	r2, [r7, #3]
 800b174:	4611      	mov	r1, r2
 800b176:	4618      	mov	r0, r3
 800b178:	f7f7 fc74 	bl	8002a64 <HAL_HCD_HC_Halt>
 800b17c:	4603      	mov	r3, r0
 800b17e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b180:	7bfb      	ldrb	r3, [r7, #15]
 800b182:	4618      	mov	r0, r3
 800b184:	f000 f8a0 	bl	800b2c8 <USBH_Get_USB_Status>
 800b188:	4603      	mov	r3, r0
 800b18a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b18c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b196:	b590      	push	{r4, r7, lr}
 800b198:	b089      	sub	sp, #36	@ 0x24
 800b19a:	af04      	add	r7, sp, #16
 800b19c:	6078      	str	r0, [r7, #4]
 800b19e:	4608      	mov	r0, r1
 800b1a0:	4611      	mov	r1, r2
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	70fb      	strb	r3, [r7, #3]
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	70bb      	strb	r3, [r7, #2]
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b1be:	787c      	ldrb	r4, [r7, #1]
 800b1c0:	78ba      	ldrb	r2, [r7, #2]
 800b1c2:	78f9      	ldrb	r1, [r7, #3]
 800b1c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b1c8:	9303      	str	r3, [sp, #12]
 800b1ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b1cc:	9302      	str	r3, [sp, #8]
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d0:	9301      	str	r3, [sp, #4]
 800b1d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	4623      	mov	r3, r4
 800b1da:	f7f7 fc67 	bl	8002aac <HAL_HCD_HC_SubmitRequest>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b1e2:	7bfb      	ldrb	r3, [r7, #15]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f000 f86f 	bl	800b2c8 <USBH_Get_USB_Status>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3714      	adds	r7, #20
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd90      	pop	{r4, r7, pc}

0800b1f8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	460b      	mov	r3, r1
 800b202:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b20a:	78fa      	ldrb	r2, [r7, #3]
 800b20c:	4611      	mov	r1, r2
 800b20e:	4618      	mov	r0, r3
 800b210:	f7f7 ff48 	bl	80030a4 <HAL_HCD_HC_GetURBState>
 800b214:	4603      	mov	r3, r0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3708      	adds	r7, #8
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b082      	sub	sp, #8
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	460b      	mov	r3, r1
 800b228:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b230:	2b01      	cmp	r3, #1
 800b232:	d103      	bne.n	800b23c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b234:	78fb      	ldrb	r3, [r7, #3]
 800b236:	4618      	mov	r0, r3
 800b238:	f000 f872 	bl	800b320 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b23c:	20c8      	movs	r0, #200	@ 0xc8
 800b23e:	f7f6 f961 	bl	8001504 <HAL_Delay>
  return USBH_OK;
 800b242:	2300      	movs	r3, #0
}
 800b244:	4618      	mov	r0, r3
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	460b      	mov	r3, r1
 800b256:	70fb      	strb	r3, [r7, #3]
 800b258:	4613      	mov	r3, r2
 800b25a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b262:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b264:	78fa      	ldrb	r2, [r7, #3]
 800b266:	68f9      	ldr	r1, [r7, #12]
 800b268:	4613      	mov	r3, r2
 800b26a:	011b      	lsls	r3, r3, #4
 800b26c:	1a9b      	subs	r3, r3, r2
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	440b      	add	r3, r1
 800b272:	3317      	adds	r3, #23
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d00a      	beq.n	800b290 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b27a:	78fa      	ldrb	r2, [r7, #3]
 800b27c:	68f9      	ldr	r1, [r7, #12]
 800b27e:	4613      	mov	r3, r2
 800b280:	011b      	lsls	r3, r3, #4
 800b282:	1a9b      	subs	r3, r3, r2
 800b284:	009b      	lsls	r3, r3, #2
 800b286:	440b      	add	r3, r1
 800b288:	333c      	adds	r3, #60	@ 0x3c
 800b28a:	78ba      	ldrb	r2, [r7, #2]
 800b28c:	701a      	strb	r2, [r3, #0]
 800b28e:	e009      	b.n	800b2a4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b290:	78fa      	ldrb	r2, [r7, #3]
 800b292:	68f9      	ldr	r1, [r7, #12]
 800b294:	4613      	mov	r3, r2
 800b296:	011b      	lsls	r3, r3, #4
 800b298:	1a9b      	subs	r3, r3, r2
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	440b      	add	r3, r1
 800b29e:	333d      	adds	r3, #61	@ 0x3d
 800b2a0:	78ba      	ldrb	r2, [r7, #2]
 800b2a2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3714      	adds	r7, #20
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr

0800b2b2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b082      	sub	sp, #8
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f7f6 f922 	bl	8001504 <HAL_Delay>
}
 800b2c0:	bf00      	nop
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b2d6:	79fb      	ldrb	r3, [r7, #7]
 800b2d8:	2b03      	cmp	r3, #3
 800b2da:	d817      	bhi.n	800b30c <USBH_Get_USB_Status+0x44>
 800b2dc:	a201      	add	r2, pc, #4	@ (adr r2, 800b2e4 <USBH_Get_USB_Status+0x1c>)
 800b2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e2:	bf00      	nop
 800b2e4:	0800b2f5 	.word	0x0800b2f5
 800b2e8:	0800b2fb 	.word	0x0800b2fb
 800b2ec:	0800b301 	.word	0x0800b301
 800b2f0:	0800b307 	.word	0x0800b307
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2f8:	e00b      	b.n	800b312 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b2fa:	2302      	movs	r3, #2
 800b2fc:	73fb      	strb	r3, [r7, #15]
    break;
 800b2fe:	e008      	b.n	800b312 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b300:	2301      	movs	r3, #1
 800b302:	73fb      	strb	r3, [r7, #15]
    break;
 800b304:	e005      	b.n	800b312 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b306:	2302      	movs	r3, #2
 800b308:	73fb      	strb	r3, [r7, #15]
    break;
 800b30a:	e002      	b.n	800b312 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b30c:	2302      	movs	r3, #2
 800b30e:	73fb      	strb	r3, [r7, #15]
    break;
 800b310:	bf00      	nop
  }
  return usb_status;
 800b312:	7bfb      	ldrb	r3, [r7, #15]
}
 800b314:	4618      	mov	r0, r3
 800b316:	3714      	adds	r7, #20
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	4603      	mov	r3, r0
 800b328:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b32a:	79fb      	ldrb	r3, [r7, #7]
 800b32c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b32e:	79fb      	ldrb	r3, [r7, #7]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d102      	bne.n	800b33a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b334:	2300      	movs	r3, #0
 800b336:	73fb      	strb	r3, [r7, #15]
 800b338:	e001      	b.n	800b33e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b33a:	2301      	movs	r3, #1
 800b33c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b33e:	7bfb      	ldrb	r3, [r7, #15]
 800b340:	461a      	mov	r2, r3
 800b342:	2101      	movs	r1, #1
 800b344:	4803      	ldr	r0, [pc, #12]	@ (800b354 <MX_DriverVbusFS+0x34>)
 800b346:	f7f7 fa55 	bl	80027f4 <HAL_GPIO_WritePin>
}
 800b34a:	bf00      	nop
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	40020800 	.word	0x40020800

0800b358 <malloc>:
 800b358:	4b02      	ldr	r3, [pc, #8]	@ (800b364 <malloc+0xc>)
 800b35a:	4601      	mov	r1, r0
 800b35c:	6818      	ldr	r0, [r3, #0]
 800b35e:	f000 b82d 	b.w	800b3bc <_malloc_r>
 800b362:	bf00      	nop
 800b364:	2000002c 	.word	0x2000002c

0800b368 <free>:
 800b368:	4b02      	ldr	r3, [pc, #8]	@ (800b374 <free+0xc>)
 800b36a:	4601      	mov	r1, r0
 800b36c:	6818      	ldr	r0, [r3, #0]
 800b36e:	f000 b8f5 	b.w	800b55c <_free_r>
 800b372:	bf00      	nop
 800b374:	2000002c 	.word	0x2000002c

0800b378 <sbrk_aligned>:
 800b378:	b570      	push	{r4, r5, r6, lr}
 800b37a:	4e0f      	ldr	r6, [pc, #60]	@ (800b3b8 <sbrk_aligned+0x40>)
 800b37c:	460c      	mov	r4, r1
 800b37e:	6831      	ldr	r1, [r6, #0]
 800b380:	4605      	mov	r5, r0
 800b382:	b911      	cbnz	r1, 800b38a <sbrk_aligned+0x12>
 800b384:	f000 f8ae 	bl	800b4e4 <_sbrk_r>
 800b388:	6030      	str	r0, [r6, #0]
 800b38a:	4621      	mov	r1, r4
 800b38c:	4628      	mov	r0, r5
 800b38e:	f000 f8a9 	bl	800b4e4 <_sbrk_r>
 800b392:	1c43      	adds	r3, r0, #1
 800b394:	d103      	bne.n	800b39e <sbrk_aligned+0x26>
 800b396:	f04f 34ff 	mov.w	r4, #4294967295
 800b39a:	4620      	mov	r0, r4
 800b39c:	bd70      	pop	{r4, r5, r6, pc}
 800b39e:	1cc4      	adds	r4, r0, #3
 800b3a0:	f024 0403 	bic.w	r4, r4, #3
 800b3a4:	42a0      	cmp	r0, r4
 800b3a6:	d0f8      	beq.n	800b39a <sbrk_aligned+0x22>
 800b3a8:	1a21      	subs	r1, r4, r0
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	f000 f89a 	bl	800b4e4 <_sbrk_r>
 800b3b0:	3001      	adds	r0, #1
 800b3b2:	d1f2      	bne.n	800b39a <sbrk_aligned+0x22>
 800b3b4:	e7ef      	b.n	800b396 <sbrk_aligned+0x1e>
 800b3b6:	bf00      	nop
 800b3b8:	20000a7c 	.word	0x20000a7c

0800b3bc <_malloc_r>:
 800b3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3c0:	1ccd      	adds	r5, r1, #3
 800b3c2:	f025 0503 	bic.w	r5, r5, #3
 800b3c6:	3508      	adds	r5, #8
 800b3c8:	2d0c      	cmp	r5, #12
 800b3ca:	bf38      	it	cc
 800b3cc:	250c      	movcc	r5, #12
 800b3ce:	2d00      	cmp	r5, #0
 800b3d0:	4606      	mov	r6, r0
 800b3d2:	db01      	blt.n	800b3d8 <_malloc_r+0x1c>
 800b3d4:	42a9      	cmp	r1, r5
 800b3d6:	d904      	bls.n	800b3e2 <_malloc_r+0x26>
 800b3d8:	230c      	movs	r3, #12
 800b3da:	6033      	str	r3, [r6, #0]
 800b3dc:	2000      	movs	r0, #0
 800b3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b4b8 <_malloc_r+0xfc>
 800b3e6:	f000 f869 	bl	800b4bc <__malloc_lock>
 800b3ea:	f8d8 3000 	ldr.w	r3, [r8]
 800b3ee:	461c      	mov	r4, r3
 800b3f0:	bb44      	cbnz	r4, 800b444 <_malloc_r+0x88>
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	4630      	mov	r0, r6
 800b3f6:	f7ff ffbf 	bl	800b378 <sbrk_aligned>
 800b3fa:	1c43      	adds	r3, r0, #1
 800b3fc:	4604      	mov	r4, r0
 800b3fe:	d158      	bne.n	800b4b2 <_malloc_r+0xf6>
 800b400:	f8d8 4000 	ldr.w	r4, [r8]
 800b404:	4627      	mov	r7, r4
 800b406:	2f00      	cmp	r7, #0
 800b408:	d143      	bne.n	800b492 <_malloc_r+0xd6>
 800b40a:	2c00      	cmp	r4, #0
 800b40c:	d04b      	beq.n	800b4a6 <_malloc_r+0xea>
 800b40e:	6823      	ldr	r3, [r4, #0]
 800b410:	4639      	mov	r1, r7
 800b412:	4630      	mov	r0, r6
 800b414:	eb04 0903 	add.w	r9, r4, r3
 800b418:	f000 f864 	bl	800b4e4 <_sbrk_r>
 800b41c:	4581      	cmp	r9, r0
 800b41e:	d142      	bne.n	800b4a6 <_malloc_r+0xea>
 800b420:	6821      	ldr	r1, [r4, #0]
 800b422:	1a6d      	subs	r5, r5, r1
 800b424:	4629      	mov	r1, r5
 800b426:	4630      	mov	r0, r6
 800b428:	f7ff ffa6 	bl	800b378 <sbrk_aligned>
 800b42c:	3001      	adds	r0, #1
 800b42e:	d03a      	beq.n	800b4a6 <_malloc_r+0xea>
 800b430:	6823      	ldr	r3, [r4, #0]
 800b432:	442b      	add	r3, r5
 800b434:	6023      	str	r3, [r4, #0]
 800b436:	f8d8 3000 	ldr.w	r3, [r8]
 800b43a:	685a      	ldr	r2, [r3, #4]
 800b43c:	bb62      	cbnz	r2, 800b498 <_malloc_r+0xdc>
 800b43e:	f8c8 7000 	str.w	r7, [r8]
 800b442:	e00f      	b.n	800b464 <_malloc_r+0xa8>
 800b444:	6822      	ldr	r2, [r4, #0]
 800b446:	1b52      	subs	r2, r2, r5
 800b448:	d420      	bmi.n	800b48c <_malloc_r+0xd0>
 800b44a:	2a0b      	cmp	r2, #11
 800b44c:	d917      	bls.n	800b47e <_malloc_r+0xc2>
 800b44e:	1961      	adds	r1, r4, r5
 800b450:	42a3      	cmp	r3, r4
 800b452:	6025      	str	r5, [r4, #0]
 800b454:	bf18      	it	ne
 800b456:	6059      	strne	r1, [r3, #4]
 800b458:	6863      	ldr	r3, [r4, #4]
 800b45a:	bf08      	it	eq
 800b45c:	f8c8 1000 	streq.w	r1, [r8]
 800b460:	5162      	str	r2, [r4, r5]
 800b462:	604b      	str	r3, [r1, #4]
 800b464:	4630      	mov	r0, r6
 800b466:	f000 f82f 	bl	800b4c8 <__malloc_unlock>
 800b46a:	f104 000b 	add.w	r0, r4, #11
 800b46e:	1d23      	adds	r3, r4, #4
 800b470:	f020 0007 	bic.w	r0, r0, #7
 800b474:	1ac2      	subs	r2, r0, r3
 800b476:	bf1c      	itt	ne
 800b478:	1a1b      	subne	r3, r3, r0
 800b47a:	50a3      	strne	r3, [r4, r2]
 800b47c:	e7af      	b.n	800b3de <_malloc_r+0x22>
 800b47e:	6862      	ldr	r2, [r4, #4]
 800b480:	42a3      	cmp	r3, r4
 800b482:	bf0c      	ite	eq
 800b484:	f8c8 2000 	streq.w	r2, [r8]
 800b488:	605a      	strne	r2, [r3, #4]
 800b48a:	e7eb      	b.n	800b464 <_malloc_r+0xa8>
 800b48c:	4623      	mov	r3, r4
 800b48e:	6864      	ldr	r4, [r4, #4]
 800b490:	e7ae      	b.n	800b3f0 <_malloc_r+0x34>
 800b492:	463c      	mov	r4, r7
 800b494:	687f      	ldr	r7, [r7, #4]
 800b496:	e7b6      	b.n	800b406 <_malloc_r+0x4a>
 800b498:	461a      	mov	r2, r3
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	42a3      	cmp	r3, r4
 800b49e:	d1fb      	bne.n	800b498 <_malloc_r+0xdc>
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	6053      	str	r3, [r2, #4]
 800b4a4:	e7de      	b.n	800b464 <_malloc_r+0xa8>
 800b4a6:	230c      	movs	r3, #12
 800b4a8:	6033      	str	r3, [r6, #0]
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	f000 f80c 	bl	800b4c8 <__malloc_unlock>
 800b4b0:	e794      	b.n	800b3dc <_malloc_r+0x20>
 800b4b2:	6005      	str	r5, [r0, #0]
 800b4b4:	e7d6      	b.n	800b464 <_malloc_r+0xa8>
 800b4b6:	bf00      	nop
 800b4b8:	20000a80 	.word	0x20000a80

0800b4bc <__malloc_lock>:
 800b4bc:	4801      	ldr	r0, [pc, #4]	@ (800b4c4 <__malloc_lock+0x8>)
 800b4be:	f000 b84b 	b.w	800b558 <__retarget_lock_acquire_recursive>
 800b4c2:	bf00      	nop
 800b4c4:	20000bc0 	.word	0x20000bc0

0800b4c8 <__malloc_unlock>:
 800b4c8:	4801      	ldr	r0, [pc, #4]	@ (800b4d0 <__malloc_unlock+0x8>)
 800b4ca:	f000 b846 	b.w	800b55a <__retarget_lock_release_recursive>
 800b4ce:	bf00      	nop
 800b4d0:	20000bc0 	.word	0x20000bc0

0800b4d4 <memset>:
 800b4d4:	4402      	add	r2, r0
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d100      	bne.n	800b4de <memset+0xa>
 800b4dc:	4770      	bx	lr
 800b4de:	f803 1b01 	strb.w	r1, [r3], #1
 800b4e2:	e7f9      	b.n	800b4d8 <memset+0x4>

0800b4e4 <_sbrk_r>:
 800b4e4:	b538      	push	{r3, r4, r5, lr}
 800b4e6:	4d06      	ldr	r5, [pc, #24]	@ (800b500 <_sbrk_r+0x1c>)
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	4608      	mov	r0, r1
 800b4ee:	602b      	str	r3, [r5, #0]
 800b4f0:	f7f5 ff24 	bl	800133c <_sbrk>
 800b4f4:	1c43      	adds	r3, r0, #1
 800b4f6:	d102      	bne.n	800b4fe <_sbrk_r+0x1a>
 800b4f8:	682b      	ldr	r3, [r5, #0]
 800b4fa:	b103      	cbz	r3, 800b4fe <_sbrk_r+0x1a>
 800b4fc:	6023      	str	r3, [r4, #0]
 800b4fe:	bd38      	pop	{r3, r4, r5, pc}
 800b500:	20000bbc 	.word	0x20000bbc

0800b504 <__errno>:
 800b504:	4b01      	ldr	r3, [pc, #4]	@ (800b50c <__errno+0x8>)
 800b506:	6818      	ldr	r0, [r3, #0]
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	2000002c 	.word	0x2000002c

0800b510 <__libc_init_array>:
 800b510:	b570      	push	{r4, r5, r6, lr}
 800b512:	4d0d      	ldr	r5, [pc, #52]	@ (800b548 <__libc_init_array+0x38>)
 800b514:	4c0d      	ldr	r4, [pc, #52]	@ (800b54c <__libc_init_array+0x3c>)
 800b516:	1b64      	subs	r4, r4, r5
 800b518:	10a4      	asrs	r4, r4, #2
 800b51a:	2600      	movs	r6, #0
 800b51c:	42a6      	cmp	r6, r4
 800b51e:	d109      	bne.n	800b534 <__libc_init_array+0x24>
 800b520:	4d0b      	ldr	r5, [pc, #44]	@ (800b550 <__libc_init_array+0x40>)
 800b522:	4c0c      	ldr	r4, [pc, #48]	@ (800b554 <__libc_init_array+0x44>)
 800b524:	f000 f864 	bl	800b5f0 <_init>
 800b528:	1b64      	subs	r4, r4, r5
 800b52a:	10a4      	asrs	r4, r4, #2
 800b52c:	2600      	movs	r6, #0
 800b52e:	42a6      	cmp	r6, r4
 800b530:	d105      	bne.n	800b53e <__libc_init_array+0x2e>
 800b532:	bd70      	pop	{r4, r5, r6, pc}
 800b534:	f855 3b04 	ldr.w	r3, [r5], #4
 800b538:	4798      	blx	r3
 800b53a:	3601      	adds	r6, #1
 800b53c:	e7ee      	b.n	800b51c <__libc_init_array+0xc>
 800b53e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b542:	4798      	blx	r3
 800b544:	3601      	adds	r6, #1
 800b546:	e7f2      	b.n	800b52e <__libc_init_array+0x1e>
 800b548:	0800b634 	.word	0x0800b634
 800b54c:	0800b634 	.word	0x0800b634
 800b550:	0800b634 	.word	0x0800b634
 800b554:	0800b638 	.word	0x0800b638

0800b558 <__retarget_lock_acquire_recursive>:
 800b558:	4770      	bx	lr

0800b55a <__retarget_lock_release_recursive>:
 800b55a:	4770      	bx	lr

0800b55c <_free_r>:
 800b55c:	b538      	push	{r3, r4, r5, lr}
 800b55e:	4605      	mov	r5, r0
 800b560:	2900      	cmp	r1, #0
 800b562:	d041      	beq.n	800b5e8 <_free_r+0x8c>
 800b564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b568:	1f0c      	subs	r4, r1, #4
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	bfb8      	it	lt
 800b56e:	18e4      	addlt	r4, r4, r3
 800b570:	f7ff ffa4 	bl	800b4bc <__malloc_lock>
 800b574:	4a1d      	ldr	r2, [pc, #116]	@ (800b5ec <_free_r+0x90>)
 800b576:	6813      	ldr	r3, [r2, #0]
 800b578:	b933      	cbnz	r3, 800b588 <_free_r+0x2c>
 800b57a:	6063      	str	r3, [r4, #4]
 800b57c:	6014      	str	r4, [r2, #0]
 800b57e:	4628      	mov	r0, r5
 800b580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b584:	f7ff bfa0 	b.w	800b4c8 <__malloc_unlock>
 800b588:	42a3      	cmp	r3, r4
 800b58a:	d908      	bls.n	800b59e <_free_r+0x42>
 800b58c:	6820      	ldr	r0, [r4, #0]
 800b58e:	1821      	adds	r1, r4, r0
 800b590:	428b      	cmp	r3, r1
 800b592:	bf01      	itttt	eq
 800b594:	6819      	ldreq	r1, [r3, #0]
 800b596:	685b      	ldreq	r3, [r3, #4]
 800b598:	1809      	addeq	r1, r1, r0
 800b59a:	6021      	streq	r1, [r4, #0]
 800b59c:	e7ed      	b.n	800b57a <_free_r+0x1e>
 800b59e:	461a      	mov	r2, r3
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	b10b      	cbz	r3, 800b5a8 <_free_r+0x4c>
 800b5a4:	42a3      	cmp	r3, r4
 800b5a6:	d9fa      	bls.n	800b59e <_free_r+0x42>
 800b5a8:	6811      	ldr	r1, [r2, #0]
 800b5aa:	1850      	adds	r0, r2, r1
 800b5ac:	42a0      	cmp	r0, r4
 800b5ae:	d10b      	bne.n	800b5c8 <_free_r+0x6c>
 800b5b0:	6820      	ldr	r0, [r4, #0]
 800b5b2:	4401      	add	r1, r0
 800b5b4:	1850      	adds	r0, r2, r1
 800b5b6:	4283      	cmp	r3, r0
 800b5b8:	6011      	str	r1, [r2, #0]
 800b5ba:	d1e0      	bne.n	800b57e <_free_r+0x22>
 800b5bc:	6818      	ldr	r0, [r3, #0]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	6053      	str	r3, [r2, #4]
 800b5c2:	4408      	add	r0, r1
 800b5c4:	6010      	str	r0, [r2, #0]
 800b5c6:	e7da      	b.n	800b57e <_free_r+0x22>
 800b5c8:	d902      	bls.n	800b5d0 <_free_r+0x74>
 800b5ca:	230c      	movs	r3, #12
 800b5cc:	602b      	str	r3, [r5, #0]
 800b5ce:	e7d6      	b.n	800b57e <_free_r+0x22>
 800b5d0:	6820      	ldr	r0, [r4, #0]
 800b5d2:	1821      	adds	r1, r4, r0
 800b5d4:	428b      	cmp	r3, r1
 800b5d6:	bf04      	itt	eq
 800b5d8:	6819      	ldreq	r1, [r3, #0]
 800b5da:	685b      	ldreq	r3, [r3, #4]
 800b5dc:	6063      	str	r3, [r4, #4]
 800b5de:	bf04      	itt	eq
 800b5e0:	1809      	addeq	r1, r1, r0
 800b5e2:	6021      	streq	r1, [r4, #0]
 800b5e4:	6054      	str	r4, [r2, #4]
 800b5e6:	e7ca      	b.n	800b57e <_free_r+0x22>
 800b5e8:	bd38      	pop	{r3, r4, r5, pc}
 800b5ea:	bf00      	nop
 800b5ec:	20000a80 	.word	0x20000a80

0800b5f0 <_init>:
 800b5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5f2:	bf00      	nop
 800b5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5f6:	bc08      	pop	{r3}
 800b5f8:	469e      	mov	lr, r3
 800b5fa:	4770      	bx	lr

0800b5fc <_fini>:
 800b5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fe:	bf00      	nop
 800b600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b602:	bc08      	pop	{r3}
 800b604:	469e      	mov	lr, r3
 800b606:	4770      	bx	lr
