
STM32Utils.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a77c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800a90c  0800a90c  0000b90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9a4  0800a9a4  0000c14c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9a4  0800a9a4  0000b9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9ac  0800a9ac  0000c14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9ac  0800a9ac  0000b9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a9b0  0800a9b0  0000b9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  0800a9b4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c14c  2**0
                  CONTENTS
 10 .bss          00001f3c  2000014c  2000014c  0000c14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002088  20002088  0000c14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001740d  00000000  00000000  0000c17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004122  00000000  00000000  00023589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  000276b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9c  00000000  00000000  00028b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026079  00000000  00000000  00029ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b9a5  00000000  00000000  0004fb5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da3b6  00000000  00000000  0006b502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001458b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005974  00000000  00000000  001458fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003c  00000000  00000000  0014b270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a8f4 	.word	0x0800a8f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	0800a8f4 	.word	0x0800a8f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <status_led_init>:
// status led config >> for four leds
void status_led_init(Status_led_s *status_led, GPIO_TypeDef * Led1_GPIOx, uint16_t Led1_GPIO_pin,
		GPIO_TypeDef * Led2_GPIOx, uint16_t Led2_GPIO_pin,
		GPIO_TypeDef * Led3_GPIOx, uint16_t Led3_GPIO_pin,
		GPIO_TypeDef * Led4_GPIOx, uint16_t Led4_GPIO_pin)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4613      	mov	r3, r2
 800057e:	80fb      	strh	r3, [r7, #6]
	status_led->Led1_GPIOx = Led1_GPIOx;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	601a      	str	r2, [r3, #0]
	status_led->Led1_GPIO_pin = Led1_GPIO_pin;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	88fa      	ldrh	r2, [r7, #6]
 800058a:	809a      	strh	r2, [r3, #4]

	status_led->Led2_GPIOx = Led2_GPIOx;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	683a      	ldr	r2, [r7, #0]
 8000590:	609a      	str	r2, [r3, #8]
	status_led->Led2_GPIO_pin = Led2_GPIO_pin;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	8b3a      	ldrh	r2, [r7, #24]
 8000596:	819a      	strh	r2, [r3, #12]

	status_led->Led3_GPIOx = Led3_GPIOx;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	69fa      	ldr	r2, [r7, #28]
 800059c:	611a      	str	r2, [r3, #16]
	status_led->Led3_GPIO_pin = Led3_GPIO_pin;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	8c3a      	ldrh	r2, [r7, #32]
 80005a2:	829a      	strh	r2, [r3, #20]

	status_led->Led4_GPIOx = Led4_GPIOx;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005a8:	619a      	str	r2, [r3, #24]
	status_led->Led4_GPIO_pin = Led4_GPIO_pin;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80005ae:	839a      	strh	r2, [r3, #28]

}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <status_led_process>:

// led 1 -- kırmızı
// led 2 -- yeşil
// led 3 -- 2. yeşil
// led 4 -- sarı
void status_led_process(Status_led_s* status_led, Status_led_mode_e Mode){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	70fb      	strb	r3, [r7, #3]
	switch (Mode) {
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	2b04      	cmp	r3, #4
 80005cc:	f200 80a4 	bhi.w	8000718 <status_led_process+0x15c>
 80005d0:	a201      	add	r2, pc, #4	@ (adr r2, 80005d8 <status_led_process+0x1c>)
 80005d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d6:	bf00      	nop
 80005d8:	080005ed 	.word	0x080005ed
 80005dc:	0800061b 	.word	0x0800061b
 80005e0:	080006eb 	.word	0x080006eb
 80005e4:	08000677 	.word	0x08000677
 80005e8:	08000649 	.word	0x08000649
		case LED_STOP :
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 1);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6818      	ldr	r0, [r3, #0]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	889b      	ldrh	r3, [r3, #4]
 80005f4:	2201      	movs	r2, #1
 80005f6:	4619      	mov	r1, r3
 80005f8:	f002 fc76 	bl	8002ee8 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80005fc:	20c8      	movs	r0, #200	@ 0xc8
 80005fe:	f001 f809 	bl	8001614 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 0);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6818      	ldr	r0, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	889b      	ldrh	r3, [r3, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	4619      	mov	r1, r3
 800060e:	f002 fc6b 	bl	8002ee8 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000612:	20c8      	movs	r0, #200	@ 0xc8
 8000614:	f000 fffe 	bl	8001614 <HAL_Delay>
			break;
 8000618:	e095      	b.n	8000746 <status_led_process+0x18a>
		case LED_START :
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 1);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6898      	ldr	r0, [r3, #8]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	899b      	ldrh	r3, [r3, #12]
 8000622:	2201      	movs	r2, #1
 8000624:	4619      	mov	r1, r3
 8000626:	f002 fc5f 	bl	8002ee8 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 800062a:	20c8      	movs	r0, #200	@ 0xc8
 800062c:	f000 fff2 	bl	8001614 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 0);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6898      	ldr	r0, [r3, #8]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	899b      	ldrh	r3, [r3, #12]
 8000638:	2200      	movs	r2, #0
 800063a:	4619      	mov	r1, r3
 800063c:	f002 fc54 	bl	8002ee8 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000640:	20c8      	movs	r0, #200	@ 0xc8
 8000642:	f000 ffe7 	bl	8001614 <HAL_Delay>
			break;
 8000646:	e07e      	b.n	8000746 <status_led_process+0x18a>
		case LED_OKAY :
			HAL_GPIO_WritePin(status_led->Led3_GPIOx, status_led->Led3_GPIO_pin, 1);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	6918      	ldr	r0, [r3, #16]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	8a9b      	ldrh	r3, [r3, #20]
 8000650:	2201      	movs	r2, #1
 8000652:	4619      	mov	r1, r3
 8000654:	f002 fc48 	bl	8002ee8 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000658:	20c8      	movs	r0, #200	@ 0xc8
 800065a:	f000 ffdb 	bl	8001614 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led3_GPIOx, status_led->Led3_GPIO_pin, 0);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6918      	ldr	r0, [r3, #16]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	8a9b      	ldrh	r3, [r3, #20]
 8000666:	2200      	movs	r2, #0
 8000668:	4619      	mov	r1, r3
 800066a:	f002 fc3d 	bl	8002ee8 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 800066e:	20c8      	movs	r0, #200	@ 0xc8
 8000670:	f000 ffd0 	bl	8001614 <HAL_Delay>
			break;
 8000674:	e067      	b.n	8000746 <status_led_process+0x18a>
		case LED_GO :
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 0);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6898      	ldr	r0, [r3, #8]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	899b      	ldrh	r3, [r3, #12]
 800067e:	2200      	movs	r2, #0
 8000680:	4619      	mov	r1, r3
 8000682:	f002 fc31 	bl	8002ee8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 1);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6818      	ldr	r0, [r3, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	889b      	ldrh	r3, [r3, #4]
 800068e:	2201      	movs	r2, #1
 8000690:	4619      	mov	r1, r3
 8000692:	f002 fc29 	bl	8002ee8 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000696:	20c8      	movs	r0, #200	@ 0xc8
 8000698:	f000 ffbc 	bl	8001614 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 0);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6818      	ldr	r0, [r3, #0]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	889b      	ldrh	r3, [r3, #4]
 80006a4:	2200      	movs	r2, #0
 80006a6:	4619      	mov	r1, r3
 80006a8:	f002 fc1e 	bl	8002ee8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 1);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6998      	ldr	r0, [r3, #24]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	8b9b      	ldrh	r3, [r3, #28]
 80006b4:	2201      	movs	r2, #1
 80006b6:	4619      	mov	r1, r3
 80006b8:	f002 fc16 	bl	8002ee8 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80006bc:	20c8      	movs	r0, #200	@ 0xc8
 80006be:	f000 ffa9 	bl	8001614 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 0);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6998      	ldr	r0, [r3, #24]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	8b9b      	ldrh	r3, [r3, #28]
 80006ca:	2200      	movs	r2, #0
 80006cc:	4619      	mov	r1, r3
 80006ce:	f002 fc0b 	bl	8002ee8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 1);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6898      	ldr	r0, [r3, #8]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	899b      	ldrh	r3, [r3, #12]
 80006da:	2201      	movs	r2, #1
 80006dc:	4619      	mov	r1, r3
 80006de:	f002 fc03 	bl	8002ee8 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80006e2:	20c8      	movs	r0, #200	@ 0xc8
 80006e4:	f000 ff96 	bl	8001614 <HAL_Delay>
			break;
 80006e8:	e02d      	b.n	8000746 <status_led_process+0x18a>
		case LED_STAY :
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 1);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6998      	ldr	r0, [r3, #24]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	8b9b      	ldrh	r3, [r3, #28]
 80006f2:	2201      	movs	r2, #1
 80006f4:	4619      	mov	r1, r3
 80006f6:	f002 fbf7 	bl	8002ee8 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80006fa:	20c8      	movs	r0, #200	@ 0xc8
 80006fc:	f000 ff8a 	bl	8001614 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 0);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6998      	ldr	r0, [r3, #24]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	8b9b      	ldrh	r3, [r3, #28]
 8000708:	2200      	movs	r2, #0
 800070a:	4619      	mov	r1, r3
 800070c:	f002 fbec 	bl	8002ee8 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000710:	20c8      	movs	r0, #200	@ 0xc8
 8000712:	f000 ff7f 	bl	8001614 <HAL_Delay>
			break;
 8000716:	e016      	b.n	8000746 <status_led_process+0x18a>

		default:
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 1);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6818      	ldr	r0, [r3, #0]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	889b      	ldrh	r3, [r3, #4]
 8000720:	2201      	movs	r2, #1
 8000722:	4619      	mov	r1, r3
 8000724:	f002 fbe0 	bl	8002ee8 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000728:	2064      	movs	r0, #100	@ 0x64
 800072a:	f000 ff73 	bl	8001614 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 0);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	889b      	ldrh	r3, [r3, #4]
 8000736:	2200      	movs	r2, #0
 8000738:	4619      	mov	r1, r3
 800073a:	f002 fbd5 	bl	8002ee8 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 800073e:	2064      	movs	r0, #100	@ 0x64
 8000740:	f000 ff68 	bl	8001614 <HAL_Delay>
			break;
 8000744:	bf00      	nop
	}
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop

08000750 <Flash_WR>:
 *      Author: ilbeyli
 */

#include "FLASH_PROCESS_lib.h"

void Flash_WR(uint32_t Flash_Address, uint32_t Flash_WR_Data){
 8000750:	b5b0      	push	{r4, r5, r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 800075a:	f002 f867 	bl	800282c <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);  // add sector usage
 800075e:	2102      	movs	r1, #2
 8000760:	200b      	movs	r0, #11
 8000762:	f002 f9c5 	bl	8002af0 <FLASH_Erase_Sector>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Flash_Address, Flash_WR_Data);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2200      	movs	r2, #0
 800076a:	461c      	mov	r4, r3
 800076c:	4615      	mov	r5, r2
 800076e:	4622      	mov	r2, r4
 8000770:	462b      	mov	r3, r5
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	2002      	movs	r0, #2
 8000776:	f002 f805 	bl	8002784 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 800077a:	f002 f879 	bl	8002870 <HAL_FLASH_Lock>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bdb0      	pop	{r4, r5, r7, pc}

08000786 <Flash_RD>:

uint32_t Flash_RD(uint32_t Flash_Address){
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
	return *((uint32_t*)Flash_Address);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <init_servo>:
void init_servo(	servo_config* 		servo_config,
					GPIO_TypeDef*		servo_GPIOx,
					uint32_t 			servo_GPIO_pin,
					TIM_HandleTypeDef*	Timer_Handle,
					uint32_t			Timer_Channel)
{
 800079e:	b480      	push	{r7}
 80007a0:	b085      	sub	sp, #20
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	60f8      	str	r0, [r7, #12]
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	603b      	str	r3, [r7, #0]
	servo_config->servo_GPIOx 			=servo_GPIOx;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	601a      	str	r2, [r3, #0]
	servo_config->servo_GPIO_pin 		=servo_GPIO_pin;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	605a      	str	r2, [r3, #4]
	servo_config->Timer_Handle 			=Timer_Handle;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	609a      	str	r2, [r3, #8]
	servo_config->Timer_Channel			=Timer_Channel;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	69ba      	ldr	r2, [r7, #24]
 80007c2:	60da      	str	r2, [r3, #12]
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <map>:


uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	69b9      	ldr	r1, [r7, #24]
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	1a8a      	subs	r2, r1, r2
 80007ea:	fb03 f202 	mul.w	r2, r3, r2
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	1acb      	subs	r3, r1, r3
 80007f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	4413      	add	r3, r2
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <step_init>:
void step_init(	step_config* step_config,
					TIM_HandleTypeDef*	Timer_handle,
					uint32_t			Timer_channel,
					GPIO_TypeDef*		dir_GPIOx,
					uint16_t			dir_GPIO_Pin)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	603b      	str	r3, [r7, #0]
		step_config->Timer_handle 	= Timer_handle;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	601a      	str	r2, [r3, #0]
		step_config->Timer_channel 	= Timer_channel;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	605a      	str	r2, [r3, #4]
		step_config->dir_GPIOx		= dir_GPIOx;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	683a      	ldr	r2, [r7, #0]
 8000826:	609a      	str	r2, [r3, #8]
		step_config->dir_GPIO_Pin	= dir_GPIO_Pin;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	8b3a      	ldrh	r2, [r7, #24]
 800082c:	819a      	strh	r2, [r3, #12]

}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <step>:

void step(step_config* step_config, uint32_t adim, uint32_t yon)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b084      	sub	sp, #16
 800083e:	af00      	add	r7, sp, #0
 8000840:	60f8      	str	r0, [r7, #12]
 8000842:	60b9      	str	r1, [r7, #8]
 8000844:	607a      	str	r2, [r7, #4]
	if (step_config->step_set.durum == Step_DURDU){
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d147      	bne.n	80008de <step+0xa4>
		step_config->step_set.adim = adim;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	68ba      	ldr	r2, [r7, #8]
 8000852:	615a      	str	r2, [r3, #20]
		step_config->step_set.durum = Step_BASLADI;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	2201      	movs	r2, #1
 8000858:	619a      	str	r2, [r3, #24]
		if(yon == Step_ILERI ){
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d108      	bne.n	8000872 <step+0x38>
			HAL_GPIO_WritePin(step_config->dir_GPIOx, step_config->dir_GPIO_Pin, 1);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	6898      	ldr	r0, [r3, #8]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	899b      	ldrh	r3, [r3, #12]
 8000868:	2201      	movs	r2, #1
 800086a:	4619      	mov	r1, r3
 800086c:	f002 fb3c 	bl	8002ee8 <HAL_GPIO_WritePin>
 8000870:	e007      	b.n	8000882 <step+0x48>

		}
		else {
			HAL_GPIO_WritePin(step_config->dir_GPIOx, step_config->dir_GPIO_Pin, 0);
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	6898      	ldr	r0, [r3, #8]
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	899b      	ldrh	r3, [r3, #12]
 800087a:	2200      	movs	r2, #0
 800087c:	4619      	mov	r1, r3
 800087e:	f002 fb33 	bl	8002ee8 <HAL_GPIO_WritePin>

		}

		if (0 != adim){
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d02a      	beq.n	80008de <step+0xa4>
			HAL_TIM_PWM_Start_IT(step_config->Timer_handle, step_config->Timer_channel);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	4619      	mov	r1, r3
 8000892:	4610      	mov	r0, r2
 8000894:	f004 fac4 	bl	8004e20 <HAL_TIM_PWM_Start_IT>
			__HAL_TIM_SET_COMPARE(step_config->Timer_handle, step_config->Timer_channel, 100);
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d105      	bne.n	80008ac <step+0x72>
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2264      	movs	r2, #100	@ 0x64
 80008a8:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
}
 80008aa:	e018      	b.n	80008de <step+0xa4>
			__HAL_TIM_SET_COMPARE(step_config->Timer_handle, step_config->Timer_channel, 100);
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	2b04      	cmp	r3, #4
 80008b2:	d105      	bne.n	80008c0 <step+0x86>
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	2364      	movs	r3, #100	@ 0x64
 80008bc:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80008be:	e00e      	b.n	80008de <step+0xa4>
			__HAL_TIM_SET_COMPARE(step_config->Timer_handle, step_config->Timer_channel, 100);
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	2b08      	cmp	r3, #8
 80008c6:	d105      	bne.n	80008d4 <step+0x9a>
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	2364      	movs	r3, #100	@ 0x64
 80008d0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80008d2:	e004      	b.n	80008de <step+0xa4>
			__HAL_TIM_SET_COMPARE(step_config->Timer_handle, step_config->Timer_channel, 100);
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	2364      	movs	r3, #100	@ 0x64
 80008dc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <step_durdur>:

void step_durdur(step_config* step_config){
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
	if (step_config->step_set.sayac == step_config->step_set.adim){
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	691a      	ldr	r2, [r3, #16]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d10d      	bne.n	8000916 <step_durdur+0x30>
		HAL_TIM_PWM_Stop_IT(step_config->Timer_handle, step_config->Timer_channel);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	4619      	mov	r1, r3
 8000904:	4610      	mov	r0, r2
 8000906:	f004 fba1 	bl	800504c <HAL_TIM_PWM_Stop_IT>
		step_config->step_set.durum = Step_DURDU;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
		step_config->step_set.sayac =0;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
	}

}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef * htim)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	if (htim-> Instance == TIM1){
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a09      	ldr	r2, [pc, #36]	@ (8000954 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d10b      	bne.n	800094a <HAL_TIM_PWM_PulseFinishedCallback+0x2a>

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	7f1b      	ldrb	r3, [r3, #28]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d104      	bne.n	8000944 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
		{
			step1.step_set.sayac++;
 800093a:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 800093c:	691b      	ldr	r3, [r3, #16]
 800093e:	3301      	adds	r3, #1
 8000940:	4a05      	ldr	r2, [pc, #20]	@ (8000958 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000942:	6113      	str	r3, [r2, #16]
		}

		step_durdur(&step1);
 8000944:	4804      	ldr	r0, [pc, #16]	@ (8000958 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000946:	f7ff ffce 	bl	80008e6 <step_durdur>

		}

}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40010000 	.word	0x40010000
 8000958:	200002a0 	.word	0x200002a0

0800095c <HAL_GPIO_EXTI_Callback>:


// Yapilan ayarlari kaydetmek icin
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d105      	bne.n	8000978 <HAL_GPIO_EXTI_Callback+0x1c>
    {
    	Flash_WR(0x080E0000, flash_ref);
 800096c:	4b04      	ldr	r3, [pc, #16]	@ (8000980 <HAL_GPIO_EXTI_Callback+0x24>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	4804      	ldr	r0, [pc, #16]	@ (8000984 <HAL_GPIO_EXTI_Callback+0x28>)
 8000974:	f7ff feec 	bl	8000750 <Flash_WR>
    }

}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200002f4 	.word	0x200002f4
 8000984:	080e0000 	.word	0x080e0000

08000988 <flag_check>:

void flag_check(){
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) == GPIO_PIN_RESET){
 800098c:	2102      	movs	r1, #2
 800098e:	4810      	ldr	r0, [pc, #64]	@ (80009d0 <flag_check+0x48>)
 8000990:	f002 fa92 	bl	8002eb8 <HAL_GPIO_ReadPin>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d103      	bne.n	80009a2 <flag_check+0x1a>
    	currentAction = PARAMETER_NEXT_SET;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <flag_check+0x4c>)
 800099c:	2201      	movs	r2, #1
 800099e:	701a      	strb	r2, [r3, #0]
    	currentAction = PARAMETER_PREV_SET;
    }
    else if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_RESET){
    	currentAction = PARAMETER_APPLY;
    }
}
 80009a0:	e014      	b.n	80009cc <flag_check+0x44>
    else if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_RESET){
 80009a2:	2104      	movs	r1, #4
 80009a4:	480a      	ldr	r0, [pc, #40]	@ (80009d0 <flag_check+0x48>)
 80009a6:	f002 fa87 	bl	8002eb8 <HAL_GPIO_ReadPin>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d103      	bne.n	80009b8 <flag_check+0x30>
    	currentAction = PARAMETER_PREV_SET;
 80009b0:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <flag_check+0x4c>)
 80009b2:	2202      	movs	r2, #2
 80009b4:	701a      	strb	r2, [r3, #0]
}
 80009b6:	e009      	b.n	80009cc <flag_check+0x44>
    else if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_RESET){
 80009b8:	2108      	movs	r1, #8
 80009ba:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <flag_check+0x48>)
 80009bc:	f002 fa7c 	bl	8002eb8 <HAL_GPIO_ReadPin>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d102      	bne.n	80009cc <flag_check+0x44>
    	currentAction = PARAMETER_APPLY;
 80009c6:	4b03      	ldr	r3, [pc, #12]	@ (80009d4 <flag_check+0x4c>)
 80009c8:	2203      	movs	r2, #3
 80009ca:	701a      	strb	r2, [r3, #0]
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40020c00 	.word	0x40020c00
 80009d4:	20000332 	.word	0x20000332

080009d8 <process>:

void process(int currentAction, int value){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
	switch(currentAction){
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	d025      	beq.n	8000a34 <process+0x5c>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	dc31      	bgt.n	8000a52 <process+0x7a>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d003      	beq.n	80009fc <process+0x24>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d00b      	beq.n	8000a12 <process+0x3a>
			step(&step1, value, yon);
			step_durdur(&step1);
			status_led_process(&statusLED,LED_START);
			break;
	}
}
 80009fa:	e02a      	b.n	8000a52 <process+0x7a>
			adim = value;
 80009fc:	4a17      	ldr	r2, [pc, #92]	@ (8000a5c <process+0x84>)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	6013      	str	r3, [r2, #0]
			status_led_process(&statusLED,LED_STAY);
 8000a02:	2102      	movs	r1, #2
 8000a04:	4816      	ldr	r0, [pc, #88]	@ (8000a60 <process+0x88>)
 8000a06:	f7ff fdd9 	bl	80005bc <status_led_process>
			flash_ref = value;
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	4a15      	ldr	r2, [pc, #84]	@ (8000a64 <process+0x8c>)
 8000a0e:	6013      	str	r3, [r2, #0]
			break;
 8000a10:	e01f      	b.n	8000a52 <process+0x7a>
			if(value < adim){
 8000a12:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <process+0x84>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	683a      	ldr	r2, [r7, #0]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	da03      	bge.n	8000a24 <process+0x4c>
				yon = Step_GERI;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <process+0x90>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	e002      	b.n	8000a2a <process+0x52>
				yon = Step_ILERI;
 8000a24:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <process+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
			status_led_process(&statusLED,LED_STAY);
 8000a2a:	2102      	movs	r1, #2
 8000a2c:	480c      	ldr	r0, [pc, #48]	@ (8000a60 <process+0x88>)
 8000a2e:	f7ff fdc5 	bl	80005bc <status_led_process>
			break;
 8000a32:	e00e      	b.n	8000a52 <process+0x7a>
			step(&step1, value, yon);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	4a0c      	ldr	r2, [pc, #48]	@ (8000a68 <process+0x90>)
 8000a38:	6812      	ldr	r2, [r2, #0]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480b      	ldr	r0, [pc, #44]	@ (8000a6c <process+0x94>)
 8000a3e:	f7ff fefc 	bl	800083a <step>
			step_durdur(&step1);
 8000a42:	480a      	ldr	r0, [pc, #40]	@ (8000a6c <process+0x94>)
 8000a44:	f7ff ff4f 	bl	80008e6 <step_durdur>
			status_led_process(&statusLED,LED_START);
 8000a48:	2101      	movs	r1, #1
 8000a4a:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <process+0x88>)
 8000a4c:	f7ff fdb6 	bl	80005bc <status_led_process>
			break;
 8000a50:	bf00      	nop
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200002bc 	.word	0x200002bc
 8000a60:	200002d4 	.word	0x200002d4
 8000a64:	200002f4 	.word	0x200002f4
 8000a68:	200002c0 	.word	0x200002c0
 8000a6c:	200002a0 	.word	0x200002a0

08000a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a76:	f000 fd5b 	bl	8001530 <HAL_Init>

  /* USER CODE BEGIN Init */
//Led
  status_led_init(&statusLED, GPIOD, GPIO_PIN_13, GPIOD, GPIO_PIN_14, GPIOD, GPIO_PIN_15, GPIOD, GPIO_PIN_12);
 8000a7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7e:	9304      	str	r3, [sp, #16]
 8000a80:	4b40      	ldr	r3, [pc, #256]	@ (8000b84 <main+0x114>)
 8000a82:	9303      	str	r3, [sp, #12]
 8000a84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a88:	9302      	str	r3, [sp, #8]
 8000a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b84 <main+0x114>)
 8000a8c:	9301      	str	r3, [sp, #4]
 8000a8e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	4b3b      	ldr	r3, [pc, #236]	@ (8000b84 <main+0x114>)
 8000a96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a9a:	493a      	ldr	r1, [pc, #232]	@ (8000b84 <main+0x114>)
 8000a9c:	483a      	ldr	r0, [pc, #232]	@ (8000b88 <main+0x118>)
 8000a9e:	f7ff fd67 	bl	8000570 <status_led_init>
//StepMotor
  step_init(&step1, &htim1, TIM_CHANNEL_1, dir_GPIO_Port, dir_Pin);
 8000aa2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	4b36      	ldr	r3, [pc, #216]	@ (8000b84 <main+0x114>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	4937      	ldr	r1, [pc, #220]	@ (8000b8c <main+0x11c>)
 8000aae:	4838      	ldr	r0, [pc, #224]	@ (8000b90 <main+0x120>)
 8000ab0:	f7ff feaa 	bl	8000808 <step_init>
//Servo
  init_servo(&servo1, GPIOC, GPIO_PIN_6, &htim3, TIM_CHANNEL_1);
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	4b36      	ldr	r3, [pc, #216]	@ (8000b94 <main+0x124>)
 8000aba:	2240      	movs	r2, #64	@ 0x40
 8000abc:	4936      	ldr	r1, [pc, #216]	@ (8000b98 <main+0x128>)
 8000abe:	4837      	ldr	r0, [pc, #220]	@ (8000b9c <main+0x12c>)
 8000ac0:	f7ff fe6d 	bl	800079e <init_servo>
//Lcd
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac4:	f000 f87a 	bl	8000bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac8:	f000 fa6e 	bl	8000fa8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000acc:	f000 fa4c 	bl	8000f68 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ad0:	f000 f8de 	bl	8000c90 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ad4:	f000 f92e 	bl	8000d34 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ad8:	f000 f9ce 	bl	8000e78 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000adc:	f008 fd2e 	bl	800953c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	492f      	ldr	r1, [pc, #188]	@ (8000ba0 <main+0x130>)
 8000ae4:	482f      	ldr	r0, [pc, #188]	@ (8000ba4 <main+0x134>)
 8000ae6:	f000 fdfd 	bl	80016e4 <HAL_ADC_Start_DMA>
  status_led_process(&statusLED, LED_GO);
 8000aea:	2103      	movs	r1, #3
 8000aec:	4826      	ldr	r0, [pc, #152]	@ (8000b88 <main+0x118>)
 8000aee:	f7ff fd65 	bl	80005bc <status_led_process>

  read_step_value = Flash_RD(0x080E0000);
 8000af2:	482d      	ldr	r0, [pc, #180]	@ (8000ba8 <main+0x138>)
 8000af4:	f7ff fe47 	bl	8000786 <Flash_RD>
 8000af8:	4603      	mov	r3, r0
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <main+0x13c>)
 8000afe:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(currentAction == 0){
 8000b00:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb0 <main+0x140>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d10b      	bne.n	8000b20 <main+0xb0>
		flag_check();
 8000b08:	f7ff ff3e 	bl	8000988 <flag_check>
		process(currentAction, read_step_value);
 8000b0c:	4b28      	ldr	r3, [pc, #160]	@ (8000bb0 <main+0x140>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <main+0x13c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4619      	mov	r1, r3
 8000b18:	4610      	mov	r0, r2
 8000b1a:	f7ff ff5d 	bl	80009d8 <process>
 8000b1e:	e7ef      	b.n	8000b00 <main+0x90>
	}

	else{
		read_step_value = map(adc_buffer[0], 0, 4095, 0, 255);
 8000b20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <main+0x130>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	23ff      	movs	r3, #255	@ 0xff
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000b30:	2100      	movs	r1, #0
 8000b32:	f7ff fe4d 	bl	80007d0 <map>
 8000b36:	4603      	mov	r3, r0
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bac <main+0x13c>)
 8000b3c:	601a      	str	r2, [r3, #0]
		snprintf((char*)send_data, sizeof(send_data), "%d\n", read_step_value);
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <main+0x13c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb4 <main+0x144>)
 8000b44:	2132      	movs	r1, #50	@ 0x32
 8000b46:	481c      	ldr	r0, [pc, #112]	@ (8000bb8 <main+0x148>)
 8000b48:	f009 fa20 	bl	8009f8c <sniprintf>
		while (CDC_Transmit_FS((uint8_t*)send_data, strlen((char*)send_data)) == USBD_BUSY) {
 8000b4c:	e002      	b.n	8000b54 <main+0xe4>
			HAL_Delay(1);
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f000 fd60 	bl	8001614 <HAL_Delay>
		while (CDC_Transmit_FS((uint8_t*)send_data, strlen((char*)send_data)) == USBD_BUSY) {
 8000b54:	4818      	ldr	r0, [pc, #96]	@ (8000bb8 <main+0x148>)
 8000b56:	f7ff fb3b 	bl	80001d0 <strlen>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4815      	ldr	r0, [pc, #84]	@ (8000bb8 <main+0x148>)
 8000b62:	f008 fda9 	bl	80096b8 <CDC_Transmit_FS>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d0f0      	beq.n	8000b4e <main+0xde>
		}

		flag_check();
 8000b6c:	f7ff ff0c 	bl	8000988 <flag_check>
		process(currentAction, read_step_value);
 8000b70:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <main+0x140>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <main+0x13c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4610      	mov	r0, r2
 8000b7e:	f7ff ff2b 	bl	80009d8 <process>
	if(currentAction == 0){
 8000b82:	e7bd      	b.n	8000b00 <main+0x90>
 8000b84:	40020c00 	.word	0x40020c00
 8000b88:	200002d4 	.word	0x200002d4
 8000b8c:	20000210 	.word	0x20000210
 8000b90:	200002a0 	.word	0x200002a0
 8000b94:	20000258 	.word	0x20000258
 8000b98:	40020800 	.word	0x40020800
 8000b9c:	200002c4 	.word	0x200002c4
 8000ba0:	200002f8 	.word	0x200002f8
 8000ba4:	20000168 	.word	0x20000168
 8000ba8:	080e0000 	.word	0x080e0000
 8000bac:	200002fc 	.word	0x200002fc
 8000bb0:	20000332 	.word	0x20000332
 8000bb4:	0800a90c 	.word	0x0800a90c
 8000bb8:	20000300 	.word	0x20000300

08000bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b094      	sub	sp, #80	@ 0x50
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 0320 	add.w	r3, r7, #32
 8000bc6:	2230      	movs	r2, #48	@ 0x30
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f009 fa12 	bl	8009ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	4b28      	ldr	r3, [pc, #160]	@ (8000c88 <SystemClock_Config+0xcc>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be8:	4a27      	ldr	r2, [pc, #156]	@ (8000c88 <SystemClock_Config+0xcc>)
 8000bea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf0:	4b25      	ldr	r3, [pc, #148]	@ (8000c88 <SystemClock_Config+0xcc>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	4b22      	ldr	r3, [pc, #136]	@ (8000c8c <SystemClock_Config+0xd0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a21      	ldr	r2, [pc, #132]	@ (8000c8c <SystemClock_Config+0xd0>)
 8000c06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c8c <SystemClock_Config+0xd0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c26:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000c30:	2348      	movs	r3, #72	@ 0x48
 8000c32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3c:	f107 0320 	add.w	r3, r7, #32
 8000c40:	4618      	mov	r0, r3
 8000c42:	f003 fbd5 	bl	80043f0 <HAL_RCC_OscConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c4c:	f000 fa52 	bl	80010f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c50:	230f      	movs	r3, #15
 8000c52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c54:	2302      	movs	r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f003 fe36 	bl	80048e0 <HAL_RCC_ClockConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c7a:	f000 fa3b 	bl	80010f4 <Error_Handler>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3750      	adds	r7, #80	@ 0x50
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40007000 	.word	0x40007000

08000c90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c96:	463b      	mov	r3, r7
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	@ (8000d28 <MX_ADC1_Init+0x98>)
 8000ca4:	4a21      	ldr	r2, [pc, #132]	@ (8000d2c <MX_ADC1_Init+0x9c>)
 8000ca6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d28 <MX_ADC1_Init+0x98>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cae:	4b1e      	ldr	r3, [pc, #120]	@ (8000d28 <MX_ADC1_Init+0x98>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <MX_ADC1_Init+0x98>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cba:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <MX_ADC1_Init+0x98>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cc0:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <MX_ADC1_Init+0x98>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <MX_ADC1_Init+0x98>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cce:	4b16      	ldr	r3, [pc, #88]	@ (8000d28 <MX_ADC1_Init+0x98>)
 8000cd0:	4a17      	ldr	r2, [pc, #92]	@ (8000d30 <MX_ADC1_Init+0xa0>)
 8000cd2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <MX_ADC1_Init+0x98>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cda:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <MX_ADC1_Init+0x98>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <MX_ADC1_Init+0x98>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <MX_ADC1_Init+0x98>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cee:	480e      	ldr	r0, [pc, #56]	@ (8000d28 <MX_ADC1_Init+0x98>)
 8000cf0:	f000 fcb4 	bl	800165c <HAL_ADC_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000cfa:	f000 f9fb 	bl	80010f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000d06:	2303      	movs	r3, #3
 8000d08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4806      	ldr	r0, [pc, #24]	@ (8000d28 <MX_ADC1_Init+0x98>)
 8000d10:	f000 fe16 	bl	8001940 <HAL_ADC_ConfigChannel>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d1a:	f000 f9eb 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000168 	.word	0x20000168
 8000d2c:	40012000 	.word	0x40012000
 8000d30:	0f000001 	.word	0x0f000001

08000d34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b096      	sub	sp, #88	@ 0x58
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d3a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d48:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]
 8000d62:	615a      	str	r2, [r3, #20]
 8000d64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2220      	movs	r2, #32
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f009 f941 	bl	8009ff4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d72:	4b3f      	ldr	r3, [pc, #252]	@ (8000e70 <MX_TIM1_Init+0x13c>)
 8000d74:	4a3f      	ldr	r2, [pc, #252]	@ (8000e74 <MX_TIM1_Init+0x140>)
 8000d76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 532;
 8000d78:	4b3d      	ldr	r3, [pc, #244]	@ (8000e70 <MX_TIM1_Init+0x13c>)
 8000d7a:	f44f 7205 	mov.w	r2, #532	@ 0x214
 8000d7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d80:	4b3b      	ldr	r3, [pc, #236]	@ (8000e70 <MX_TIM1_Init+0x13c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000d86:	4b3a      	ldr	r3, [pc, #232]	@ (8000e70 <MX_TIM1_Init+0x13c>)
 8000d88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8e:	4b38      	ldr	r3, [pc, #224]	@ (8000e70 <MX_TIM1_Init+0x13c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d94:	4b36      	ldr	r3, [pc, #216]	@ (8000e70 <MX_TIM1_Init+0x13c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9a:	4b35      	ldr	r3, [pc, #212]	@ (8000e70 <MX_TIM1_Init+0x13c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000da0:	4833      	ldr	r0, [pc, #204]	@ (8000e70 <MX_TIM1_Init+0x13c>)
 8000da2:	f003 ff95 	bl	8004cd0 <HAL_TIM_Base_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000dac:	f000 f9a2 	bl	80010f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000db4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000db6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000dba:	4619      	mov	r1, r3
 8000dbc:	482c      	ldr	r0, [pc, #176]	@ (8000e70 <MX_TIM1_Init+0x13c>)
 8000dbe:	f004 fbb5 	bl	800552c <HAL_TIM_ConfigClockSource>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000dc8:	f000 f994 	bl	80010f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dcc:	4828      	ldr	r0, [pc, #160]	@ (8000e70 <MX_TIM1_Init+0x13c>)
 8000dce:	f003 ffce 	bl	8004d6e <HAL_TIM_PWM_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000dd8:	f000 f98c 	bl	80010f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000de4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000de8:	4619      	mov	r1, r3
 8000dea:	4821      	ldr	r0, [pc, #132]	@ (8000e70 <MX_TIM1_Init+0x13c>)
 8000dec:	f004 ffaa 	bl	8005d44 <HAL_TIMEx_MasterConfigSynchronization>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000df6:	f000 f97d 	bl	80010f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dfa:	2360      	movs	r3, #96	@ 0x60
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e12:	2300      	movs	r3, #0
 8000e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4814      	ldr	r0, [pc, #80]	@ (8000e70 <MX_TIM1_Init+0x13c>)
 8000e20:	f004 fac2 	bl	80053a8 <HAL_TIM_PWM_ConfigChannel>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000e2a:	f000 f963 	bl	80010f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4807      	ldr	r0, [pc, #28]	@ (8000e70 <MX_TIM1_Init+0x13c>)
 8000e52:	f004 fff3 	bl	8005e3c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000e5c:	f000 f94a 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e60:	4803      	ldr	r0, [pc, #12]	@ (8000e70 <MX_TIM1_Init+0x13c>)
 8000e62:	f000 fa33 	bl	80012cc <HAL_TIM_MspPostInit>

}
 8000e66:	bf00      	nop
 8000e68:	3758      	adds	r7, #88	@ 0x58
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000210 	.word	0x20000210
 8000e74:	40010000 	.word	0x40010000

08000e78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08e      	sub	sp, #56	@ 0x38
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8c:	f107 0320 	add.w	r3, r7, #32
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
 8000ea4:	615a      	str	r2, [r3, #20]
 8000ea6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f60 <MX_TIM3_Init+0xe8>)
 8000eaa:	4a2e      	ldr	r2, [pc, #184]	@ (8000f64 <MX_TIM3_Init+0xec>)
 8000eac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1679;
 8000eae:	4b2c      	ldr	r3, [pc, #176]	@ (8000f60 <MX_TIM3_Init+0xe8>)
 8000eb0:	f240 628f 	movw	r2, #1679	@ 0x68f
 8000eb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f60 <MX_TIM3_Init+0xe8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000ebc:	4b28      	ldr	r3, [pc, #160]	@ (8000f60 <MX_TIM3_Init+0xe8>)
 8000ebe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ec2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec4:	4b26      	ldr	r3, [pc, #152]	@ (8000f60 <MX_TIM3_Init+0xe8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eca:	4b25      	ldr	r3, [pc, #148]	@ (8000f60 <MX_TIM3_Init+0xe8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ed0:	4823      	ldr	r0, [pc, #140]	@ (8000f60 <MX_TIM3_Init+0xe8>)
 8000ed2:	f003 fefd 	bl	8004cd0 <HAL_TIM_Base_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000edc:	f000 f90a 	bl	80010f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ee6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eea:	4619      	mov	r1, r3
 8000eec:	481c      	ldr	r0, [pc, #112]	@ (8000f60 <MX_TIM3_Init+0xe8>)
 8000eee:	f004 fb1d 	bl	800552c <HAL_TIM_ConfigClockSource>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ef8:	f000 f8fc 	bl	80010f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000efc:	4818      	ldr	r0, [pc, #96]	@ (8000f60 <MX_TIM3_Init+0xe8>)
 8000efe:	f003 ff36 	bl	8004d6e <HAL_TIM_PWM_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000f08:	f000 f8f4 	bl	80010f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f14:	f107 0320 	add.w	r3, r7, #32
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4811      	ldr	r0, [pc, #68]	@ (8000f60 <MX_TIM3_Init+0xe8>)
 8000f1c:	f004 ff12 	bl	8005d44 <HAL_TIMEx_MasterConfigSynchronization>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000f26:	f000 f8e5 	bl	80010f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f2a:	2360      	movs	r3, #96	@ 0x60
 8000f2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4807      	ldr	r0, [pc, #28]	@ (8000f60 <MX_TIM3_Init+0xe8>)
 8000f42:	f004 fa31 	bl	80053a8 <HAL_TIM_PWM_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f4c:	f000 f8d2 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f50:	4803      	ldr	r0, [pc, #12]	@ (8000f60 <MX_TIM3_Init+0xe8>)
 8000f52:	f000 f9bb 	bl	80012cc <HAL_TIM_MspPostInit>

}
 8000f56:	bf00      	nop
 8000f58:	3738      	adds	r7, #56	@ 0x38
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000258 	.word	0x20000258
 8000f64:	40000400 	.word	0x40000400

08000f68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <MX_DMA_Init+0x3c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa4 <MX_DMA_Init+0x3c>)
 8000f78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <MX_DMA_Init+0x3c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2038      	movs	r0, #56	@ 0x38
 8000f90:	f001 f851 	bl	8002036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f94:	2038      	movs	r0, #56	@ 0x38
 8000f96:	f001 f86a 	bl	800206e <HAL_NVIC_EnableIRQ>

}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	@ 0x28
 8000fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b48      	ldr	r3, [pc, #288]	@ (80010e4 <MX_GPIO_Init+0x13c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	4a47      	ldr	r2, [pc, #284]	@ (80010e4 <MX_GPIO_Init+0x13c>)
 8000fc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fce:	4b45      	ldr	r3, [pc, #276]	@ (80010e4 <MX_GPIO_Init+0x13c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b41      	ldr	r3, [pc, #260]	@ (80010e4 <MX_GPIO_Init+0x13c>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a40      	ldr	r2, [pc, #256]	@ (80010e4 <MX_GPIO_Init+0x13c>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b3e      	ldr	r3, [pc, #248]	@ (80010e4 <MX_GPIO_Init+0x13c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	4b3a      	ldr	r3, [pc, #232]	@ (80010e4 <MX_GPIO_Init+0x13c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a39      	ldr	r2, [pc, #228]	@ (80010e4 <MX_GPIO_Init+0x13c>)
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b37      	ldr	r3, [pc, #220]	@ (80010e4 <MX_GPIO_Init+0x13c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	4b33      	ldr	r3, [pc, #204]	@ (80010e4 <MX_GPIO_Init+0x13c>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	4a32      	ldr	r2, [pc, #200]	@ (80010e4 <MX_GPIO_Init+0x13c>)
 800101c:	f043 0310 	orr.w	r3, r3, #16
 8001020:	6313      	str	r3, [r2, #48]	@ 0x30
 8001022:	4b30      	ldr	r3, [pc, #192]	@ (80010e4 <MX_GPIO_Init+0x13c>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	f003 0310 	and.w	r3, r3, #16
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	4b2c      	ldr	r3, [pc, #176]	@ (80010e4 <MX_GPIO_Init+0x13c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a2b      	ldr	r2, [pc, #172]	@ (80010e4 <MX_GPIO_Init+0x13c>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b29      	ldr	r3, [pc, #164]	@ (80010e4 <MX_GPIO_Init+0x13c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2130      	movs	r1, #48	@ 0x30
 800104e:	4826      	ldr	r0, [pc, #152]	@ (80010e8 <MX_GPIO_Init+0x140>)
 8001050:	f001 ff4a 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, dir_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800105a:	4824      	ldr	r0, [pc, #144]	@ (80010ec <MX_GPIO_Init+0x144>)
 800105c:	f001 ff44 	bl	8002ee8 <HAL_GPIO_WritePin>
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001060:	2301      	movs	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001064:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	481e      	ldr	r0, [pc, #120]	@ (80010f0 <MX_GPIO_Init+0x148>)
 8001076:	f001 fd83 	bl	8002b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800107a:	2330      	movs	r3, #48	@ 0x30
 800107c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4815      	ldr	r0, [pc, #84]	@ (80010e8 <MX_GPIO_Init+0x140>)
 8001092:	f001 fd75 	bl	8002b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : dir_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = dir_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001096:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 800109a:	617b      	str	r3, [r7, #20]
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	480f      	ldr	r0, [pc, #60]	@ (80010ec <MX_GPIO_Init+0x144>)
 80010b0:	f001 fd66 	bl	8002b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80010b4:	230e      	movs	r3, #14
 80010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010bc:	2301      	movs	r3, #1
 80010be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4809      	ldr	r0, [pc, #36]	@ (80010ec <MX_GPIO_Init+0x144>)
 80010c8:	f001 fd5a 	bl	8002b80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	2006      	movs	r0, #6
 80010d2:	f000 ffb0 	bl	8002036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010d6:	2006      	movs	r0, #6
 80010d8:	f000 ffc9 	bl	800206e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	@ 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020800 	.word	0x40020800
 80010ec:	40020c00 	.word	0x40020c00
 80010f0:	40020000 	.word	0x40020000

080010f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f8:	b672      	cpsid	i
}
 80010fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <Error_Handler+0x8>

08001100 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b10      	ldr	r3, [pc, #64]	@ (800114c <HAL_MspInit+0x4c>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110e:	4a0f      	ldr	r2, [pc, #60]	@ (800114c <HAL_MspInit+0x4c>)
 8001110:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001114:	6453      	str	r3, [r2, #68]	@ 0x44
 8001116:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <HAL_MspInit+0x4c>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	4b09      	ldr	r3, [pc, #36]	@ (800114c <HAL_MspInit+0x4c>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	4a08      	ldr	r2, [pc, #32]	@ (800114c <HAL_MspInit+0x4c>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001130:	6413      	str	r3, [r2, #64]	@ 0x40
 8001132:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_MspInit+0x4c>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800113e:	2007      	movs	r0, #7
 8001140:	f000 ff6e 	bl	8002020 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800

08001150 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a2f      	ldr	r2, [pc, #188]	@ (800122c <HAL_ADC_MspInit+0xdc>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d158      	bne.n	8001224 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b2e      	ldr	r3, [pc, #184]	@ (8001230 <HAL_ADC_MspInit+0xe0>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117a:	4a2d      	ldr	r2, [pc, #180]	@ (8001230 <HAL_ADC_MspInit+0xe0>)
 800117c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001180:	6453      	str	r3, [r2, #68]	@ 0x44
 8001182:	4b2b      	ldr	r3, [pc, #172]	@ (8001230 <HAL_ADC_MspInit+0xe0>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b27      	ldr	r3, [pc, #156]	@ (8001230 <HAL_ADC_MspInit+0xe0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a26      	ldr	r2, [pc, #152]	@ (8001230 <HAL_ADC_MspInit+0xe0>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b24      	ldr	r3, [pc, #144]	@ (8001230 <HAL_ADC_MspInit+0xe0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011aa:	2302      	movs	r3, #2
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ae:	2303      	movs	r3, #3
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	481d      	ldr	r0, [pc, #116]	@ (8001234 <HAL_ADC_MspInit+0xe4>)
 80011be:	f001 fcdf 	bl	8002b80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001238 <HAL_ADC_MspInit+0xe8>)
 80011c4:	4a1d      	ldr	r2, [pc, #116]	@ (800123c <HAL_ADC_MspInit+0xec>)
 80011c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001238 <HAL_ADC_MspInit+0xe8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <HAL_ADC_MspInit+0xe8>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d4:	4b18      	ldr	r3, [pc, #96]	@ (8001238 <HAL_ADC_MspInit+0xe8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011da:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <HAL_ADC_MspInit+0xe8>)
 80011dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011e2:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <HAL_ADC_MspInit+0xe8>)
 80011e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011ea:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <HAL_ADC_MspInit+0xe8>)
 80011ec:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <HAL_ADC_MspInit+0xe8>)
 80011f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80011fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <HAL_ADC_MspInit+0xe8>)
 80011fc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001200:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001202:	4b0d      	ldr	r3, [pc, #52]	@ (8001238 <HAL_ADC_MspInit+0xe8>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001208:	480b      	ldr	r0, [pc, #44]	@ (8001238 <HAL_ADC_MspInit+0xe8>)
 800120a:	f000 ff4b 	bl	80020a4 <HAL_DMA_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001214:	f7ff ff6e 	bl	80010f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a07      	ldr	r2, [pc, #28]	@ (8001238 <HAL_ADC_MspInit+0xe8>)
 800121c:	639a      	str	r2, [r3, #56]	@ 0x38
 800121e:	4a06      	ldr	r2, [pc, #24]	@ (8001238 <HAL_ADC_MspInit+0xe8>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	@ 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40012000 	.word	0x40012000
 8001230:	40023800 	.word	0x40023800
 8001234:	40020000 	.word	0x40020000
 8001238:	200001b0 	.word	0x200001b0
 800123c:	40026410 	.word	0x40026410

08001240 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a1c      	ldr	r2, [pc, #112]	@ (80012c0 <HAL_TIM_Base_MspInit+0x80>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d116      	bne.n	8001280 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <HAL_TIM_Base_MspInit+0x84>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	4a1a      	ldr	r2, [pc, #104]	@ (80012c4 <HAL_TIM_Base_MspInit+0x84>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6453      	str	r3, [r2, #68]	@ 0x44
 8001262:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <HAL_TIM_Base_MspInit+0x84>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	201b      	movs	r0, #27
 8001274:	f000 fedf 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001278:	201b      	movs	r0, #27
 800127a:	f000 fef8 	bl	800206e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800127e:	e01a      	b.n	80012b6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a10      	ldr	r2, [pc, #64]	@ (80012c8 <HAL_TIM_Base_MspInit+0x88>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d115      	bne.n	80012b6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <HAL_TIM_Base_MspInit+0x84>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	4a0c      	ldr	r2, [pc, #48]	@ (80012c4 <HAL_TIM_Base_MspInit+0x84>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	6413      	str	r3, [r2, #64]	@ 0x40
 800129a:	4b0a      	ldr	r3, [pc, #40]	@ (80012c4 <HAL_TIM_Base_MspInit+0x84>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	201d      	movs	r0, #29
 80012ac:	f000 fec3 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012b0:	201d      	movs	r0, #29
 80012b2:	f000 fedc 	bl	800206e <HAL_NVIC_EnableIRQ>
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40010000 	.word	0x40010000
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40000400 	.word	0x40000400

080012cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	@ 0x28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a24      	ldr	r2, [pc, #144]	@ (800137c <HAL_TIM_MspPostInit+0xb0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d11f      	bne.n	800132e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	4b23      	ldr	r3, [pc, #140]	@ (8001380 <HAL_TIM_MspPostInit+0xb4>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	4a22      	ldr	r2, [pc, #136]	@ (8001380 <HAL_TIM_MspPostInit+0xb4>)
 80012f8:	f043 0310 	orr.w	r3, r3, #16
 80012fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fe:	4b20      	ldr	r3, [pc, #128]	@ (8001380 <HAL_TIM_MspPostInit+0xb4>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800130a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800131c:	2301      	movs	r3, #1
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4817      	ldr	r0, [pc, #92]	@ (8001384 <HAL_TIM_MspPostInit+0xb8>)
 8001328:	f001 fc2a 	bl	8002b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800132c:	e022      	b.n	8001374 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a15      	ldr	r2, [pc, #84]	@ (8001388 <HAL_TIM_MspPostInit+0xbc>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d11d      	bne.n	8001374 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <HAL_TIM_MspPostInit+0xb4>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001340:	4a0f      	ldr	r2, [pc, #60]	@ (8001380 <HAL_TIM_MspPostInit+0xb4>)
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	6313      	str	r3, [r2, #48]	@ 0x30
 8001348:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <HAL_TIM_MspPostInit+0xb4>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001354:	2340      	movs	r3, #64	@ 0x40
 8001356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001364:	2302      	movs	r3, #2
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	4807      	ldr	r0, [pc, #28]	@ (800138c <HAL_TIM_MspPostInit+0xc0>)
 8001370:	f001 fc06 	bl	8002b80 <HAL_GPIO_Init>
}
 8001374:	bf00      	nop
 8001376:	3728      	adds	r7, #40	@ 0x28
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40010000 	.word	0x40010000
 8001380:	40023800 	.word	0x40023800
 8001384:	40021000 	.word	0x40021000
 8001388:	40000400 	.word	0x40000400
 800138c:	40020800 	.word	0x40020800

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <NMI_Handler+0x4>

08001398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <MemManage_Handler+0x4>

080013a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e6:	f000 f8f5 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}

080013ee <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f001 fd92 	bl	8002f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001400:	4802      	ldr	r0, [pc, #8]	@ (800140c <TIM1_CC_IRQHandler+0x10>)
 8001402:	f003 fee1 	bl	80051c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000210 	.word	0x20000210

08001410 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001414:	4802      	ldr	r0, [pc, #8]	@ (8001420 <TIM3_IRQHandler+0x10>)
 8001416:	f003 fed7 	bl	80051c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000258 	.word	0x20000258

08001424 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <DMA2_Stream0_IRQHandler+0x10>)
 800142a:	f000 ff41 	bl	80022b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200001b0 	.word	0x200001b0

08001438 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800143c:	4802      	ldr	r0, [pc, #8]	@ (8001448 <OTG_FS_IRQHandler+0x10>)
 800143e:	f001 fec9 	bl	80031d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2000183c 	.word	0x2000183c

0800144c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001454:	4a14      	ldr	r2, [pc, #80]	@ (80014a8 <_sbrk+0x5c>)
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <_sbrk+0x60>)
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001460:	4b13      	ldr	r3, [pc, #76]	@ (80014b0 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001468:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <_sbrk+0x64>)
 800146a:	4a12      	ldr	r2, [pc, #72]	@ (80014b4 <_sbrk+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146e:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	429a      	cmp	r2, r3
 800147a:	d207      	bcs.n	800148c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800147c:	f008 fdc2 	bl	800a004 <__errno>
 8001480:	4603      	mov	r3, r0
 8001482:	220c      	movs	r2, #12
 8001484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	e009      	b.n	80014a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800148c:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001492:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a05      	ldr	r2, [pc, #20]	@ (80014b0 <_sbrk+0x64>)
 800149c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20020000 	.word	0x20020000
 80014ac:	00000400 	.word	0x00000400
 80014b0:	20000334 	.word	0x20000334
 80014b4:	20002088 	.word	0x20002088

080014b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <SystemInit+0x20>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014c2:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <SystemInit+0x20>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001514 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014e0:	f7ff ffea 	bl	80014b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e4:	480c      	ldr	r0, [pc, #48]	@ (8001518 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014e6:	490d      	ldr	r1, [pc, #52]	@ (800151c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001520 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001524 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001528 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800150a:	f008 fd81 	bl	800a010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150e:	f7ff faaf 	bl	8000a70 <main>
  bx  lr    
 8001512:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001520:	0800a9b4 	.word	0x0800a9b4
  ldr r2, =_sbss
 8001524:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001528:	20002088 	.word	0x20002088

0800152c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC_IRQHandler>
	...

08001530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001534:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <HAL_Init+0x40>)
 800153a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800153e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001540:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0a      	ldr	r2, [pc, #40]	@ (8001570 <HAL_Init+0x40>)
 8001546:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800154a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800154c:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a07      	ldr	r2, [pc, #28]	@ (8001570 <HAL_Init+0x40>)
 8001552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f000 fd61 	bl	8002020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155e:	2000      	movs	r0, #0
 8001560:	f000 f808 	bl	8001574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001564:	f7ff fdcc 	bl	8001100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023c00 	.word	0x40023c00

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157c:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <HAL_InitTick+0x54>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <HAL_InitTick+0x58>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800158a:	fbb3 f3f1 	udiv	r3, r3, r1
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fd79 	bl	800208a <HAL_SYSTICK_Config>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e00e      	b.n	80015c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	d80a      	bhi.n	80015be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a8:	2200      	movs	r2, #0
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f000 fd41 	bl	8002036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b4:	4a06      	ldr	r2, [pc, #24]	@ (80015d0 <HAL_InitTick+0x5c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000008 	.word	0x20000008
 80015d0:	20000004 	.word	0x20000004

080015d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_IncTick+0x20>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_IncTick+0x24>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a04      	ldr	r2, [pc, #16]	@ (80015f8 <HAL_IncTick+0x24>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000008 	.word	0x20000008
 80015f8:	20000338 	.word	0x20000338

080015fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001600:	4b03      	ldr	r3, [pc, #12]	@ (8001610 <HAL_GetTick+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000338 	.word	0x20000338

08001614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff ffee 	bl	80015fc <HAL_GetTick>
 8001620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162c:	d005      	beq.n	800163a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800162e:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <HAL_Delay+0x44>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4413      	add	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800163a:	bf00      	nop
 800163c:	f7ff ffde 	bl	80015fc <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	429a      	cmp	r2, r3
 800164a:	d8f7      	bhi.n	800163c <HAL_Delay+0x28>
  {
  }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000008 	.word	0x20000008

0800165c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e033      	b.n	80016da <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fd68 	bl	8001150 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	2b00      	cmp	r3, #0
 8001698:	d118      	bne.n	80016cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016a2:	f023 0302 	bic.w	r3, r3, #2
 80016a6:	f043 0202 	orr.w	r2, r3, #2
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 fa68 	bl	8001b84 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	f023 0303 	bic.w	r3, r3, #3
 80016c2:	f043 0201 	orr.w	r2, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80016ca:	e001      	b.n	80016d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d101      	bne.n	8001702 <HAL_ADC_Start_DMA+0x1e>
 80016fe:	2302      	movs	r3, #2
 8001700:	e0e9      	b.n	80018d6 <HAL_ADC_Start_DMA+0x1f2>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b01      	cmp	r3, #1
 8001716:	d018      	beq.n	800174a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0201 	orr.w	r2, r2, #1
 8001726:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001728:	4b6d      	ldr	r3, [pc, #436]	@ (80018e0 <HAL_ADC_Start_DMA+0x1fc>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a6d      	ldr	r2, [pc, #436]	@ (80018e4 <HAL_ADC_Start_DMA+0x200>)
 800172e:	fba2 2303 	umull	r2, r3, r2, r3
 8001732:	0c9a      	lsrs	r2, r3, #18
 8001734:	4613      	mov	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4413      	add	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800173c:	e002      	b.n	8001744 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	3b01      	subs	r3, #1
 8001742:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f9      	bne.n	800173e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001754:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001758:	d107      	bne.n	800176a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001768:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b01      	cmp	r3, #1
 8001776:	f040 80a1 	bne.w	80018bc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001782:	f023 0301 	bic.w	r3, r3, #1
 8001786:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001798:	2b00      	cmp	r3, #0
 800179a:	d007      	beq.n	80017ac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017b8:	d106      	bne.n	80017c8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017be:	f023 0206 	bic.w	r2, r3, #6
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	645a      	str	r2, [r3, #68]	@ 0x44
 80017c6:	e002      	b.n	80017ce <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017d6:	4b44      	ldr	r3, [pc, #272]	@ (80018e8 <HAL_ADC_Start_DMA+0x204>)
 80017d8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017de:	4a43      	ldr	r2, [pc, #268]	@ (80018ec <HAL_ADC_Start_DMA+0x208>)
 80017e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017e6:	4a42      	ldr	r2, [pc, #264]	@ (80018f0 <HAL_ADC_Start_DMA+0x20c>)
 80017e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ee:	4a41      	ldr	r2, [pc, #260]	@ (80018f4 <HAL_ADC_Start_DMA+0x210>)
 80017f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80017fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800180a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800181a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	334c      	adds	r3, #76	@ 0x4c
 8001826:	4619      	mov	r1, r3
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f000 fce8 	bl	8002200 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 031f 	and.w	r3, r3, #31
 8001838:	2b00      	cmp	r3, #0
 800183a:	d12a      	bne.n	8001892 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a2d      	ldr	r2, [pc, #180]	@ (80018f8 <HAL_ADC_Start_DMA+0x214>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d015      	beq.n	8001872 <HAL_ADC_Start_DMA+0x18e>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a2c      	ldr	r2, [pc, #176]	@ (80018fc <HAL_ADC_Start_DMA+0x218>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d105      	bne.n	800185c <HAL_ADC_Start_DMA+0x178>
 8001850:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <HAL_ADC_Start_DMA+0x204>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 031f 	and.w	r3, r3, #31
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00a      	beq.n	8001872 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a27      	ldr	r2, [pc, #156]	@ (8001900 <HAL_ADC_Start_DMA+0x21c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d136      	bne.n	80018d4 <HAL_ADC_Start_DMA+0x1f0>
 8001866:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <HAL_ADC_Start_DMA+0x204>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0310 	and.w	r3, r3, #16
 800186e:	2b00      	cmp	r3, #0
 8001870:	d130      	bne.n	80018d4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d129      	bne.n	80018d4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	e020      	b.n	80018d4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a18      	ldr	r2, [pc, #96]	@ (80018f8 <HAL_ADC_Start_DMA+0x214>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d11b      	bne.n	80018d4 <HAL_ADC_Start_DMA+0x1f0>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d114      	bne.n	80018d4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	e00b      	b.n	80018d4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c0:	f043 0210 	orr.w	r2, r3, #16
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018cc:	f043 0201 	orr.w	r2, r3, #1
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000000 	.word	0x20000000
 80018e4:	431bde83 	.word	0x431bde83
 80018e8:	40012300 	.word	0x40012300
 80018ec:	08001d7d 	.word	0x08001d7d
 80018f0:	08001e37 	.word	0x08001e37
 80018f4:	08001e53 	.word	0x08001e53
 80018f8:	40012000 	.word	0x40012000
 80018fc:	40012100 	.word	0x40012100
 8001900:	40012200 	.word	0x40012200

08001904 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_ADC_ConfigChannel+0x1c>
 8001958:	2302      	movs	r3, #2
 800195a:	e105      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x228>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b09      	cmp	r3, #9
 800196a:	d925      	bls.n	80019b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68d9      	ldr	r1, [r3, #12]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	461a      	mov	r2, r3
 800197a:	4613      	mov	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	3b1e      	subs	r3, #30
 8001982:	2207      	movs	r2, #7
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43da      	mvns	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	400a      	ands	r2, r1
 8001990:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68d9      	ldr	r1, [r3, #12]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	4603      	mov	r3, r0
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4403      	add	r3, r0
 80019aa:	3b1e      	subs	r3, #30
 80019ac:	409a      	lsls	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	e022      	b.n	80019fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6919      	ldr	r1, [r3, #16]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	461a      	mov	r2, r3
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	2207      	movs	r2, #7
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	400a      	ands	r2, r1
 80019da:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6919      	ldr	r1, [r3, #16]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	4618      	mov	r0, r3
 80019ee:	4603      	mov	r3, r0
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4403      	add	r3, r0
 80019f4:	409a      	lsls	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d824      	bhi.n	8001a50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	3b05      	subs	r3, #5
 8001a18:	221f      	movs	r2, #31
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	400a      	ands	r2, r1
 8001a26:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	4618      	mov	r0, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	3b05      	subs	r3, #5
 8001a42:	fa00 f203 	lsl.w	r2, r0, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a4e:	e04c      	b.n	8001aea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b0c      	cmp	r3, #12
 8001a56:	d824      	bhi.n	8001aa2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	3b23      	subs	r3, #35	@ 0x23
 8001a6a:	221f      	movs	r2, #31
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43da      	mvns	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	400a      	ands	r2, r1
 8001a78:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	3b23      	subs	r3, #35	@ 0x23
 8001a94:	fa00 f203 	lsl.w	r2, r0, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001aa0:	e023      	b.n	8001aea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3b41      	subs	r3, #65	@ 0x41
 8001ab4:	221f      	movs	r2, #31
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	3b41      	subs	r3, #65	@ 0x41
 8001ade:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aea:	4b22      	ldr	r3, [pc, #136]	@ (8001b74 <HAL_ADC_ConfigChannel+0x234>)
 8001aec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a21      	ldr	r2, [pc, #132]	@ (8001b78 <HAL_ADC_ConfigChannel+0x238>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d109      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x1cc>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b12      	cmp	r3, #18
 8001afe:	d105      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a19      	ldr	r2, [pc, #100]	@ (8001b78 <HAL_ADC_ConfigChannel+0x238>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d123      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x21e>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b10      	cmp	r3, #16
 8001b1c:	d003      	beq.n	8001b26 <HAL_ADC_ConfigChannel+0x1e6>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b11      	cmp	r3, #17
 8001b24:	d11b      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b10      	cmp	r3, #16
 8001b38:	d111      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <HAL_ADC_ConfigChannel+0x23c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a10      	ldr	r2, [pc, #64]	@ (8001b80 <HAL_ADC_ConfigChannel+0x240>)
 8001b40:	fba2 2303 	umull	r2, r3, r2, r3
 8001b44:	0c9a      	lsrs	r2, r3, #18
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b50:	e002      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	3b01      	subs	r3, #1
 8001b56:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f9      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	40012300 	.word	0x40012300
 8001b78:	40012000 	.word	0x40012000
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	431bde83 	.word	0x431bde83

08001b84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b8c:	4b79      	ldr	r3, [pc, #484]	@ (8001d74 <ADC_Init+0x1f0>)
 8001b8e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6859      	ldr	r1, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	021a      	lsls	r2, r3, #8
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001bdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6859      	ldr	r1, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6899      	ldr	r1, [r3, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c16:	4a58      	ldr	r2, [pc, #352]	@ (8001d78 <ADC_Init+0x1f4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d022      	beq.n	8001c62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6899      	ldr	r1, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6899      	ldr	r1, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	e00f      	b.n	8001c82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c80:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0202 	bic.w	r2, r2, #2
 8001c90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6899      	ldr	r1, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7e1b      	ldrb	r3, [r3, #24]
 8001c9c:	005a      	lsls	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d01b      	beq.n	8001ce8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cbe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001cce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6859      	ldr	r1, [r3, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	035a      	lsls	r2, r3, #13
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	e007      	b.n	8001cf8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cf6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	051a      	lsls	r2, r3, #20
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6899      	ldr	r1, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d3a:	025a      	lsls	r2, r3, #9
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6899      	ldr	r1, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	029a      	lsls	r2, r3, #10
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	609a      	str	r2, [r3, #8]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40012300 	.word	0x40012300
 8001d78:	0f000001 	.word	0x0f000001

08001d7c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d88:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d13c      	bne.n	8001e10 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d12b      	bne.n	8001e08 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d127      	bne.n	8001e08 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d119      	bne.n	8001e08 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0220 	bic.w	r2, r2, #32
 8001de2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d105      	bne.n	8001e08 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e00:	f043 0201 	orr.w	r2, r3, #1
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f7ff fd7b 	bl	8001904 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e0e:	e00e      	b.n	8001e2e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f7ff fd85 	bl	800192c <HAL_ADC_ErrorCallback>
}
 8001e22:	e004      	b.n	8001e2e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	4798      	blx	r3
}
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e42:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f7ff fd67 	bl	8001918 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e5e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2240      	movs	r2, #64	@ 0x40
 8001e64:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6a:	f043 0204 	orr.w	r2, r3, #4
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f7ff fd5a 	bl	800192c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb2:	4a04      	ldr	r2, [pc, #16]	@ (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	60d3      	str	r3, [r2, #12]
}
 8001eb8:	bf00      	nop
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ecc:	4b04      	ldr	r3, [pc, #16]	@ (8001ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	f003 0307 	and.w	r3, r3, #7
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	db0b      	blt.n	8001f0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	f003 021f 	and.w	r2, r3, #31
 8001efc:	4907      	ldr	r1, [pc, #28]	@ (8001f1c <__NVIC_EnableIRQ+0x38>)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	095b      	lsrs	r3, r3, #5
 8001f04:	2001      	movs	r0, #1
 8001f06:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000e100 	.word	0xe000e100

08001f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	db0a      	blt.n	8001f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	490c      	ldr	r1, [pc, #48]	@ (8001f6c <__NVIC_SetPriority+0x4c>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	440b      	add	r3, r1
 8001f44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f48:	e00a      	b.n	8001f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4908      	ldr	r1, [pc, #32]	@ (8001f70 <__NVIC_SetPriority+0x50>)
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	3b04      	subs	r3, #4
 8001f58:	0112      	lsls	r2, r2, #4
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	761a      	strb	r2, [r3, #24]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000e100 	.word	0xe000e100
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	@ 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f1c3 0307 	rsb	r3, r3, #7
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	bf28      	it	cs
 8001f92:	2304      	movcs	r3, #4
 8001f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	2b06      	cmp	r3, #6
 8001f9c:	d902      	bls.n	8001fa4 <NVIC_EncodePriority+0x30>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3b03      	subs	r3, #3
 8001fa2:	e000      	b.n	8001fa6 <NVIC_EncodePriority+0x32>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	43d9      	mvns	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	4313      	orrs	r3, r2
         );
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3724      	adds	r7, #36	@ 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fec:	d301      	bcc.n	8001ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00f      	b.n	8002012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800201c <SysTick_Config+0x40>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f7ff ff8e 	bl	8001f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002004:	4b05      	ldr	r3, [pc, #20]	@ (800201c <SysTick_Config+0x40>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200a:	4b04      	ldr	r3, [pc, #16]	@ (800201c <SysTick_Config+0x40>)
 800200c:	2207      	movs	r2, #7
 800200e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	e000e010 	.word	0xe000e010

08002020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ff29 	bl	8001e80 <__NVIC_SetPriorityGrouping>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002048:	f7ff ff3e 	bl	8001ec8 <__NVIC_GetPriorityGrouping>
 800204c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	6978      	ldr	r0, [r7, #20]
 8002054:	f7ff ff8e 	bl	8001f74 <NVIC_EncodePriority>
 8002058:	4602      	mov	r2, r0
 800205a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff5d 	bl	8001f20 <__NVIC_SetPriority>
}
 8002066:	bf00      	nop
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff31 	bl	8001ee4 <__NVIC_EnableIRQ>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff ffa2 	bl	8001fdc <SysTick_Config>
 8002098:	4603      	mov	r3, r0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020b0:	f7ff faa4 	bl	80015fc <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e099      	b.n	80021f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0201 	bic.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e0:	e00f      	b.n	8002102 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020e2:	f7ff fa8b 	bl	80015fc <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b05      	cmp	r3, #5
 80020ee:	d908      	bls.n	8002102 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2220      	movs	r2, #32
 80020f4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2203      	movs	r2, #3
 80020fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e078      	b.n	80021f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1e8      	bne.n	80020e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	4b38      	ldr	r3, [pc, #224]	@ (80021fc <HAL_DMA_Init+0x158>)
 800211c:	4013      	ands	r3, r2
 800211e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800212e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800213a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002146:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	4313      	orrs	r3, r2
 8002152:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002158:	2b04      	cmp	r3, #4
 800215a:	d107      	bne.n	800216c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002164:	4313      	orrs	r3, r2
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4313      	orrs	r3, r2
 800216a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f023 0307 	bic.w	r3, r3, #7
 8002182:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	4313      	orrs	r3, r2
 800218c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002192:	2b04      	cmp	r3, #4
 8002194:	d117      	bne.n	80021c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4313      	orrs	r3, r2
 800219e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00e      	beq.n	80021c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 fa6f 	bl	800268c <DMA_CheckFifoParam>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2240      	movs	r2, #64	@ 0x40
 80021b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80021c2:	2301      	movs	r3, #1
 80021c4:	e016      	b.n	80021f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 fa26 	bl	8002620 <DMA_CalcBaseAndBitshift>
 80021d4:	4603      	mov	r3, r0
 80021d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021dc:	223f      	movs	r2, #63	@ 0x3f
 80021de:	409a      	lsls	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	f010803f 	.word	0xf010803f

08002200 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002216:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800221e:	2b01      	cmp	r3, #1
 8002220:	d101      	bne.n	8002226 <HAL_DMA_Start_IT+0x26>
 8002222:	2302      	movs	r3, #2
 8002224:	e040      	b.n	80022a8 <HAL_DMA_Start_IT+0xa8>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d12f      	bne.n	800229a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2202      	movs	r2, #2
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 f9b8 	bl	80025c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002258:	223f      	movs	r2, #63	@ 0x3f
 800225a:	409a      	lsls	r2, r3
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0216 	orr.w	r2, r2, #22
 800226e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002274:	2b00      	cmp	r3, #0
 8002276:	d007      	beq.n	8002288 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0208 	orr.w	r2, r2, #8
 8002286:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	e005      	b.n	80022a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022a2:	2302      	movs	r3, #2
 80022a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022bc:	4b8e      	ldr	r3, [pc, #568]	@ (80024f8 <HAL_DMA_IRQHandler+0x248>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a8e      	ldr	r2, [pc, #568]	@ (80024fc <HAL_DMA_IRQHandler+0x24c>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	0a9b      	lsrs	r3, r3, #10
 80022c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022da:	2208      	movs	r2, #8
 80022dc:	409a      	lsls	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d01a      	beq.n	800231c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d013      	beq.n	800231c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0204 	bic.w	r2, r2, #4
 8002302:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002308:	2208      	movs	r2, #8
 800230a:	409a      	lsls	r2, r3
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002320:	2201      	movs	r2, #1
 8002322:	409a      	lsls	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d012      	beq.n	8002352 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00b      	beq.n	8002352 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233e:	2201      	movs	r2, #1
 8002340:	409a      	lsls	r2, r3
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234a:	f043 0202 	orr.w	r2, r3, #2
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002356:	2204      	movs	r2, #4
 8002358:	409a      	lsls	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d012      	beq.n	8002388 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00b      	beq.n	8002388 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002374:	2204      	movs	r2, #4
 8002376:	409a      	lsls	r2, r3
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002380:	f043 0204 	orr.w	r2, r3, #4
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238c:	2210      	movs	r2, #16
 800238e:	409a      	lsls	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d043      	beq.n	8002420 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d03c      	beq.n	8002420 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023aa:	2210      	movs	r2, #16
 80023ac:	409a      	lsls	r2, r3
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d018      	beq.n	80023f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d108      	bne.n	80023e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d024      	beq.n	8002420 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	4798      	blx	r3
 80023de:	e01f      	b.n	8002420 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01b      	beq.n	8002420 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	4798      	blx	r3
 80023f0:	e016      	b.n	8002420 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d107      	bne.n	8002410 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0208 	bic.w	r2, r2, #8
 800240e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002424:	2220      	movs	r2, #32
 8002426:	409a      	lsls	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 808f 	beq.w	8002550 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0310 	and.w	r3, r3, #16
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 8087 	beq.w	8002550 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002446:	2220      	movs	r2, #32
 8002448:	409a      	lsls	r2, r3
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b05      	cmp	r3, #5
 8002458:	d136      	bne.n	80024c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0216 	bic.w	r2, r2, #22
 8002468:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002478:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d103      	bne.n	800248a <HAL_DMA_IRQHandler+0x1da>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002486:	2b00      	cmp	r3, #0
 8002488:	d007      	beq.n	800249a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0208 	bic.w	r2, r2, #8
 8002498:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249e:	223f      	movs	r2, #63	@ 0x3f
 80024a0:	409a      	lsls	r2, r3
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d07e      	beq.n	80025bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	4798      	blx	r3
        }
        return;
 80024c6:	e079      	b.n	80025bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d01d      	beq.n	8002512 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10d      	bne.n	8002500 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d031      	beq.n	8002550 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	4798      	blx	r3
 80024f4:	e02c      	b.n	8002550 <HAL_DMA_IRQHandler+0x2a0>
 80024f6:	bf00      	nop
 80024f8:	20000000 	.word	0x20000000
 80024fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002504:	2b00      	cmp	r3, #0
 8002506:	d023      	beq.n	8002550 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	4798      	blx	r3
 8002510:	e01e      	b.n	8002550 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10f      	bne.n	8002540 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0210 	bic.w	r2, r2, #16
 800252e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002554:	2b00      	cmp	r3, #0
 8002556:	d032      	beq.n	80025be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d022      	beq.n	80025aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2205      	movs	r2, #5
 8002568:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	3301      	adds	r3, #1
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	429a      	cmp	r2, r3
 8002586:	d307      	bcc.n	8002598 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f2      	bne.n	800257c <HAL_DMA_IRQHandler+0x2cc>
 8002596:	e000      	b.n	800259a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002598:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	4798      	blx	r3
 80025ba:	e000      	b.n	80025be <HAL_DMA_IRQHandler+0x30e>
        return;
 80025bc:	bf00      	nop
    }
  }
}
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80025e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b40      	cmp	r3, #64	@ 0x40
 80025f0:	d108      	bne.n	8002604 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002602:	e007      	b.n	8002614 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	60da      	str	r2, [r3, #12]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	3b10      	subs	r3, #16
 8002630:	4a14      	ldr	r2, [pc, #80]	@ (8002684 <DMA_CalcBaseAndBitshift+0x64>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800263a:	4a13      	ldr	r2, [pc, #76]	@ (8002688 <DMA_CalcBaseAndBitshift+0x68>)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b03      	cmp	r3, #3
 800264c:	d909      	bls.n	8002662 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002656:	f023 0303 	bic.w	r3, r3, #3
 800265a:	1d1a      	adds	r2, r3, #4
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002660:	e007      	b.n	8002672 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800266a:	f023 0303 	bic.w	r3, r3, #3
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	aaaaaaab 	.word	0xaaaaaaab
 8002688:	0800a968 	.word	0x0800a968

0800268c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d11f      	bne.n	80026e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d856      	bhi.n	800275a <DMA_CheckFifoParam+0xce>
 80026ac:	a201      	add	r2, pc, #4	@ (adr r2, 80026b4 <DMA_CheckFifoParam+0x28>)
 80026ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b2:	bf00      	nop
 80026b4:	080026c5 	.word	0x080026c5
 80026b8:	080026d7 	.word	0x080026d7
 80026bc:	080026c5 	.word	0x080026c5
 80026c0:	0800275b 	.word	0x0800275b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d046      	beq.n	800275e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d4:	e043      	b.n	800275e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026de:	d140      	bne.n	8002762 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e4:	e03d      	b.n	8002762 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026ee:	d121      	bne.n	8002734 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d837      	bhi.n	8002766 <DMA_CheckFifoParam+0xda>
 80026f6:	a201      	add	r2, pc, #4	@ (adr r2, 80026fc <DMA_CheckFifoParam+0x70>)
 80026f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fc:	0800270d 	.word	0x0800270d
 8002700:	08002713 	.word	0x08002713
 8002704:	0800270d 	.word	0x0800270d
 8002708:	08002725 	.word	0x08002725
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
      break;
 8002710:	e030      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002716:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d025      	beq.n	800276a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002722:	e022      	b.n	800276a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002728:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800272c:	d11f      	bne.n	800276e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002732:	e01c      	b.n	800276e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d903      	bls.n	8002742 <DMA_CheckFifoParam+0xb6>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d003      	beq.n	8002748 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002740:	e018      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
      break;
 8002746:	e015      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00e      	beq.n	8002772 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
      break;
 8002758:	e00b      	b.n	8002772 <DMA_CheckFifoParam+0xe6>
      break;
 800275a:	bf00      	nop
 800275c:	e00a      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      break;
 800275e:	bf00      	nop
 8002760:	e008      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      break;
 8002762:	bf00      	nop
 8002764:	e006      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      break;
 8002766:	bf00      	nop
 8002768:	e004      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      break;
 800276a:	bf00      	nop
 800276c:	e002      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      break;   
 800276e:	bf00      	nop
 8002770:	e000      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      break;
 8002772:	bf00      	nop
    }
  } 
  
  return status; 
 8002774:	7bfb      	ldrb	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop

08002784 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002796:	4b23      	ldr	r3, [pc, #140]	@ (8002824 <HAL_FLASH_Program+0xa0>)
 8002798:	7e1b      	ldrb	r3, [r3, #24]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_FLASH_Program+0x1e>
 800279e:	2302      	movs	r3, #2
 80027a0:	e03b      	b.n	800281a <HAL_FLASH_Program+0x96>
 80027a2:	4b20      	ldr	r3, [pc, #128]	@ (8002824 <HAL_FLASH_Program+0xa0>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027a8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80027ac:	f000 f870 	bl	8002890 <FLASH_WaitForLastOperation>
 80027b0:	4603      	mov	r3, r0
 80027b2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80027b4:	7dfb      	ldrb	r3, [r7, #23]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d12b      	bne.n	8002812 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d105      	bne.n	80027cc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80027c0:	783b      	ldrb	r3, [r7, #0]
 80027c2:	4619      	mov	r1, r3
 80027c4:	68b8      	ldr	r0, [r7, #8]
 80027c6:	f000 f91b 	bl	8002a00 <FLASH_Program_Byte>
 80027ca:	e016      	b.n	80027fa <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d105      	bne.n	80027de <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80027d2:	883b      	ldrh	r3, [r7, #0]
 80027d4:	4619      	mov	r1, r3
 80027d6:	68b8      	ldr	r0, [r7, #8]
 80027d8:	f000 f8ee 	bl	80029b8 <FLASH_Program_HalfWord>
 80027dc:	e00d      	b.n	80027fa <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d105      	bne.n	80027f0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	4619      	mov	r1, r3
 80027e8:	68b8      	ldr	r0, [r7, #8]
 80027ea:	f000 f8c3 	bl	8002974 <FLASH_Program_Word>
 80027ee:	e004      	b.n	80027fa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80027f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027f4:	68b8      	ldr	r0, [r7, #8]
 80027f6:	f000 f88b 	bl	8002910 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027fa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80027fe:	f000 f847 	bl	8002890 <FLASH_WaitForLastOperation>
 8002802:	4603      	mov	r3, r0
 8002804:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002806:	4b08      	ldr	r3, [pc, #32]	@ (8002828 <HAL_FLASH_Program+0xa4>)
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	4a07      	ldr	r2, [pc, #28]	@ (8002828 <HAL_FLASH_Program+0xa4>)
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002812:	4b04      	ldr	r3, [pc, #16]	@ (8002824 <HAL_FLASH_Program+0xa0>)
 8002814:	2200      	movs	r2, #0
 8002816:	761a      	strb	r2, [r3, #24]

  return status;
 8002818:	7dfb      	ldrb	r3, [r7, #23]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	2000033c 	.word	0x2000033c
 8002828:	40023c00 	.word	0x40023c00

0800282c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002836:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <HAL_FLASH_Unlock+0x38>)
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	da0b      	bge.n	8002856 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800283e:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <HAL_FLASH_Unlock+0x38>)
 8002840:	4a09      	ldr	r2, [pc, #36]	@ (8002868 <HAL_FLASH_Unlock+0x3c>)
 8002842:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002844:	4b07      	ldr	r3, [pc, #28]	@ (8002864 <HAL_FLASH_Unlock+0x38>)
 8002846:	4a09      	ldr	r2, [pc, #36]	@ (800286c <HAL_FLASH_Unlock+0x40>)
 8002848:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800284a:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <HAL_FLASH_Unlock+0x38>)
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b00      	cmp	r3, #0
 8002850:	da01      	bge.n	8002856 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002856:	79fb      	ldrb	r3, [r7, #7]
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	40023c00 	.word	0x40023c00
 8002868:	45670123 	.word	0x45670123
 800286c:	cdef89ab 	.word	0xcdef89ab

08002870 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002874:	4b05      	ldr	r3, [pc, #20]	@ (800288c <HAL_FLASH_Lock+0x1c>)
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	4a04      	ldr	r2, [pc, #16]	@ (800288c <HAL_FLASH_Lock+0x1c>)
 800287a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800287e:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40023c00 	.word	0x40023c00

08002890 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800289c:	4b1a      	ldr	r3, [pc, #104]	@ (8002908 <FLASH_WaitForLastOperation+0x78>)
 800289e:	2200      	movs	r2, #0
 80028a0:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80028a2:	f7fe feab 	bl	80015fc <HAL_GetTick>
 80028a6:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80028a8:	e010      	b.n	80028cc <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b0:	d00c      	beq.n	80028cc <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d007      	beq.n	80028c8 <FLASH_WaitForLastOperation+0x38>
 80028b8:	f7fe fea0 	bl	80015fc <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d201      	bcs.n	80028cc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e019      	b.n	8002900 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80028cc:	4b0f      	ldr	r3, [pc, #60]	@ (800290c <FLASH_WaitForLastOperation+0x7c>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1e8      	bne.n	80028aa <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80028d8:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <FLASH_WaitForLastOperation+0x7c>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80028e4:	4b09      	ldr	r3, [pc, #36]	@ (800290c <FLASH_WaitForLastOperation+0x7c>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80028ea:	4b08      	ldr	r3, [pc, #32]	@ (800290c <FLASH_WaitForLastOperation+0x7c>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80028f6:	f000 f8a5 	bl	8002a44 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0

}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	2000033c 	.word	0x2000033c
 800290c:	40023c00 	.word	0x40023c00

08002910 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800291c:	4b14      	ldr	r3, [pc, #80]	@ (8002970 <FLASH_Program_DoubleWord+0x60>)
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	4a13      	ldr	r2, [pc, #76]	@ (8002970 <FLASH_Program_DoubleWord+0x60>)
 8002922:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002926:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002928:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <FLASH_Program_DoubleWord+0x60>)
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	4a10      	ldr	r2, [pc, #64]	@ (8002970 <FLASH_Program_DoubleWord+0x60>)
 800292e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002932:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002934:	4b0e      	ldr	r3, [pc, #56]	@ (8002970 <FLASH_Program_DoubleWord+0x60>)
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	4a0d      	ldr	r2, [pc, #52]	@ (8002970 <FLASH_Program_DoubleWord+0x60>)
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002946:	f3bf 8f6f 	isb	sy
}
 800294a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 800294c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	000a      	movs	r2, r1
 800295a:	2300      	movs	r3, #0
 800295c:	68f9      	ldr	r1, [r7, #12]
 800295e:	3104      	adds	r1, #4
 8002960:	4613      	mov	r3, r2
 8002962:	600b      	str	r3, [r1, #0]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	40023c00 	.word	0x40023c00

08002974 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800297e:	4b0d      	ldr	r3, [pc, #52]	@ (80029b4 <FLASH_Program_Word+0x40>)
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	4a0c      	ldr	r2, [pc, #48]	@ (80029b4 <FLASH_Program_Word+0x40>)
 8002984:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002988:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800298a:	4b0a      	ldr	r3, [pc, #40]	@ (80029b4 <FLASH_Program_Word+0x40>)
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	4a09      	ldr	r2, [pc, #36]	@ (80029b4 <FLASH_Program_Word+0x40>)
 8002990:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002994:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002996:	4b07      	ldr	r3, [pc, #28]	@ (80029b4 <FLASH_Program_Word+0x40>)
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	4a06      	ldr	r2, [pc, #24]	@ (80029b4 <FLASH_Program_Word+0x40>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	601a      	str	r2, [r3, #0]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	40023c00 	.word	0x40023c00

080029b8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029c4:	4b0d      	ldr	r3, [pc, #52]	@ (80029fc <FLASH_Program_HalfWord+0x44>)
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	4a0c      	ldr	r2, [pc, #48]	@ (80029fc <FLASH_Program_HalfWord+0x44>)
 80029ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80029d0:	4b0a      	ldr	r3, [pc, #40]	@ (80029fc <FLASH_Program_HalfWord+0x44>)
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	4a09      	ldr	r2, [pc, #36]	@ (80029fc <FLASH_Program_HalfWord+0x44>)
 80029d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80029dc:	4b07      	ldr	r3, [pc, #28]	@ (80029fc <FLASH_Program_HalfWord+0x44>)
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	4a06      	ldr	r2, [pc, #24]	@ (80029fc <FLASH_Program_HalfWord+0x44>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	887a      	ldrh	r2, [r7, #2]
 80029ec:	801a      	strh	r2, [r3, #0]
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40023c00 	.word	0x40023c00

08002a00 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a40 <FLASH_Program_Byte+0x40>)
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	4a0b      	ldr	r2, [pc, #44]	@ (8002a40 <FLASH_Program_Byte+0x40>)
 8002a12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002a18:	4b09      	ldr	r3, [pc, #36]	@ (8002a40 <FLASH_Program_Byte+0x40>)
 8002a1a:	4a09      	ldr	r2, [pc, #36]	@ (8002a40 <FLASH_Program_Byte+0x40>)
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a20:	4b07      	ldr	r3, [pc, #28]	@ (8002a40 <FLASH_Program_Byte+0x40>)
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	4a06      	ldr	r2, [pc, #24]	@ (8002a40 <FLASH_Program_Byte+0x40>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	701a      	strb	r2, [r3, #0]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40023c00 	.word	0x40023c00

08002a44 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002a48:	4b27      	ldr	r3, [pc, #156]	@ (8002ae8 <FLASH_SetErrorCode+0xa4>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002a54:	4b25      	ldr	r3, [pc, #148]	@ (8002aec <FLASH_SetErrorCode+0xa8>)
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	f043 0310 	orr.w	r3, r3, #16
 8002a5c:	4a23      	ldr	r2, [pc, #140]	@ (8002aec <FLASH_SetErrorCode+0xa8>)
 8002a5e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002a60:	4b21      	ldr	r3, [pc, #132]	@ (8002ae8 <FLASH_SetErrorCode+0xa4>)
 8002a62:	2210      	movs	r2, #16
 8002a64:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002a66:	4b20      	ldr	r3, [pc, #128]	@ (8002ae8 <FLASH_SetErrorCode+0xa4>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d008      	beq.n	8002a84 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002a72:	4b1e      	ldr	r3, [pc, #120]	@ (8002aec <FLASH_SetErrorCode+0xa8>)
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f043 0308 	orr.w	r3, r3, #8
 8002a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8002aec <FLASH_SetErrorCode+0xa8>)
 8002a7c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae8 <FLASH_SetErrorCode+0xa4>)
 8002a80:	2220      	movs	r2, #32
 8002a82:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002a84:	4b18      	ldr	r3, [pc, #96]	@ (8002ae8 <FLASH_SetErrorCode+0xa4>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002a90:	4b16      	ldr	r3, [pc, #88]	@ (8002aec <FLASH_SetErrorCode+0xa8>)
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	f043 0304 	orr.w	r3, r3, #4
 8002a98:	4a14      	ldr	r2, [pc, #80]	@ (8002aec <FLASH_SetErrorCode+0xa8>)
 8002a9a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002a9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ae8 <FLASH_SetErrorCode+0xa4>)
 8002a9e:	2240      	movs	r2, #64	@ 0x40
 8002aa0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002aa2:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <FLASH_SetErrorCode+0xa4>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d008      	beq.n	8002ac0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002aae:	4b0f      	ldr	r3, [pc, #60]	@ (8002aec <FLASH_SetErrorCode+0xa8>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f043 0302 	orr.w	r3, r3, #2
 8002ab6:	4a0d      	ldr	r2, [pc, #52]	@ (8002aec <FLASH_SetErrorCode+0xa8>)
 8002ab8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002aba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <FLASH_SetErrorCode+0xa4>)
 8002abc:	2280      	movs	r2, #128	@ 0x80
 8002abe:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002ac0:	4b09      	ldr	r3, [pc, #36]	@ (8002ae8 <FLASH_SetErrorCode+0xa4>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002acc:	4b07      	ldr	r3, [pc, #28]	@ (8002aec <FLASH_SetErrorCode+0xa8>)
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	f043 0320 	orr.w	r3, r3, #32
 8002ad4:	4a05      	ldr	r2, [pc, #20]	@ (8002aec <FLASH_SetErrorCode+0xa8>)
 8002ad6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002ad8:	4b03      	ldr	r3, [pc, #12]	@ (8002ae8 <FLASH_SetErrorCode+0xa4>)
 8002ada:	2202      	movs	r2, #2
 8002adc:	60da      	str	r2, [r3, #12]
  }
}
 8002ade:	bf00      	nop
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	40023c00 	.word	0x40023c00
 8002aec:	2000033c 	.word	0x2000033c

08002af0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	e010      	b.n	8002b2e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d103      	bne.n	8002b1a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002b12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	e009      	b.n	8002b2e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d103      	bne.n	8002b28 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002b20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	e002      	b.n	8002b2e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002b28:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b2c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002b2e:	4b13      	ldr	r3, [pc, #76]	@ (8002b7c <FLASH_Erase_Sector+0x8c>)
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	4a12      	ldr	r2, [pc, #72]	@ (8002b7c <FLASH_Erase_Sector+0x8c>)
 8002b34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b38:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002b3a:	4b10      	ldr	r3, [pc, #64]	@ (8002b7c <FLASH_Erase_Sector+0x8c>)
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	490f      	ldr	r1, [pc, #60]	@ (8002b7c <FLASH_Erase_Sector+0x8c>)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002b46:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <FLASH_Erase_Sector+0x8c>)
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b7c <FLASH_Erase_Sector+0x8c>)
 8002b4c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002b50:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002b52:	4b0a      	ldr	r3, [pc, #40]	@ (8002b7c <FLASH_Erase_Sector+0x8c>)
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	4a07      	ldr	r2, [pc, #28]	@ (8002b7c <FLASH_Erase_Sector+0x8c>)
 8002b5e:	f043 0302 	orr.w	r3, r3, #2
 8002b62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002b64:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <FLASH_Erase_Sector+0x8c>)
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	4a04      	ldr	r2, [pc, #16]	@ (8002b7c <FLASH_Erase_Sector+0x8c>)
 8002b6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b6e:	6113      	str	r3, [r2, #16]
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	40023c00 	.word	0x40023c00

08002b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	@ 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	e16b      	b.n	8002e74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	f040 815a 	bne.w	8002e6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d005      	beq.n	8002bd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d130      	bne.n	8002c34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	2203      	movs	r2, #3
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c08:	2201      	movs	r2, #1
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 0201 	and.w	r2, r3, #1
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d017      	beq.n	8002c70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d123      	bne.n	8002cc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	08da      	lsrs	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3208      	adds	r2, #8
 8002c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	220f      	movs	r2, #15
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	08da      	lsrs	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3208      	adds	r2, #8
 8002cbe:	69b9      	ldr	r1, [r7, #24]
 8002cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	2203      	movs	r2, #3
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 0203 	and.w	r2, r3, #3
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80b4 	beq.w	8002e6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	4b60      	ldr	r3, [pc, #384]	@ (8002e8c <HAL_GPIO_Init+0x30c>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0e:	4a5f      	ldr	r2, [pc, #380]	@ (8002e8c <HAL_GPIO_Init+0x30c>)
 8002d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d16:	4b5d      	ldr	r3, [pc, #372]	@ (8002e8c <HAL_GPIO_Init+0x30c>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d22:	4a5b      	ldr	r2, [pc, #364]	@ (8002e90 <HAL_GPIO_Init+0x310>)
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	3302      	adds	r3, #2
 8002d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	220f      	movs	r2, #15
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a52      	ldr	r2, [pc, #328]	@ (8002e94 <HAL_GPIO_Init+0x314>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d02b      	beq.n	8002da6 <HAL_GPIO_Init+0x226>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a51      	ldr	r2, [pc, #324]	@ (8002e98 <HAL_GPIO_Init+0x318>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d025      	beq.n	8002da2 <HAL_GPIO_Init+0x222>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a50      	ldr	r2, [pc, #320]	@ (8002e9c <HAL_GPIO_Init+0x31c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d01f      	beq.n	8002d9e <HAL_GPIO_Init+0x21e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4f      	ldr	r2, [pc, #316]	@ (8002ea0 <HAL_GPIO_Init+0x320>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d019      	beq.n	8002d9a <HAL_GPIO_Init+0x21a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4e      	ldr	r2, [pc, #312]	@ (8002ea4 <HAL_GPIO_Init+0x324>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d013      	beq.n	8002d96 <HAL_GPIO_Init+0x216>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4d      	ldr	r2, [pc, #308]	@ (8002ea8 <HAL_GPIO_Init+0x328>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00d      	beq.n	8002d92 <HAL_GPIO_Init+0x212>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4c      	ldr	r2, [pc, #304]	@ (8002eac <HAL_GPIO_Init+0x32c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d007      	beq.n	8002d8e <HAL_GPIO_Init+0x20e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4b      	ldr	r2, [pc, #300]	@ (8002eb0 <HAL_GPIO_Init+0x330>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <HAL_GPIO_Init+0x20a>
 8002d86:	2307      	movs	r3, #7
 8002d88:	e00e      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002d8a:	2308      	movs	r3, #8
 8002d8c:	e00c      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002d8e:	2306      	movs	r3, #6
 8002d90:	e00a      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002d92:	2305      	movs	r3, #5
 8002d94:	e008      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002d96:	2304      	movs	r3, #4
 8002d98:	e006      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e004      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e002      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002da6:	2300      	movs	r3, #0
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	f002 0203 	and.w	r2, r2, #3
 8002dae:	0092      	lsls	r2, r2, #2
 8002db0:	4093      	lsls	r3, r2
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002db8:	4935      	ldr	r1, [pc, #212]	@ (8002e90 <HAL_GPIO_Init+0x310>)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb4 <HAL_GPIO_Init+0x334>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dea:	4a32      	ldr	r2, [pc, #200]	@ (8002eb4 <HAL_GPIO_Init+0x334>)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002df0:	4b30      	ldr	r3, [pc, #192]	@ (8002eb4 <HAL_GPIO_Init+0x334>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e14:	4a27      	ldr	r2, [pc, #156]	@ (8002eb4 <HAL_GPIO_Init+0x334>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e1a:	4b26      	ldr	r3, [pc, #152]	@ (8002eb4 <HAL_GPIO_Init+0x334>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002eb4 <HAL_GPIO_Init+0x334>)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e44:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb4 <HAL_GPIO_Init+0x334>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e68:	4a12      	ldr	r2, [pc, #72]	@ (8002eb4 <HAL_GPIO_Init+0x334>)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3301      	adds	r3, #1
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b0f      	cmp	r3, #15
 8002e78:	f67f ae90 	bls.w	8002b9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	3724      	adds	r7, #36	@ 0x24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40013800 	.word	0x40013800
 8002e94:	40020000 	.word	0x40020000
 8002e98:	40020400 	.word	0x40020400
 8002e9c:	40020800 	.word	0x40020800
 8002ea0:	40020c00 	.word	0x40020c00
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40021400 	.word	0x40021400
 8002eac:	40021800 	.word	0x40021800
 8002eb0:	40021c00 	.word	0x40021c00
 8002eb4:	40013c00 	.word	0x40013c00

08002eb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	887b      	ldrh	r3, [r7, #2]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
 8002ed4:	e001      	b.n	8002eda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	807b      	strh	r3, [r7, #2]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ef8:	787b      	ldrb	r3, [r7, #1]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002efe:	887a      	ldrh	r2, [r7, #2]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f04:	e003      	b.n	8002f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f06:	887b      	ldrh	r3, [r7, #2]
 8002f08:	041a      	lsls	r2, r3, #16
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	619a      	str	r2, [r3, #24]
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f26:	4b08      	ldr	r3, [pc, #32]	@ (8002f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d006      	beq.n	8002f40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f32:	4a05      	ldr	r2, [pc, #20]	@ (8002f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fd0e 	bl	800095c <HAL_GPIO_EXTI_Callback>
  }
}
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40013c00 	.word	0x40013c00

08002f4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e101      	b.n	8003162 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d106      	bne.n	8002f7e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f006 fce5 	bl	8009948 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2203      	movs	r2, #3
 8002f82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f8c:	d102      	bne.n	8002f94 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f003 f8cc 	bl	8006136 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	7c1a      	ldrb	r2, [r3, #16]
 8002fa6:	f88d 2000 	strb.w	r2, [sp]
 8002faa:	3304      	adds	r3, #4
 8002fac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fae:	f002 ffab 	bl	8005f08 <USB_CoreInit>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0ce      	b.n	8003162 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 f8c4 	bl	8006158 <USB_SetCurrentMode>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d005      	beq.n	8002fe2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e0bf      	b.n	8003162 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	73fb      	strb	r3, [r7, #15]
 8002fe6:	e04a      	b.n	800307e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fe8:	7bfa      	ldrb	r2, [r7, #15]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	3315      	adds	r3, #21
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	3314      	adds	r3, #20
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003010:	7bfa      	ldrb	r2, [r7, #15]
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	b298      	uxth	r0, r3
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	332e      	adds	r3, #46	@ 0x2e
 8003024:	4602      	mov	r2, r0
 8003026:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003028:	7bfa      	ldrb	r2, [r7, #15]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	3318      	adds	r3, #24
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800303c:	7bfa      	ldrb	r2, [r7, #15]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	331c      	adds	r3, #28
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003050:	7bfa      	ldrb	r2, [r7, #15]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	3320      	adds	r3, #32
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	3324      	adds	r3, #36	@ 0x24
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	3301      	adds	r3, #1
 800307c:	73fb      	strb	r3, [r7, #15]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	791b      	ldrb	r3, [r3, #4]
 8003082:	7bfa      	ldrb	r2, [r7, #15]
 8003084:	429a      	cmp	r2, r3
 8003086:	d3af      	bcc.n	8002fe8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003088:	2300      	movs	r3, #0
 800308a:	73fb      	strb	r3, [r7, #15]
 800308c:	e044      	b.n	8003118 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030a4:	7bfa      	ldrb	r2, [r7, #15]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80030b6:	7bfa      	ldrb	r2, [r7, #15]
 80030b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030e6:	7bfa      	ldrb	r2, [r7, #15]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030fc:	7bfa      	ldrb	r2, [r7, #15]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	3301      	adds	r3, #1
 8003116:	73fb      	strb	r3, [r7, #15]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	791b      	ldrb	r3, [r3, #4]
 800311c:	7bfa      	ldrb	r2, [r7, #15]
 800311e:	429a      	cmp	r2, r3
 8003120:	d3b5      	bcc.n	800308e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	7c1a      	ldrb	r2, [r3, #16]
 800312a:	f88d 2000 	strb.w	r2, [sp]
 800312e:	3304      	adds	r3, #4
 8003130:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003132:	f003 f85d 	bl	80061f0 <USB_DevInit>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e00c      	b.n	8003162 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f004 f8a7 	bl	80072ae <USB_DevDisconnect>

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_PCD_Start+0x1c>
 8003182:	2302      	movs	r3, #2
 8003184:	e022      	b.n	80031cc <HAL_PCD_Start+0x62>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d105      	bne.n	80031ae <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f002 ffae 	bl	8006114 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f004 f855 	bl	800726c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b08d      	sub	sp, #52	@ 0x34
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f004 f913 	bl	8007416 <USB_GetMode>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f040 848c 	bne.w	8003b10 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f004 f877 	bl	80072f0 <USB_ReadInterrupts>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8482 	beq.w	8003b0e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	0a1b      	lsrs	r3, r3, #8
 8003214:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f004 f864 	bl	80072f0 <USB_ReadInterrupts>
 8003228:	4603      	mov	r3, r0
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b02      	cmp	r3, #2
 8003230:	d107      	bne.n	8003242 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f002 0202 	and.w	r2, r2, #2
 8003240:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f004 f852 	bl	80072f0 <USB_ReadInterrupts>
 800324c:	4603      	mov	r3, r0
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	2b10      	cmp	r3, #16
 8003254:	d161      	bne.n	800331a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699a      	ldr	r2, [r3, #24]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0210 	bic.w	r2, r2, #16
 8003264:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	f003 020f 	and.w	r2, r3, #15
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	4413      	add	r3, r2
 8003282:	3304      	adds	r3, #4
 8003284:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	0c5b      	lsrs	r3, r3, #17
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	2b02      	cmp	r3, #2
 8003290:	d124      	bne.n	80032dc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003298:	4013      	ands	r3, r2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d035      	beq.n	800330a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	461a      	mov	r2, r3
 80032b0:	6a38      	ldr	r0, [r7, #32]
 80032b2:	f003 fe89 	bl	8006fc8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032c2:	441a      	add	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	091b      	lsrs	r3, r3, #4
 80032d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032d4:	441a      	add	r2, r3
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	615a      	str	r2, [r3, #20]
 80032da:	e016      	b.n	800330a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	0c5b      	lsrs	r3, r3, #17
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	2b06      	cmp	r3, #6
 80032e6:	d110      	bne.n	800330a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032ee:	2208      	movs	r2, #8
 80032f0:	4619      	mov	r1, r3
 80032f2:	6a38      	ldr	r0, [r7, #32]
 80032f4:	f003 fe68 	bl	8006fc8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	091b      	lsrs	r3, r3, #4
 8003300:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003304:	441a      	add	r2, r3
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699a      	ldr	r2, [r3, #24]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0210 	orr.w	r2, r2, #16
 8003318:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f003 ffe6 	bl	80072f0 <USB_ReadInterrupts>
 8003324:	4603      	mov	r3, r0
 8003326:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800332a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800332e:	f040 80a7 	bne.w	8003480 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f003 ffeb 	bl	8007316 <USB_ReadDevAllOutEpInterrupt>
 8003340:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003342:	e099      	b.n	8003478 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 808e 	beq.w	800346c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	4611      	mov	r1, r2
 800335a:	4618      	mov	r0, r3
 800335c:	f004 f80f 	bl	800737e <USB_ReadDevOutEPInterrupt>
 8003360:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00c      	beq.n	8003386 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003378:	461a      	mov	r2, r3
 800337a:	2301      	movs	r3, #1
 800337c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800337e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fea3 	bl	80040cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00c      	beq.n	80033aa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800339c:	461a      	mov	r2, r3
 800339e:	2308      	movs	r3, #8
 80033a0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 ff79 	bl	800429c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033c0:	461a      	mov	r2, r3
 80033c2:	2310      	movs	r3, #16
 80033c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d030      	beq.n	8003432 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d8:	2b80      	cmp	r3, #128	@ 0x80
 80033da:	d109      	bne.n	80033f0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033ee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80033f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f2:	4613      	mov	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	4413      	add	r3, r2
 8003402:	3304      	adds	r3, #4
 8003404:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	78db      	ldrb	r3, [r3, #3]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d108      	bne.n	8003420 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2200      	movs	r2, #0
 8003412:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003416:	b2db      	uxtb	r3, r3
 8003418:	4619      	mov	r1, r3
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f006 fba8 	bl	8009b70 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800342c:	461a      	mov	r2, r3
 800342e:	2302      	movs	r3, #2
 8003430:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800343c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	4413      	add	r3, r2
 8003444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003448:	461a      	mov	r2, r3
 800344a:	2320      	movs	r3, #32
 800344c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d009      	beq.n	800346c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	4413      	add	r3, r2
 8003460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003464:	461a      	mov	r2, r3
 8003466:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800346a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800346c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346e:	3301      	adds	r3, #1
 8003470:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003474:	085b      	lsrs	r3, r3, #1
 8003476:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347a:	2b00      	cmp	r3, #0
 800347c:	f47f af62 	bne.w	8003344 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f003 ff33 	bl	80072f0 <USB_ReadInterrupts>
 800348a:	4603      	mov	r3, r0
 800348c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003490:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003494:	f040 80db 	bne.w	800364e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f003 ff54 	bl	800734a <USB_ReadDevAllInEpInterrupt>
 80034a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80034a8:	e0cd      	b.n	8003646 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80034aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80c2 	beq.w	800363a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	4611      	mov	r1, r2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f003 ff7a 	bl	80073ba <USB_ReadDevInEPInterrupt>
 80034c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d057      	beq.n	8003582 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	2201      	movs	r2, #1
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69f9      	ldr	r1, [r7, #28]
 80034ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034f2:	4013      	ands	r3, r2
 80034f4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f8:	015a      	lsls	r2, r3, #5
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003502:	461a      	mov	r2, r3
 8003504:	2301      	movs	r3, #1
 8003506:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	799b      	ldrb	r3, [r3, #6]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d132      	bne.n	8003576 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	3320      	adds	r3, #32
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4403      	add	r3, r0
 8003530:	331c      	adds	r3, #28
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4419      	add	r1, r3
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800353a:	4613      	mov	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4403      	add	r3, r0
 8003544:	3320      	adds	r3, #32
 8003546:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354a:	2b00      	cmp	r3, #0
 800354c:	d113      	bne.n	8003576 <HAL_PCD_IRQHandler+0x3a2>
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	3324      	adds	r3, #36	@ 0x24
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d108      	bne.n	8003576 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6818      	ldr	r0, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800356e:	461a      	mov	r2, r3
 8003570:	2101      	movs	r1, #1
 8003572:	f003 ff81 	bl	8007478 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	b2db      	uxtb	r3, r3
 800357a:	4619      	mov	r1, r3
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f006 fa72 	bl	8009a66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	4413      	add	r3, r2
 8003594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003598:	461a      	mov	r2, r3
 800359a:	2308      	movs	r3, #8
 800359c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80035a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035b4:	461a      	mov	r2, r3
 80035b6:	2310      	movs	r3, #16
 80035b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035d0:	461a      	mov	r2, r3
 80035d2:	2340      	movs	r3, #64	@ 0x40
 80035d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d023      	beq.n	8003628 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80035e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035e2:	6a38      	ldr	r0, [r7, #32]
 80035e4:	f002 ff68 	bl	80064b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80035e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ea:	4613      	mov	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	3310      	adds	r3, #16
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	4413      	add	r3, r2
 80035f8:	3304      	adds	r3, #4
 80035fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	78db      	ldrb	r3, [r3, #3]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d108      	bne.n	8003616 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2200      	movs	r2, #0
 8003608:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800360a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360c:	b2db      	uxtb	r3, r3
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f006 fabf 	bl	8009b94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003622:	461a      	mov	r2, r3
 8003624:	2302      	movs	r3, #2
 8003626:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003632:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fcbd 	bl	8003fb4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	3301      	adds	r3, #1
 800363e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003642:	085b      	lsrs	r3, r3, #1
 8003644:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003648:	2b00      	cmp	r3, #0
 800364a:	f47f af2e 	bne.w	80034aa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f003 fe4c 	bl	80072f0 <USB_ReadInterrupts>
 8003658:	4603      	mov	r3, r0
 800365a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800365e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003662:	d122      	bne.n	80036aa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003672:	f023 0301 	bic.w	r3, r3, #1
 8003676:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800367e:	2b01      	cmp	r3, #1
 8003680:	d108      	bne.n	8003694 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800368a:	2100      	movs	r1, #0
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fea3 	bl	80043d8 <HAL_PCDEx_LPM_Callback>
 8003692:	e002      	b.n	800369a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f006 fa5d 	bl	8009b54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80036a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f003 fe1e 	bl	80072f0 <USB_ReadInterrupts>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036be:	d112      	bne.n	80036e6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d102      	bne.n	80036d6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f006 fa19 	bl	8009b08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80036e4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f003 fe00 	bl	80072f0 <USB_ReadInterrupts>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036fa:	f040 80b7 	bne.w	800386c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800370c:	f023 0301 	bic.w	r3, r3, #1
 8003710:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2110      	movs	r1, #16
 8003718:	4618      	mov	r0, r3
 800371a:	f002 fecd 	bl	80064b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800371e:	2300      	movs	r3, #0
 8003720:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003722:	e046      	b.n	80037b2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003730:	461a      	mov	r2, r3
 8003732:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003736:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	4413      	add	r3, r2
 8003740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003748:	0151      	lsls	r1, r2, #5
 800374a:	69fa      	ldr	r2, [r7, #28]
 800374c:	440a      	add	r2, r1
 800374e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003752:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003756:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	4413      	add	r3, r2
 8003760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003764:	461a      	mov	r2, r3
 8003766:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800376a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800376c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800377c:	0151      	lsls	r1, r2, #5
 800377e:	69fa      	ldr	r2, [r7, #28]
 8003780:	440a      	add	r2, r1
 8003782:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003786:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800378a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800378c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	4413      	add	r3, r2
 8003794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800379c:	0151      	lsls	r1, r2, #5
 800379e:	69fa      	ldr	r2, [r7, #28]
 80037a0:	440a      	add	r2, r1
 80037a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80037aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ae:	3301      	adds	r3, #1
 80037b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	791b      	ldrb	r3, [r3, #4]
 80037b6:	461a      	mov	r2, r3
 80037b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d3b2      	bcc.n	8003724 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037cc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80037d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	7bdb      	ldrb	r3, [r3, #15]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d016      	beq.n	8003808 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037e4:	69fa      	ldr	r2, [r7, #28]
 80037e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037ea:	f043 030b 	orr.w	r3, r3, #11
 80037ee:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003800:	f043 030b 	orr.w	r3, r3, #11
 8003804:	6453      	str	r3, [r2, #68]	@ 0x44
 8003806:	e015      	b.n	8003834 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	69fa      	ldr	r2, [r7, #28]
 8003812:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003816:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800381a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800381e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800382e:	f043 030b 	orr.w	r3, r3, #11
 8003832:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003842:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003846:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6818      	ldr	r0, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003856:	461a      	mov	r2, r3
 8003858:	f003 fe0e 	bl	8007478 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800386a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f003 fd3d 	bl	80072f0 <USB_ReadInterrupts>
 8003876:	4603      	mov	r3, r0
 8003878:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800387c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003880:	d123      	bne.n	80038ca <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f003 fdd3 	bl	8007432 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f002 fe8a 	bl	80065aa <USB_GetDevSpeed>
 8003896:	4603      	mov	r3, r0
 8003898:	461a      	mov	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681c      	ldr	r4, [r3, #0]
 80038a2:	f001 fa09 	bl	8004cb8 <HAL_RCC_GetHCLKFreq>
 80038a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038ac:	461a      	mov	r2, r3
 80038ae:	4620      	mov	r0, r4
 80038b0:	f002 fb8e 	bl	8005fd0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f006 f8fe 	bl	8009ab6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80038c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f003 fd0e 	bl	80072f0 <USB_ReadInterrupts>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d10a      	bne.n	80038f4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f006 f8db 	bl	8009a9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695a      	ldr	r2, [r3, #20]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f002 0208 	and.w	r2, r2, #8
 80038f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f003 fcf9 	bl	80072f0 <USB_ReadInterrupts>
 80038fe:	4603      	mov	r3, r0
 8003900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003904:	2b80      	cmp	r3, #128	@ 0x80
 8003906:	d123      	bne.n	8003950 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003914:	2301      	movs	r3, #1
 8003916:	627b      	str	r3, [r7, #36]	@ 0x24
 8003918:	e014      	b.n	8003944 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800391e:	4613      	mov	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d105      	bne.n	800393e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	b2db      	uxtb	r3, r3
 8003936:	4619      	mov	r1, r3
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 fb0a 	bl	8003f52 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	3301      	adds	r3, #1
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	791b      	ldrb	r3, [r3, #4]
 8003948:	461a      	mov	r2, r3
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	4293      	cmp	r3, r2
 800394e:	d3e4      	bcc.n	800391a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f003 fccb 	bl	80072f0 <USB_ReadInterrupts>
 800395a:	4603      	mov	r3, r0
 800395c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003960:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003964:	d13c      	bne.n	80039e0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003966:	2301      	movs	r3, #1
 8003968:	627b      	str	r3, [r7, #36]	@ 0x24
 800396a:	e02b      	b.n	80039c4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003980:	4613      	mov	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	3318      	adds	r3, #24
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d115      	bne.n	80039be <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003992:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003994:	2b00      	cmp	r3, #0
 8003996:	da12      	bge.n	80039be <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	3317      	adds	r3, #23
 80039a8:	2201      	movs	r2, #1
 80039aa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80039ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	4619      	mov	r1, r3
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 faca 	bl	8003f52 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c0:	3301      	adds	r3, #1
 80039c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	791b      	ldrb	r3, [r3, #4]
 80039c8:	461a      	mov	r2, r3
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d3cd      	bcc.n	800396c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80039de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f003 fc83 	bl	80072f0 <USB_ReadInterrupts>
 80039ea:	4603      	mov	r3, r0
 80039ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039f4:	d156      	bne.n	8003aa4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039f6:	2301      	movs	r3, #1
 80039f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039fa:	e045      	b.n	8003a88 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80039fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d12e      	bne.n	8003a82 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a24:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	da2b      	bge.n	8003a82 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003a36:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d121      	bne.n	8003a82 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a42:	4613      	mov	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	4413      	add	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003a50:	2201      	movs	r2, #1
 8003a52:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a7e:	6053      	str	r3, [r2, #4]
            break;
 8003a80:	e008      	b.n	8003a94 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	3301      	adds	r3, #1
 8003a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	791b      	ldrb	r3, [r3, #4]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d3b3      	bcc.n	80039fc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695a      	ldr	r2, [r3, #20]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003aa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f003 fc21 	bl	80072f0 <USB_ReadInterrupts>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ab8:	d10a      	bne.n	8003ad0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f006 f87c 	bl	8009bb8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695a      	ldr	r2, [r3, #20]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f003 fc0b 	bl	80072f0 <USB_ReadInterrupts>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d115      	bne.n	8003b10 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f006 f86c 	bl	8009bd4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6859      	ldr	r1, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	605a      	str	r2, [r3, #4]
 8003b0c:	e000      	b.n	8003b10 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003b0e:	bf00      	nop
    }
  }
}
 8003b10:	3734      	adds	r7, #52	@ 0x34
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd90      	pop	{r4, r7, pc}

08003b16 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_PCD_SetAddress+0x1a>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e012      	b.n	8003b56 <HAL_PCD_SetAddress+0x40>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	78fa      	ldrb	r2, [r7, #3]
 8003b3c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	4611      	mov	r1, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f003 fb6a 	bl	8007220 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	4608      	mov	r0, r1
 8003b68:	4611      	mov	r1, r2
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	70fb      	strb	r3, [r7, #3]
 8003b70:	460b      	mov	r3, r1
 8003b72:	803b      	strh	r3, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	da0f      	bge.n	8003ba4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	f003 020f 	and.w	r2, r3, #15
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	3310      	adds	r3, #16
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	4413      	add	r3, r2
 8003b98:	3304      	adds	r3, #4
 8003b9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	705a      	strb	r2, [r3, #1]
 8003ba2:	e00f      	b.n	8003bc4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	f003 020f 	and.w	r2, r3, #15
 8003baa:	4613      	mov	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	4413      	add	r3, r2
 8003bba:	3304      	adds	r3, #4
 8003bbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003bd0:	883b      	ldrh	r3, [r7, #0]
 8003bd2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	78ba      	ldrb	r2, [r7, #2]
 8003bde:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	785b      	ldrb	r3, [r3, #1]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d004      	beq.n	8003bf2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	461a      	mov	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003bf2:	78bb      	ldrb	r3, [r7, #2]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d102      	bne.n	8003bfe <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_PCD_EP_Open+0xae>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e00e      	b.n	8003c2a <HAL_PCD_EP_Open+0xcc>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68f9      	ldr	r1, [r7, #12]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f002 fcea 	bl	80065f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003c28:	7afb      	ldrb	r3, [r7, #11]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	da0f      	bge.n	8003c66 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	f003 020f 	and.w	r2, r3, #15
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	3310      	adds	r3, #16
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	4413      	add	r3, r2
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	705a      	strb	r2, [r3, #1]
 8003c64:	e00f      	b.n	8003c86 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c66:	78fb      	ldrb	r3, [r7, #3]
 8003c68:	f003 020f 	and.w	r2, r3, #15
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c86:	78fb      	ldrb	r3, [r7, #3]
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_PCD_EP_Close+0x6e>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e00e      	b.n	8003cbe <HAL_PCD_EP_Close+0x8c>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68f9      	ldr	r1, [r7, #12]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f002 fd28 	bl	8006704 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b086      	sub	sp, #24
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cd6:	7afb      	ldrb	r3, [r7, #11]
 8003cd8:	f003 020f 	and.w	r2, r3, #15
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	3304      	adds	r3, #4
 8003cee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2200      	movs	r2, #0
 8003d06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d08:	7afb      	ldrb	r3, [r7, #11]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	799b      	ldrb	r3, [r3, #6]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d102      	bne.n	8003d22 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	799b      	ldrb	r3, [r3, #6]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	6979      	ldr	r1, [r7, #20]
 8003d2e:	f002 fdc5 	bl	80068bc <USB_EPStartXfer>

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	f003 020f 	and.w	r2, r3, #15
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003d5e:	681b      	ldr	r3, [r3, #0]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	607a      	str	r2, [r7, #4]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d7c:	7afb      	ldrb	r3, [r7, #11]
 8003d7e:	f003 020f 	and.w	r2, r3, #15
 8003d82:	4613      	mov	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	3310      	adds	r3, #16
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4413      	add	r3, r2
 8003d90:	3304      	adds	r3, #4
 8003d92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2200      	movs	r2, #0
 8003da4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2201      	movs	r2, #1
 8003daa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dac:	7afb      	ldrb	r3, [r7, #11]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	799b      	ldrb	r3, [r3, #6]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d102      	bne.n	8003dc6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	799b      	ldrb	r3, [r3, #6]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	6979      	ldr	r1, [r7, #20]
 8003dd2:	f002 fd73 	bl	80068bc <USB_EPStartXfer>

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	7912      	ldrb	r2, [r2, #4]
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e04f      	b.n	8003e9e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	da0f      	bge.n	8003e26 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e06:	78fb      	ldrb	r3, [r7, #3]
 8003e08:	f003 020f 	and.w	r2, r3, #15
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	3310      	adds	r3, #16
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	705a      	strb	r2, [r3, #1]
 8003e24:	e00d      	b.n	8003e42 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e26:	78fa      	ldrb	r2, [r7, #3]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	4413      	add	r3, r2
 8003e38:	3304      	adds	r3, #4
 8003e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_PCD_EP_SetStall+0x82>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e01d      	b.n	8003e9e <HAL_PCD_EP_SetStall+0xbe>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68f9      	ldr	r1, [r7, #12]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f003 f901 	bl	8007078 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e76:	78fb      	ldrb	r3, [r7, #3]
 8003e78:	f003 030f 	and.w	r3, r3, #15
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	7999      	ldrb	r1, [r3, #6]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f003 faf2 	bl	8007478 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003eb2:	78fb      	ldrb	r3, [r7, #3]
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	7912      	ldrb	r2, [r2, #4]
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e042      	b.n	8003f4a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	da0f      	bge.n	8003eec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	f003 020f 	and.w	r2, r3, #15
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	3310      	adds	r3, #16
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	4413      	add	r3, r2
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	705a      	strb	r2, [r3, #1]
 8003eea:	e00f      	b.n	8003f0c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	f003 020f 	and.w	r2, r3, #15
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	4413      	add	r3, r2
 8003f02:	3304      	adds	r3, #4
 8003f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_PCD_EP_ClrStall+0x86>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e00e      	b.n	8003f4a <HAL_PCD_EP_ClrStall+0xa4>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68f9      	ldr	r1, [r7, #12]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f003 f90a 	bl	8007154 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	da0c      	bge.n	8003f80 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f66:	78fb      	ldrb	r3, [r7, #3]
 8003f68:	f003 020f 	and.w	r2, r3, #15
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	3310      	adds	r3, #16
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	4413      	add	r3, r2
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	e00c      	b.n	8003f9a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f80:	78fb      	ldrb	r3, [r7, #3]
 8003f82:	f003 020f 	and.w	r2, r3, #15
 8003f86:	4613      	mov	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	4413      	add	r3, r2
 8003f96:	3304      	adds	r3, #4
 8003f98:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68f9      	ldr	r1, [r7, #12]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f002 ff29 	bl	8006df8 <USB_EPStopXfer>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003faa:	7afb      	ldrb	r3, [r7, #11]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08a      	sub	sp, #40	@ 0x28
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4413      	add	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	3310      	adds	r3, #16
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3304      	adds	r3, #4
 8003fda:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d901      	bls.n	8003fec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e06b      	b.n	80040c4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d902      	bls.n	8004008 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	3303      	adds	r3, #3
 800400c:	089b      	lsrs	r3, r3, #2
 800400e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004010:	e02a      	b.n	8004068 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	429a      	cmp	r2, r3
 8004026:	d902      	bls.n	800402e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	3303      	adds	r3, #3
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	68d9      	ldr	r1, [r3, #12]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	b2da      	uxtb	r2, r3
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	4603      	mov	r3, r0
 800404a:	6978      	ldr	r0, [r7, #20]
 800404c:	f002 ff7e 	bl	8006f4c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	441a      	add	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	695a      	ldr	r2, [r3, #20]
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	441a      	add	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	429a      	cmp	r2, r3
 800407c:	d809      	bhi.n	8004092 <PCD_WriteEmptyTxFifo+0xde>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	695a      	ldr	r2, [r3, #20]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004086:	429a      	cmp	r2, r3
 8004088:	d203      	bcs.n	8004092 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1bf      	bne.n	8004012 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	429a      	cmp	r2, r3
 800409c:	d811      	bhi.n	80040c2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	2201      	movs	r2, #1
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	43db      	mvns	r3, r3
 80040b8:	6939      	ldr	r1, [r7, #16]
 80040ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040be:	4013      	ands	r3, r2
 80040c0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	333c      	adds	r3, #60	@ 0x3c
 80040e4:	3304      	adds	r3, #4
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	799b      	ldrb	r3, [r3, #6]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d17b      	bne.n	80041fa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d015      	beq.n	8004138 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	4a61      	ldr	r2, [pc, #388]	@ (8004294 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	f240 80b9 	bls.w	8004288 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 80b3 	beq.w	8004288 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800412e:	461a      	mov	r2, r3
 8004130:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004134:	6093      	str	r3, [r2, #8]
 8004136:	e0a7      	b.n	8004288 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d009      	beq.n	8004156 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800414e:	461a      	mov	r2, r3
 8004150:	2320      	movs	r3, #32
 8004152:	6093      	str	r3, [r2, #8]
 8004154:	e098      	b.n	8004288 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800415c:	2b00      	cmp	r3, #0
 800415e:	f040 8093 	bne.w	8004288 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	4a4b      	ldr	r2, [pc, #300]	@ (8004294 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d90f      	bls.n	800418a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004180:	461a      	mov	r2, r3
 8004182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004186:	6093      	str	r3, [r2, #8]
 8004188:	e07e      	b.n	8004288 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	4613      	mov	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	4413      	add	r3, r2
 800419c:	3304      	adds	r3, #4
 800419e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a1a      	ldr	r2, [r3, #32]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	0159      	lsls	r1, r3, #5
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	440b      	add	r3, r1
 80041ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b6:	1ad2      	subs	r2, r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d114      	bne.n	80041ec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6818      	ldr	r0, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041d4:	461a      	mov	r2, r3
 80041d6:	2101      	movs	r1, #1
 80041d8:	f003 f94e 	bl	8007478 <USB_EP0_OutStart>
 80041dc:	e006      	b.n	80041ec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	441a      	add	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	4619      	mov	r1, r3
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f005 fc1c 	bl	8009a30 <HAL_PCD_DataOutStageCallback>
 80041f8:	e046      	b.n	8004288 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	4a26      	ldr	r2, [pc, #152]	@ (8004298 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d124      	bne.n	800424c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	4413      	add	r3, r2
 8004214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004218:	461a      	mov	r2, r3
 800421a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800421e:	6093      	str	r3, [r2, #8]
 8004220:	e032      	b.n	8004288 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004238:	461a      	mov	r2, r3
 800423a:	2320      	movs	r3, #32
 800423c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	4619      	mov	r1, r3
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f005 fbf3 	bl	8009a30 <HAL_PCD_DataOutStageCallback>
 800424a:	e01d      	b.n	8004288 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d114      	bne.n	800427c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	4613      	mov	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d108      	bne.n	800427c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004274:	461a      	mov	r2, r3
 8004276:	2100      	movs	r1, #0
 8004278:	f003 f8fe 	bl	8007478 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	b2db      	uxtb	r3, r3
 8004280:	4619      	mov	r1, r3
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f005 fbd4 	bl	8009a30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	4f54300a 	.word	0x4f54300a
 8004298:	4f54310a 	.word	0x4f54310a

0800429c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	333c      	adds	r3, #60	@ 0x3c
 80042b4:	3304      	adds	r3, #4
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a15      	ldr	r2, [pc, #84]	@ (8004324 <PCD_EP_OutSetupPacket_int+0x88>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d90e      	bls.n	80042f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d009      	beq.n	80042f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042e8:	461a      	mov	r2, r3
 80042ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f005 fb8b 	bl	8009a0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004324 <PCD_EP_OutSetupPacket_int+0x88>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d90c      	bls.n	8004318 <PCD_EP_OutSetupPacket_int+0x7c>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	799b      	ldrb	r3, [r3, #6]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d108      	bne.n	8004318 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004310:	461a      	mov	r2, r3
 8004312:	2101      	movs	r1, #1
 8004314:	f003 f8b0 	bl	8007478 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	4f54300a 	.word	0x4f54300a

08004328 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	70fb      	strb	r3, [r7, #3]
 8004334:	4613      	mov	r3, r2
 8004336:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d107      	bne.n	8004356 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004346:	883b      	ldrh	r3, [r7, #0]
 8004348:	0419      	lsls	r1, r3, #16
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	430a      	orrs	r2, r1
 8004352:	629a      	str	r2, [r3, #40]	@ 0x28
 8004354:	e028      	b.n	80043a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435c:	0c1b      	lsrs	r3, r3, #16
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	4413      	add	r3, r2
 8004362:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004364:	2300      	movs	r3, #0
 8004366:	73fb      	strb	r3, [r7, #15]
 8004368:	e00d      	b.n	8004386 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	3340      	adds	r3, #64	@ 0x40
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	0c1b      	lsrs	r3, r3, #16
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	4413      	add	r3, r2
 800437e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	3301      	adds	r3, #1
 8004384:	73fb      	strb	r3, [r7, #15]
 8004386:	7bfa      	ldrb	r2, [r7, #15]
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	3b01      	subs	r3, #1
 800438c:	429a      	cmp	r2, r3
 800438e:	d3ec      	bcc.n	800436a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004390:	883b      	ldrh	r3, [r7, #0]
 8004392:	0418      	lsls	r0, r3, #16
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6819      	ldr	r1, [r3, #0]
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	3b01      	subs	r3, #1
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	4302      	orrs	r2, r0
 80043a0:	3340      	adds	r3, #64	@ 0x40
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	460b      	mov	r3, r1
 80043c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	887a      	ldrh	r2, [r7, #2]
 80043c8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e267      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d075      	beq.n	80044fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800440e:	4b88      	ldr	r3, [pc, #544]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 030c 	and.w	r3, r3, #12
 8004416:	2b04      	cmp	r3, #4
 8004418:	d00c      	beq.n	8004434 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800441a:	4b85      	ldr	r3, [pc, #532]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004422:	2b08      	cmp	r3, #8
 8004424:	d112      	bne.n	800444c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004426:	4b82      	ldr	r3, [pc, #520]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800442e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004432:	d10b      	bne.n	800444c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004434:	4b7e      	ldr	r3, [pc, #504]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d05b      	beq.n	80044f8 <HAL_RCC_OscConfig+0x108>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d157      	bne.n	80044f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e242      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004454:	d106      	bne.n	8004464 <HAL_RCC_OscConfig+0x74>
 8004456:	4b76      	ldr	r3, [pc, #472]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a75      	ldr	r2, [pc, #468]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 800445c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	e01d      	b.n	80044a0 <HAL_RCC_OscConfig+0xb0>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800446c:	d10c      	bne.n	8004488 <HAL_RCC_OscConfig+0x98>
 800446e:	4b70      	ldr	r3, [pc, #448]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a6f      	ldr	r2, [pc, #444]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	4b6d      	ldr	r3, [pc, #436]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a6c      	ldr	r2, [pc, #432]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	e00b      	b.n	80044a0 <HAL_RCC_OscConfig+0xb0>
 8004488:	4b69      	ldr	r3, [pc, #420]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a68      	ldr	r2, [pc, #416]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 800448e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	4b66      	ldr	r3, [pc, #408]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a65      	ldr	r2, [pc, #404]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 800449a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800449e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d013      	beq.n	80044d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a8:	f7fd f8a8 	bl	80015fc <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044b0:	f7fd f8a4 	bl	80015fc <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	@ 0x64
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e207      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0xc0>
 80044ce:	e014      	b.n	80044fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fd f894 	bl	80015fc <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d8:	f7fd f890 	bl	80015fc <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b64      	cmp	r3, #100	@ 0x64
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e1f3      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ea:	4b51      	ldr	r3, [pc, #324]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0xe8>
 80044f6:	e000      	b.n	80044fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d063      	beq.n	80045ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004506:	4b4a      	ldr	r3, [pc, #296]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00b      	beq.n	800452a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004512:	4b47      	ldr	r3, [pc, #284]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800451a:	2b08      	cmp	r3, #8
 800451c:	d11c      	bne.n	8004558 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800451e:	4b44      	ldr	r3, [pc, #272]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d116      	bne.n	8004558 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800452a:	4b41      	ldr	r3, [pc, #260]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <HAL_RCC_OscConfig+0x152>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d001      	beq.n	8004542 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e1c7      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004542:	4b3b      	ldr	r3, [pc, #236]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	4937      	ldr	r1, [pc, #220]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004552:	4313      	orrs	r3, r2
 8004554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004556:	e03a      	b.n	80045ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d020      	beq.n	80045a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004560:	4b34      	ldr	r3, [pc, #208]	@ (8004634 <HAL_RCC_OscConfig+0x244>)
 8004562:	2201      	movs	r2, #1
 8004564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004566:	f7fd f849 	bl	80015fc <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456c:	e008      	b.n	8004580 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800456e:	f7fd f845 	bl	80015fc <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e1a8      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004580:	4b2b      	ldr	r3, [pc, #172]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0f0      	beq.n	800456e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458c:	4b28      	ldr	r3, [pc, #160]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	4925      	ldr	r1, [pc, #148]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 800459c:	4313      	orrs	r3, r2
 800459e:	600b      	str	r3, [r1, #0]
 80045a0:	e015      	b.n	80045ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045a2:	4b24      	ldr	r3, [pc, #144]	@ (8004634 <HAL_RCC_OscConfig+0x244>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fd f828 	bl	80015fc <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b0:	f7fd f824 	bl	80015fc <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e187      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d036      	beq.n	8004648 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d016      	beq.n	8004610 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045e2:	4b15      	ldr	r3, [pc, #84]	@ (8004638 <HAL_RCC_OscConfig+0x248>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fd f808 	bl	80015fc <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f0:	f7fd f804 	bl	80015fc <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e167      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004602:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <HAL_RCC_OscConfig+0x240>)
 8004604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f0      	beq.n	80045f0 <HAL_RCC_OscConfig+0x200>
 800460e:	e01b      	b.n	8004648 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004610:	4b09      	ldr	r3, [pc, #36]	@ (8004638 <HAL_RCC_OscConfig+0x248>)
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004616:	f7fc fff1 	bl	80015fc <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800461c:	e00e      	b.n	800463c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800461e:	f7fc ffed 	bl	80015fc <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d907      	bls.n	800463c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e150      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
 8004630:	40023800 	.word	0x40023800
 8004634:	42470000 	.word	0x42470000
 8004638:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800463c:	4b88      	ldr	r3, [pc, #544]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 800463e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1ea      	bne.n	800461e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 8097 	beq.w	8004784 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004656:	2300      	movs	r3, #0
 8004658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800465a:	4b81      	ldr	r3, [pc, #516]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10f      	bne.n	8004686 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004666:	2300      	movs	r3, #0
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	4b7d      	ldr	r3, [pc, #500]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	4a7c      	ldr	r2, [pc, #496]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 8004670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004674:	6413      	str	r3, [r2, #64]	@ 0x40
 8004676:	4b7a      	ldr	r3, [pc, #488]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800467e:	60bb      	str	r3, [r7, #8]
 8004680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004682:	2301      	movs	r3, #1
 8004684:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004686:	4b77      	ldr	r3, [pc, #476]	@ (8004864 <HAL_RCC_OscConfig+0x474>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d118      	bne.n	80046c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004692:	4b74      	ldr	r3, [pc, #464]	@ (8004864 <HAL_RCC_OscConfig+0x474>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a73      	ldr	r2, [pc, #460]	@ (8004864 <HAL_RCC_OscConfig+0x474>)
 8004698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800469c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800469e:	f7fc ffad 	bl	80015fc <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a6:	f7fc ffa9 	bl	80015fc <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e10c      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b8:	4b6a      	ldr	r3, [pc, #424]	@ (8004864 <HAL_RCC_OscConfig+0x474>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d106      	bne.n	80046da <HAL_RCC_OscConfig+0x2ea>
 80046cc:	4b64      	ldr	r3, [pc, #400]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 80046ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d0:	4a63      	ldr	r2, [pc, #396]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046d8:	e01c      	b.n	8004714 <HAL_RCC_OscConfig+0x324>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b05      	cmp	r3, #5
 80046e0:	d10c      	bne.n	80046fc <HAL_RCC_OscConfig+0x30c>
 80046e2:	4b5f      	ldr	r3, [pc, #380]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e6:	4a5e      	ldr	r2, [pc, #376]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 80046e8:	f043 0304 	orr.w	r3, r3, #4
 80046ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80046ee:	4b5c      	ldr	r3, [pc, #368]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 80046f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f2:	4a5b      	ldr	r2, [pc, #364]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 80046f4:	f043 0301 	orr.w	r3, r3, #1
 80046f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80046fa:	e00b      	b.n	8004714 <HAL_RCC_OscConfig+0x324>
 80046fc:	4b58      	ldr	r3, [pc, #352]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004700:	4a57      	ldr	r2, [pc, #348]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 8004702:	f023 0301 	bic.w	r3, r3, #1
 8004706:	6713      	str	r3, [r2, #112]	@ 0x70
 8004708:	4b55      	ldr	r3, [pc, #340]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470c:	4a54      	ldr	r2, [pc, #336]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 800470e:	f023 0304 	bic.w	r3, r3, #4
 8004712:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d015      	beq.n	8004748 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471c:	f7fc ff6e 	bl	80015fc <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004722:	e00a      	b.n	800473a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004724:	f7fc ff6a 	bl	80015fc <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e0cb      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473a:	4b49      	ldr	r3, [pc, #292]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 800473c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0ee      	beq.n	8004724 <HAL_RCC_OscConfig+0x334>
 8004746:	e014      	b.n	8004772 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004748:	f7fc ff58 	bl	80015fc <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800474e:	e00a      	b.n	8004766 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004750:	f7fc ff54 	bl	80015fc <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e0b5      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004766:	4b3e      	ldr	r3, [pc, #248]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 8004768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1ee      	bne.n	8004750 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004772:	7dfb      	ldrb	r3, [r7, #23]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d105      	bne.n	8004784 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004778:	4b39      	ldr	r3, [pc, #228]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 800477a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477c:	4a38      	ldr	r2, [pc, #224]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 800477e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004782:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 80a1 	beq.w	80048d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800478e:	4b34      	ldr	r3, [pc, #208]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	2b08      	cmp	r3, #8
 8004798:	d05c      	beq.n	8004854 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d141      	bne.n	8004826 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a2:	4b31      	ldr	r3, [pc, #196]	@ (8004868 <HAL_RCC_OscConfig+0x478>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a8:	f7fc ff28 	bl	80015fc <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b0:	f7fc ff24 	bl	80015fc <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e087      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c2:	4b27      	ldr	r3, [pc, #156]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f0      	bne.n	80047b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69da      	ldr	r2, [r3, #28]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047dc:	019b      	lsls	r3, r3, #6
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e4:	085b      	lsrs	r3, r3, #1
 80047e6:	3b01      	subs	r3, #1
 80047e8:	041b      	lsls	r3, r3, #16
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f0:	061b      	lsls	r3, r3, #24
 80047f2:	491b      	ldr	r1, [pc, #108]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004868 <HAL_RCC_OscConfig+0x478>)
 80047fa:	2201      	movs	r2, #1
 80047fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fe:	f7fc fefd 	bl	80015fc <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004806:	f7fc fef9 	bl	80015fc <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e05c      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004818:	4b11      	ldr	r3, [pc, #68]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f0      	beq.n	8004806 <HAL_RCC_OscConfig+0x416>
 8004824:	e054      	b.n	80048d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004826:	4b10      	ldr	r3, [pc, #64]	@ (8004868 <HAL_RCC_OscConfig+0x478>)
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482c:	f7fc fee6 	bl	80015fc <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004834:	f7fc fee2 	bl	80015fc <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e045      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004846:	4b06      	ldr	r3, [pc, #24]	@ (8004860 <HAL_RCC_OscConfig+0x470>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_OscConfig+0x444>
 8004852:	e03d      	b.n	80048d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d107      	bne.n	800486c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e038      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
 8004860:	40023800 	.word	0x40023800
 8004864:	40007000 	.word	0x40007000
 8004868:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800486c:	4b1b      	ldr	r3, [pc, #108]	@ (80048dc <HAL_RCC_OscConfig+0x4ec>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d028      	beq.n	80048cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004884:	429a      	cmp	r2, r3
 8004886:	d121      	bne.n	80048cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004892:	429a      	cmp	r2, r3
 8004894:	d11a      	bne.n	80048cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800489c:	4013      	ands	r3, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d111      	bne.n	80048cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b2:	085b      	lsrs	r3, r3, #1
 80048b4:	3b01      	subs	r3, #1
 80048b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d107      	bne.n	80048cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e000      	b.n	80048d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40023800 	.word	0x40023800

080048e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e0cc      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048f4:	4b68      	ldr	r3, [pc, #416]	@ (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d90c      	bls.n	800491c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004902:	4b65      	ldr	r3, [pc, #404]	@ (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800490a:	4b63      	ldr	r3, [pc, #396]	@ (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d001      	beq.n	800491c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0b8      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d020      	beq.n	800496a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004934:	4b59      	ldr	r3, [pc, #356]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	4a58      	ldr	r2, [pc, #352]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800493e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800494c:	4b53      	ldr	r3, [pc, #332]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	4a52      	ldr	r2, [pc, #328]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004956:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004958:	4b50      	ldr	r3, [pc, #320]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	494d      	ldr	r1, [pc, #308]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	4313      	orrs	r3, r2
 8004968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d044      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d107      	bne.n	800498e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497e:	4b47      	ldr	r3, [pc, #284]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d119      	bne.n	80049be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e07f      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d003      	beq.n	800499e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800499a:	2b03      	cmp	r3, #3
 800499c:	d107      	bne.n	80049ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800499e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d109      	bne.n	80049be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e06f      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ae:	4b3b      	ldr	r3, [pc, #236]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e067      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049be:	4b37      	ldr	r3, [pc, #220]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f023 0203 	bic.w	r2, r3, #3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	4934      	ldr	r1, [pc, #208]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049d0:	f7fc fe14 	bl	80015fc <HAL_GetTick>
 80049d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d6:	e00a      	b.n	80049ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d8:	f7fc fe10 	bl	80015fc <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e04f      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ee:	4b2b      	ldr	r3, [pc, #172]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 020c 	and.w	r2, r3, #12
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d1eb      	bne.n	80049d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a00:	4b25      	ldr	r3, [pc, #148]	@ (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d20c      	bcs.n	8004a28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0e:	4b22      	ldr	r3, [pc, #136]	@ (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a16:	4b20      	ldr	r3, [pc, #128]	@ (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e032      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a34:	4b19      	ldr	r3, [pc, #100]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4916      	ldr	r1, [pc, #88]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a52:	4b12      	ldr	r3, [pc, #72]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	490e      	ldr	r1, [pc, #56]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a66:	f000 f821 	bl	8004aac <HAL_RCC_GetSysClockFreq>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	091b      	lsrs	r3, r3, #4
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	490a      	ldr	r1, [pc, #40]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a78:	5ccb      	ldrb	r3, [r1, r3]
 8004a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7e:	4a09      	ldr	r2, [pc, #36]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a82:	4b09      	ldr	r3, [pc, #36]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fc fd74 	bl	8001574 <HAL_InitTick>

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40023c00 	.word	0x40023c00
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	0800a958 	.word	0x0800a958
 8004aa4:	20000000 	.word	0x20000000
 8004aa8:	20000004 	.word	0x20000004

08004aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ab0:	b094      	sub	sp, #80	@ 0x50
 8004ab2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ac4:	4b79      	ldr	r3, [pc, #484]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x200>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 030c 	and.w	r3, r3, #12
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d00d      	beq.n	8004aec <HAL_RCC_GetSysClockFreq+0x40>
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	f200 80e1 	bhi.w	8004c98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d003      	beq.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004ade:	e0db      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ae0:	4b73      	ldr	r3, [pc, #460]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ae4:	e0db      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ae6:	4b73      	ldr	r3, [pc, #460]	@ (8004cb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aea:	e0d8      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aec:	4b6f      	ldr	r3, [pc, #444]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x200>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004af4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004af6:	4b6d      	ldr	r3, [pc, #436]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x200>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d063      	beq.n	8004bca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b02:	4b6a      	ldr	r3, [pc, #424]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x200>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	099b      	lsrs	r3, r3, #6
 8004b08:	2200      	movs	r2, #0
 8004b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b14:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b16:	2300      	movs	r3, #0
 8004b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b1e:	4622      	mov	r2, r4
 8004b20:	462b      	mov	r3, r5
 8004b22:	f04f 0000 	mov.w	r0, #0
 8004b26:	f04f 0100 	mov.w	r1, #0
 8004b2a:	0159      	lsls	r1, r3, #5
 8004b2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b30:	0150      	lsls	r0, r2, #5
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	4621      	mov	r1, r4
 8004b38:	1a51      	subs	r1, r2, r1
 8004b3a:	6139      	str	r1, [r7, #16]
 8004b3c:	4629      	mov	r1, r5
 8004b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b50:	4659      	mov	r1, fp
 8004b52:	018b      	lsls	r3, r1, #6
 8004b54:	4651      	mov	r1, sl
 8004b56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b5a:	4651      	mov	r1, sl
 8004b5c:	018a      	lsls	r2, r1, #6
 8004b5e:	4651      	mov	r1, sl
 8004b60:	ebb2 0801 	subs.w	r8, r2, r1
 8004b64:	4659      	mov	r1, fp
 8004b66:	eb63 0901 	sbc.w	r9, r3, r1
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b7e:	4690      	mov	r8, r2
 8004b80:	4699      	mov	r9, r3
 8004b82:	4623      	mov	r3, r4
 8004b84:	eb18 0303 	adds.w	r3, r8, r3
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	462b      	mov	r3, r5
 8004b8c:	eb49 0303 	adc.w	r3, r9, r3
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	024b      	lsls	r3, r1, #9
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ba8:	4621      	mov	r1, r4
 8004baa:	024a      	lsls	r2, r1, #9
 8004bac:	4610      	mov	r0, r2
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bbc:	f7fb fb60 	bl	8000280 <__aeabi_uldivmod>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bc8:	e058      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bca:	4b38      	ldr	r3, [pc, #224]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x200>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	099b      	lsrs	r3, r3, #6
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bda:	623b      	str	r3, [r7, #32]
 8004bdc:	2300      	movs	r3, #0
 8004bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8004be0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004be4:	4642      	mov	r2, r8
 8004be6:	464b      	mov	r3, r9
 8004be8:	f04f 0000 	mov.w	r0, #0
 8004bec:	f04f 0100 	mov.w	r1, #0
 8004bf0:	0159      	lsls	r1, r3, #5
 8004bf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bf6:	0150      	lsls	r0, r2, #5
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4641      	mov	r1, r8
 8004bfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c02:	4649      	mov	r1, r9
 8004c04:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c1c:	ebb2 040a 	subs.w	r4, r2, sl
 8004c20:	eb63 050b 	sbc.w	r5, r3, fp
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	00eb      	lsls	r3, r5, #3
 8004c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c32:	00e2      	lsls	r2, r4, #3
 8004c34:	4614      	mov	r4, r2
 8004c36:	461d      	mov	r5, r3
 8004c38:	4643      	mov	r3, r8
 8004c3a:	18e3      	adds	r3, r4, r3
 8004c3c:	603b      	str	r3, [r7, #0]
 8004c3e:	464b      	mov	r3, r9
 8004c40:	eb45 0303 	adc.w	r3, r5, r3
 8004c44:	607b      	str	r3, [r7, #4]
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c52:	4629      	mov	r1, r5
 8004c54:	028b      	lsls	r3, r1, #10
 8004c56:	4621      	mov	r1, r4
 8004c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	028a      	lsls	r2, r1, #10
 8004c60:	4610      	mov	r0, r2
 8004c62:	4619      	mov	r1, r3
 8004c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c66:	2200      	movs	r2, #0
 8004c68:	61bb      	str	r3, [r7, #24]
 8004c6a:	61fa      	str	r2, [r7, #28]
 8004c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c70:	f7fb fb06 	bl	8000280 <__aeabi_uldivmod>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4613      	mov	r3, r2
 8004c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x200>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	0c1b      	lsrs	r3, r3, #16
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	3301      	adds	r3, #1
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004c8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c96:	e002      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c98:	4b05      	ldr	r3, [pc, #20]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3750      	adds	r7, #80	@ 0x50
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004caa:	bf00      	nop
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	00f42400 	.word	0x00f42400
 8004cb4:	007a1200 	.word	0x007a1200

08004cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cbc:	4b03      	ldr	r3, [pc, #12]	@ (8004ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	20000000 	.word	0x20000000

08004cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e041      	b.n	8004d66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d106      	bne.n	8004cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fc faa2 	bl	8001240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4610      	mov	r0, r2
 8004d10:	f000 fcfc 	bl	800570c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e041      	b.n	8004e04 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d106      	bne.n	8004d9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f839 	bl	8004e0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3304      	adds	r3, #4
 8004daa:	4619      	mov	r1, r3
 8004dac:	4610      	mov	r0, r2
 8004dae:	f000 fcad 	bl	800570c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d109      	bne.n	8004e48 <HAL_TIM_PWM_Start_IT+0x28>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	bf14      	ite	ne
 8004e40:	2301      	movne	r3, #1
 8004e42:	2300      	moveq	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	e022      	b.n	8004e8e <HAL_TIM_PWM_Start_IT+0x6e>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d109      	bne.n	8004e62 <HAL_TIM_PWM_Start_IT+0x42>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	bf14      	ite	ne
 8004e5a:	2301      	movne	r3, #1
 8004e5c:	2300      	moveq	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	e015      	b.n	8004e8e <HAL_TIM_PWM_Start_IT+0x6e>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d109      	bne.n	8004e7c <HAL_TIM_PWM_Start_IT+0x5c>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	bf14      	ite	ne
 8004e74:	2301      	movne	r3, #1
 8004e76:	2300      	moveq	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	e008      	b.n	8004e8e <HAL_TIM_PWM_Start_IT+0x6e>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	bf14      	ite	ne
 8004e88:	2301      	movne	r3, #1
 8004e8a:	2300      	moveq	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e0c7      	b.n	8005026 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d104      	bne.n	8004ea6 <HAL_TIM_PWM_Start_IT+0x86>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ea4:	e013      	b.n	8004ece <HAL_TIM_PWM_Start_IT+0xae>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d104      	bne.n	8004eb6 <HAL_TIM_PWM_Start_IT+0x96>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004eb4:	e00b      	b.n	8004ece <HAL_TIM_PWM_Start_IT+0xae>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d104      	bne.n	8004ec6 <HAL_TIM_PWM_Start_IT+0xa6>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ec4:	e003      	b.n	8004ece <HAL_TIM_PWM_Start_IT+0xae>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2202      	movs	r2, #2
 8004eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b0c      	cmp	r3, #12
 8004ed2:	d841      	bhi.n	8004f58 <HAL_TIM_PWM_Start_IT+0x138>
 8004ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8004edc <HAL_TIM_PWM_Start_IT+0xbc>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004f11 	.word	0x08004f11
 8004ee0:	08004f59 	.word	0x08004f59
 8004ee4:	08004f59 	.word	0x08004f59
 8004ee8:	08004f59 	.word	0x08004f59
 8004eec:	08004f23 	.word	0x08004f23
 8004ef0:	08004f59 	.word	0x08004f59
 8004ef4:	08004f59 	.word	0x08004f59
 8004ef8:	08004f59 	.word	0x08004f59
 8004efc:	08004f35 	.word	0x08004f35
 8004f00:	08004f59 	.word	0x08004f59
 8004f04:	08004f59 	.word	0x08004f59
 8004f08:	08004f59 	.word	0x08004f59
 8004f0c:	08004f47 	.word	0x08004f47
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0202 	orr.w	r2, r2, #2
 8004f1e:	60da      	str	r2, [r3, #12]
      break;
 8004f20:	e01d      	b.n	8004f5e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0204 	orr.w	r2, r2, #4
 8004f30:	60da      	str	r2, [r3, #12]
      break;
 8004f32:	e014      	b.n	8004f5e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0208 	orr.w	r2, r2, #8
 8004f42:	60da      	str	r2, [r3, #12]
      break;
 8004f44:	e00b      	b.n	8004f5e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0210 	orr.w	r2, r2, #16
 8004f54:	60da      	str	r2, [r3, #12]
      break;
 8004f56:	e002      	b.n	8004f5e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d15f      	bne.n	8005024 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	6839      	ldr	r1, [r7, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fec3 	bl	8005cf8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a2e      	ldr	r2, [pc, #184]	@ (8005030 <HAL_TIM_PWM_Start_IT+0x210>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d004      	beq.n	8004f86 <HAL_TIM_PWM_Start_IT+0x166>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a2c      	ldr	r2, [pc, #176]	@ (8005034 <HAL_TIM_PWM_Start_IT+0x214>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d101      	bne.n	8004f8a <HAL_TIM_PWM_Start_IT+0x16a>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <HAL_TIM_PWM_Start_IT+0x16c>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d007      	beq.n	8004fa0 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f9e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a22      	ldr	r2, [pc, #136]	@ (8005030 <HAL_TIM_PWM_Start_IT+0x210>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d022      	beq.n	8004ff0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fb2:	d01d      	beq.n	8004ff0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8005038 <HAL_TIM_PWM_Start_IT+0x218>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d018      	beq.n	8004ff0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800503c <HAL_TIM_PWM_Start_IT+0x21c>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d013      	beq.n	8004ff0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8005040 <HAL_TIM_PWM_Start_IT+0x220>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00e      	beq.n	8004ff0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a17      	ldr	r2, [pc, #92]	@ (8005034 <HAL_TIM_PWM_Start_IT+0x214>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d009      	beq.n	8004ff0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a18      	ldr	r2, [pc, #96]	@ (8005044 <HAL_TIM_PWM_Start_IT+0x224>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d004      	beq.n	8004ff0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a17      	ldr	r2, [pc, #92]	@ (8005048 <HAL_TIM_PWM_Start_IT+0x228>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d111      	bne.n	8005014 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b06      	cmp	r3, #6
 8005000:	d010      	beq.n	8005024 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0201 	orr.w	r2, r2, #1
 8005010:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005012:	e007      	b.n	8005024 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0201 	orr.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005024:	7bfb      	ldrb	r3, [r7, #15]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	40010000 	.word	0x40010000
 8005034:	40010400 	.word	0x40010400
 8005038:	40000400 	.word	0x40000400
 800503c:	40000800 	.word	0x40000800
 8005040:	40000c00 	.word	0x40000c00
 8005044:	40014000 	.word	0x40014000
 8005048:	40001800 	.word	0x40001800

0800504c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b0c      	cmp	r3, #12
 800505e:	d841      	bhi.n	80050e4 <HAL_TIM_PWM_Stop_IT+0x98>
 8005060:	a201      	add	r2, pc, #4	@ (adr r2, 8005068 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8005062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005066:	bf00      	nop
 8005068:	0800509d 	.word	0x0800509d
 800506c:	080050e5 	.word	0x080050e5
 8005070:	080050e5 	.word	0x080050e5
 8005074:	080050e5 	.word	0x080050e5
 8005078:	080050af 	.word	0x080050af
 800507c:	080050e5 	.word	0x080050e5
 8005080:	080050e5 	.word	0x080050e5
 8005084:	080050e5 	.word	0x080050e5
 8005088:	080050c1 	.word	0x080050c1
 800508c:	080050e5 	.word	0x080050e5
 8005090:	080050e5 	.word	0x080050e5
 8005094:	080050e5 	.word	0x080050e5
 8005098:	080050d3 	.word	0x080050d3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0202 	bic.w	r2, r2, #2
 80050aa:	60da      	str	r2, [r3, #12]
      break;
 80050ac:	e01d      	b.n	80050ea <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0204 	bic.w	r2, r2, #4
 80050bc:	60da      	str	r2, [r3, #12]
      break;
 80050be:	e014      	b.n	80050ea <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0208 	bic.w	r2, r2, #8
 80050ce:	60da      	str	r2, [r3, #12]
      break;
 80050d0:	e00b      	b.n	80050ea <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0210 	bic.w	r2, r2, #16
 80050e0:	60da      	str	r2, [r3, #12]
      break;
 80050e2:	e002      	b.n	80050ea <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	73fb      	strb	r3, [r7, #15]
      break;
 80050e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d161      	bne.n	80051b4 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2200      	movs	r2, #0
 80050f6:	6839      	ldr	r1, [r7, #0]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fdfd 	bl	8005cf8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a2f      	ldr	r2, [pc, #188]	@ (80051c0 <HAL_TIM_PWM_Stop_IT+0x174>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d004      	beq.n	8005112 <HAL_TIM_PWM_Stop_IT+0xc6>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a2d      	ldr	r2, [pc, #180]	@ (80051c4 <HAL_TIM_PWM_Stop_IT+0x178>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d101      	bne.n	8005116 <HAL_TIM_PWM_Stop_IT+0xca>
 8005112:	2301      	movs	r3, #1
 8005114:	e000      	b.n	8005118 <HAL_TIM_PWM_Stop_IT+0xcc>
 8005116:	2300      	movs	r3, #0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d017      	beq.n	800514c <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6a1a      	ldr	r2, [r3, #32]
 8005122:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005126:	4013      	ands	r3, r2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10f      	bne.n	800514c <HAL_TIM_PWM_Stop_IT+0x100>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6a1a      	ldr	r2, [r3, #32]
 8005132:	f240 4344 	movw	r3, #1092	@ 0x444
 8005136:	4013      	ands	r3, r2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d107      	bne.n	800514c <HAL_TIM_PWM_Stop_IT+0x100>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800514a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6a1a      	ldr	r2, [r3, #32]
 8005152:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005156:	4013      	ands	r3, r2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10f      	bne.n	800517c <HAL_TIM_PWM_Stop_IT+0x130>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6a1a      	ldr	r2, [r3, #32]
 8005162:	f240 4344 	movw	r3, #1092	@ 0x444
 8005166:	4013      	ands	r3, r2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d107      	bne.n	800517c <HAL_TIM_PWM_Stop_IT+0x130>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0201 	bic.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d104      	bne.n	800518c <HAL_TIM_PWM_Stop_IT+0x140>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800518a:	e013      	b.n	80051b4 <HAL_TIM_PWM_Stop_IT+0x168>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2b04      	cmp	r3, #4
 8005190:	d104      	bne.n	800519c <HAL_TIM_PWM_Stop_IT+0x150>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800519a:	e00b      	b.n	80051b4 <HAL_TIM_PWM_Stop_IT+0x168>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b08      	cmp	r3, #8
 80051a0:	d104      	bne.n	80051ac <HAL_TIM_PWM_Stop_IT+0x160>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051aa:	e003      	b.n	80051b4 <HAL_TIM_PWM_Stop_IT+0x168>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	40010000 	.word	0x40010000
 80051c4:	40010400 	.word	0x40010400

080051c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d020      	beq.n	800522c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01b      	beq.n	800522c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0202 	mvn.w	r2, #2
 80051fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fa65 	bl	80056e2 <HAL_TIM_IC_CaptureCallback>
 8005218:	e005      	b.n	8005226 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fa57 	bl	80056ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7fb fb7d 	bl	8000920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	d020      	beq.n	8005278 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01b      	beq.n	8005278 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0204 	mvn.w	r2, #4
 8005248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2202      	movs	r2, #2
 800524e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fa3f 	bl	80056e2 <HAL_TIM_IC_CaptureCallback>
 8005264:	e005      	b.n	8005272 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fa31 	bl	80056ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7fb fb57 	bl	8000920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f003 0308 	and.w	r3, r3, #8
 800527e:	2b00      	cmp	r3, #0
 8005280:	d020      	beq.n	80052c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01b      	beq.n	80052c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0208 	mvn.w	r2, #8
 8005294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2204      	movs	r2, #4
 800529a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fa19 	bl	80056e2 <HAL_TIM_IC_CaptureCallback>
 80052b0:	e005      	b.n	80052be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fa0b 	bl	80056ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7fb fb31 	bl	8000920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f003 0310 	and.w	r3, r3, #16
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d020      	beq.n	8005310 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f003 0310 	and.w	r3, r3, #16
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01b      	beq.n	8005310 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0210 	mvn.w	r2, #16
 80052e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2208      	movs	r2, #8
 80052e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f9f3 	bl	80056e2 <HAL_TIM_IC_CaptureCallback>
 80052fc:	e005      	b.n	800530a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f9e5 	bl	80056ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7fb fb0b 	bl	8000920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00c      	beq.n	8005334 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d007      	beq.n	8005334 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f06f 0201 	mvn.w	r2, #1
 800532c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f9c3 	bl	80056ba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00c      	beq.n	8005358 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005344:	2b00      	cmp	r3, #0
 8005346:	d007      	beq.n	8005358 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fdce 	bl	8005ef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00c      	beq.n	800537c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005368:	2b00      	cmp	r3, #0
 800536a:	d007      	beq.n	800537c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f9bd 	bl	80056f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00c      	beq.n	80053a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	2b00      	cmp	r3, #0
 800538e:	d007      	beq.n	80053a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0220 	mvn.w	r2, #32
 8005398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fda0 	bl	8005ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053a0:	bf00      	nop
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053c2:	2302      	movs	r3, #2
 80053c4:	e0ae      	b.n	8005524 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b0c      	cmp	r3, #12
 80053d2:	f200 809f 	bhi.w	8005514 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053d6:	a201      	add	r2, pc, #4	@ (adr r2, 80053dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053dc:	08005411 	.word	0x08005411
 80053e0:	08005515 	.word	0x08005515
 80053e4:	08005515 	.word	0x08005515
 80053e8:	08005515 	.word	0x08005515
 80053ec:	08005451 	.word	0x08005451
 80053f0:	08005515 	.word	0x08005515
 80053f4:	08005515 	.word	0x08005515
 80053f8:	08005515 	.word	0x08005515
 80053fc:	08005493 	.word	0x08005493
 8005400:	08005515 	.word	0x08005515
 8005404:	08005515 	.word	0x08005515
 8005408:	08005515 	.word	0x08005515
 800540c:	080054d3 	.word	0x080054d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	4618      	mov	r0, r3
 8005418:	f000 fa24 	bl	8005864 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0208 	orr.w	r2, r2, #8
 800542a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0204 	bic.w	r2, r2, #4
 800543a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6999      	ldr	r1, [r3, #24]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	691a      	ldr	r2, [r3, #16]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	619a      	str	r2, [r3, #24]
      break;
 800544e:	e064      	b.n	800551a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fa74 	bl	8005944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699a      	ldr	r2, [r3, #24]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800546a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800547a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6999      	ldr	r1, [r3, #24]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	021a      	lsls	r2, r3, #8
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	619a      	str	r2, [r3, #24]
      break;
 8005490:	e043      	b.n	800551a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68b9      	ldr	r1, [r7, #8]
 8005498:	4618      	mov	r0, r3
 800549a:	f000 fac9 	bl	8005a30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69da      	ldr	r2, [r3, #28]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f042 0208 	orr.w	r2, r2, #8
 80054ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0204 	bic.w	r2, r2, #4
 80054bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69d9      	ldr	r1, [r3, #28]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	61da      	str	r2, [r3, #28]
      break;
 80054d0:	e023      	b.n	800551a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68b9      	ldr	r1, [r7, #8]
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fb1d 	bl	8005b18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69da      	ldr	r2, [r3, #28]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69d9      	ldr	r1, [r3, #28]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	021a      	lsls	r2, r3, #8
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	61da      	str	r2, [r3, #28]
      break;
 8005512:	e002      	b.n	800551a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	75fb      	strb	r3, [r7, #23]
      break;
 8005518:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005522:	7dfb      	ldrb	r3, [r7, #23]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_TIM_ConfigClockSource+0x1c>
 8005544:	2302      	movs	r3, #2
 8005546:	e0b4      	b.n	80056b2 <HAL_TIM_ConfigClockSource+0x186>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800556e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005580:	d03e      	beq.n	8005600 <HAL_TIM_ConfigClockSource+0xd4>
 8005582:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005586:	f200 8087 	bhi.w	8005698 <HAL_TIM_ConfigClockSource+0x16c>
 800558a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800558e:	f000 8086 	beq.w	800569e <HAL_TIM_ConfigClockSource+0x172>
 8005592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005596:	d87f      	bhi.n	8005698 <HAL_TIM_ConfigClockSource+0x16c>
 8005598:	2b70      	cmp	r3, #112	@ 0x70
 800559a:	d01a      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0xa6>
 800559c:	2b70      	cmp	r3, #112	@ 0x70
 800559e:	d87b      	bhi.n	8005698 <HAL_TIM_ConfigClockSource+0x16c>
 80055a0:	2b60      	cmp	r3, #96	@ 0x60
 80055a2:	d050      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0x11a>
 80055a4:	2b60      	cmp	r3, #96	@ 0x60
 80055a6:	d877      	bhi.n	8005698 <HAL_TIM_ConfigClockSource+0x16c>
 80055a8:	2b50      	cmp	r3, #80	@ 0x50
 80055aa:	d03c      	beq.n	8005626 <HAL_TIM_ConfigClockSource+0xfa>
 80055ac:	2b50      	cmp	r3, #80	@ 0x50
 80055ae:	d873      	bhi.n	8005698 <HAL_TIM_ConfigClockSource+0x16c>
 80055b0:	2b40      	cmp	r3, #64	@ 0x40
 80055b2:	d058      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0x13a>
 80055b4:	2b40      	cmp	r3, #64	@ 0x40
 80055b6:	d86f      	bhi.n	8005698 <HAL_TIM_ConfigClockSource+0x16c>
 80055b8:	2b30      	cmp	r3, #48	@ 0x30
 80055ba:	d064      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0x15a>
 80055bc:	2b30      	cmp	r3, #48	@ 0x30
 80055be:	d86b      	bhi.n	8005698 <HAL_TIM_ConfigClockSource+0x16c>
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	d060      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0x15a>
 80055c4:	2b20      	cmp	r3, #32
 80055c6:	d867      	bhi.n	8005698 <HAL_TIM_ConfigClockSource+0x16c>
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d05c      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0x15a>
 80055cc:	2b10      	cmp	r3, #16
 80055ce:	d05a      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0x15a>
 80055d0:	e062      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055e2:	f000 fb69 	bl	8005cb8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80055f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	609a      	str	r2, [r3, #8]
      break;
 80055fe:	e04f      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005610:	f000 fb52 	bl	8005cb8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689a      	ldr	r2, [r3, #8]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005622:	609a      	str	r2, [r3, #8]
      break;
 8005624:	e03c      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005632:	461a      	mov	r2, r3
 8005634:	f000 fac6 	bl	8005bc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2150      	movs	r1, #80	@ 0x50
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fb1f 	bl	8005c82 <TIM_ITRx_SetConfig>
      break;
 8005644:	e02c      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005652:	461a      	mov	r2, r3
 8005654:	f000 fae5 	bl	8005c22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2160      	movs	r1, #96	@ 0x60
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fb0f 	bl	8005c82 <TIM_ITRx_SetConfig>
      break;
 8005664:	e01c      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005672:	461a      	mov	r2, r3
 8005674:	f000 faa6 	bl	8005bc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2140      	movs	r1, #64	@ 0x40
 800567e:	4618      	mov	r0, r3
 8005680:	f000 faff 	bl	8005c82 <TIM_ITRx_SetConfig>
      break;
 8005684:	e00c      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4619      	mov	r1, r3
 8005690:	4610      	mov	r0, r2
 8005692:	f000 faf6 	bl	8005c82 <TIM_ITRx_SetConfig>
      break;
 8005696:	e003      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	73fb      	strb	r3, [r7, #15]
      break;
 800569c:	e000      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800569e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80056c2:	bf00      	nop
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b083      	sub	sp, #12
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056d6:	bf00      	nop
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
	...

0800570c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a46      	ldr	r2, [pc, #280]	@ (8005838 <TIM_Base_SetConfig+0x12c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d013      	beq.n	800574c <TIM_Base_SetConfig+0x40>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800572a:	d00f      	beq.n	800574c <TIM_Base_SetConfig+0x40>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a43      	ldr	r2, [pc, #268]	@ (800583c <TIM_Base_SetConfig+0x130>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00b      	beq.n	800574c <TIM_Base_SetConfig+0x40>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a42      	ldr	r2, [pc, #264]	@ (8005840 <TIM_Base_SetConfig+0x134>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d007      	beq.n	800574c <TIM_Base_SetConfig+0x40>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a41      	ldr	r2, [pc, #260]	@ (8005844 <TIM_Base_SetConfig+0x138>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d003      	beq.n	800574c <TIM_Base_SetConfig+0x40>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a40      	ldr	r2, [pc, #256]	@ (8005848 <TIM_Base_SetConfig+0x13c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d108      	bne.n	800575e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a35      	ldr	r2, [pc, #212]	@ (8005838 <TIM_Base_SetConfig+0x12c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d02b      	beq.n	80057be <TIM_Base_SetConfig+0xb2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800576c:	d027      	beq.n	80057be <TIM_Base_SetConfig+0xb2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a32      	ldr	r2, [pc, #200]	@ (800583c <TIM_Base_SetConfig+0x130>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d023      	beq.n	80057be <TIM_Base_SetConfig+0xb2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a31      	ldr	r2, [pc, #196]	@ (8005840 <TIM_Base_SetConfig+0x134>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d01f      	beq.n	80057be <TIM_Base_SetConfig+0xb2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a30      	ldr	r2, [pc, #192]	@ (8005844 <TIM_Base_SetConfig+0x138>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d01b      	beq.n	80057be <TIM_Base_SetConfig+0xb2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a2f      	ldr	r2, [pc, #188]	@ (8005848 <TIM_Base_SetConfig+0x13c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d017      	beq.n	80057be <TIM_Base_SetConfig+0xb2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a2e      	ldr	r2, [pc, #184]	@ (800584c <TIM_Base_SetConfig+0x140>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d013      	beq.n	80057be <TIM_Base_SetConfig+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a2d      	ldr	r2, [pc, #180]	@ (8005850 <TIM_Base_SetConfig+0x144>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00f      	beq.n	80057be <TIM_Base_SetConfig+0xb2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a2c      	ldr	r2, [pc, #176]	@ (8005854 <TIM_Base_SetConfig+0x148>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00b      	beq.n	80057be <TIM_Base_SetConfig+0xb2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005858 <TIM_Base_SetConfig+0x14c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d007      	beq.n	80057be <TIM_Base_SetConfig+0xb2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a2a      	ldr	r2, [pc, #168]	@ (800585c <TIM_Base_SetConfig+0x150>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d003      	beq.n	80057be <TIM_Base_SetConfig+0xb2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a29      	ldr	r2, [pc, #164]	@ (8005860 <TIM_Base_SetConfig+0x154>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d108      	bne.n	80057d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a10      	ldr	r2, [pc, #64]	@ (8005838 <TIM_Base_SetConfig+0x12c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_Base_SetConfig+0xf8>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a12      	ldr	r2, [pc, #72]	@ (8005848 <TIM_Base_SetConfig+0x13c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d103      	bne.n	800580c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	691a      	ldr	r2, [r3, #16]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b01      	cmp	r3, #1
 800581c:	d105      	bne.n	800582a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f023 0201 	bic.w	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	611a      	str	r2, [r3, #16]
  }
}
 800582a:	bf00      	nop
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40010000 	.word	0x40010000
 800583c:	40000400 	.word	0x40000400
 8005840:	40000800 	.word	0x40000800
 8005844:	40000c00 	.word	0x40000c00
 8005848:	40010400 	.word	0x40010400
 800584c:	40014000 	.word	0x40014000
 8005850:	40014400 	.word	0x40014400
 8005854:	40014800 	.word	0x40014800
 8005858:	40001800 	.word	0x40001800
 800585c:	40001c00 	.word	0x40001c00
 8005860:	40002000 	.word	0x40002000

08005864 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	f023 0201 	bic.w	r2, r3, #1
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0303 	bic.w	r3, r3, #3
 800589a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f023 0302 	bic.w	r3, r3, #2
 80058ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a20      	ldr	r2, [pc, #128]	@ (800593c <TIM_OC1_SetConfig+0xd8>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d003      	beq.n	80058c8 <TIM_OC1_SetConfig+0x64>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005940 <TIM_OC1_SetConfig+0xdc>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d10c      	bne.n	80058e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f023 0308 	bic.w	r3, r3, #8
 80058ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f023 0304 	bic.w	r3, r3, #4
 80058e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a15      	ldr	r2, [pc, #84]	@ (800593c <TIM_OC1_SetConfig+0xd8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d003      	beq.n	80058f2 <TIM_OC1_SetConfig+0x8e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a14      	ldr	r2, [pc, #80]	@ (8005940 <TIM_OC1_SetConfig+0xdc>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d111      	bne.n	8005916 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	4313      	orrs	r3, r2
 800590a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	4313      	orrs	r3, r2
 8005914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	621a      	str	r2, [r3, #32]
}
 8005930:	bf00      	nop
 8005932:	371c      	adds	r7, #28
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	40010000 	.word	0x40010000
 8005940:	40010400 	.word	0x40010400

08005944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	f023 0210 	bic.w	r2, r3, #16
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800597a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	021b      	lsls	r3, r3, #8
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	4313      	orrs	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f023 0320 	bic.w	r3, r3, #32
 800598e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	4313      	orrs	r3, r2
 800599a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a22      	ldr	r2, [pc, #136]	@ (8005a28 <TIM_OC2_SetConfig+0xe4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d003      	beq.n	80059ac <TIM_OC2_SetConfig+0x68>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a21      	ldr	r2, [pc, #132]	@ (8005a2c <TIM_OC2_SetConfig+0xe8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d10d      	bne.n	80059c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	4313      	orrs	r3, r2
 80059be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a17      	ldr	r2, [pc, #92]	@ (8005a28 <TIM_OC2_SetConfig+0xe4>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_OC2_SetConfig+0x94>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a16      	ldr	r2, [pc, #88]	@ (8005a2c <TIM_OC2_SetConfig+0xe8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d113      	bne.n	8005a00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	621a      	str	r2, [r3, #32]
}
 8005a1a:	bf00      	nop
 8005a1c:	371c      	adds	r7, #28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	40010000 	.word	0x40010000
 8005a2c:	40010400 	.word	0x40010400

08005a30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0303 	bic.w	r3, r3, #3
 8005a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	021b      	lsls	r3, r3, #8
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a21      	ldr	r2, [pc, #132]	@ (8005b10 <TIM_OC3_SetConfig+0xe0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d003      	beq.n	8005a96 <TIM_OC3_SetConfig+0x66>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a20      	ldr	r2, [pc, #128]	@ (8005b14 <TIM_OC3_SetConfig+0xe4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d10d      	bne.n	8005ab2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	021b      	lsls	r3, r3, #8
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a16      	ldr	r2, [pc, #88]	@ (8005b10 <TIM_OC3_SetConfig+0xe0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d003      	beq.n	8005ac2 <TIM_OC3_SetConfig+0x92>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a15      	ldr	r2, [pc, #84]	@ (8005b14 <TIM_OC3_SetConfig+0xe4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d113      	bne.n	8005aea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	011b      	lsls	r3, r3, #4
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	621a      	str	r2, [r3, #32]
}
 8005b04:	bf00      	nop
 8005b06:	371c      	adds	r7, #28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	40010000 	.word	0x40010000
 8005b14:	40010400 	.word	0x40010400

08005b18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	021b      	lsls	r3, r3, #8
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	031b      	lsls	r3, r3, #12
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a12      	ldr	r2, [pc, #72]	@ (8005bbc <TIM_OC4_SetConfig+0xa4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d003      	beq.n	8005b80 <TIM_OC4_SetConfig+0x68>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a11      	ldr	r2, [pc, #68]	@ (8005bc0 <TIM_OC4_SetConfig+0xa8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d109      	bne.n	8005b94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	019b      	lsls	r3, r3, #6
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	621a      	str	r2, [r3, #32]
}
 8005bae:	bf00      	nop
 8005bb0:	371c      	adds	r7, #28
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40010000 	.word	0x40010000
 8005bc0:	40010400 	.word	0x40010400

08005bc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f023 0201 	bic.w	r2, r3, #1
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f023 030a 	bic.w	r3, r3, #10
 8005c00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	621a      	str	r2, [r3, #32]
}
 8005c16:	bf00      	nop
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b087      	sub	sp, #28
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	60f8      	str	r0, [r7, #12]
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	f023 0210 	bic.w	r2, r3, #16
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	031b      	lsls	r3, r3, #12
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	621a      	str	r2, [r3, #32]
}
 8005c76:	bf00      	nop
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b085      	sub	sp, #20
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	f043 0307 	orr.w	r3, r3, #7
 8005ca4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	609a      	str	r2, [r3, #8]
}
 8005cac:	bf00      	nop
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	021a      	lsls	r2, r3, #8
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	609a      	str	r2, [r3, #8]
}
 8005cec:	bf00      	nop
 8005cee:	371c      	adds	r7, #28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f003 031f 	and.w	r3, r3, #31
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a1a      	ldr	r2, [r3, #32]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	43db      	mvns	r3, r3
 8005d1a:	401a      	ands	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6a1a      	ldr	r2, [r3, #32]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f003 031f 	and.w	r3, r3, #31
 8005d2a:	6879      	ldr	r1, [r7, #4]
 8005d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d30:	431a      	orrs	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	621a      	str	r2, [r3, #32]
}
 8005d36:	bf00      	nop
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
	...

08005d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e05a      	b.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a21      	ldr	r2, [pc, #132]	@ (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d022      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005da8:	d01d      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a1d      	ldr	r2, [pc, #116]	@ (8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d018      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d013      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00e      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a18      	ldr	r2, [pc, #96]	@ (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d009      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a17      	ldr	r2, [pc, #92]	@ (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d004      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a15      	ldr	r2, [pc, #84]	@ (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d10c      	bne.n	8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	40010000 	.word	0x40010000
 8005e24:	40000400 	.word	0x40000400
 8005e28:	40000800 	.word	0x40000800
 8005e2c:	40000c00 	.word	0x40000c00
 8005e30:	40010400 	.word	0x40010400
 8005e34:	40014000 	.word	0x40014000
 8005e38:	40001800 	.word	0x40001800

08005e3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e03d      	b.n	8005ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f08:	b084      	sub	sp, #16
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	f107 001c 	add.w	r0, r7, #28
 8005f16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f1a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d123      	bne.n	8005f6a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005f36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d105      	bne.n	8005f5e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f001 fae8 	bl	8007534 <USB_CoreReset>
 8005f64:	4603      	mov	r3, r0
 8005f66:	73fb      	strb	r3, [r7, #15]
 8005f68:	e01b      	b.n	8005fa2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f001 fadc 	bl	8007534 <USB_CoreReset>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f80:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d106      	bne.n	8005f96 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f94:	e005      	b.n	8005fa2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005fa2:	7fbb      	ldrb	r3, [r7, #30]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d10b      	bne.n	8005fc0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f043 0206 	orr.w	r2, r3, #6
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f043 0220 	orr.w	r2, r3, #32
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fcc:	b004      	add	sp, #16
 8005fce:	4770      	bx	lr

08005fd0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005fde:	79fb      	ldrb	r3, [r7, #7]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d165      	bne.n	80060b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	4a41      	ldr	r2, [pc, #260]	@ (80060ec <USB_SetTurnaroundTime+0x11c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d906      	bls.n	8005ffa <USB_SetTurnaroundTime+0x2a>
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4a40      	ldr	r2, [pc, #256]	@ (80060f0 <USB_SetTurnaroundTime+0x120>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d202      	bcs.n	8005ffa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005ff4:	230f      	movs	r3, #15
 8005ff6:	617b      	str	r3, [r7, #20]
 8005ff8:	e062      	b.n	80060c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	4a3c      	ldr	r2, [pc, #240]	@ (80060f0 <USB_SetTurnaroundTime+0x120>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d306      	bcc.n	8006010 <USB_SetTurnaroundTime+0x40>
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	4a3b      	ldr	r2, [pc, #236]	@ (80060f4 <USB_SetTurnaroundTime+0x124>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d202      	bcs.n	8006010 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800600a:	230e      	movs	r3, #14
 800600c:	617b      	str	r3, [r7, #20]
 800600e:	e057      	b.n	80060c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4a38      	ldr	r2, [pc, #224]	@ (80060f4 <USB_SetTurnaroundTime+0x124>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d306      	bcc.n	8006026 <USB_SetTurnaroundTime+0x56>
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	4a37      	ldr	r2, [pc, #220]	@ (80060f8 <USB_SetTurnaroundTime+0x128>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d202      	bcs.n	8006026 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006020:	230d      	movs	r3, #13
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	e04c      	b.n	80060c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	4a33      	ldr	r2, [pc, #204]	@ (80060f8 <USB_SetTurnaroundTime+0x128>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d306      	bcc.n	800603c <USB_SetTurnaroundTime+0x6c>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	4a32      	ldr	r2, [pc, #200]	@ (80060fc <USB_SetTurnaroundTime+0x12c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d802      	bhi.n	800603c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006036:	230c      	movs	r3, #12
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	e041      	b.n	80060c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4a2f      	ldr	r2, [pc, #188]	@ (80060fc <USB_SetTurnaroundTime+0x12c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d906      	bls.n	8006052 <USB_SetTurnaroundTime+0x82>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4a2e      	ldr	r2, [pc, #184]	@ (8006100 <USB_SetTurnaroundTime+0x130>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d802      	bhi.n	8006052 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800604c:	230b      	movs	r3, #11
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e036      	b.n	80060c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	4a2a      	ldr	r2, [pc, #168]	@ (8006100 <USB_SetTurnaroundTime+0x130>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d906      	bls.n	8006068 <USB_SetTurnaroundTime+0x98>
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	4a29      	ldr	r2, [pc, #164]	@ (8006104 <USB_SetTurnaroundTime+0x134>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d802      	bhi.n	8006068 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006062:	230a      	movs	r3, #10
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	e02b      	b.n	80060c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	4a26      	ldr	r2, [pc, #152]	@ (8006104 <USB_SetTurnaroundTime+0x134>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d906      	bls.n	800607e <USB_SetTurnaroundTime+0xae>
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4a25      	ldr	r2, [pc, #148]	@ (8006108 <USB_SetTurnaroundTime+0x138>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d202      	bcs.n	800607e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006078:	2309      	movs	r3, #9
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	e020      	b.n	80060c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	4a21      	ldr	r2, [pc, #132]	@ (8006108 <USB_SetTurnaroundTime+0x138>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d306      	bcc.n	8006094 <USB_SetTurnaroundTime+0xc4>
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	4a20      	ldr	r2, [pc, #128]	@ (800610c <USB_SetTurnaroundTime+0x13c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d802      	bhi.n	8006094 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800608e:	2308      	movs	r3, #8
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	e015      	b.n	80060c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	4a1d      	ldr	r2, [pc, #116]	@ (800610c <USB_SetTurnaroundTime+0x13c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d906      	bls.n	80060aa <USB_SetTurnaroundTime+0xda>
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4a1c      	ldr	r2, [pc, #112]	@ (8006110 <USB_SetTurnaroundTime+0x140>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d202      	bcs.n	80060aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80060a4:	2307      	movs	r3, #7
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	e00a      	b.n	80060c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80060aa:	2306      	movs	r3, #6
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	e007      	b.n	80060c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d102      	bne.n	80060bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80060b6:	2309      	movs	r3, #9
 80060b8:	617b      	str	r3, [r7, #20]
 80060ba:	e001      	b.n	80060c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80060bc:	2309      	movs	r3, #9
 80060be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	029b      	lsls	r3, r3, #10
 80060d4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80060d8:	431a      	orrs	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	00d8acbf 	.word	0x00d8acbf
 80060f0:	00e4e1c0 	.word	0x00e4e1c0
 80060f4:	00f42400 	.word	0x00f42400
 80060f8:	01067380 	.word	0x01067380
 80060fc:	011a499f 	.word	0x011a499f
 8006100:	01312cff 	.word	0x01312cff
 8006104:	014ca43f 	.word	0x014ca43f
 8006108:	016e3600 	.word	0x016e3600
 800610c:	01a6ab1f 	.word	0x01a6ab1f
 8006110:	01e84800 	.word	0x01e84800

08006114 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f043 0201 	orr.w	r2, r3, #1
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f023 0201 	bic.w	r2, r3, #1
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d115      	bne.n	80061a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006186:	200a      	movs	r0, #10
 8006188:	f7fb fa44 	bl	8001614 <HAL_Delay>
      ms += 10U;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	330a      	adds	r3, #10
 8006190:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f001 f93f 	bl	8007416 <USB_GetMode>
 8006198:	4603      	mov	r3, r0
 800619a:	2b01      	cmp	r3, #1
 800619c:	d01e      	beq.n	80061dc <USB_SetCurrentMode+0x84>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80061a2:	d9f0      	bls.n	8006186 <USB_SetCurrentMode+0x2e>
 80061a4:	e01a      	b.n	80061dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d115      	bne.n	80061d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061b8:	200a      	movs	r0, #10
 80061ba:	f7fb fa2b 	bl	8001614 <HAL_Delay>
      ms += 10U;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	330a      	adds	r3, #10
 80061c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f001 f926 	bl	8007416 <USB_GetMode>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d005      	beq.n	80061dc <USB_SetCurrentMode+0x84>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2bc7      	cmp	r3, #199	@ 0xc7
 80061d4:	d9f0      	bls.n	80061b8 <USB_SetCurrentMode+0x60>
 80061d6:	e001      	b.n	80061dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e005      	b.n	80061e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2bc8      	cmp	r3, #200	@ 0xc8
 80061e0:	d101      	bne.n	80061e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e000      	b.n	80061e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061f0:	b084      	sub	sp, #16
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b086      	sub	sp, #24
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80061fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800620a:	2300      	movs	r3, #0
 800620c:	613b      	str	r3, [r7, #16]
 800620e:	e009      	b.n	8006224 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	3340      	adds	r3, #64	@ 0x40
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	2200      	movs	r2, #0
 800621c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	3301      	adds	r3, #1
 8006222:	613b      	str	r3, [r7, #16]
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	2b0e      	cmp	r3, #14
 8006228:	d9f2      	bls.n	8006210 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800622a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800622e:	2b00      	cmp	r3, #0
 8006230:	d11c      	bne.n	800626c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006240:	f043 0302 	orr.w	r3, r3, #2
 8006244:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006256:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006262:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	639a      	str	r2, [r3, #56]	@ 0x38
 800626a:	e00b      	b.n	8006284 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006270:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800627c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800628a:	461a      	mov	r2, r3
 800628c:	2300      	movs	r3, #0
 800628e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006290:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006294:	2b01      	cmp	r3, #1
 8006296:	d10d      	bne.n	80062b4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006298:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800629c:	2b00      	cmp	r3, #0
 800629e:	d104      	bne.n	80062aa <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062a0:	2100      	movs	r1, #0
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f968 	bl	8006578 <USB_SetDevSpeed>
 80062a8:	e008      	b.n	80062bc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062aa:	2101      	movs	r1, #1
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f963 	bl	8006578 <USB_SetDevSpeed>
 80062b2:	e003      	b.n	80062bc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062b4:	2103      	movs	r1, #3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f95e 	bl	8006578 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062bc:	2110      	movs	r1, #16
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f8fa 	bl	80064b8 <USB_FlushTxFifo>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f924 	bl	800651c <USB_FlushRxFifo>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062e4:	461a      	mov	r2, r3
 80062e6:	2300      	movs	r3, #0
 80062e8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062f0:	461a      	mov	r2, r3
 80062f2:	2300      	movs	r3, #0
 80062f4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062fc:	461a      	mov	r2, r3
 80062fe:	2300      	movs	r3, #0
 8006300:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006302:	2300      	movs	r3, #0
 8006304:	613b      	str	r3, [r7, #16]
 8006306:	e043      	b.n	8006390 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800631a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800631e:	d118      	bne.n	8006352 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10a      	bne.n	800633c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006332:	461a      	mov	r2, r3
 8006334:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	e013      	b.n	8006364 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006348:	461a      	mov	r2, r3
 800634a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	e008      	b.n	8006364 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800635e:	461a      	mov	r2, r3
 8006360:	2300      	movs	r3, #0
 8006362:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006370:	461a      	mov	r2, r3
 8006372:	2300      	movs	r3, #0
 8006374:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	015a      	lsls	r2, r3, #5
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4413      	add	r3, r2
 800637e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006382:	461a      	mov	r2, r3
 8006384:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006388:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	3301      	adds	r3, #1
 800638e:	613b      	str	r3, [r7, #16]
 8006390:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006394:	461a      	mov	r2, r3
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	4293      	cmp	r3, r2
 800639a:	d3b5      	bcc.n	8006308 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800639c:	2300      	movs	r3, #0
 800639e:	613b      	str	r3, [r7, #16]
 80063a0:	e043      	b.n	800642a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063b8:	d118      	bne.n	80063ec <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10a      	bne.n	80063d6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063cc:	461a      	mov	r2, r3
 80063ce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	e013      	b.n	80063fe <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e2:	461a      	mov	r2, r3
 80063e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063e8:	6013      	str	r3, [r2, #0]
 80063ea:	e008      	b.n	80063fe <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f8:	461a      	mov	r2, r3
 80063fa:	2300      	movs	r3, #0
 80063fc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800640a:	461a      	mov	r2, r3
 800640c:	2300      	movs	r3, #0
 800640e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800641c:	461a      	mov	r2, r3
 800641e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006422:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	3301      	adds	r3, #1
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800642e:	461a      	mov	r2, r3
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	4293      	cmp	r3, r2
 8006434:	d3b5      	bcc.n	80063a2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006448:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006456:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006458:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800645c:	2b00      	cmp	r3, #0
 800645e:	d105      	bne.n	800646c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	f043 0210 	orr.w	r2, r3, #16
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	699a      	ldr	r2, [r3, #24]
 8006470:	4b10      	ldr	r3, [pc, #64]	@ (80064b4 <USB_DevInit+0x2c4>)
 8006472:	4313      	orrs	r3, r2
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006478:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800647c:	2b00      	cmp	r3, #0
 800647e:	d005      	beq.n	800648c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	f043 0208 	orr.w	r2, r3, #8
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800648c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006490:	2b01      	cmp	r3, #1
 8006492:	d107      	bne.n	80064a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800649c:	f043 0304 	orr.w	r3, r3, #4
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064b0:	b004      	add	sp, #16
 80064b2:	4770      	bx	lr
 80064b4:	803c3800 	.word	0x803c3800

080064b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	3301      	adds	r3, #1
 80064ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064d2:	d901      	bls.n	80064d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e01b      	b.n	8006510 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	daf2      	bge.n	80064c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	019b      	lsls	r3, r3, #6
 80064e8:	f043 0220 	orr.w	r2, r3, #32
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	3301      	adds	r3, #1
 80064f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064fc:	d901      	bls.n	8006502 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e006      	b.n	8006510 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b20      	cmp	r3, #32
 800650c:	d0f0      	beq.n	80064f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3301      	adds	r3, #1
 800652c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006534:	d901      	bls.n	800653a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e018      	b.n	800656c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	daf2      	bge.n	8006528 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2210      	movs	r2, #16
 800654a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	3301      	adds	r3, #1
 8006550:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006558:	d901      	bls.n	800655e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e006      	b.n	800656c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f003 0310 	and.w	r3, r3, #16
 8006566:	2b10      	cmp	r3, #16
 8006568:	d0f0      	beq.n	800654c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	460b      	mov	r3, r1
 8006582:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	78fb      	ldrb	r3, [r7, #3]
 8006592:	68f9      	ldr	r1, [r7, #12]
 8006594:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006598:	4313      	orrs	r3, r2
 800659a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b087      	sub	sp, #28
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f003 0306 	and.w	r3, r3, #6
 80065c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d102      	bne.n	80065d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80065ca:	2300      	movs	r3, #0
 80065cc:	75fb      	strb	r3, [r7, #23]
 80065ce:	e00a      	b.n	80065e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d002      	beq.n	80065dc <USB_GetDevSpeed+0x32>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b06      	cmp	r3, #6
 80065da:	d102      	bne.n	80065e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80065dc:	2302      	movs	r3, #2
 80065de:	75fb      	strb	r3, [r7, #23]
 80065e0:	e001      	b.n	80065e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80065e2:	230f      	movs	r3, #15
 80065e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80065e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	371c      	adds	r7, #28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	785b      	ldrb	r3, [r3, #1]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d13a      	bne.n	8006686 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006616:	69da      	ldr	r2, [r3, #28]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	f003 030f 	and.w	r3, r3, #15
 8006620:	2101      	movs	r1, #1
 8006622:	fa01 f303 	lsl.w	r3, r1, r3
 8006626:	b29b      	uxth	r3, r3
 8006628:	68f9      	ldr	r1, [r7, #12]
 800662a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800662e:	4313      	orrs	r3, r2
 8006630:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4413      	add	r3, r2
 800663a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d155      	bne.n	80066f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	791b      	ldrb	r3, [r3, #4]
 8006662:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006664:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	059b      	lsls	r3, r3, #22
 800666a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800666c:	4313      	orrs	r3, r2
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	0151      	lsls	r1, r2, #5
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	440a      	add	r2, r1
 8006676:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800667a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800667e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006682:	6013      	str	r3, [r2, #0]
 8006684:	e036      	b.n	80066f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800668c:	69da      	ldr	r2, [r3, #28]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	f003 030f 	and.w	r3, r3, #15
 8006696:	2101      	movs	r1, #1
 8006698:	fa01 f303 	lsl.w	r3, r1, r3
 800669c:	041b      	lsls	r3, r3, #16
 800669e:	68f9      	ldr	r1, [r7, #12]
 80066a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066a4:	4313      	orrs	r3, r2
 80066a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d11a      	bne.n	80066f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	791b      	ldrb	r3, [r3, #4]
 80066d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80066da:	430b      	orrs	r3, r1
 80066dc:	4313      	orrs	r3, r2
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	0151      	lsls	r1, r2, #5
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	440a      	add	r2, r1
 80066e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
	...

08006704 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	785b      	ldrb	r3, [r3, #1]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d161      	bne.n	80067e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006732:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006736:	d11f      	bne.n	8006778 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	0151      	lsls	r1, r2, #5
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	440a      	add	r2, r1
 800674e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006752:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006756:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	0151      	lsls	r1, r2, #5
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	440a      	add	r2, r1
 800676e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006772:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006776:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800677e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	f003 030f 	and.w	r3, r3, #15
 8006788:	2101      	movs	r1, #1
 800678a:	fa01 f303 	lsl.w	r3, r1, r3
 800678e:	b29b      	uxth	r3, r3
 8006790:	43db      	mvns	r3, r3
 8006792:	68f9      	ldr	r1, [r7, #12]
 8006794:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006798:	4013      	ands	r3, r2
 800679a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067a2:	69da      	ldr	r2, [r3, #28]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	f003 030f 	and.w	r3, r3, #15
 80067ac:	2101      	movs	r1, #1
 80067ae:	fa01 f303 	lsl.w	r3, r1, r3
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	43db      	mvns	r3, r3
 80067b6:	68f9      	ldr	r1, [r7, #12]
 80067b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067bc:	4013      	ands	r3, r2
 80067be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	0159      	lsls	r1, r3, #5
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	440b      	add	r3, r1
 80067d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067da:	4619      	mov	r1, r3
 80067dc:	4b35      	ldr	r3, [pc, #212]	@ (80068b4 <USB_DeactivateEndpoint+0x1b0>)
 80067de:	4013      	ands	r3, r2
 80067e0:	600b      	str	r3, [r1, #0]
 80067e2:	e060      	b.n	80068a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067fa:	d11f      	bne.n	800683c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	0151      	lsls	r1, r2, #5
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	440a      	add	r2, r1
 8006812:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006816:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800681a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	0151      	lsls	r1, r2, #5
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	440a      	add	r2, r1
 8006832:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006836:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800683a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006842:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	f003 030f 	and.w	r3, r3, #15
 800684c:	2101      	movs	r1, #1
 800684e:	fa01 f303 	lsl.w	r3, r1, r3
 8006852:	041b      	lsls	r3, r3, #16
 8006854:	43db      	mvns	r3, r3
 8006856:	68f9      	ldr	r1, [r7, #12]
 8006858:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800685c:	4013      	ands	r3, r2
 800685e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006866:	69da      	ldr	r2, [r3, #28]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	f003 030f 	and.w	r3, r3, #15
 8006870:	2101      	movs	r1, #1
 8006872:	fa01 f303 	lsl.w	r3, r1, r3
 8006876:	041b      	lsls	r3, r3, #16
 8006878:	43db      	mvns	r3, r3
 800687a:	68f9      	ldr	r1, [r7, #12]
 800687c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006880:	4013      	ands	r3, r2
 8006882:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	0159      	lsls	r1, r3, #5
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	440b      	add	r3, r1
 800689a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800689e:	4619      	mov	r1, r3
 80068a0:	4b05      	ldr	r3, [pc, #20]	@ (80068b8 <USB_DeactivateEndpoint+0x1b4>)
 80068a2:	4013      	ands	r3, r2
 80068a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	ec337800 	.word	0xec337800
 80068b8:	eff37800 	.word	0xeff37800

080068bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08a      	sub	sp, #40	@ 0x28
 80068c0:	af02      	add	r7, sp, #8
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	4613      	mov	r3, r2
 80068c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	785b      	ldrb	r3, [r3, #1]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	f040 817f 	bne.w	8006bdc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d132      	bne.n	800694c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	0151      	lsls	r1, r2, #5
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	440a      	add	r2, r1
 80068fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006900:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006904:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006908:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	0151      	lsls	r1, r2, #5
 800691c:	69fa      	ldr	r2, [r7, #28]
 800691e:	440a      	add	r2, r1
 8006920:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006924:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006928:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	4413      	add	r3, r2
 8006932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	0151      	lsls	r1, r2, #5
 800693c:	69fa      	ldr	r2, [r7, #28]
 800693e:	440a      	add	r2, r1
 8006940:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006944:	0cdb      	lsrs	r3, r3, #19
 8006946:	04db      	lsls	r3, r3, #19
 8006948:	6113      	str	r3, [r2, #16]
 800694a:	e097      	b.n	8006a7c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	69ba      	ldr	r2, [r7, #24]
 800695c:	0151      	lsls	r1, r2, #5
 800695e:	69fa      	ldr	r2, [r7, #28]
 8006960:	440a      	add	r2, r1
 8006962:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006966:	0cdb      	lsrs	r3, r3, #19
 8006968:	04db      	lsls	r3, r3, #19
 800696a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	0151      	lsls	r1, r2, #5
 800697e:	69fa      	ldr	r2, [r7, #28]
 8006980:	440a      	add	r2, r1
 8006982:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006986:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800698a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800698e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d11a      	bne.n	80069cc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	691a      	ldr	r2, [r3, #16]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d903      	bls.n	80069aa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	689a      	ldr	r2, [r3, #8]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	0151      	lsls	r1, r2, #5
 80069bc:	69fa      	ldr	r2, [r7, #28]
 80069be:	440a      	add	r2, r1
 80069c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80069c8:	6113      	str	r3, [r2, #16]
 80069ca:	e044      	b.n	8006a56 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	691a      	ldr	r2, [r3, #16]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	4413      	add	r3, r2
 80069d6:	1e5a      	subs	r2, r3, #1
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ee:	691a      	ldr	r2, [r3, #16]
 80069f0:	8afb      	ldrh	r3, [r7, #22]
 80069f2:	04d9      	lsls	r1, r3, #19
 80069f4:	4ba4      	ldr	r3, [pc, #656]	@ (8006c88 <USB_EPStartXfer+0x3cc>)
 80069f6:	400b      	ands	r3, r1
 80069f8:	69b9      	ldr	r1, [r7, #24]
 80069fa:	0148      	lsls	r0, r1, #5
 80069fc:	69f9      	ldr	r1, [r7, #28]
 80069fe:	4401      	add	r1, r0
 8006a00:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a04:	4313      	orrs	r3, r2
 8006a06:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	791b      	ldrb	r3, [r3, #4]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d122      	bne.n	8006a56 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	0151      	lsls	r1, r2, #5
 8006a22:	69fa      	ldr	r2, [r7, #28]
 8006a24:	440a      	add	r2, r1
 8006a26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a2a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006a2e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a3c:	691a      	ldr	r2, [r3, #16]
 8006a3e:	8afb      	ldrh	r3, [r7, #22]
 8006a40:	075b      	lsls	r3, r3, #29
 8006a42:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006a46:	69b9      	ldr	r1, [r7, #24]
 8006a48:	0148      	lsls	r0, r1, #5
 8006a4a:	69f9      	ldr	r1, [r7, #28]
 8006a4c:	4401      	add	r1, r0
 8006a4e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a52:	4313      	orrs	r3, r2
 8006a54:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a62:	691a      	ldr	r2, [r3, #16]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a6c:	69b9      	ldr	r1, [r7, #24]
 8006a6e:	0148      	lsls	r0, r1, #5
 8006a70:	69f9      	ldr	r1, [r7, #28]
 8006a72:	4401      	add	r1, r0
 8006a74:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a7c:	79fb      	ldrb	r3, [r7, #7]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d14b      	bne.n	8006b1a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d009      	beq.n	8006a9e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a96:	461a      	mov	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	791b      	ldrb	r3, [r3, #4]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d128      	bne.n	8006af8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d110      	bne.n	8006ad8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	0151      	lsls	r1, r2, #5
 8006ac8:	69fa      	ldr	r2, [r7, #28]
 8006aca:	440a      	add	r2, r1
 8006acc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ad0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ad4:	6013      	str	r3, [r2, #0]
 8006ad6:	e00f      	b.n	8006af8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	0151      	lsls	r1, r2, #5
 8006aea:	69fa      	ldr	r2, [r7, #28]
 8006aec:	440a      	add	r2, r1
 8006aee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006af2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006af6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	0151      	lsls	r1, r2, #5
 8006b0a:	69fa      	ldr	r2, [r7, #28]
 8006b0c:	440a      	add	r2, r1
 8006b0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b12:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006b16:	6013      	str	r3, [r2, #0]
 8006b18:	e166      	b.n	8006de8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	0151      	lsls	r1, r2, #5
 8006b2c:	69fa      	ldr	r2, [r7, #28]
 8006b2e:	440a      	add	r2, r1
 8006b30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b34:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006b38:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	791b      	ldrb	r3, [r3, #4]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d015      	beq.n	8006b6e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 814e 	beq.w	8006de8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	f003 030f 	and.w	r3, r3, #15
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b62:	69f9      	ldr	r1, [r7, #28]
 8006b64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	634b      	str	r3, [r1, #52]	@ 0x34
 8006b6c:	e13c      	b.n	8006de8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d110      	bne.n	8006ba0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	0151      	lsls	r1, r2, #5
 8006b90:	69fa      	ldr	r2, [r7, #28]
 8006b92:	440a      	add	r2, r1
 8006b94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b9c:	6013      	str	r3, [r2, #0]
 8006b9e:	e00f      	b.n	8006bc0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	0151      	lsls	r1, r2, #5
 8006bb2:	69fa      	ldr	r2, [r7, #28]
 8006bb4:	440a      	add	r2, r1
 8006bb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bbe:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	68d9      	ldr	r1, [r3, #12]
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	781a      	ldrb	r2, [r3, #0]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	b298      	uxth	r0, r3
 8006bce:	79fb      	ldrb	r3, [r7, #7]
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 f9b9 	bl	8006f4c <USB_WritePacket>
 8006bda:	e105      	b.n	8006de8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	0151      	lsls	r1, r2, #5
 8006bee:	69fa      	ldr	r2, [r7, #28]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bf6:	0cdb      	lsrs	r3, r3, #19
 8006bf8:	04db      	lsls	r3, r3, #19
 8006bfa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	0151      	lsls	r1, r2, #5
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	440a      	add	r2, r1
 8006c12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c16:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006c1a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006c1e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d132      	bne.n	8006c8c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	689a      	ldr	r2, [r3, #8]
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	689a      	ldr	r2, [r3, #8]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c4a:	691a      	ldr	r2, [r3, #16]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c54:	69b9      	ldr	r1, [r7, #24]
 8006c56:	0148      	lsls	r0, r1, #5
 8006c58:	69f9      	ldr	r1, [r7, #28]
 8006c5a:	4401      	add	r1, r0
 8006c5c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c60:	4313      	orrs	r3, r2
 8006c62:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	0151      	lsls	r1, r2, #5
 8006c76:	69fa      	ldr	r2, [r7, #28]
 8006c78:	440a      	add	r2, r1
 8006c7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c82:	6113      	str	r3, [r2, #16]
 8006c84:	e062      	b.n	8006d4c <USB_EPStartXfer+0x490>
 8006c86:	bf00      	nop
 8006c88:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d123      	bne.n	8006cdc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ca0:	691a      	ldr	r2, [r3, #16]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006caa:	69b9      	ldr	r1, [r7, #24]
 8006cac:	0148      	lsls	r0, r1, #5
 8006cae:	69f9      	ldr	r1, [r7, #28]
 8006cb0:	4401      	add	r1, r0
 8006cb2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	0151      	lsls	r1, r2, #5
 8006ccc:	69fa      	ldr	r2, [r7, #28]
 8006cce:	440a      	add	r2, r1
 8006cd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cd8:	6113      	str	r3, [r2, #16]
 8006cda:	e037      	b.n	8006d4c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	691a      	ldr	r2, [r3, #16]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	1e5a      	subs	r2, r3, #1
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	8afa      	ldrh	r2, [r7, #22]
 8006cf8:	fb03 f202 	mul.w	r2, r3, r2
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d0c:	691a      	ldr	r2, [r3, #16]
 8006d0e:	8afb      	ldrh	r3, [r7, #22]
 8006d10:	04d9      	lsls	r1, r3, #19
 8006d12:	4b38      	ldr	r3, [pc, #224]	@ (8006df4 <USB_EPStartXfer+0x538>)
 8006d14:	400b      	ands	r3, r1
 8006d16:	69b9      	ldr	r1, [r7, #24]
 8006d18:	0148      	lsls	r0, r1, #5
 8006d1a:	69f9      	ldr	r1, [r7, #28]
 8006d1c:	4401      	add	r1, r0
 8006d1e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d22:	4313      	orrs	r3, r2
 8006d24:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d32:	691a      	ldr	r2, [r3, #16]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d3c:	69b9      	ldr	r1, [r7, #24]
 8006d3e:	0148      	lsls	r0, r1, #5
 8006d40:	69f9      	ldr	r1, [r7, #28]
 8006d42:	4401      	add	r1, r0
 8006d44:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006d4c:	79fb      	ldrb	r3, [r7, #7]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d10d      	bne.n	8006d6e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d009      	beq.n	8006d6e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	68d9      	ldr	r1, [r3, #12]
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d6a:	460a      	mov	r2, r1
 8006d6c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	791b      	ldrb	r3, [r3, #4]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d128      	bne.n	8006dc8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d110      	bne.n	8006da8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	69ba      	ldr	r2, [r7, #24]
 8006d96:	0151      	lsls	r1, r2, #5
 8006d98:	69fa      	ldr	r2, [r7, #28]
 8006d9a:	440a      	add	r2, r1
 8006d9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006da0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	e00f      	b.n	8006dc8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	0151      	lsls	r1, r2, #5
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	440a      	add	r2, r1
 8006dbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dc6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	0151      	lsls	r1, r2, #5
 8006dda:	69fa      	ldr	r2, [r7, #28]
 8006ddc:	440a      	add	r2, r1
 8006dde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006de2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006de6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3720      	adds	r7, #32
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	1ff80000 	.word	0x1ff80000

08006df8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	785b      	ldrb	r3, [r3, #1]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d14a      	bne.n	8006eac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e2e:	f040 8086 	bne.w	8006f3e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	7812      	ldrb	r2, [r2, #0]
 8006e46:	0151      	lsls	r1, r2, #5
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	440a      	add	r2, r1
 8006e4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e50:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e54:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	7812      	ldrb	r2, [r2, #0]
 8006e6a:	0151      	lsls	r1, r2, #5
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	440a      	add	r2, r1
 8006e70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d902      	bls.n	8006e90 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e8e:	e056      	b.n	8006f3e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ea8:	d0e7      	beq.n	8006e7a <USB_EPStopXfer+0x82>
 8006eaa:	e048      	b.n	8006f3e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ec0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ec4:	d13b      	bne.n	8006f3e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	7812      	ldrb	r2, [r2, #0]
 8006eda:	0151      	lsls	r1, r2, #5
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	440a      	add	r2, r1
 8006ee0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ee4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006ee8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	7812      	ldrb	r2, [r2, #0]
 8006efe:	0151      	lsls	r1, r2, #5
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	440a      	add	r2, r1
 8006f04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3301      	adds	r3, #1
 8006f12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d902      	bls.n	8006f24 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	75fb      	strb	r3, [r7, #23]
          break;
 8006f22:	e00c      	b.n	8006f3e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f3c:	d0e7      	beq.n	8006f0e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	371c      	adds	r7, #28
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b089      	sub	sp, #36	@ 0x24
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	4611      	mov	r1, r2
 8006f58:	461a      	mov	r2, r3
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	71fb      	strb	r3, [r7, #7]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d123      	bne.n	8006fba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f72:	88bb      	ldrh	r3, [r7, #4]
 8006f74:	3303      	adds	r3, #3
 8006f76:	089b      	lsrs	r3, r3, #2
 8006f78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	61bb      	str	r3, [r7, #24]
 8006f7e:	e018      	b.n	8006fb2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f80:	79fb      	ldrb	r3, [r7, #7]
 8006f82:	031a      	lsls	r2, r3, #12
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	3301      	adds	r3, #1
 8006f98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	61bb      	str	r3, [r7, #24]
 8006fb2:	69ba      	ldr	r2, [r7, #24]
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d3e2      	bcc.n	8006f80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3724      	adds	r7, #36	@ 0x24
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b08b      	sub	sp, #44	@ 0x2c
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006fde:	88fb      	ldrh	r3, [r7, #6]
 8006fe0:	089b      	lsrs	r3, r3, #2
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006fe6:	88fb      	ldrh	r3, [r7, #6]
 8006fe8:	f003 0303 	and.w	r3, r3, #3
 8006fec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006fee:	2300      	movs	r3, #0
 8006ff0:	623b      	str	r3, [r7, #32]
 8006ff2:	e014      	b.n	800701e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffe:	601a      	str	r2, [r3, #0]
    pDest++;
 8007000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007002:	3301      	adds	r3, #1
 8007004:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007008:	3301      	adds	r3, #1
 800700a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800700c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700e:	3301      	adds	r3, #1
 8007010:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007014:	3301      	adds	r3, #1
 8007016:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	3301      	adds	r3, #1
 800701c:	623b      	str	r3, [r7, #32]
 800701e:	6a3a      	ldr	r2, [r7, #32]
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	429a      	cmp	r2, r3
 8007024:	d3e6      	bcc.n	8006ff4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007026:	8bfb      	ldrh	r3, [r7, #30]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d01e      	beq.n	800706a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007036:	461a      	mov	r2, r3
 8007038:	f107 0310 	add.w	r3, r7, #16
 800703c:	6812      	ldr	r2, [r2, #0]
 800703e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	b2db      	uxtb	r3, r3
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	fa22 f303 	lsr.w	r3, r2, r3
 800704c:	b2da      	uxtb	r2, r3
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	701a      	strb	r2, [r3, #0]
      i++;
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	3301      	adds	r3, #1
 8007056:	623b      	str	r3, [r7, #32]
      pDest++;
 8007058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705a:	3301      	adds	r3, #1
 800705c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800705e:	8bfb      	ldrh	r3, [r7, #30]
 8007060:	3b01      	subs	r3, #1
 8007062:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007064:	8bfb      	ldrh	r3, [r7, #30]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1ea      	bne.n	8007040 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800706a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800706c:	4618      	mov	r0, r3
 800706e:	372c      	adds	r7, #44	@ 0x2c
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	785b      	ldrb	r3, [r3, #1]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d12c      	bne.n	80070ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	db12      	blt.n	80070cc <USB_EPSetStall+0x54>
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00f      	beq.n	80070cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	0151      	lsls	r1, r2, #5
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	440a      	add	r2, r1
 80070c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80070ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	0151      	lsls	r1, r2, #5
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	440a      	add	r2, r1
 80070e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070ea:	6013      	str	r3, [r2, #0]
 80070ec:	e02b      	b.n	8007146 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	db12      	blt.n	8007126 <USB_EPSetStall+0xae>
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00f      	beq.n	8007126 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	4413      	add	r3, r2
 800710e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	0151      	lsls	r1, r2, #5
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	440a      	add	r2, r1
 800711c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007120:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007124:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	015a      	lsls	r2, r3, #5
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	4413      	add	r3, r2
 800712e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	0151      	lsls	r1, r2, #5
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	440a      	add	r2, r1
 800713c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007140:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007144:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	785b      	ldrb	r3, [r3, #1]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d128      	bne.n	80071c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	0151      	lsls	r1, r2, #5
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	440a      	add	r2, r1
 8007186:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800718a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800718e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	791b      	ldrb	r3, [r3, #4]
 8007194:	2b03      	cmp	r3, #3
 8007196:	d003      	beq.n	80071a0 <USB_EPClearStall+0x4c>
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	791b      	ldrb	r3, [r3, #4]
 800719c:	2b02      	cmp	r3, #2
 800719e:	d138      	bne.n	8007212 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	0151      	lsls	r1, r2, #5
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	440a      	add	r2, r1
 80071b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071be:	6013      	str	r3, [r2, #0]
 80071c0:	e027      	b.n	8007212 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	0151      	lsls	r1, r2, #5
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	440a      	add	r2, r1
 80071d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80071e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	791b      	ldrb	r3, [r3, #4]
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d003      	beq.n	80071f2 <USB_EPClearStall+0x9e>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	791b      	ldrb	r3, [r3, #4]
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d10f      	bne.n	8007212 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	015a      	lsls	r2, r3, #5
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	0151      	lsls	r1, r2, #5
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	440a      	add	r2, r1
 8007208:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800720c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007210:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	460b      	mov	r3, r1
 800722a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800723e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007242:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	78fb      	ldrb	r3, [r7, #3]
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007254:	68f9      	ldr	r1, [r7, #12]
 8007256:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800725a:	4313      	orrs	r3, r2
 800725c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007286:	f023 0303 	bic.w	r3, r3, #3
 800728a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800729a:	f023 0302 	bic.w	r3, r3, #2
 800729e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b085      	sub	sp, #20
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80072c8:	f023 0303 	bic.w	r3, r3, #3
 80072cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072dc:	f043 0302 	orr.w	r3, r3, #2
 80072e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	4013      	ands	r3, r2
 8007306:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007308:	68fb      	ldr	r3, [r7, #12]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007316:	b480      	push	{r7}
 8007318:	b085      	sub	sp, #20
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	4013      	ands	r3, r2
 8007338:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	0c1b      	lsrs	r3, r3, #16
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800734a:	b480      	push	{r7}
 800734c:	b085      	sub	sp, #20
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	4013      	ands	r3, r2
 800736c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	b29b      	uxth	r3, r3
}
 8007372:	4618      	mov	r0, r3
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800737e:	b480      	push	{r7}
 8007380:	b085      	sub	sp, #20
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	460b      	mov	r3, r1
 8007388:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800738e:	78fb      	ldrb	r3, [r7, #3]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	4013      	ands	r3, r2
 80073aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073ac:	68bb      	ldr	r3, [r7, #8]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b087      	sub	sp, #28
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	460b      	mov	r3, r1
 80073c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80073de:	78fb      	ldrb	r3, [r7, #3]
 80073e0:	f003 030f 	and.w	r3, r3, #15
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	fa22 f303 	lsr.w	r3, r2, r3
 80073ea:	01db      	lsls	r3, r3, #7
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80073f4:	78fb      	ldrb	r3, [r7, #3]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	4013      	ands	r3, r2
 8007406:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007408:	68bb      	ldr	r3, [r7, #8]
}
 800740a:	4618      	mov	r0, r3
 800740c:	371c      	adds	r7, #28
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007416:	b480      	push	{r7}
 8007418:	b083      	sub	sp, #12
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	f003 0301 	and.w	r3, r3, #1
}
 8007426:	4618      	mov	r0, r3
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007432:	b480      	push	{r7}
 8007434:	b085      	sub	sp, #20
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800744c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007450:	f023 0307 	bic.w	r3, r3, #7
 8007454:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007468:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	460b      	mov	r3, r1
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	333c      	adds	r3, #60	@ 0x3c
 800748e:	3304      	adds	r3, #4
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	4a26      	ldr	r2, [pc, #152]	@ (8007530 <USB_EP0_OutStart+0xb8>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d90a      	bls.n	80074b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074ac:	d101      	bne.n	80074b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	e037      	b.n	8007522 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074b8:	461a      	mov	r2, r3
 80074ba:	2300      	movs	r3, #0
 80074bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074e0:	f043 0318 	orr.w	r3, r3, #24
 80074e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074f4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80074f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80074fa:	7afb      	ldrb	r3, [r7, #11]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d10f      	bne.n	8007520 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007506:	461a      	mov	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800751a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800751e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	371c      	adds	r7, #28
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	4f54300a 	.word	0x4f54300a

08007534 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3301      	adds	r3, #1
 8007544:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800754c:	d901      	bls.n	8007552 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e01b      	b.n	800758a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	2b00      	cmp	r3, #0
 8007558:	daf2      	bge.n	8007540 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	f043 0201 	orr.w	r2, r3, #1
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	3301      	adds	r3, #1
 800756e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007576:	d901      	bls.n	800757c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e006      	b.n	800758a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	2b01      	cmp	r3, #1
 8007586:	d0f0      	beq.n	800756a <USB_CoreReset+0x36>

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
	...

08007598 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80075a4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80075a8:	f002 fcac 	bl	8009f04 <USBD_static_malloc>
 80075ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d109      	bne.n	80075c8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	32b0      	adds	r2, #176	@ 0xb0
 80075be:	2100      	movs	r1, #0
 80075c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80075c4:	2302      	movs	r3, #2
 80075c6:	e0d4      	b.n	8007772 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80075c8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80075cc:	2100      	movs	r1, #0
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f002 fd10 	bl	8009ff4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	32b0      	adds	r2, #176	@ 0xb0
 80075de:	68f9      	ldr	r1, [r7, #12]
 80075e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	32b0      	adds	r2, #176	@ 0xb0
 80075ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	7c1b      	ldrb	r3, [r3, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d138      	bne.n	8007672 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007600:	4b5e      	ldr	r3, [pc, #376]	@ (800777c <USBD_CDC_Init+0x1e4>)
 8007602:	7819      	ldrb	r1, [r3, #0]
 8007604:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007608:	2202      	movs	r2, #2
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f002 fb57 	bl	8009cbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007610:	4b5a      	ldr	r3, [pc, #360]	@ (800777c <USBD_CDC_Init+0x1e4>)
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	f003 020f 	and.w	r2, r3, #15
 8007618:	6879      	ldr	r1, [r7, #4]
 800761a:	4613      	mov	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4413      	add	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	440b      	add	r3, r1
 8007624:	3324      	adds	r3, #36	@ 0x24
 8007626:	2201      	movs	r2, #1
 8007628:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800762a:	4b55      	ldr	r3, [pc, #340]	@ (8007780 <USBD_CDC_Init+0x1e8>)
 800762c:	7819      	ldrb	r1, [r3, #0]
 800762e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007632:	2202      	movs	r2, #2
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f002 fb42 	bl	8009cbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800763a:	4b51      	ldr	r3, [pc, #324]	@ (8007780 <USBD_CDC_Init+0x1e8>)
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	f003 020f 	and.w	r2, r3, #15
 8007642:	6879      	ldr	r1, [r7, #4]
 8007644:	4613      	mov	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	440b      	add	r3, r1
 800764e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007652:	2201      	movs	r2, #1
 8007654:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007656:	4b4b      	ldr	r3, [pc, #300]	@ (8007784 <USBD_CDC_Init+0x1ec>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	f003 020f 	and.w	r2, r3, #15
 800765e:	6879      	ldr	r1, [r7, #4]
 8007660:	4613      	mov	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	440b      	add	r3, r1
 800766a:	3326      	adds	r3, #38	@ 0x26
 800766c:	2210      	movs	r2, #16
 800766e:	801a      	strh	r2, [r3, #0]
 8007670:	e035      	b.n	80076de <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007672:	4b42      	ldr	r3, [pc, #264]	@ (800777c <USBD_CDC_Init+0x1e4>)
 8007674:	7819      	ldrb	r1, [r3, #0]
 8007676:	2340      	movs	r3, #64	@ 0x40
 8007678:	2202      	movs	r2, #2
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f002 fb1f 	bl	8009cbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007680:	4b3e      	ldr	r3, [pc, #248]	@ (800777c <USBD_CDC_Init+0x1e4>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	f003 020f 	and.w	r2, r3, #15
 8007688:	6879      	ldr	r1, [r7, #4]
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	440b      	add	r3, r1
 8007694:	3324      	adds	r3, #36	@ 0x24
 8007696:	2201      	movs	r2, #1
 8007698:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800769a:	4b39      	ldr	r3, [pc, #228]	@ (8007780 <USBD_CDC_Init+0x1e8>)
 800769c:	7819      	ldrb	r1, [r3, #0]
 800769e:	2340      	movs	r3, #64	@ 0x40
 80076a0:	2202      	movs	r2, #2
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f002 fb0b 	bl	8009cbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80076a8:	4b35      	ldr	r3, [pc, #212]	@ (8007780 <USBD_CDC_Init+0x1e8>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	f003 020f 	and.w	r2, r3, #15
 80076b0:	6879      	ldr	r1, [r7, #4]
 80076b2:	4613      	mov	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	440b      	add	r3, r1
 80076bc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80076c0:	2201      	movs	r2, #1
 80076c2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80076c4:	4b2f      	ldr	r3, [pc, #188]	@ (8007784 <USBD_CDC_Init+0x1ec>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	f003 020f 	and.w	r2, r3, #15
 80076cc:	6879      	ldr	r1, [r7, #4]
 80076ce:	4613      	mov	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	440b      	add	r3, r1
 80076d8:	3326      	adds	r3, #38	@ 0x26
 80076da:	2210      	movs	r2, #16
 80076dc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80076de:	4b29      	ldr	r3, [pc, #164]	@ (8007784 <USBD_CDC_Init+0x1ec>)
 80076e0:	7819      	ldrb	r1, [r3, #0]
 80076e2:	2308      	movs	r3, #8
 80076e4:	2203      	movs	r2, #3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f002 fae9 	bl	8009cbe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80076ec:	4b25      	ldr	r3, [pc, #148]	@ (8007784 <USBD_CDC_Init+0x1ec>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	f003 020f 	and.w	r2, r3, #15
 80076f4:	6879      	ldr	r1, [r7, #4]
 80076f6:	4613      	mov	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	440b      	add	r3, r1
 8007700:	3324      	adds	r3, #36	@ 0x24
 8007702:	2201      	movs	r2, #1
 8007704:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	33b0      	adds	r3, #176	@ 0xb0
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800773c:	2302      	movs	r3, #2
 800773e:	e018      	b.n	8007772 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	7c1b      	ldrb	r3, [r3, #16]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10a      	bne.n	800775e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007748:	4b0d      	ldr	r3, [pc, #52]	@ (8007780 <USBD_CDC_Init+0x1e8>)
 800774a:	7819      	ldrb	r1, [r3, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007752:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f002 fba0 	bl	8009e9c <USBD_LL_PrepareReceive>
 800775c:	e008      	b.n	8007770 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800775e:	4b08      	ldr	r3, [pc, #32]	@ (8007780 <USBD_CDC_Init+0x1e8>)
 8007760:	7819      	ldrb	r1, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007768:	2340      	movs	r3, #64	@ 0x40
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f002 fb96 	bl	8009e9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	20000093 	.word	0x20000093
 8007780:	20000094 	.word	0x20000094
 8007784:	20000095 	.word	0x20000095

08007788 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007794:	4b3a      	ldr	r3, [pc, #232]	@ (8007880 <USBD_CDC_DeInit+0xf8>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	4619      	mov	r1, r3
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f002 fab5 	bl	8009d0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80077a0:	4b37      	ldr	r3, [pc, #220]	@ (8007880 <USBD_CDC_DeInit+0xf8>)
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	f003 020f 	and.w	r2, r3, #15
 80077a8:	6879      	ldr	r1, [r7, #4]
 80077aa:	4613      	mov	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	440b      	add	r3, r1
 80077b4:	3324      	adds	r3, #36	@ 0x24
 80077b6:	2200      	movs	r2, #0
 80077b8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80077ba:	4b32      	ldr	r3, [pc, #200]	@ (8007884 <USBD_CDC_DeInit+0xfc>)
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f002 faa2 	bl	8009d0a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80077c6:	4b2f      	ldr	r3, [pc, #188]	@ (8007884 <USBD_CDC_DeInit+0xfc>)
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	f003 020f 	and.w	r2, r3, #15
 80077ce:	6879      	ldr	r1, [r7, #4]
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	440b      	add	r3, r1
 80077da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80077de:	2200      	movs	r2, #0
 80077e0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80077e2:	4b29      	ldr	r3, [pc, #164]	@ (8007888 <USBD_CDC_DeInit+0x100>)
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f002 fa8e 	bl	8009d0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80077ee:	4b26      	ldr	r3, [pc, #152]	@ (8007888 <USBD_CDC_DeInit+0x100>)
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	f003 020f 	and.w	r2, r3, #15
 80077f6:	6879      	ldr	r1, [r7, #4]
 80077f8:	4613      	mov	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	440b      	add	r3, r1
 8007802:	3324      	adds	r3, #36	@ 0x24
 8007804:	2200      	movs	r2, #0
 8007806:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007808:	4b1f      	ldr	r3, [pc, #124]	@ (8007888 <USBD_CDC_DeInit+0x100>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	f003 020f 	and.w	r2, r3, #15
 8007810:	6879      	ldr	r1, [r7, #4]
 8007812:	4613      	mov	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	440b      	add	r3, r1
 800781c:	3326      	adds	r3, #38	@ 0x26
 800781e:	2200      	movs	r2, #0
 8007820:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	32b0      	adds	r2, #176	@ 0xb0
 800782c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d01f      	beq.n	8007874 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	33b0      	adds	r3, #176	@ 0xb0
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	32b0      	adds	r2, #176	@ 0xb0
 8007852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007856:	4618      	mov	r0, r3
 8007858:	f002 fb62 	bl	8009f20 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	32b0      	adds	r2, #176	@ 0xb0
 8007866:	2100      	movs	r1, #0
 8007868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	20000093 	.word	0x20000093
 8007884:	20000094 	.word	0x20000094
 8007888:	20000095 	.word	0x20000095

0800788c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	32b0      	adds	r2, #176	@ 0xb0
 80078a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80078aa:	2300      	movs	r3, #0
 80078ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e0bf      	b.n	8007a3c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d050      	beq.n	800796a <USBD_CDC_Setup+0xde>
 80078c8:	2b20      	cmp	r3, #32
 80078ca:	f040 80af 	bne.w	8007a2c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	88db      	ldrh	r3, [r3, #6]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d03a      	beq.n	800794c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	b25b      	sxtb	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	da1b      	bge.n	8007918 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	33b0      	adds	r3, #176	@ 0xb0
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80078f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	88d2      	ldrh	r2, [r2, #6]
 80078fc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	88db      	ldrh	r3, [r3, #6]
 8007902:	2b07      	cmp	r3, #7
 8007904:	bf28      	it	cs
 8007906:	2307      	movcs	r3, #7
 8007908:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	89fa      	ldrh	r2, [r7, #14]
 800790e:	4619      	mov	r1, r3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f001 fd93 	bl	800943c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007916:	e090      	b.n	8007a3a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	785a      	ldrb	r2, [r3, #1]
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	88db      	ldrh	r3, [r3, #6]
 8007926:	2b3f      	cmp	r3, #63	@ 0x3f
 8007928:	d803      	bhi.n	8007932 <USBD_CDC_Setup+0xa6>
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	88db      	ldrh	r3, [r3, #6]
 800792e:	b2da      	uxtb	r2, r3
 8007930:	e000      	b.n	8007934 <USBD_CDC_Setup+0xa8>
 8007932:	2240      	movs	r2, #64	@ 0x40
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800793a:	6939      	ldr	r1, [r7, #16]
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007942:	461a      	mov	r2, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f001 fda5 	bl	8009494 <USBD_CtlPrepareRx>
      break;
 800794a:	e076      	b.n	8007a3a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	33b0      	adds	r3, #176	@ 0xb0
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	7850      	ldrb	r0, [r2, #1]
 8007962:	2200      	movs	r2, #0
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	4798      	blx	r3
      break;
 8007968:	e067      	b.n	8007a3a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	785b      	ldrb	r3, [r3, #1]
 800796e:	2b0b      	cmp	r3, #11
 8007970:	d851      	bhi.n	8007a16 <USBD_CDC_Setup+0x18a>
 8007972:	a201      	add	r2, pc, #4	@ (adr r2, 8007978 <USBD_CDC_Setup+0xec>)
 8007974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007978:	080079a9 	.word	0x080079a9
 800797c:	08007a25 	.word	0x08007a25
 8007980:	08007a17 	.word	0x08007a17
 8007984:	08007a17 	.word	0x08007a17
 8007988:	08007a17 	.word	0x08007a17
 800798c:	08007a17 	.word	0x08007a17
 8007990:	08007a17 	.word	0x08007a17
 8007994:	08007a17 	.word	0x08007a17
 8007998:	08007a17 	.word	0x08007a17
 800799c:	08007a17 	.word	0x08007a17
 80079a0:	080079d3 	.word	0x080079d3
 80079a4:	080079fd 	.word	0x080079fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d107      	bne.n	80079c4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80079b4:	f107 030a 	add.w	r3, r7, #10
 80079b8:	2202      	movs	r2, #2
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f001 fd3d 	bl	800943c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079c2:	e032      	b.n	8007a2a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f001 fcbb 	bl	8009342 <USBD_CtlError>
            ret = USBD_FAIL;
 80079cc:	2303      	movs	r3, #3
 80079ce:	75fb      	strb	r3, [r7, #23]
          break;
 80079d0:	e02b      	b.n	8007a2a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d107      	bne.n	80079ee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80079de:	f107 030d 	add.w	r3, r7, #13
 80079e2:	2201      	movs	r2, #1
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f001 fd28 	bl	800943c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079ec:	e01d      	b.n	8007a2a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f001 fca6 	bl	8009342 <USBD_CtlError>
            ret = USBD_FAIL;
 80079f6:	2303      	movs	r3, #3
 80079f8:	75fb      	strb	r3, [r7, #23]
          break;
 80079fa:	e016      	b.n	8007a2a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	d00f      	beq.n	8007a28 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f001 fc99 	bl	8009342 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a10:	2303      	movs	r3, #3
 8007a12:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a14:	e008      	b.n	8007a28 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f001 fc92 	bl	8009342 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	75fb      	strb	r3, [r7, #23]
          break;
 8007a22:	e002      	b.n	8007a2a <USBD_CDC_Setup+0x19e>
          break;
 8007a24:	bf00      	nop
 8007a26:	e008      	b.n	8007a3a <USBD_CDC_Setup+0x1ae>
          break;
 8007a28:	bf00      	nop
      }
      break;
 8007a2a:	e006      	b.n	8007a3a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f001 fc87 	bl	8009342 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a34:	2303      	movs	r3, #3
 8007a36:	75fb      	strb	r3, [r7, #23]
      break;
 8007a38:	bf00      	nop
  }

  return (uint8_t)ret;
 8007a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3718      	adds	r7, #24
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	32b0      	adds	r2, #176	@ 0xb0
 8007a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e065      	b.n	8007b3a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	32b0      	adds	r2, #176	@ 0xb0
 8007a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a7c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	f003 020f 	and.w	r2, r3, #15
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	4613      	mov	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	440b      	add	r3, r1
 8007a90:	3318      	adds	r3, #24
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d02f      	beq.n	8007af8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	f003 020f 	and.w	r2, r3, #15
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	440b      	add	r3, r1
 8007aaa:	3318      	adds	r3, #24
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	78fb      	ldrb	r3, [r7, #3]
 8007ab0:	f003 010f 	and.w	r1, r3, #15
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	00db      	lsls	r3, r3, #3
 8007aba:	440b      	add	r3, r1
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4403      	add	r3, r0
 8007ac0:	331c      	adds	r3, #28
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ac8:	fb01 f303 	mul.w	r3, r1, r3
 8007acc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d112      	bne.n	8007af8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007ad2:	78fb      	ldrb	r3, [r7, #3]
 8007ad4:	f003 020f 	and.w	r2, r3, #15
 8007ad8:	6879      	ldr	r1, [r7, #4]
 8007ada:	4613      	mov	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	440b      	add	r3, r1
 8007ae4:	3318      	adds	r3, #24
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007aea:	78f9      	ldrb	r1, [r7, #3]
 8007aec:	2300      	movs	r3, #0
 8007aee:	2200      	movs	r2, #0
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f002 f9b2 	bl	8009e5a <USBD_LL_Transmit>
 8007af6:	e01f      	b.n	8007b38 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	33b0      	adds	r3, #176	@ 0xb0
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d010      	beq.n	8007b38 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	33b0      	adds	r3, #176	@ 0xb0
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007b34:	78fa      	ldrb	r2, [r7, #3]
 8007b36:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b084      	sub	sp, #16
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	32b0      	adds	r2, #176	@ 0xb0
 8007b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	32b0      	adds	r2, #176	@ 0xb0
 8007b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e01a      	b.n	8007baa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007b74:	78fb      	ldrb	r3, [r7, #3]
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f002 f9b0 	bl	8009ede <USBD_LL_GetRxDataSize>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	33b0      	adds	r3, #176	@ 0xb0
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4413      	add	r3, r2
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	32b0      	adds	r2, #176	@ 0xb0
 8007bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e024      	b.n	8007c1e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	33b0      	adds	r3, #176	@ 0xb0
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d019      	beq.n	8007c1c <USBD_CDC_EP0_RxReady+0x6a>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007bee:	2bff      	cmp	r3, #255	@ 0xff
 8007bf0:	d014      	beq.n	8007c1c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	33b0      	adds	r3, #176	@ 0xb0
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007c0a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c12:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	22ff      	movs	r2, #255	@ 0xff
 8007c18:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
	...

08007c28 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007c30:	2182      	movs	r1, #130	@ 0x82
 8007c32:	4818      	ldr	r0, [pc, #96]	@ (8007c94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c34:	f000 fd4f 	bl	80086d6 <USBD_GetEpDesc>
 8007c38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	4815      	ldr	r0, [pc, #84]	@ (8007c94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c3e:	f000 fd4a 	bl	80086d6 <USBD_GetEpDesc>
 8007c42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007c44:	2181      	movs	r1, #129	@ 0x81
 8007c46:	4813      	ldr	r0, [pc, #76]	@ (8007c94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c48:	f000 fd45 	bl	80086d6 <USBD_GetEpDesc>
 8007c4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d002      	beq.n	8007c5a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	2210      	movs	r2, #16
 8007c58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d006      	beq.n	8007c6e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c68:	711a      	strb	r2, [r3, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d006      	beq.n	8007c82 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c7c:	711a      	strb	r2, [r3, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2243      	movs	r2, #67	@ 0x43
 8007c86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007c88:	4b02      	ldr	r3, [pc, #8]	@ (8007c94 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	20000050 	.word	0x20000050

08007c98 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ca0:	2182      	movs	r1, #130	@ 0x82
 8007ca2:	4818      	ldr	r0, [pc, #96]	@ (8007d04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ca4:	f000 fd17 	bl	80086d6 <USBD_GetEpDesc>
 8007ca8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007caa:	2101      	movs	r1, #1
 8007cac:	4815      	ldr	r0, [pc, #84]	@ (8007d04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007cae:	f000 fd12 	bl	80086d6 <USBD_GetEpDesc>
 8007cb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007cb4:	2181      	movs	r1, #129	@ 0x81
 8007cb6:	4813      	ldr	r0, [pc, #76]	@ (8007d04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007cb8:	f000 fd0d 	bl	80086d6 <USBD_GetEpDesc>
 8007cbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	2210      	movs	r2, #16
 8007cc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d006      	beq.n	8007cde <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	711a      	strb	r2, [r3, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f042 0202 	orr.w	r2, r2, #2
 8007cdc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d006      	beq.n	8007cf2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	711a      	strb	r2, [r3, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f042 0202 	orr.w	r2, r2, #2
 8007cf0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2243      	movs	r2, #67	@ 0x43
 8007cf6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007cf8:	4b02      	ldr	r3, [pc, #8]	@ (8007d04 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3718      	adds	r7, #24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	20000050 	.word	0x20000050

08007d08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d10:	2182      	movs	r1, #130	@ 0x82
 8007d12:	4818      	ldr	r0, [pc, #96]	@ (8007d74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d14:	f000 fcdf 	bl	80086d6 <USBD_GetEpDesc>
 8007d18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d1a:	2101      	movs	r1, #1
 8007d1c:	4815      	ldr	r0, [pc, #84]	@ (8007d74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d1e:	f000 fcda 	bl	80086d6 <USBD_GetEpDesc>
 8007d22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d24:	2181      	movs	r1, #129	@ 0x81
 8007d26:	4813      	ldr	r0, [pc, #76]	@ (8007d74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d28:	f000 fcd5 	bl	80086d6 <USBD_GetEpDesc>
 8007d2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d002      	beq.n	8007d3a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2210      	movs	r2, #16
 8007d38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d006      	beq.n	8007d4e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d48:	711a      	strb	r2, [r3, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d006      	beq.n	8007d62 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d5c:	711a      	strb	r2, [r3, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2243      	movs	r2, #67	@ 0x43
 8007d66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d68:	4b02      	ldr	r3, [pc, #8]	@ (8007d74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	20000050 	.word	0x20000050

08007d78 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	220a      	movs	r2, #10
 8007d84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007d86:	4b03      	ldr	r3, [pc, #12]	@ (8007d94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	2000000c 	.word	0x2000000c

08007d98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e009      	b.n	8007dc0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	33b0      	adds	r3, #176	@ 0xb0
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b087      	sub	sp, #28
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	32b0      	adds	r2, #176	@ 0xb0
 8007de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e008      	b.n	8007e04 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	371c      	adds	r7, #28
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	32b0      	adds	r2, #176	@ 0xb0
 8007e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e004      	b.n	8007e3e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
	...

08007e4c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	32b0      	adds	r2, #176	@ 0xb0
 8007e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e62:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007e64:	2301      	movs	r3, #1
 8007e66:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e025      	b.n	8007ebe <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d11f      	bne.n	8007ebc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007e84:	4b10      	ldr	r3, [pc, #64]	@ (8007ec8 <USBD_CDC_TransmitPacket+0x7c>)
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	f003 020f 	and.w	r2, r3, #15
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	4613      	mov	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4403      	add	r3, r0
 8007e9e:	3318      	adds	r3, #24
 8007ea0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007ea2:	4b09      	ldr	r3, [pc, #36]	@ (8007ec8 <USBD_CDC_TransmitPacket+0x7c>)
 8007ea4:	7819      	ldrb	r1, [r3, #0]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f001 ffd1 	bl	8009e5a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20000093 	.word	0x20000093

08007ecc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	32b0      	adds	r2, #176	@ 0xb0
 8007ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	32b0      	adds	r2, #176	@ 0xb0
 8007eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e018      	b.n	8007f2c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	7c1b      	ldrb	r3, [r3, #16]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10a      	bne.n	8007f18 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f02:	4b0c      	ldr	r3, [pc, #48]	@ (8007f34 <USBD_CDC_ReceivePacket+0x68>)
 8007f04:	7819      	ldrb	r1, [r3, #0]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007f0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f001 ffc3 	bl	8009e9c <USBD_LL_PrepareReceive>
 8007f16:	e008      	b.n	8007f2a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f18:	4b06      	ldr	r3, [pc, #24]	@ (8007f34 <USBD_CDC_ReceivePacket+0x68>)
 8007f1a:	7819      	ldrb	r1, [r3, #0]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007f22:	2340      	movs	r3, #64	@ 0x40
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f001 ffb9 	bl	8009e9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	20000094 	.word	0x20000094

08007f38 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	4613      	mov	r3, r2
 8007f44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e01f      	b.n	8007f90 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	79fa      	ldrb	r2, [r7, #7]
 8007f82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f001 fe33 	bl	8009bf0 <USBD_LL_Init>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3718      	adds	r7, #24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e025      	b.n	8007ffc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	32ae      	adds	r2, #174	@ 0xae
 8007fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00f      	beq.n	8007fec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	32ae      	adds	r2, #174	@ 0xae
 8007fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fdc:	f107 020e 	add.w	r2, r7, #14
 8007fe0:	4610      	mov	r0, r2
 8007fe2:	4798      	blx	r3
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007ff2:	1c5a      	adds	r2, r3, #1
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 fe3b 	bl	8009c88 <USBD_LL_Start>
 8008012:	4603      	mov	r3, r0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008024:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008026:	4618      	mov	r0, r3
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b084      	sub	sp, #16
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	460b      	mov	r3, r1
 800803c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008048:	2b00      	cmp	r3, #0
 800804a:	d009      	beq.n	8008060 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	78fa      	ldrb	r2, [r7, #3]
 8008056:	4611      	mov	r1, r2
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	4798      	blx	r3
 800805c:	4603      	mov	r3, r0
 800805e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008060:	7bfb      	ldrb	r3, [r7, #15]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b084      	sub	sp, #16
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
 8008072:	460b      	mov	r3, r1
 8008074:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	78fa      	ldrb	r2, [r7, #3]
 8008084:	4611      	mov	r1, r2
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	4798      	blx	r3
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008090:	2303      	movs	r3, #3
 8008092:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008094:	7bfb      	ldrb	r3, [r7, #15]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f001 f90c 	bl	80092ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80080c4:	461a      	mov	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80080d2:	f003 031f 	and.w	r3, r3, #31
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d01a      	beq.n	8008110 <USBD_LL_SetupStage+0x72>
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d822      	bhi.n	8008124 <USBD_LL_SetupStage+0x86>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d002      	beq.n	80080e8 <USBD_LL_SetupStage+0x4a>
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d00a      	beq.n	80080fc <USBD_LL_SetupStage+0x5e>
 80080e6:	e01d      	b.n	8008124 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fb63 	bl	80087bc <USBD_StdDevReq>
 80080f6:	4603      	mov	r3, r0
 80080f8:	73fb      	strb	r3, [r7, #15]
      break;
 80080fa:	e020      	b.n	800813e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fbcb 	bl	80088a0 <USBD_StdItfReq>
 800810a:	4603      	mov	r3, r0
 800810c:	73fb      	strb	r3, [r7, #15]
      break;
 800810e:	e016      	b.n	800813e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fc2d 	bl	8008978 <USBD_StdEPReq>
 800811e:	4603      	mov	r3, r0
 8008120:	73fb      	strb	r3, [r7, #15]
      break;
 8008122:	e00c      	b.n	800813e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800812a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800812e:	b2db      	uxtb	r3, r3
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f001 fe08 	bl	8009d48 <USBD_LL_StallEP>
 8008138:	4603      	mov	r3, r0
 800813a:	73fb      	strb	r3, [r7, #15]
      break;
 800813c:	bf00      	nop
  }

  return ret;
 800813e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	460b      	mov	r3, r1
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800815a:	7afb      	ldrb	r3, [r7, #11]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d16e      	bne.n	800823e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008166:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800816e:	2b03      	cmp	r3, #3
 8008170:	f040 8098 	bne.w	80082a4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	689a      	ldr	r2, [r3, #8]
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	429a      	cmp	r2, r3
 800817e:	d913      	bls.n	80081a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	689a      	ldr	r2, [r3, #8]
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	1ad2      	subs	r2, r2, r3
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	68da      	ldr	r2, [r3, #12]
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	4293      	cmp	r3, r2
 8008198:	bf28      	it	cs
 800819a:	4613      	movcs	r3, r2
 800819c:	461a      	mov	r2, r3
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f001 f994 	bl	80094ce <USBD_CtlContinueRx>
 80081a6:	e07d      	b.n	80082a4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80081ae:	f003 031f 	and.w	r3, r3, #31
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d014      	beq.n	80081e0 <USBD_LL_DataOutStage+0x98>
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d81d      	bhi.n	80081f6 <USBD_LL_DataOutStage+0xae>
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <USBD_LL_DataOutStage+0x7c>
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d003      	beq.n	80081ca <USBD_LL_DataOutStage+0x82>
 80081c2:	e018      	b.n	80081f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80081c4:	2300      	movs	r3, #0
 80081c6:	75bb      	strb	r3, [r7, #22]
            break;
 80081c8:	e018      	b.n	80081fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	4619      	mov	r1, r3
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f000 fa64 	bl	80086a2 <USBD_CoreFindIF>
 80081da:	4603      	mov	r3, r0
 80081dc:	75bb      	strb	r3, [r7, #22]
            break;
 80081de:	e00d      	b.n	80081fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	4619      	mov	r1, r3
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 fa66 	bl	80086bc <USBD_CoreFindEP>
 80081f0:	4603      	mov	r3, r0
 80081f2:	75bb      	strb	r3, [r7, #22]
            break;
 80081f4:	e002      	b.n	80081fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	75bb      	strb	r3, [r7, #22]
            break;
 80081fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80081fc:	7dbb      	ldrb	r3, [r7, #22]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d119      	bne.n	8008236 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b03      	cmp	r3, #3
 800820c:	d113      	bne.n	8008236 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800820e:	7dba      	ldrb	r2, [r7, #22]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	32ae      	adds	r2, #174	@ 0xae
 8008214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00b      	beq.n	8008236 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800821e:	7dba      	ldrb	r2, [r7, #22]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008226:	7dba      	ldrb	r2, [r7, #22]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	32ae      	adds	r2, #174	@ 0xae
 800822c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f001 f95a 	bl	80094f0 <USBD_CtlSendStatus>
 800823c:	e032      	b.n	80082a4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800823e:	7afb      	ldrb	r3, [r7, #11]
 8008240:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008244:	b2db      	uxtb	r3, r3
 8008246:	4619      	mov	r1, r3
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 fa37 	bl	80086bc <USBD_CoreFindEP>
 800824e:	4603      	mov	r3, r0
 8008250:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008252:	7dbb      	ldrb	r3, [r7, #22]
 8008254:	2bff      	cmp	r3, #255	@ 0xff
 8008256:	d025      	beq.n	80082a4 <USBD_LL_DataOutStage+0x15c>
 8008258:	7dbb      	ldrb	r3, [r7, #22]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d122      	bne.n	80082a4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b03      	cmp	r3, #3
 8008268:	d117      	bne.n	800829a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800826a:	7dba      	ldrb	r2, [r7, #22]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	32ae      	adds	r2, #174	@ 0xae
 8008270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00f      	beq.n	800829a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800827a:	7dba      	ldrb	r2, [r7, #22]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008282:	7dba      	ldrb	r2, [r7, #22]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	32ae      	adds	r2, #174	@ 0xae
 8008288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	7afa      	ldrb	r2, [r7, #11]
 8008290:	4611      	mov	r1, r2
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	4798      	blx	r3
 8008296:	4603      	mov	r3, r0
 8008298:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800829a:	7dfb      	ldrb	r3, [r7, #23]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80082a0:	7dfb      	ldrb	r3, [r7, #23]
 80082a2:	e000      	b.n	80082a6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3718      	adds	r7, #24
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b086      	sub	sp, #24
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	460b      	mov	r3, r1
 80082b8:	607a      	str	r2, [r7, #4]
 80082ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80082bc:	7afb      	ldrb	r3, [r7, #11]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d16f      	bne.n	80083a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	3314      	adds	r3, #20
 80082c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d15a      	bne.n	8008388 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	689a      	ldr	r2, [r3, #8]
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d914      	bls.n	8008308 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	689a      	ldr	r2, [r3, #8]
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	1ad2      	subs	r2, r2, r3
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	461a      	mov	r2, r3
 80082f2:	6879      	ldr	r1, [r7, #4]
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f001 f8bc 	bl	8009472 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082fa:	2300      	movs	r3, #0
 80082fc:	2200      	movs	r2, #0
 80082fe:	2100      	movs	r1, #0
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f001 fdcb 	bl	8009e9c <USBD_LL_PrepareReceive>
 8008306:	e03f      	b.n	8008388 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	68da      	ldr	r2, [r3, #12]
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	429a      	cmp	r2, r3
 8008312:	d11c      	bne.n	800834e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	685a      	ldr	r2, [r3, #4]
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800831c:	429a      	cmp	r2, r3
 800831e:	d316      	bcc.n	800834e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800832a:	429a      	cmp	r2, r3
 800832c:	d20f      	bcs.n	800834e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800832e:	2200      	movs	r2, #0
 8008330:	2100      	movs	r1, #0
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f001 f89d 	bl	8009472 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008340:	2300      	movs	r3, #0
 8008342:	2200      	movs	r2, #0
 8008344:	2100      	movs	r1, #0
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f001 fda8 	bl	8009e9c <USBD_LL_PrepareReceive>
 800834c:	e01c      	b.n	8008388 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b03      	cmp	r3, #3
 8008358:	d10f      	bne.n	800837a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d009      	beq.n	800837a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800837a:	2180      	movs	r1, #128	@ 0x80
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f001 fce3 	bl	8009d48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f001 f8c7 	bl	8009516 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d03a      	beq.n	8008408 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f7ff fe42 	bl	800801c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80083a0:	e032      	b.n	8008408 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80083a2:	7afb      	ldrb	r3, [r7, #11]
 80083a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	4619      	mov	r1, r3
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f000 f985 	bl	80086bc <USBD_CoreFindEP>
 80083b2:	4603      	mov	r3, r0
 80083b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083b6:	7dfb      	ldrb	r3, [r7, #23]
 80083b8:	2bff      	cmp	r3, #255	@ 0xff
 80083ba:	d025      	beq.n	8008408 <USBD_LL_DataInStage+0x15a>
 80083bc:	7dfb      	ldrb	r3, [r7, #23]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d122      	bne.n	8008408 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d11c      	bne.n	8008408 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80083ce:	7dfa      	ldrb	r2, [r7, #23]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	32ae      	adds	r2, #174	@ 0xae
 80083d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d014      	beq.n	8008408 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80083de:	7dfa      	ldrb	r2, [r7, #23]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80083e6:	7dfa      	ldrb	r2, [r7, #23]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	32ae      	adds	r2, #174	@ 0xae
 80083ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	7afa      	ldrb	r2, [r7, #11]
 80083f4:	4611      	mov	r1, r2
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	4798      	blx	r3
 80083fa:	4603      	mov	r3, r0
 80083fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80083fe:	7dbb      	ldrb	r3, [r7, #22]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008404:	7dbb      	ldrb	r3, [r7, #22]
 8008406:	e000      	b.n	800840a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3718      	adds	r7, #24
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b084      	sub	sp, #16
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800844a:	2b00      	cmp	r3, #0
 800844c:	d014      	beq.n	8008478 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00e      	beq.n	8008478 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	6852      	ldr	r2, [r2, #4]
 8008466:	b2d2      	uxtb	r2, r2
 8008468:	4611      	mov	r1, r2
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	4798      	blx	r3
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d001      	beq.n	8008478 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008474:	2303      	movs	r3, #3
 8008476:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008478:	2340      	movs	r3, #64	@ 0x40
 800847a:	2200      	movs	r2, #0
 800847c:	2100      	movs	r1, #0
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f001 fc1d 	bl	8009cbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2240      	movs	r2, #64	@ 0x40
 8008490:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008494:	2340      	movs	r3, #64	@ 0x40
 8008496:	2200      	movs	r2, #0
 8008498:	2180      	movs	r1, #128	@ 0x80
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f001 fc0f 	bl	8009cbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2240      	movs	r2, #64	@ 0x40
 80084aa:	621a      	str	r2, [r3, #32]

  return ret;
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b083      	sub	sp, #12
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	460b      	mov	r3, r1
 80084c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	78fa      	ldrb	r2, [r7, #3]
 80084c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b083      	sub	sp, #12
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b04      	cmp	r3, #4
 80084e8:	d006      	beq.n	80084f8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084f0:	b2da      	uxtb	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2204      	movs	r2, #4
 80084fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800850e:	b480      	push	{r7}
 8008510:	b083      	sub	sp, #12
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b04      	cmp	r3, #4
 8008520:	d106      	bne.n	8008530 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008528:	b2da      	uxtb	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b082      	sub	sp, #8
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b03      	cmp	r3, #3
 8008550:	d110      	bne.n	8008574 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00b      	beq.n	8008574 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008562:	69db      	ldr	r3, [r3, #28]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d005      	beq.n	8008574 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b082      	sub	sp, #8
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	460b      	mov	r3, r1
 8008588:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	32ae      	adds	r2, #174	@ 0xae
 8008594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d101      	bne.n	80085a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800859c:	2303      	movs	r3, #3
 800859e:	e01c      	b.n	80085da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d115      	bne.n	80085d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	32ae      	adds	r2, #174	@ 0xae
 80085b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00b      	beq.n	80085d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	32ae      	adds	r2, #174	@ 0xae
 80085ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ce:	6a1b      	ldr	r3, [r3, #32]
 80085d0:	78fa      	ldrb	r2, [r7, #3]
 80085d2:	4611      	mov	r1, r2
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b082      	sub	sp, #8
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	460b      	mov	r3, r1
 80085ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	32ae      	adds	r2, #174	@ 0xae
 80085f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d101      	bne.n	8008604 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008600:	2303      	movs	r3, #3
 8008602:	e01c      	b.n	800863e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b03      	cmp	r3, #3
 800860e:	d115      	bne.n	800863c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	32ae      	adds	r2, #174	@ 0xae
 800861a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800861e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00b      	beq.n	800863c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	32ae      	adds	r2, #174	@ 0xae
 800862e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008634:	78fa      	ldrb	r2, [r7, #3]
 8008636:	4611      	mov	r1, r2
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008664:	2300      	movs	r3, #0
 8008666:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00e      	beq.n	8008698 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6852      	ldr	r2, [r2, #4]
 8008686:	b2d2      	uxtb	r2, r2
 8008688:	4611      	mov	r1, r2
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	4798      	blx	r3
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008694:	2303      	movs	r3, #3
 8008696:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008698:	7bfb      	ldrb	r3, [r7, #15]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80086a2:	b480      	push	{r7}
 80086a4:	b083      	sub	sp, #12
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	460b      	mov	r3, r1
 80086ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80086ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	460b      	mov	r3, r1
 80086c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80086c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b086      	sub	sp, #24
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	460b      	mov	r3, r1
 80086e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80086ea:	2300      	movs	r3, #0
 80086ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	885b      	ldrh	r3, [r3, #2]
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	7812      	ldrb	r2, [r2, #0]
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d91f      	bls.n	800873c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008702:	e013      	b.n	800872c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008704:	f107 030a 	add.w	r3, r7, #10
 8008708:	4619      	mov	r1, r3
 800870a:	6978      	ldr	r0, [r7, #20]
 800870c:	f000 f81b 	bl	8008746 <USBD_GetNextDesc>
 8008710:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	785b      	ldrb	r3, [r3, #1]
 8008716:	2b05      	cmp	r3, #5
 8008718:	d108      	bne.n	800872c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	789b      	ldrb	r3, [r3, #2]
 8008722:	78fa      	ldrb	r2, [r7, #3]
 8008724:	429a      	cmp	r2, r3
 8008726:	d008      	beq.n	800873a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008728:	2300      	movs	r3, #0
 800872a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	885b      	ldrh	r3, [r3, #2]
 8008730:	b29a      	uxth	r2, r3
 8008732:	897b      	ldrh	r3, [r7, #10]
 8008734:	429a      	cmp	r2, r3
 8008736:	d8e5      	bhi.n	8008704 <USBD_GetEpDesc+0x2e>
 8008738:	e000      	b.n	800873c <USBD_GetEpDesc+0x66>
          break;
 800873a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800873c:	693b      	ldr	r3, [r7, #16]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3718      	adds	r7, #24
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008746:	b480      	push	{r7}
 8008748:	b085      	sub	sp, #20
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	881b      	ldrh	r3, [r3, #0]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	7812      	ldrb	r2, [r2, #0]
 800875c:	4413      	add	r3, r2
 800875e:	b29a      	uxth	r2, r3
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	461a      	mov	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4413      	add	r3, r2
 800876e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008770:	68fb      	ldr	r3, [r7, #12]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800877e:	b480      	push	{r7}
 8008780:	b087      	sub	sp, #28
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	3301      	adds	r3, #1
 8008794:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800879c:	8a3b      	ldrh	r3, [r7, #16]
 800879e:	021b      	lsls	r3, r3, #8
 80087a0:	b21a      	sxth	r2, r3
 80087a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	b21b      	sxth	r3, r3
 80087aa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80087ac:	89fb      	ldrh	r3, [r7, #14]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	371c      	adds	r7, #28
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
	...

080087bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80087d2:	2b40      	cmp	r3, #64	@ 0x40
 80087d4:	d005      	beq.n	80087e2 <USBD_StdDevReq+0x26>
 80087d6:	2b40      	cmp	r3, #64	@ 0x40
 80087d8:	d857      	bhi.n	800888a <USBD_StdDevReq+0xce>
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00f      	beq.n	80087fe <USBD_StdDevReq+0x42>
 80087de:	2b20      	cmp	r3, #32
 80087e0:	d153      	bne.n	800888a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	32ae      	adds	r2, #174	@ 0xae
 80087ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	4798      	blx	r3
 80087f8:	4603      	mov	r3, r0
 80087fa:	73fb      	strb	r3, [r7, #15]
      break;
 80087fc:	e04a      	b.n	8008894 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	785b      	ldrb	r3, [r3, #1]
 8008802:	2b09      	cmp	r3, #9
 8008804:	d83b      	bhi.n	800887e <USBD_StdDevReq+0xc2>
 8008806:	a201      	add	r2, pc, #4	@ (adr r2, 800880c <USBD_StdDevReq+0x50>)
 8008808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880c:	08008861 	.word	0x08008861
 8008810:	08008875 	.word	0x08008875
 8008814:	0800887f 	.word	0x0800887f
 8008818:	0800886b 	.word	0x0800886b
 800881c:	0800887f 	.word	0x0800887f
 8008820:	0800883f 	.word	0x0800883f
 8008824:	08008835 	.word	0x08008835
 8008828:	0800887f 	.word	0x0800887f
 800882c:	08008857 	.word	0x08008857
 8008830:	08008849 	.word	0x08008849
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008834:	6839      	ldr	r1, [r7, #0]
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fa3c 	bl	8008cb4 <USBD_GetDescriptor>
          break;
 800883c:	e024      	b.n	8008888 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fba1 	bl	8008f88 <USBD_SetAddress>
          break;
 8008846:	e01f      	b.n	8008888 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fbe0 	bl	8009010 <USBD_SetConfig>
 8008850:	4603      	mov	r3, r0
 8008852:	73fb      	strb	r3, [r7, #15]
          break;
 8008854:	e018      	b.n	8008888 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fc83 	bl	8009164 <USBD_GetConfig>
          break;
 800885e:	e013      	b.n	8008888 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fcb4 	bl	80091d0 <USBD_GetStatus>
          break;
 8008868:	e00e      	b.n	8008888 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fce3 	bl	8009238 <USBD_SetFeature>
          break;
 8008872:	e009      	b.n	8008888 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fd07 	bl	800928a <USBD_ClrFeature>
          break;
 800887c:	e004      	b.n	8008888 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fd5e 	bl	8009342 <USBD_CtlError>
          break;
 8008886:	bf00      	nop
      }
      break;
 8008888:	e004      	b.n	8008894 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fd58 	bl	8009342 <USBD_CtlError>
      break;
 8008892:	bf00      	nop
  }

  return ret;
 8008894:	7bfb      	ldrb	r3, [r7, #15]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop

080088a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088b6:	2b40      	cmp	r3, #64	@ 0x40
 80088b8:	d005      	beq.n	80088c6 <USBD_StdItfReq+0x26>
 80088ba:	2b40      	cmp	r3, #64	@ 0x40
 80088bc:	d852      	bhi.n	8008964 <USBD_StdItfReq+0xc4>
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d001      	beq.n	80088c6 <USBD_StdItfReq+0x26>
 80088c2:	2b20      	cmp	r3, #32
 80088c4:	d14e      	bne.n	8008964 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	3b01      	subs	r3, #1
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d840      	bhi.n	8008956 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	889b      	ldrh	r3, [r3, #4]
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d836      	bhi.n	800894c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	889b      	ldrh	r3, [r3, #4]
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7ff fedb 	bl	80086a2 <USBD_CoreFindIF>
 80088ec:	4603      	mov	r3, r0
 80088ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088f0:	7bbb      	ldrb	r3, [r7, #14]
 80088f2:	2bff      	cmp	r3, #255	@ 0xff
 80088f4:	d01d      	beq.n	8008932 <USBD_StdItfReq+0x92>
 80088f6:	7bbb      	ldrb	r3, [r7, #14]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d11a      	bne.n	8008932 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80088fc:	7bba      	ldrb	r2, [r7, #14]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	32ae      	adds	r2, #174	@ 0xae
 8008902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00f      	beq.n	800892c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800890c:	7bba      	ldrb	r2, [r7, #14]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008914:	7bba      	ldrb	r2, [r7, #14]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	32ae      	adds	r2, #174	@ 0xae
 800891a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	4798      	blx	r3
 8008926:	4603      	mov	r3, r0
 8008928:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800892a:	e004      	b.n	8008936 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800892c:	2303      	movs	r3, #3
 800892e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008930:	e001      	b.n	8008936 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008932:	2303      	movs	r3, #3
 8008934:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	88db      	ldrh	r3, [r3, #6]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d110      	bne.n	8008960 <USBD_StdItfReq+0xc0>
 800893e:	7bfb      	ldrb	r3, [r7, #15]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10d      	bne.n	8008960 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fdd3 	bl	80094f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800894a:	e009      	b.n	8008960 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fcf7 	bl	8009342 <USBD_CtlError>
          break;
 8008954:	e004      	b.n	8008960 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 fcf2 	bl	8009342 <USBD_CtlError>
          break;
 800895e:	e000      	b.n	8008962 <USBD_StdItfReq+0xc2>
          break;
 8008960:	bf00      	nop
      }
      break;
 8008962:	e004      	b.n	800896e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008964:	6839      	ldr	r1, [r7, #0]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fceb 	bl	8009342 <USBD_CtlError>
      break;
 800896c:	bf00      	nop
  }

  return ret;
 800896e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	889b      	ldrh	r3, [r3, #4]
 800898a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008994:	2b40      	cmp	r3, #64	@ 0x40
 8008996:	d007      	beq.n	80089a8 <USBD_StdEPReq+0x30>
 8008998:	2b40      	cmp	r3, #64	@ 0x40
 800899a:	f200 817f 	bhi.w	8008c9c <USBD_StdEPReq+0x324>
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d02a      	beq.n	80089f8 <USBD_StdEPReq+0x80>
 80089a2:	2b20      	cmp	r3, #32
 80089a4:	f040 817a 	bne.w	8008c9c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80089a8:	7bbb      	ldrb	r3, [r7, #14]
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7ff fe85 	bl	80086bc <USBD_CoreFindEP>
 80089b2:	4603      	mov	r3, r0
 80089b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80089b6:	7b7b      	ldrb	r3, [r7, #13]
 80089b8:	2bff      	cmp	r3, #255	@ 0xff
 80089ba:	f000 8174 	beq.w	8008ca6 <USBD_StdEPReq+0x32e>
 80089be:	7b7b      	ldrb	r3, [r7, #13]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f040 8170 	bne.w	8008ca6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80089c6:	7b7a      	ldrb	r2, [r7, #13]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80089ce:	7b7a      	ldrb	r2, [r7, #13]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	32ae      	adds	r2, #174	@ 0xae
 80089d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f000 8163 	beq.w	8008ca6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80089e0:	7b7a      	ldrb	r2, [r7, #13]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	32ae      	adds	r2, #174	@ 0xae
 80089e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	6839      	ldr	r1, [r7, #0]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	4798      	blx	r3
 80089f2:	4603      	mov	r3, r0
 80089f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80089f6:	e156      	b.n	8008ca6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	785b      	ldrb	r3, [r3, #1]
 80089fc:	2b03      	cmp	r3, #3
 80089fe:	d008      	beq.n	8008a12 <USBD_StdEPReq+0x9a>
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	f300 8145 	bgt.w	8008c90 <USBD_StdEPReq+0x318>
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f000 809b 	beq.w	8008b42 <USBD_StdEPReq+0x1ca>
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d03c      	beq.n	8008a8a <USBD_StdEPReq+0x112>
 8008a10:	e13e      	b.n	8008c90 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d002      	beq.n	8008a24 <USBD_StdEPReq+0xac>
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	d016      	beq.n	8008a50 <USBD_StdEPReq+0xd8>
 8008a22:	e02c      	b.n	8008a7e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a24:	7bbb      	ldrb	r3, [r7, #14]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00d      	beq.n	8008a46 <USBD_StdEPReq+0xce>
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	2b80      	cmp	r3, #128	@ 0x80
 8008a2e:	d00a      	beq.n	8008a46 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a30:	7bbb      	ldrb	r3, [r7, #14]
 8008a32:	4619      	mov	r1, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f001 f987 	bl	8009d48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a3a:	2180      	movs	r1, #128	@ 0x80
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f001 f983 	bl	8009d48 <USBD_LL_StallEP>
 8008a42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a44:	e020      	b.n	8008a88 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fc7a 	bl	8009342 <USBD_CtlError>
              break;
 8008a4e:	e01b      	b.n	8008a88 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	885b      	ldrh	r3, [r3, #2]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10e      	bne.n	8008a76 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a58:	7bbb      	ldrb	r3, [r7, #14]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00b      	beq.n	8008a76 <USBD_StdEPReq+0xfe>
 8008a5e:	7bbb      	ldrb	r3, [r7, #14]
 8008a60:	2b80      	cmp	r3, #128	@ 0x80
 8008a62:	d008      	beq.n	8008a76 <USBD_StdEPReq+0xfe>
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	88db      	ldrh	r3, [r3, #6]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d104      	bne.n	8008a76 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a6c:	7bbb      	ldrb	r3, [r7, #14]
 8008a6e:	4619      	mov	r1, r3
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f001 f969 	bl	8009d48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fd3a 	bl	80094f0 <USBD_CtlSendStatus>

              break;
 8008a7c:	e004      	b.n	8008a88 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fc5e 	bl	8009342 <USBD_CtlError>
              break;
 8008a86:	bf00      	nop
          }
          break;
 8008a88:	e107      	b.n	8008c9a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d002      	beq.n	8008a9c <USBD_StdEPReq+0x124>
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d016      	beq.n	8008ac8 <USBD_StdEPReq+0x150>
 8008a9a:	e04b      	b.n	8008b34 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00d      	beq.n	8008abe <USBD_StdEPReq+0x146>
 8008aa2:	7bbb      	ldrb	r3, [r7, #14]
 8008aa4:	2b80      	cmp	r3, #128	@ 0x80
 8008aa6:	d00a      	beq.n	8008abe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f001 f94b 	bl	8009d48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ab2:	2180      	movs	r1, #128	@ 0x80
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f001 f947 	bl	8009d48 <USBD_LL_StallEP>
 8008aba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008abc:	e040      	b.n	8008b40 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fc3e 	bl	8009342 <USBD_CtlError>
              break;
 8008ac6:	e03b      	b.n	8008b40 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	885b      	ldrh	r3, [r3, #2]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d136      	bne.n	8008b3e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
 8008ad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d004      	beq.n	8008ae4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
 8008adc:	4619      	mov	r1, r3
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f001 f951 	bl	8009d86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fd03 	bl	80094f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008aea:	7bbb      	ldrb	r3, [r7, #14]
 8008aec:	4619      	mov	r1, r3
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f7ff fde4 	bl	80086bc <USBD_CoreFindEP>
 8008af4:	4603      	mov	r3, r0
 8008af6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008af8:	7b7b      	ldrb	r3, [r7, #13]
 8008afa:	2bff      	cmp	r3, #255	@ 0xff
 8008afc:	d01f      	beq.n	8008b3e <USBD_StdEPReq+0x1c6>
 8008afe:	7b7b      	ldrb	r3, [r7, #13]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d11c      	bne.n	8008b3e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008b04:	7b7a      	ldrb	r2, [r7, #13]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008b0c:	7b7a      	ldrb	r2, [r7, #13]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	32ae      	adds	r2, #174	@ 0xae
 8008b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d010      	beq.n	8008b3e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008b1c:	7b7a      	ldrb	r2, [r7, #13]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	32ae      	adds	r2, #174	@ 0xae
 8008b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	6839      	ldr	r1, [r7, #0]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	4798      	blx	r3
 8008b2e:	4603      	mov	r3, r0
 8008b30:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008b32:	e004      	b.n	8008b3e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008b34:	6839      	ldr	r1, [r7, #0]
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fc03 	bl	8009342 <USBD_CtlError>
              break;
 8008b3c:	e000      	b.n	8008b40 <USBD_StdEPReq+0x1c8>
              break;
 8008b3e:	bf00      	nop
          }
          break;
 8008b40:	e0ab      	b.n	8008c9a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d002      	beq.n	8008b54 <USBD_StdEPReq+0x1dc>
 8008b4e:	2b03      	cmp	r3, #3
 8008b50:	d032      	beq.n	8008bb8 <USBD_StdEPReq+0x240>
 8008b52:	e097      	b.n	8008c84 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b54:	7bbb      	ldrb	r3, [r7, #14]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d007      	beq.n	8008b6a <USBD_StdEPReq+0x1f2>
 8008b5a:	7bbb      	ldrb	r3, [r7, #14]
 8008b5c:	2b80      	cmp	r3, #128	@ 0x80
 8008b5e:	d004      	beq.n	8008b6a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fbed 	bl	8009342 <USBD_CtlError>
                break;
 8008b68:	e091      	b.n	8008c8e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	da0b      	bge.n	8008b8a <USBD_StdEPReq+0x212>
 8008b72:	7bbb      	ldrb	r3, [r7, #14]
 8008b74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b78:	4613      	mov	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	3310      	adds	r3, #16
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	4413      	add	r3, r2
 8008b86:	3304      	adds	r3, #4
 8008b88:	e00b      	b.n	8008ba2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b8a:	7bbb      	ldrb	r3, [r7, #14]
 8008b8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b90:	4613      	mov	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4413      	add	r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	3304      	adds	r3, #4
 8008ba2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	2202      	movs	r2, #2
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fc43 	bl	800943c <USBD_CtlSendData>
              break;
 8008bb6:	e06a      	b.n	8008c8e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008bb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	da11      	bge.n	8008be4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
 8008bc2:	f003 020f 	and.w	r2, r3, #15
 8008bc6:	6879      	ldr	r1, [r7, #4]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	440b      	add	r3, r1
 8008bd2:	3324      	adds	r3, #36	@ 0x24
 8008bd4:	881b      	ldrh	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d117      	bne.n	8008c0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fbb0 	bl	8009342 <USBD_CtlError>
                  break;
 8008be2:	e054      	b.n	8008c8e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008be4:	7bbb      	ldrb	r3, [r7, #14]
 8008be6:	f003 020f 	and.w	r2, r3, #15
 8008bea:	6879      	ldr	r1, [r7, #4]
 8008bec:	4613      	mov	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	440b      	add	r3, r1
 8008bf6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008bfa:	881b      	ldrh	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d104      	bne.n	8008c0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fb9d 	bl	8009342 <USBD_CtlError>
                  break;
 8008c08:	e041      	b.n	8008c8e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	da0b      	bge.n	8008c2a <USBD_StdEPReq+0x2b2>
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
 8008c14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c18:	4613      	mov	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	3310      	adds	r3, #16
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	4413      	add	r3, r2
 8008c26:	3304      	adds	r3, #4
 8008c28:	e00b      	b.n	8008c42 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c2a:	7bbb      	ldrb	r3, [r7, #14]
 8008c2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c30:	4613      	mov	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4413      	add	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	4413      	add	r3, r2
 8008c40:	3304      	adds	r3, #4
 8008c42:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c44:	7bbb      	ldrb	r3, [r7, #14]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d002      	beq.n	8008c50 <USBD_StdEPReq+0x2d8>
 8008c4a:	7bbb      	ldrb	r3, [r7, #14]
 8008c4c:	2b80      	cmp	r3, #128	@ 0x80
 8008c4e:	d103      	bne.n	8008c58 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2200      	movs	r2, #0
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	e00e      	b.n	8008c76 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008c58:	7bbb      	ldrb	r3, [r7, #14]
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f001 f8b1 	bl	8009dc4 <USBD_LL_IsStallEP>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d003      	beq.n	8008c70 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	e002      	b.n	8008c76 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2200      	movs	r2, #0
 8008c74:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	2202      	movs	r2, #2
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 fbdd 	bl	800943c <USBD_CtlSendData>
              break;
 8008c82:	e004      	b.n	8008c8e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008c84:	6839      	ldr	r1, [r7, #0]
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fb5b 	bl	8009342 <USBD_CtlError>
              break;
 8008c8c:	bf00      	nop
          }
          break;
 8008c8e:	e004      	b.n	8008c9a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fb55 	bl	8009342 <USBD_CtlError>
          break;
 8008c98:	bf00      	nop
      }
      break;
 8008c9a:	e005      	b.n	8008ca8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fb4f 	bl	8009342 <USBD_CtlError>
      break;
 8008ca4:	e000      	b.n	8008ca8 <USBD_StdEPReq+0x330>
      break;
 8008ca6:	bf00      	nop
  }

  return ret;
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
	...

08008cb4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	885b      	ldrh	r3, [r3, #2]
 8008cce:	0a1b      	lsrs	r3, r3, #8
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	2b06      	cmp	r3, #6
 8008cd6:	f200 8128 	bhi.w	8008f2a <USBD_GetDescriptor+0x276>
 8008cda:	a201      	add	r2, pc, #4	@ (adr r2, 8008ce0 <USBD_GetDescriptor+0x2c>)
 8008cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce0:	08008cfd 	.word	0x08008cfd
 8008ce4:	08008d15 	.word	0x08008d15
 8008ce8:	08008d55 	.word	0x08008d55
 8008cec:	08008f2b 	.word	0x08008f2b
 8008cf0:	08008f2b 	.word	0x08008f2b
 8008cf4:	08008ecb 	.word	0x08008ecb
 8008cf8:	08008ef7 	.word	0x08008ef7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	7c12      	ldrb	r2, [r2, #16]
 8008d08:	f107 0108 	add.w	r1, r7, #8
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	4798      	blx	r3
 8008d10:	60f8      	str	r0, [r7, #12]
      break;
 8008d12:	e112      	b.n	8008f3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	7c1b      	ldrb	r3, [r3, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10d      	bne.n	8008d38 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d24:	f107 0208 	add.w	r2, r7, #8
 8008d28:	4610      	mov	r0, r2
 8008d2a:	4798      	blx	r3
 8008d2c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	3301      	adds	r3, #1
 8008d32:	2202      	movs	r2, #2
 8008d34:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008d36:	e100      	b.n	8008f3a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d40:	f107 0208 	add.w	r2, r7, #8
 8008d44:	4610      	mov	r0, r2
 8008d46:	4798      	blx	r3
 8008d48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	2202      	movs	r2, #2
 8008d50:	701a      	strb	r2, [r3, #0]
      break;
 8008d52:	e0f2      	b.n	8008f3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	885b      	ldrh	r3, [r3, #2]
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b05      	cmp	r3, #5
 8008d5c:	f200 80ac 	bhi.w	8008eb8 <USBD_GetDescriptor+0x204>
 8008d60:	a201      	add	r2, pc, #4	@ (adr r2, 8008d68 <USBD_GetDescriptor+0xb4>)
 8008d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d66:	bf00      	nop
 8008d68:	08008d81 	.word	0x08008d81
 8008d6c:	08008db5 	.word	0x08008db5
 8008d70:	08008de9 	.word	0x08008de9
 8008d74:	08008e1d 	.word	0x08008e1d
 8008d78:	08008e51 	.word	0x08008e51
 8008d7c:	08008e85 	.word	0x08008e85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00b      	beq.n	8008da4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	7c12      	ldrb	r2, [r2, #16]
 8008d98:	f107 0108 	add.w	r1, r7, #8
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	4798      	blx	r3
 8008da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008da2:	e091      	b.n	8008ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 facb 	bl	8009342 <USBD_CtlError>
            err++;
 8008dac:	7afb      	ldrb	r3, [r7, #11]
 8008dae:	3301      	adds	r3, #1
 8008db0:	72fb      	strb	r3, [r7, #11]
          break;
 8008db2:	e089      	b.n	8008ec8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00b      	beq.n	8008dd8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	7c12      	ldrb	r2, [r2, #16]
 8008dcc:	f107 0108 	add.w	r1, r7, #8
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	4798      	blx	r3
 8008dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dd6:	e077      	b.n	8008ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fab1 	bl	8009342 <USBD_CtlError>
            err++;
 8008de0:	7afb      	ldrb	r3, [r7, #11]
 8008de2:	3301      	adds	r3, #1
 8008de4:	72fb      	strb	r3, [r7, #11]
          break;
 8008de6:	e06f      	b.n	8008ec8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00b      	beq.n	8008e0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	7c12      	ldrb	r2, [r2, #16]
 8008e00:	f107 0108 	add.w	r1, r7, #8
 8008e04:	4610      	mov	r0, r2
 8008e06:	4798      	blx	r3
 8008e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e0a:	e05d      	b.n	8008ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fa97 	bl	8009342 <USBD_CtlError>
            err++;
 8008e14:	7afb      	ldrb	r3, [r7, #11]
 8008e16:	3301      	adds	r3, #1
 8008e18:	72fb      	strb	r3, [r7, #11]
          break;
 8008e1a:	e055      	b.n	8008ec8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00b      	beq.n	8008e40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	7c12      	ldrb	r2, [r2, #16]
 8008e34:	f107 0108 	add.w	r1, r7, #8
 8008e38:	4610      	mov	r0, r2
 8008e3a:	4798      	blx	r3
 8008e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e3e:	e043      	b.n	8008ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fa7d 	bl	8009342 <USBD_CtlError>
            err++;
 8008e48:	7afb      	ldrb	r3, [r7, #11]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e4e:	e03b      	b.n	8008ec8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00b      	beq.n	8008e74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e62:	695b      	ldr	r3, [r3, #20]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	7c12      	ldrb	r2, [r2, #16]
 8008e68:	f107 0108 	add.w	r1, r7, #8
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	4798      	blx	r3
 8008e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e72:	e029      	b.n	8008ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fa63 	bl	8009342 <USBD_CtlError>
            err++;
 8008e7c:	7afb      	ldrb	r3, [r7, #11]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	72fb      	strb	r3, [r7, #11]
          break;
 8008e82:	e021      	b.n	8008ec8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00b      	beq.n	8008ea8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	7c12      	ldrb	r2, [r2, #16]
 8008e9c:	f107 0108 	add.w	r1, r7, #8
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	4798      	blx	r3
 8008ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ea6:	e00f      	b.n	8008ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fa49 	bl	8009342 <USBD_CtlError>
            err++;
 8008eb0:	7afb      	ldrb	r3, [r7, #11]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8008eb6:	e007      	b.n	8008ec8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fa41 	bl	8009342 <USBD_CtlError>
          err++;
 8008ec0:	7afb      	ldrb	r3, [r7, #11]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008ec6:	bf00      	nop
      }
      break;
 8008ec8:	e037      	b.n	8008f3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	7c1b      	ldrb	r3, [r3, #16]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d109      	bne.n	8008ee6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eda:	f107 0208 	add.w	r2, r7, #8
 8008ede:	4610      	mov	r0, r2
 8008ee0:	4798      	blx	r3
 8008ee2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ee4:	e029      	b.n	8008f3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fa2a 	bl	8009342 <USBD_CtlError>
        err++;
 8008eee:	7afb      	ldrb	r3, [r7, #11]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	72fb      	strb	r3, [r7, #11]
      break;
 8008ef4:	e021      	b.n	8008f3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	7c1b      	ldrb	r3, [r3, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d10d      	bne.n	8008f1a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f06:	f107 0208 	add.w	r2, r7, #8
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	4798      	blx	r3
 8008f0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	3301      	adds	r3, #1
 8008f14:	2207      	movs	r2, #7
 8008f16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f18:	e00f      	b.n	8008f3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fa10 	bl	8009342 <USBD_CtlError>
        err++;
 8008f22:	7afb      	ldrb	r3, [r7, #11]
 8008f24:	3301      	adds	r3, #1
 8008f26:	72fb      	strb	r3, [r7, #11]
      break;
 8008f28:	e007      	b.n	8008f3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fa08 	bl	8009342 <USBD_CtlError>
      err++;
 8008f32:	7afb      	ldrb	r3, [r7, #11]
 8008f34:	3301      	adds	r3, #1
 8008f36:	72fb      	strb	r3, [r7, #11]
      break;
 8008f38:	bf00      	nop
  }

  if (err != 0U)
 8008f3a:	7afb      	ldrb	r3, [r7, #11]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d11e      	bne.n	8008f7e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	88db      	ldrh	r3, [r3, #6]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d016      	beq.n	8008f76 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008f48:	893b      	ldrh	r3, [r7, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00e      	beq.n	8008f6c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	88da      	ldrh	r2, [r3, #6]
 8008f52:	893b      	ldrh	r3, [r7, #8]
 8008f54:	4293      	cmp	r3, r2
 8008f56:	bf28      	it	cs
 8008f58:	4613      	movcs	r3, r2
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f5e:	893b      	ldrh	r3, [r7, #8]
 8008f60:	461a      	mov	r2, r3
 8008f62:	68f9      	ldr	r1, [r7, #12]
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 fa69 	bl	800943c <USBD_CtlSendData>
 8008f6a:	e009      	b.n	8008f80 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008f6c:	6839      	ldr	r1, [r7, #0]
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f9e7 	bl	8009342 <USBD_CtlError>
 8008f74:	e004      	b.n	8008f80 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 faba 	bl	80094f0 <USBD_CtlSendStatus>
 8008f7c:	e000      	b.n	8008f80 <USBD_GetDescriptor+0x2cc>
    return;
 8008f7e:	bf00      	nop
  }
}
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop

08008f88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	889b      	ldrh	r3, [r3, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d131      	bne.n	8008ffe <USBD_SetAddress+0x76>
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	88db      	ldrh	r3, [r3, #6]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d12d      	bne.n	8008ffe <USBD_SetAddress+0x76>
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	885b      	ldrh	r3, [r3, #2]
 8008fa6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008fa8:	d829      	bhi.n	8008ffe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	885b      	ldrh	r3, [r3, #2]
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d104      	bne.n	8008fcc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008fc2:	6839      	ldr	r1, [r7, #0]
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f9bc 	bl	8009342 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fca:	e01d      	b.n	8009008 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	7bfa      	ldrb	r2, [r7, #15]
 8008fd0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 ff1f 	bl	8009e1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fa86 	bl	80094f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d004      	beq.n	8008ff4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2202      	movs	r2, #2
 8008fee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff2:	e009      	b.n	8009008 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ffc:	e004      	b.n	8009008 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f99e 	bl	8009342 <USBD_CtlError>
  }
}
 8009006:	bf00      	nop
 8009008:	bf00      	nop
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	885b      	ldrh	r3, [r3, #2]
 8009022:	b2da      	uxtb	r2, r3
 8009024:	4b4e      	ldr	r3, [pc, #312]	@ (8009160 <USBD_SetConfig+0x150>)
 8009026:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009028:	4b4d      	ldr	r3, [pc, #308]	@ (8009160 <USBD_SetConfig+0x150>)
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d905      	bls.n	800903c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009030:	6839      	ldr	r1, [r7, #0]
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f985 	bl	8009342 <USBD_CtlError>
    return USBD_FAIL;
 8009038:	2303      	movs	r3, #3
 800903a:	e08c      	b.n	8009156 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b02      	cmp	r3, #2
 8009046:	d002      	beq.n	800904e <USBD_SetConfig+0x3e>
 8009048:	2b03      	cmp	r3, #3
 800904a:	d029      	beq.n	80090a0 <USBD_SetConfig+0x90>
 800904c:	e075      	b.n	800913a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800904e:	4b44      	ldr	r3, [pc, #272]	@ (8009160 <USBD_SetConfig+0x150>)
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d020      	beq.n	8009098 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009056:	4b42      	ldr	r3, [pc, #264]	@ (8009160 <USBD_SetConfig+0x150>)
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	461a      	mov	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009060:	4b3f      	ldr	r3, [pc, #252]	@ (8009160 <USBD_SetConfig+0x150>)
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	4619      	mov	r1, r3
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7fe ffe3 	bl	8008032 <USBD_SetClassConfig>
 800906c:	4603      	mov	r3, r0
 800906e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009070:	7bfb      	ldrb	r3, [r7, #15]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d008      	beq.n	8009088 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009076:	6839      	ldr	r1, [r7, #0]
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f962 	bl	8009342 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2202      	movs	r2, #2
 8009082:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009086:	e065      	b.n	8009154 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fa31 	bl	80094f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2203      	movs	r2, #3
 8009092:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009096:	e05d      	b.n	8009154 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fa29 	bl	80094f0 <USBD_CtlSendStatus>
      break;
 800909e:	e059      	b.n	8009154 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80090a0:	4b2f      	ldr	r3, [pc, #188]	@ (8009160 <USBD_SetConfig+0x150>)
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d112      	bne.n	80090ce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2202      	movs	r2, #2
 80090ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80090b0:	4b2b      	ldr	r3, [pc, #172]	@ (8009160 <USBD_SetConfig+0x150>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	461a      	mov	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090ba:	4b29      	ldr	r3, [pc, #164]	@ (8009160 <USBD_SetConfig+0x150>)
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7fe ffd2 	bl	800806a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fa12 	bl	80094f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80090cc:	e042      	b.n	8009154 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80090ce:	4b24      	ldr	r3, [pc, #144]	@ (8009160 <USBD_SetConfig+0x150>)
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d02a      	beq.n	8009132 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	4619      	mov	r1, r3
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f7fe ffc0 	bl	800806a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80090ea:	4b1d      	ldr	r3, [pc, #116]	@ (8009160 <USBD_SetConfig+0x150>)
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	461a      	mov	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80090f4:	4b1a      	ldr	r3, [pc, #104]	@ (8009160 <USBD_SetConfig+0x150>)
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7fe ff99 	bl	8008032 <USBD_SetClassConfig>
 8009100:	4603      	mov	r3, r0
 8009102:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009104:	7bfb      	ldrb	r3, [r7, #15]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00f      	beq.n	800912a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f918 	bl	8009342 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	b2db      	uxtb	r3, r3
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7fe ffa5 	bl	800806a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2202      	movs	r2, #2
 8009124:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009128:	e014      	b.n	8009154 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f9e0 	bl	80094f0 <USBD_CtlSendStatus>
      break;
 8009130:	e010      	b.n	8009154 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f9dc 	bl	80094f0 <USBD_CtlSendStatus>
      break;
 8009138:	e00c      	b.n	8009154 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f900 	bl	8009342 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009142:	4b07      	ldr	r3, [pc, #28]	@ (8009160 <USBD_SetConfig+0x150>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7fe ff8e 	bl	800806a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800914e:	2303      	movs	r3, #3
 8009150:	73fb      	strb	r3, [r7, #15]
      break;
 8009152:	bf00      	nop
  }

  return ret;
 8009154:	7bfb      	ldrb	r3, [r7, #15]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	2000035c 	.word	0x2000035c

08009164 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	88db      	ldrh	r3, [r3, #6]
 8009172:	2b01      	cmp	r3, #1
 8009174:	d004      	beq.n	8009180 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f8e2 	bl	8009342 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800917e:	e023      	b.n	80091c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009186:	b2db      	uxtb	r3, r3
 8009188:	2b02      	cmp	r3, #2
 800918a:	dc02      	bgt.n	8009192 <USBD_GetConfig+0x2e>
 800918c:	2b00      	cmp	r3, #0
 800918e:	dc03      	bgt.n	8009198 <USBD_GetConfig+0x34>
 8009190:	e015      	b.n	80091be <USBD_GetConfig+0x5a>
 8009192:	2b03      	cmp	r3, #3
 8009194:	d00b      	beq.n	80091ae <USBD_GetConfig+0x4a>
 8009196:	e012      	b.n	80091be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	3308      	adds	r3, #8
 80091a2:	2201      	movs	r2, #1
 80091a4:	4619      	mov	r1, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 f948 	bl	800943c <USBD_CtlSendData>
        break;
 80091ac:	e00c      	b.n	80091c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	3304      	adds	r3, #4
 80091b2:	2201      	movs	r2, #1
 80091b4:	4619      	mov	r1, r3
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f940 	bl	800943c <USBD_CtlSendData>
        break;
 80091bc:	e004      	b.n	80091c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80091be:	6839      	ldr	r1, [r7, #0]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f8be 	bl	8009342 <USBD_CtlError>
        break;
 80091c6:	bf00      	nop
}
 80091c8:	bf00      	nop
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	3b01      	subs	r3, #1
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d81e      	bhi.n	8009226 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	88db      	ldrh	r3, [r3, #6]
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d004      	beq.n	80091fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80091f0:	6839      	ldr	r1, [r7, #0]
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 f8a5 	bl	8009342 <USBD_CtlError>
        break;
 80091f8:	e01a      	b.n	8009230 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2201      	movs	r2, #1
 80091fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009206:	2b00      	cmp	r3, #0
 8009208:	d005      	beq.n	8009216 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	f043 0202 	orr.w	r2, r3, #2
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	330c      	adds	r3, #12
 800921a:	2202      	movs	r2, #2
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f90c 	bl	800943c <USBD_CtlSendData>
      break;
 8009224:	e004      	b.n	8009230 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f88a 	bl	8009342 <USBD_CtlError>
      break;
 800922e:	bf00      	nop
  }
}
 8009230:	bf00      	nop
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	885b      	ldrh	r3, [r3, #2]
 8009246:	2b01      	cmp	r3, #1
 8009248:	d107      	bne.n	800925a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f94c 	bl	80094f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009258:	e013      	b.n	8009282 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	885b      	ldrh	r3, [r3, #2]
 800925e:	2b02      	cmp	r3, #2
 8009260:	d10b      	bne.n	800927a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	889b      	ldrh	r3, [r3, #4]
 8009266:	0a1b      	lsrs	r3, r3, #8
 8009268:	b29b      	uxth	r3, r3
 800926a:	b2da      	uxtb	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f93c 	bl	80094f0 <USBD_CtlSendStatus>
}
 8009278:	e003      	b.n	8009282 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 f860 	bl	8009342 <USBD_CtlError>
}
 8009282:	bf00      	nop
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b082      	sub	sp, #8
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800929a:	b2db      	uxtb	r3, r3
 800929c:	3b01      	subs	r3, #1
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d80b      	bhi.n	80092ba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	885b      	ldrh	r3, [r3, #2]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d10c      	bne.n	80092c4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f91c 	bl	80094f0 <USBD_CtlSendStatus>
      }
      break;
 80092b8:	e004      	b.n	80092c4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80092ba:	6839      	ldr	r1, [r7, #0]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f840 	bl	8009342 <USBD_CtlError>
      break;
 80092c2:	e000      	b.n	80092c6 <USBD_ClrFeature+0x3c>
      break;
 80092c4:	bf00      	nop
  }
}
 80092c6:	bf00      	nop
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	781a      	ldrb	r2, [r3, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	3301      	adds	r3, #1
 80092e8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	781a      	ldrb	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	3301      	adds	r3, #1
 80092f6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f7ff fa40 	bl	800877e <SWAPBYTE>
 80092fe:	4603      	mov	r3, r0
 8009300:	461a      	mov	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	3301      	adds	r3, #1
 800930a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	3301      	adds	r3, #1
 8009310:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f7ff fa33 	bl	800877e <SWAPBYTE>
 8009318:	4603      	mov	r3, r0
 800931a:	461a      	mov	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	3301      	adds	r3, #1
 8009324:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	3301      	adds	r3, #1
 800932a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f7ff fa26 	bl	800877e <SWAPBYTE>
 8009332:	4603      	mov	r3, r0
 8009334:	461a      	mov	r2, r3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	80da      	strh	r2, [r3, #6]
}
 800933a:	bf00      	nop
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b082      	sub	sp, #8
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800934c:	2180      	movs	r1, #128	@ 0x80
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fcfa 	bl	8009d48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009354:	2100      	movs	r1, #0
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fcf6 	bl	8009d48 <USBD_LL_StallEP>
}
 800935c:	bf00      	nop
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009370:	2300      	movs	r3, #0
 8009372:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d042      	beq.n	8009400 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800937e:	6938      	ldr	r0, [r7, #16]
 8009380:	f000 f842 	bl	8009408 <USBD_GetLen>
 8009384:	4603      	mov	r3, r0
 8009386:	3301      	adds	r3, #1
 8009388:	005b      	lsls	r3, r3, #1
 800938a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800938e:	d808      	bhi.n	80093a2 <USBD_GetString+0x3e>
 8009390:	6938      	ldr	r0, [r7, #16]
 8009392:	f000 f839 	bl	8009408 <USBD_GetLen>
 8009396:	4603      	mov	r3, r0
 8009398:	3301      	adds	r3, #1
 800939a:	b29b      	uxth	r3, r3
 800939c:	005b      	lsls	r3, r3, #1
 800939e:	b29a      	uxth	r2, r3
 80093a0:	e001      	b.n	80093a6 <USBD_GetString+0x42>
 80093a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80093aa:	7dfb      	ldrb	r3, [r7, #23]
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	4413      	add	r3, r2
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	7812      	ldrb	r2, [r2, #0]
 80093b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80093b6:	7dfb      	ldrb	r3, [r7, #23]
 80093b8:	3301      	adds	r3, #1
 80093ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80093bc:	7dfb      	ldrb	r3, [r7, #23]
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	4413      	add	r3, r2
 80093c2:	2203      	movs	r2, #3
 80093c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
 80093c8:	3301      	adds	r3, #1
 80093ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80093cc:	e013      	b.n	80093f6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80093ce:	7dfb      	ldrb	r3, [r7, #23]
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	4413      	add	r3, r2
 80093d4:	693a      	ldr	r2, [r7, #16]
 80093d6:	7812      	ldrb	r2, [r2, #0]
 80093d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	3301      	adds	r3, #1
 80093de:	613b      	str	r3, [r7, #16]
    idx++;
 80093e0:	7dfb      	ldrb	r3, [r7, #23]
 80093e2:	3301      	adds	r3, #1
 80093e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80093e6:	7dfb      	ldrb	r3, [r7, #23]
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	4413      	add	r3, r2
 80093ec:	2200      	movs	r2, #0
 80093ee:	701a      	strb	r2, [r3, #0]
    idx++;
 80093f0:	7dfb      	ldrb	r3, [r7, #23]
 80093f2:	3301      	adds	r3, #1
 80093f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d1e7      	bne.n	80093ce <USBD_GetString+0x6a>
 80093fe:	e000      	b.n	8009402 <USBD_GetString+0x9e>
    return;
 8009400:	bf00      	nop
  }
}
 8009402:	3718      	adds	r7, #24
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009410:	2300      	movs	r3, #0
 8009412:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009418:	e005      	b.n	8009426 <USBD_GetLen+0x1e>
  {
    len++;
 800941a:	7bfb      	ldrb	r3, [r7, #15]
 800941c:	3301      	adds	r3, #1
 800941e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	3301      	adds	r3, #1
 8009424:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1f5      	bne.n	800941a <USBD_GetLen+0x12>
  }

  return len;
 800942e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3714      	adds	r7, #20
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2202      	movs	r2, #2
 800944c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	68ba      	ldr	r2, [r7, #8]
 8009460:	2100      	movs	r1, #0
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f000 fcf9 	bl	8009e5a <USBD_LL_Transmit>

  return USBD_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	60f8      	str	r0, [r7, #12]
 800947a:	60b9      	str	r1, [r7, #8]
 800947c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	2100      	movs	r1, #0
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f000 fce8 	bl	8009e5a <USBD_LL_Transmit>

  return USBD_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2203      	movs	r2, #3
 80094a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	2100      	movs	r1, #0
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f000 fcec 	bl	8009e9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b084      	sub	sp, #16
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	60f8      	str	r0, [r7, #12]
 80094d6:	60b9      	str	r1, [r7, #8]
 80094d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	2100      	movs	r1, #0
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f000 fcdb 	bl	8009e9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2204      	movs	r2, #4
 80094fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009500:	2300      	movs	r3, #0
 8009502:	2200      	movs	r2, #0
 8009504:	2100      	movs	r1, #0
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fca7 	bl	8009e5a <USBD_LL_Transmit>

  return USBD_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b082      	sub	sp, #8
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2205      	movs	r2, #5
 8009522:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009526:	2300      	movs	r3, #0
 8009528:	2200      	movs	r2, #0
 800952a:	2100      	movs	r1, #0
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fcb5 	bl	8009e9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009540:	2200      	movs	r2, #0
 8009542:	4912      	ldr	r1, [pc, #72]	@ (800958c <MX_USB_DEVICE_Init+0x50>)
 8009544:	4812      	ldr	r0, [pc, #72]	@ (8009590 <MX_USB_DEVICE_Init+0x54>)
 8009546:	f7fe fcf7 	bl	8007f38 <USBD_Init>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d001      	beq.n	8009554 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009550:	f7f7 fdd0 	bl	80010f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009554:	490f      	ldr	r1, [pc, #60]	@ (8009594 <MX_USB_DEVICE_Init+0x58>)
 8009556:	480e      	ldr	r0, [pc, #56]	@ (8009590 <MX_USB_DEVICE_Init+0x54>)
 8009558:	f7fe fd1e 	bl	8007f98 <USBD_RegisterClass>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009562:	f7f7 fdc7 	bl	80010f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009566:	490c      	ldr	r1, [pc, #48]	@ (8009598 <MX_USB_DEVICE_Init+0x5c>)
 8009568:	4809      	ldr	r0, [pc, #36]	@ (8009590 <MX_USB_DEVICE_Init+0x54>)
 800956a:	f7fe fc15 	bl	8007d98 <USBD_CDC_RegisterInterface>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d001      	beq.n	8009578 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009574:	f7f7 fdbe 	bl	80010f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009578:	4805      	ldr	r0, [pc, #20]	@ (8009590 <MX_USB_DEVICE_Init+0x54>)
 800957a:	f7fe fd43 	bl	8008004 <USBD_Start>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d001      	beq.n	8009588 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009584:	f7f7 fdb6 	bl	80010f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009588:	bf00      	nop
 800958a:	bd80      	pop	{r7, pc}
 800958c:	200000ac 	.word	0x200000ac
 8009590:	20000360 	.word	0x20000360
 8009594:	20000018 	.word	0x20000018
 8009598:	20000098 	.word	0x20000098

0800959c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80095a0:	2200      	movs	r2, #0
 80095a2:	4905      	ldr	r1, [pc, #20]	@ (80095b8 <CDC_Init_FS+0x1c>)
 80095a4:	4805      	ldr	r0, [pc, #20]	@ (80095bc <CDC_Init_FS+0x20>)
 80095a6:	f7fe fc11 	bl	8007dcc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80095aa:	4905      	ldr	r1, [pc, #20]	@ (80095c0 <CDC_Init_FS+0x24>)
 80095ac:	4803      	ldr	r0, [pc, #12]	@ (80095bc <CDC_Init_FS+0x20>)
 80095ae:	f7fe fc2f 	bl	8007e10 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80095b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	20000e3c 	.word	0x20000e3c
 80095bc:	20000360 	.word	0x20000360
 80095c0:	2000063c 	.word	0x2000063c

080095c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80095c4:	b480      	push	{r7}
 80095c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80095c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	4603      	mov	r3, r0
 80095dc:	6039      	str	r1, [r7, #0]
 80095de:	71fb      	strb	r3, [r7, #7]
 80095e0:	4613      	mov	r3, r2
 80095e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80095e4:	79fb      	ldrb	r3, [r7, #7]
 80095e6:	2b23      	cmp	r3, #35	@ 0x23
 80095e8:	d84a      	bhi.n	8009680 <CDC_Control_FS+0xac>
 80095ea:	a201      	add	r2, pc, #4	@ (adr r2, 80095f0 <CDC_Control_FS+0x1c>)
 80095ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f0:	08009681 	.word	0x08009681
 80095f4:	08009681 	.word	0x08009681
 80095f8:	08009681 	.word	0x08009681
 80095fc:	08009681 	.word	0x08009681
 8009600:	08009681 	.word	0x08009681
 8009604:	08009681 	.word	0x08009681
 8009608:	08009681 	.word	0x08009681
 800960c:	08009681 	.word	0x08009681
 8009610:	08009681 	.word	0x08009681
 8009614:	08009681 	.word	0x08009681
 8009618:	08009681 	.word	0x08009681
 800961c:	08009681 	.word	0x08009681
 8009620:	08009681 	.word	0x08009681
 8009624:	08009681 	.word	0x08009681
 8009628:	08009681 	.word	0x08009681
 800962c:	08009681 	.word	0x08009681
 8009630:	08009681 	.word	0x08009681
 8009634:	08009681 	.word	0x08009681
 8009638:	08009681 	.word	0x08009681
 800963c:	08009681 	.word	0x08009681
 8009640:	08009681 	.word	0x08009681
 8009644:	08009681 	.word	0x08009681
 8009648:	08009681 	.word	0x08009681
 800964c:	08009681 	.word	0x08009681
 8009650:	08009681 	.word	0x08009681
 8009654:	08009681 	.word	0x08009681
 8009658:	08009681 	.word	0x08009681
 800965c:	08009681 	.word	0x08009681
 8009660:	08009681 	.word	0x08009681
 8009664:	08009681 	.word	0x08009681
 8009668:	08009681 	.word	0x08009681
 800966c:	08009681 	.word	0x08009681
 8009670:	08009681 	.word	0x08009681
 8009674:	08009681 	.word	0x08009681
 8009678:	08009681 	.word	0x08009681
 800967c:	08009681 	.word	0x08009681
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009680:	bf00      	nop
  }

  return (USBD_OK);
 8009682:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009684:	4618      	mov	r0, r3
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800969a:	6879      	ldr	r1, [r7, #4]
 800969c:	4805      	ldr	r0, [pc, #20]	@ (80096b4 <CDC_Receive_FS+0x24>)
 800969e:	f7fe fbb7 	bl	8007e10 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80096a2:	4804      	ldr	r0, [pc, #16]	@ (80096b4 <CDC_Receive_FS+0x24>)
 80096a4:	f7fe fc12 	bl	8007ecc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80096a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	20000360 	.word	0x20000360

080096b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	460b      	mov	r3, r1
 80096c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80096c8:	4b0d      	ldr	r3, [pc, #52]	@ (8009700 <CDC_Transmit_FS+0x48>)
 80096ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80096ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d001      	beq.n	80096de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80096da:	2301      	movs	r3, #1
 80096dc:	e00b      	b.n	80096f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80096de:	887b      	ldrh	r3, [r7, #2]
 80096e0:	461a      	mov	r2, r3
 80096e2:	6879      	ldr	r1, [r7, #4]
 80096e4:	4806      	ldr	r0, [pc, #24]	@ (8009700 <CDC_Transmit_FS+0x48>)
 80096e6:	f7fe fb71 	bl	8007dcc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80096ea:	4805      	ldr	r0, [pc, #20]	@ (8009700 <CDC_Transmit_FS+0x48>)
 80096ec:	f7fe fbae 	bl	8007e4c <USBD_CDC_TransmitPacket>
 80096f0:	4603      	mov	r3, r0
 80096f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	20000360 	.word	0x20000360

08009704 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009704:	b480      	push	{r7}
 8009706:	b087      	sub	sp, #28
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	4613      	mov	r3, r2
 8009710:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009712:	2300      	movs	r3, #0
 8009714:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009716:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800971a:	4618      	mov	r0, r3
 800971c:	371c      	adds	r7, #28
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
	...

08009728 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	4603      	mov	r3, r0
 8009730:	6039      	str	r1, [r7, #0]
 8009732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	2212      	movs	r2, #18
 8009738:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800973a:	4b03      	ldr	r3, [pc, #12]	@ (8009748 <USBD_FS_DeviceDescriptor+0x20>)
}
 800973c:	4618      	mov	r0, r3
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr
 8009748:	200000c8 	.word	0x200000c8

0800974c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	4603      	mov	r3, r0
 8009754:	6039      	str	r1, [r7, #0]
 8009756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	2204      	movs	r2, #4
 800975c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800975e:	4b03      	ldr	r3, [pc, #12]	@ (800976c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009760:	4618      	mov	r0, r3
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr
 800976c:	200000dc 	.word	0x200000dc

08009770 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	4603      	mov	r3, r0
 8009778:	6039      	str	r1, [r7, #0]
 800977a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800977c:	79fb      	ldrb	r3, [r7, #7]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d105      	bne.n	800978e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009782:	683a      	ldr	r2, [r7, #0]
 8009784:	4907      	ldr	r1, [pc, #28]	@ (80097a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009786:	4808      	ldr	r0, [pc, #32]	@ (80097a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009788:	f7ff fdec 	bl	8009364 <USBD_GetString>
 800978c:	e004      	b.n	8009798 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	4904      	ldr	r1, [pc, #16]	@ (80097a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009792:	4805      	ldr	r0, [pc, #20]	@ (80097a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009794:	f7ff fde6 	bl	8009364 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009798:	4b02      	ldr	r3, [pc, #8]	@ (80097a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800979a:	4618      	mov	r0, r3
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	2000163c 	.word	0x2000163c
 80097a8:	0800a910 	.word	0x0800a910

080097ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	4603      	mov	r3, r0
 80097b4:	6039      	str	r1, [r7, #0]
 80097b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097b8:	683a      	ldr	r2, [r7, #0]
 80097ba:	4904      	ldr	r1, [pc, #16]	@ (80097cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097bc:	4804      	ldr	r0, [pc, #16]	@ (80097d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097be:	f7ff fdd1 	bl	8009364 <USBD_GetString>
  return USBD_StrDesc;
 80097c2:	4b02      	ldr	r3, [pc, #8]	@ (80097cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	2000163c 	.word	0x2000163c
 80097d0:	0800a928 	.word	0x0800a928

080097d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	4603      	mov	r3, r0
 80097dc:	6039      	str	r1, [r7, #0]
 80097de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	221a      	movs	r2, #26
 80097e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097e6:	f000 f843 	bl	8009870 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097ea:	4b02      	ldr	r3, [pc, #8]	@ (80097f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	200000e0 	.word	0x200000e0

080097f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	4603      	mov	r3, r0
 8009800:	6039      	str	r1, [r7, #0]
 8009802:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009804:	79fb      	ldrb	r3, [r7, #7]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d105      	bne.n	8009816 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	4907      	ldr	r1, [pc, #28]	@ (800982c <USBD_FS_ConfigStrDescriptor+0x34>)
 800980e:	4808      	ldr	r0, [pc, #32]	@ (8009830 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009810:	f7ff fda8 	bl	8009364 <USBD_GetString>
 8009814:	e004      	b.n	8009820 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	4904      	ldr	r1, [pc, #16]	@ (800982c <USBD_FS_ConfigStrDescriptor+0x34>)
 800981a:	4805      	ldr	r0, [pc, #20]	@ (8009830 <USBD_FS_ConfigStrDescriptor+0x38>)
 800981c:	f7ff fda2 	bl	8009364 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009820:	4b02      	ldr	r3, [pc, #8]	@ (800982c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009822:	4618      	mov	r0, r3
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	2000163c 	.word	0x2000163c
 8009830:	0800a93c 	.word	0x0800a93c

08009834 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	4603      	mov	r3, r0
 800983c:	6039      	str	r1, [r7, #0]
 800983e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009840:	79fb      	ldrb	r3, [r7, #7]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d105      	bne.n	8009852 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	4907      	ldr	r1, [pc, #28]	@ (8009868 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800984a:	4808      	ldr	r0, [pc, #32]	@ (800986c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800984c:	f7ff fd8a 	bl	8009364 <USBD_GetString>
 8009850:	e004      	b.n	800985c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	4904      	ldr	r1, [pc, #16]	@ (8009868 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009856:	4805      	ldr	r0, [pc, #20]	@ (800986c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009858:	f7ff fd84 	bl	8009364 <USBD_GetString>
  }
  return USBD_StrDesc;
 800985c:	4b02      	ldr	r3, [pc, #8]	@ (8009868 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	2000163c 	.word	0x2000163c
 800986c:	0800a948 	.word	0x0800a948

08009870 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009876:	4b0f      	ldr	r3, [pc, #60]	@ (80098b4 <Get_SerialNum+0x44>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800987c:	4b0e      	ldr	r3, [pc, #56]	@ (80098b8 <Get_SerialNum+0x48>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009882:	4b0e      	ldr	r3, [pc, #56]	@ (80098bc <Get_SerialNum+0x4c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4413      	add	r3, r2
 800988e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d009      	beq.n	80098aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009896:	2208      	movs	r2, #8
 8009898:	4909      	ldr	r1, [pc, #36]	@ (80098c0 <Get_SerialNum+0x50>)
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f000 f814 	bl	80098c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098a0:	2204      	movs	r2, #4
 80098a2:	4908      	ldr	r1, [pc, #32]	@ (80098c4 <Get_SerialNum+0x54>)
 80098a4:	68b8      	ldr	r0, [r7, #8]
 80098a6:	f000 f80f 	bl	80098c8 <IntToUnicode>
  }
}
 80098aa:	bf00      	nop
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	1fff7a10 	.word	0x1fff7a10
 80098b8:	1fff7a14 	.word	0x1fff7a14
 80098bc:	1fff7a18 	.word	0x1fff7a18
 80098c0:	200000e2 	.word	0x200000e2
 80098c4:	200000f2 	.word	0x200000f2

080098c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	4613      	mov	r3, r2
 80098d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098da:	2300      	movs	r3, #0
 80098dc:	75fb      	strb	r3, [r7, #23]
 80098de:	e027      	b.n	8009930 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	0f1b      	lsrs	r3, r3, #28
 80098e4:	2b09      	cmp	r3, #9
 80098e6:	d80b      	bhi.n	8009900 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	0f1b      	lsrs	r3, r3, #28
 80098ec:	b2da      	uxtb	r2, r3
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	4619      	mov	r1, r3
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	440b      	add	r3, r1
 80098f8:	3230      	adds	r2, #48	@ 0x30
 80098fa:	b2d2      	uxtb	r2, r2
 80098fc:	701a      	strb	r2, [r3, #0]
 80098fe:	e00a      	b.n	8009916 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	0f1b      	lsrs	r3, r3, #28
 8009904:	b2da      	uxtb	r2, r3
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	005b      	lsls	r3, r3, #1
 800990a:	4619      	mov	r1, r3
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	440b      	add	r3, r1
 8009910:	3237      	adds	r2, #55	@ 0x37
 8009912:	b2d2      	uxtb	r2, r2
 8009914:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	011b      	lsls	r3, r3, #4
 800991a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800991c:	7dfb      	ldrb	r3, [r7, #23]
 800991e:	005b      	lsls	r3, r3, #1
 8009920:	3301      	adds	r3, #1
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	4413      	add	r3, r2
 8009926:	2200      	movs	r2, #0
 8009928:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800992a:	7dfb      	ldrb	r3, [r7, #23]
 800992c:	3301      	adds	r3, #1
 800992e:	75fb      	strb	r3, [r7, #23]
 8009930:	7dfa      	ldrb	r2, [r7, #23]
 8009932:	79fb      	ldrb	r3, [r7, #7]
 8009934:	429a      	cmp	r2, r3
 8009936:	d3d3      	bcc.n	80098e0 <IntToUnicode+0x18>
  }
}
 8009938:	bf00      	nop
 800993a:	bf00      	nop
 800993c:	371c      	adds	r7, #28
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
	...

08009948 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b08a      	sub	sp, #40	@ 0x28
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009950:	f107 0314 	add.w	r3, r7, #20
 8009954:	2200      	movs	r2, #0
 8009956:	601a      	str	r2, [r3, #0]
 8009958:	605a      	str	r2, [r3, #4]
 800995a:	609a      	str	r2, [r3, #8]
 800995c:	60da      	str	r2, [r3, #12]
 800995e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009968:	d147      	bne.n	80099fa <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800996a:	2300      	movs	r3, #0
 800996c:	613b      	str	r3, [r7, #16]
 800996e:	4b25      	ldr	r3, [pc, #148]	@ (8009a04 <HAL_PCD_MspInit+0xbc>)
 8009970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009972:	4a24      	ldr	r2, [pc, #144]	@ (8009a04 <HAL_PCD_MspInit+0xbc>)
 8009974:	f043 0301 	orr.w	r3, r3, #1
 8009978:	6313      	str	r3, [r2, #48]	@ 0x30
 800997a:	4b22      	ldr	r3, [pc, #136]	@ (8009a04 <HAL_PCD_MspInit+0xbc>)
 800997c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800997e:	f003 0301 	and.w	r3, r3, #1
 8009982:	613b      	str	r3, [r7, #16]
 8009984:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009986:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800998a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800998c:	2300      	movs	r3, #0
 800998e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009990:	2300      	movs	r3, #0
 8009992:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009994:	f107 0314 	add.w	r3, r7, #20
 8009998:	4619      	mov	r1, r3
 800999a:	481b      	ldr	r0, [pc, #108]	@ (8009a08 <HAL_PCD_MspInit+0xc0>)
 800999c:	f7f9 f8f0 	bl	8002b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80099a0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80099a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099a6:	2302      	movs	r3, #2
 80099a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099aa:	2300      	movs	r3, #0
 80099ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099ae:	2303      	movs	r3, #3
 80099b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80099b2:	230a      	movs	r3, #10
 80099b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099b6:	f107 0314 	add.w	r3, r7, #20
 80099ba:	4619      	mov	r1, r3
 80099bc:	4812      	ldr	r0, [pc, #72]	@ (8009a08 <HAL_PCD_MspInit+0xc0>)
 80099be:	f7f9 f8df 	bl	8002b80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80099c2:	4b10      	ldr	r3, [pc, #64]	@ (8009a04 <HAL_PCD_MspInit+0xbc>)
 80099c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099c6:	4a0f      	ldr	r2, [pc, #60]	@ (8009a04 <HAL_PCD_MspInit+0xbc>)
 80099c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099cc:	6353      	str	r3, [r2, #52]	@ 0x34
 80099ce:	2300      	movs	r3, #0
 80099d0:	60fb      	str	r3, [r7, #12]
 80099d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009a04 <HAL_PCD_MspInit+0xbc>)
 80099d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099d6:	4a0b      	ldr	r2, [pc, #44]	@ (8009a04 <HAL_PCD_MspInit+0xbc>)
 80099d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80099dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80099de:	4b09      	ldr	r3, [pc, #36]	@ (8009a04 <HAL_PCD_MspInit+0xbc>)
 80099e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099e6:	60fb      	str	r3, [r7, #12]
 80099e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80099ea:	2200      	movs	r2, #0
 80099ec:	2100      	movs	r1, #0
 80099ee:	2043      	movs	r0, #67	@ 0x43
 80099f0:	f7f8 fb21 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80099f4:	2043      	movs	r0, #67	@ 0x43
 80099f6:	f7f8 fb3a 	bl	800206e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80099fa:	bf00      	nop
 80099fc:	3728      	adds	r7, #40	@ 0x28
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	40023800 	.word	0x40023800
 8009a08:	40020000 	.word	0x40020000

08009a0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009a20:	4619      	mov	r1, r3
 8009a22:	4610      	mov	r0, r2
 8009a24:	f7fe fb3b 	bl	800809e <USBD_LL_SetupStage>
}
 8009a28:	bf00      	nop
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009a42:	78fa      	ldrb	r2, [r7, #3]
 8009a44:	6879      	ldr	r1, [r7, #4]
 8009a46:	4613      	mov	r3, r2
 8009a48:	00db      	lsls	r3, r3, #3
 8009a4a:	4413      	add	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	440b      	add	r3, r1
 8009a50:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	78fb      	ldrb	r3, [r7, #3]
 8009a58:	4619      	mov	r1, r3
 8009a5a:	f7fe fb75 	bl	8008148 <USBD_LL_DataOutStage>
}
 8009a5e:	bf00      	nop
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b082      	sub	sp, #8
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
 8009a6e:	460b      	mov	r3, r1
 8009a70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009a78:	78fa      	ldrb	r2, [r7, #3]
 8009a7a:	6879      	ldr	r1, [r7, #4]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	00db      	lsls	r3, r3, #3
 8009a80:	4413      	add	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	440b      	add	r3, r1
 8009a86:	3320      	adds	r3, #32
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	78fb      	ldrb	r3, [r7, #3]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	f7fe fc0e 	bl	80082ae <USBD_LL_DataInStage>
}
 8009a92:	bf00      	nop
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b082      	sub	sp, #8
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7fe fd48 	bl	800853e <USBD_LL_SOF>
}
 8009aae:	bf00      	nop
 8009ab0:	3708      	adds	r7, #8
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ab6:	b580      	push	{r7, lr}
 8009ab8:	b084      	sub	sp, #16
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	79db      	ldrb	r3, [r3, #7]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d102      	bne.n	8009ad0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009aca:	2300      	movs	r3, #0
 8009acc:	73fb      	strb	r3, [r7, #15]
 8009ace:	e008      	b.n	8009ae2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	79db      	ldrb	r3, [r3, #7]
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d102      	bne.n	8009ade <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	73fb      	strb	r3, [r7, #15]
 8009adc:	e001      	b.n	8009ae2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009ade:	f7f7 fb09 	bl	80010f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ae8:	7bfa      	ldrb	r2, [r7, #15]
 8009aea:	4611      	mov	r1, r2
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7fe fce2 	bl	80084b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7fe fc8a 	bl	8008412 <USBD_LL_Reset>
}
 8009afe:	bf00      	nop
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
	...

08009b08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7fe fcdd 	bl	80084d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	6812      	ldr	r2, [r2, #0]
 8009b2a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009b2e:	f043 0301 	orr.w	r3, r3, #1
 8009b32:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	7adb      	ldrb	r3, [r3, #11]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d005      	beq.n	8009b48 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b3c:	4b04      	ldr	r3, [pc, #16]	@ (8009b50 <HAL_PCD_SuspendCallback+0x48>)
 8009b3e:	691b      	ldr	r3, [r3, #16]
 8009b40:	4a03      	ldr	r2, [pc, #12]	@ (8009b50 <HAL_PCD_SuspendCallback+0x48>)
 8009b42:	f043 0306 	orr.w	r3, r3, #6
 8009b46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b48:	bf00      	nop
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	e000ed00 	.word	0xe000ed00

08009b54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fe fcd3 	bl	800850e <USBD_LL_Resume>
}
 8009b68:	bf00      	nop
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	460b      	mov	r3, r1
 8009b7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b82:	78fa      	ldrb	r2, [r7, #3]
 8009b84:	4611      	mov	r1, r2
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fe fd2b 	bl	80085e2 <USBD_LL_IsoOUTIncomplete>
}
 8009b8c:	bf00      	nop
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ba6:	78fa      	ldrb	r2, [r7, #3]
 8009ba8:	4611      	mov	r1, r2
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fe fce7 	bl	800857e <USBD_LL_IsoINIncomplete>
}
 8009bb0:	bf00      	nop
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7fe fd3d 	bl	8008646 <USBD_LL_DevConnected>
}
 8009bcc:	bf00      	nop
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fe fd3a 	bl	800865c <USBD_LL_DevDisconnected>
}
 8009be8:	bf00      	nop
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d13c      	bne.n	8009c7a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009c00:	4a20      	ldr	r2, [pc, #128]	@ (8009c84 <USBD_LL_Init+0x94>)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8009c84 <USBD_LL_Init+0x94>)
 8009c0c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009c10:	4b1c      	ldr	r3, [pc, #112]	@ (8009c84 <USBD_LL_Init+0x94>)
 8009c12:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009c16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009c18:	4b1a      	ldr	r3, [pc, #104]	@ (8009c84 <USBD_LL_Init+0x94>)
 8009c1a:	2204      	movs	r2, #4
 8009c1c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009c1e:	4b19      	ldr	r3, [pc, #100]	@ (8009c84 <USBD_LL_Init+0x94>)
 8009c20:	2202      	movs	r2, #2
 8009c22:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009c24:	4b17      	ldr	r3, [pc, #92]	@ (8009c84 <USBD_LL_Init+0x94>)
 8009c26:	2200      	movs	r2, #0
 8009c28:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009c2a:	4b16      	ldr	r3, [pc, #88]	@ (8009c84 <USBD_LL_Init+0x94>)
 8009c2c:	2202      	movs	r2, #2
 8009c2e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009c30:	4b14      	ldr	r3, [pc, #80]	@ (8009c84 <USBD_LL_Init+0x94>)
 8009c32:	2200      	movs	r2, #0
 8009c34:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009c36:	4b13      	ldr	r3, [pc, #76]	@ (8009c84 <USBD_LL_Init+0x94>)
 8009c38:	2200      	movs	r2, #0
 8009c3a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009c3c:	4b11      	ldr	r3, [pc, #68]	@ (8009c84 <USBD_LL_Init+0x94>)
 8009c3e:	2200      	movs	r2, #0
 8009c40:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009c42:	4b10      	ldr	r3, [pc, #64]	@ (8009c84 <USBD_LL_Init+0x94>)
 8009c44:	2201      	movs	r2, #1
 8009c46:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009c48:	4b0e      	ldr	r3, [pc, #56]	@ (8009c84 <USBD_LL_Init+0x94>)
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009c4e:	480d      	ldr	r0, [pc, #52]	@ (8009c84 <USBD_LL_Init+0x94>)
 8009c50:	f7f9 f97c 	bl	8002f4c <HAL_PCD_Init>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d001      	beq.n	8009c5e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009c5a:	f7f7 fa4b 	bl	80010f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009c5e:	2180      	movs	r1, #128	@ 0x80
 8009c60:	4808      	ldr	r0, [pc, #32]	@ (8009c84 <USBD_LL_Init+0x94>)
 8009c62:	f7fa fba8 	bl	80043b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009c66:	2240      	movs	r2, #64	@ 0x40
 8009c68:	2100      	movs	r1, #0
 8009c6a:	4806      	ldr	r0, [pc, #24]	@ (8009c84 <USBD_LL_Init+0x94>)
 8009c6c:	f7fa fb5c 	bl	8004328 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009c70:	2280      	movs	r2, #128	@ 0x80
 8009c72:	2101      	movs	r1, #1
 8009c74:	4803      	ldr	r0, [pc, #12]	@ (8009c84 <USBD_LL_Init+0x94>)
 8009c76:	f7fa fb57 	bl	8004328 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	2000183c 	.word	0x2000183c

08009c88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c90:	2300      	movs	r3, #0
 8009c92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7f9 fa63 	bl	800316a <HAL_PCD_Start>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ca8:	7bfb      	ldrb	r3, [r7, #15]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f000 f942 	bl	8009f34 <USBD_Get_USB_Status>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b084      	sub	sp, #16
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	4608      	mov	r0, r1
 8009cc8:	4611      	mov	r1, r2
 8009cca:	461a      	mov	r2, r3
 8009ccc:	4603      	mov	r3, r0
 8009cce:	70fb      	strb	r3, [r7, #3]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	70bb      	strb	r3, [r7, #2]
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009ce6:	78bb      	ldrb	r3, [r7, #2]
 8009ce8:	883a      	ldrh	r2, [r7, #0]
 8009cea:	78f9      	ldrb	r1, [r7, #3]
 8009cec:	f7f9 ff37 	bl	8003b5e <HAL_PCD_EP_Open>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cf4:	7bfb      	ldrb	r3, [r7, #15]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f000 f91c 	bl	8009f34 <USBD_Get_USB_Status>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d00:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b084      	sub	sp, #16
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	460b      	mov	r3, r1
 8009d14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d24:	78fa      	ldrb	r2, [r7, #3]
 8009d26:	4611      	mov	r1, r2
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7f9 ff82 	bl	8003c32 <HAL_PCD_EP_Close>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 f8fd 	bl	8009f34 <USBD_Get_USB_Status>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d54:	2300      	movs	r3, #0
 8009d56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d62:	78fa      	ldrb	r2, [r7, #3]
 8009d64:	4611      	mov	r1, r2
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7fa f83a 	bl	8003de0 <HAL_PCD_EP_SetStall>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d70:	7bfb      	ldrb	r3, [r7, #15]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f000 f8de 	bl	8009f34 <USBD_Get_USB_Status>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b084      	sub	sp, #16
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
 8009d8e:	460b      	mov	r3, r1
 8009d90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d92:	2300      	movs	r3, #0
 8009d94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009da0:	78fa      	ldrb	r2, [r7, #3]
 8009da2:	4611      	mov	r1, r2
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7fa f87e 	bl	8003ea6 <HAL_PCD_EP_ClrStall>
 8009daa:	4603      	mov	r3, r0
 8009dac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dae:	7bfb      	ldrb	r3, [r7, #15]
 8009db0:	4618      	mov	r0, r3
 8009db2:	f000 f8bf 	bl	8009f34 <USBD_Get_USB_Status>
 8009db6:	4603      	mov	r3, r0
 8009db8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dba:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009dd6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009dd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	da0b      	bge.n	8009df8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009de0:	78fb      	ldrb	r3, [r7, #3]
 8009de2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009de6:	68f9      	ldr	r1, [r7, #12]
 8009de8:	4613      	mov	r3, r2
 8009dea:	00db      	lsls	r3, r3, #3
 8009dec:	4413      	add	r3, r2
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	440b      	add	r3, r1
 8009df2:	3316      	adds	r3, #22
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	e00b      	b.n	8009e10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009df8:	78fb      	ldrb	r3, [r7, #3]
 8009dfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009dfe:	68f9      	ldr	r1, [r7, #12]
 8009e00:	4613      	mov	r3, r2
 8009e02:	00db      	lsls	r3, r3, #3
 8009e04:	4413      	add	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	440b      	add	r3, r1
 8009e0a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009e0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	460b      	mov	r3, r1
 8009e26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009e36:	78fa      	ldrb	r2, [r7, #3]
 8009e38:	4611      	mov	r1, r2
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7f9 fe6b 	bl	8003b16 <HAL_PCD_SetAddress>
 8009e40:	4603      	mov	r3, r0
 8009e42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e44:	7bfb      	ldrb	r3, [r7, #15]
 8009e46:	4618      	mov	r0, r3
 8009e48:	f000 f874 	bl	8009f34 <USBD_Get_USB_Status>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e50:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b086      	sub	sp, #24
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	60f8      	str	r0, [r7, #12]
 8009e62:	607a      	str	r2, [r7, #4]
 8009e64:	603b      	str	r3, [r7, #0]
 8009e66:	460b      	mov	r3, r1
 8009e68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009e78:	7af9      	ldrb	r1, [r7, #11]
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	f7f9 ff75 	bl	8003d6c <HAL_PCD_EP_Transmit>
 8009e82:	4603      	mov	r3, r0
 8009e84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e86:	7dfb      	ldrb	r3, [r7, #23]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f000 f853 	bl	8009f34 <USBD_Get_USB_Status>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e92:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3718      	adds	r7, #24
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b086      	sub	sp, #24
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	607a      	str	r2, [r7, #4]
 8009ea6:	603b      	str	r3, [r7, #0]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eac:	2300      	movs	r3, #0
 8009eae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009eba:	7af9      	ldrb	r1, [r7, #11]
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	f7f9 ff01 	bl	8003cc6 <HAL_PCD_EP_Receive>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ec8:	7dfb      	ldrb	r3, [r7, #23]
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f000 f832 	bl	8009f34 <USBD_Get_USB_Status>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ed4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3718      	adds	r7, #24
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b082      	sub	sp, #8
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ef0:	78fa      	ldrb	r2, [r7, #3]
 8009ef2:	4611      	mov	r1, r2
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7f9 ff21 	bl	8003d3c <HAL_PCD_EP_GetRxCount>
 8009efa:	4603      	mov	r3, r0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3708      	adds	r7, #8
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009f0c:	4b03      	ldr	r3, [pc, #12]	@ (8009f1c <USBD_static_malloc+0x18>)
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop
 8009f1c:	20001d20 	.word	0x20001d20

08009f20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]

}
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f42:	79fb      	ldrb	r3, [r7, #7]
 8009f44:	2b03      	cmp	r3, #3
 8009f46:	d817      	bhi.n	8009f78 <USBD_Get_USB_Status+0x44>
 8009f48:	a201      	add	r2, pc, #4	@ (adr r2, 8009f50 <USBD_Get_USB_Status+0x1c>)
 8009f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4e:	bf00      	nop
 8009f50:	08009f61 	.word	0x08009f61
 8009f54:	08009f67 	.word	0x08009f67
 8009f58:	08009f6d 	.word	0x08009f6d
 8009f5c:	08009f73 	.word	0x08009f73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	73fb      	strb	r3, [r7, #15]
    break;
 8009f64:	e00b      	b.n	8009f7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f66:	2303      	movs	r3, #3
 8009f68:	73fb      	strb	r3, [r7, #15]
    break;
 8009f6a:	e008      	b.n	8009f7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f70:	e005      	b.n	8009f7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f72:	2303      	movs	r3, #3
 8009f74:	73fb      	strb	r3, [r7, #15]
    break;
 8009f76:	e002      	b.n	8009f7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f78:	2303      	movs	r3, #3
 8009f7a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f7c:	bf00      	nop
  }
  return usb_status;
 8009f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <sniprintf>:
 8009f8c:	b40c      	push	{r2, r3}
 8009f8e:	b530      	push	{r4, r5, lr}
 8009f90:	4b17      	ldr	r3, [pc, #92]	@ (8009ff0 <sniprintf+0x64>)
 8009f92:	1e0c      	subs	r4, r1, #0
 8009f94:	681d      	ldr	r5, [r3, #0]
 8009f96:	b09d      	sub	sp, #116	@ 0x74
 8009f98:	da08      	bge.n	8009fac <sniprintf+0x20>
 8009f9a:	238b      	movs	r3, #139	@ 0x8b
 8009f9c:	602b      	str	r3, [r5, #0]
 8009f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa2:	b01d      	add	sp, #116	@ 0x74
 8009fa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fa8:	b002      	add	sp, #8
 8009faa:	4770      	bx	lr
 8009fac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009fb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009fb4:	bf14      	ite	ne
 8009fb6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009fba:	4623      	moveq	r3, r4
 8009fbc:	9304      	str	r3, [sp, #16]
 8009fbe:	9307      	str	r3, [sp, #28]
 8009fc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009fc4:	9002      	str	r0, [sp, #8]
 8009fc6:	9006      	str	r0, [sp, #24]
 8009fc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009fcc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009fce:	ab21      	add	r3, sp, #132	@ 0x84
 8009fd0:	a902      	add	r1, sp, #8
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	9301      	str	r3, [sp, #4]
 8009fd6:	f000 f995 	bl	800a304 <_svfiprintf_r>
 8009fda:	1c43      	adds	r3, r0, #1
 8009fdc:	bfbc      	itt	lt
 8009fde:	238b      	movlt	r3, #139	@ 0x8b
 8009fe0:	602b      	strlt	r3, [r5, #0]
 8009fe2:	2c00      	cmp	r4, #0
 8009fe4:	d0dd      	beq.n	8009fa2 <sniprintf+0x16>
 8009fe6:	9b02      	ldr	r3, [sp, #8]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	701a      	strb	r2, [r3, #0]
 8009fec:	e7d9      	b.n	8009fa2 <sniprintf+0x16>
 8009fee:	bf00      	nop
 8009ff0:	200000fc 	.word	0x200000fc

08009ff4 <memset>:
 8009ff4:	4402      	add	r2, r0
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d100      	bne.n	8009ffe <memset+0xa>
 8009ffc:	4770      	bx	lr
 8009ffe:	f803 1b01 	strb.w	r1, [r3], #1
 800a002:	e7f9      	b.n	8009ff8 <memset+0x4>

0800a004 <__errno>:
 800a004:	4b01      	ldr	r3, [pc, #4]	@ (800a00c <__errno+0x8>)
 800a006:	6818      	ldr	r0, [r3, #0]
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	200000fc 	.word	0x200000fc

0800a010 <__libc_init_array>:
 800a010:	b570      	push	{r4, r5, r6, lr}
 800a012:	4d0d      	ldr	r5, [pc, #52]	@ (800a048 <__libc_init_array+0x38>)
 800a014:	4c0d      	ldr	r4, [pc, #52]	@ (800a04c <__libc_init_array+0x3c>)
 800a016:	1b64      	subs	r4, r4, r5
 800a018:	10a4      	asrs	r4, r4, #2
 800a01a:	2600      	movs	r6, #0
 800a01c:	42a6      	cmp	r6, r4
 800a01e:	d109      	bne.n	800a034 <__libc_init_array+0x24>
 800a020:	4d0b      	ldr	r5, [pc, #44]	@ (800a050 <__libc_init_array+0x40>)
 800a022:	4c0c      	ldr	r4, [pc, #48]	@ (800a054 <__libc_init_array+0x44>)
 800a024:	f000 fc66 	bl	800a8f4 <_init>
 800a028:	1b64      	subs	r4, r4, r5
 800a02a:	10a4      	asrs	r4, r4, #2
 800a02c:	2600      	movs	r6, #0
 800a02e:	42a6      	cmp	r6, r4
 800a030:	d105      	bne.n	800a03e <__libc_init_array+0x2e>
 800a032:	bd70      	pop	{r4, r5, r6, pc}
 800a034:	f855 3b04 	ldr.w	r3, [r5], #4
 800a038:	4798      	blx	r3
 800a03a:	3601      	adds	r6, #1
 800a03c:	e7ee      	b.n	800a01c <__libc_init_array+0xc>
 800a03e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a042:	4798      	blx	r3
 800a044:	3601      	adds	r6, #1
 800a046:	e7f2      	b.n	800a02e <__libc_init_array+0x1e>
 800a048:	0800a9ac 	.word	0x0800a9ac
 800a04c:	0800a9ac 	.word	0x0800a9ac
 800a050:	0800a9ac 	.word	0x0800a9ac
 800a054:	0800a9b0 	.word	0x0800a9b0

0800a058 <__retarget_lock_acquire_recursive>:
 800a058:	4770      	bx	lr

0800a05a <__retarget_lock_release_recursive>:
 800a05a:	4770      	bx	lr

0800a05c <_free_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	4605      	mov	r5, r0
 800a060:	2900      	cmp	r1, #0
 800a062:	d041      	beq.n	800a0e8 <_free_r+0x8c>
 800a064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a068:	1f0c      	subs	r4, r1, #4
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	bfb8      	it	lt
 800a06e:	18e4      	addlt	r4, r4, r3
 800a070:	f000 f8e0 	bl	800a234 <__malloc_lock>
 800a074:	4a1d      	ldr	r2, [pc, #116]	@ (800a0ec <_free_r+0x90>)
 800a076:	6813      	ldr	r3, [r2, #0]
 800a078:	b933      	cbnz	r3, 800a088 <_free_r+0x2c>
 800a07a:	6063      	str	r3, [r4, #4]
 800a07c:	6014      	str	r4, [r2, #0]
 800a07e:	4628      	mov	r0, r5
 800a080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a084:	f000 b8dc 	b.w	800a240 <__malloc_unlock>
 800a088:	42a3      	cmp	r3, r4
 800a08a:	d908      	bls.n	800a09e <_free_r+0x42>
 800a08c:	6820      	ldr	r0, [r4, #0]
 800a08e:	1821      	adds	r1, r4, r0
 800a090:	428b      	cmp	r3, r1
 800a092:	bf01      	itttt	eq
 800a094:	6819      	ldreq	r1, [r3, #0]
 800a096:	685b      	ldreq	r3, [r3, #4]
 800a098:	1809      	addeq	r1, r1, r0
 800a09a:	6021      	streq	r1, [r4, #0]
 800a09c:	e7ed      	b.n	800a07a <_free_r+0x1e>
 800a09e:	461a      	mov	r2, r3
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	b10b      	cbz	r3, 800a0a8 <_free_r+0x4c>
 800a0a4:	42a3      	cmp	r3, r4
 800a0a6:	d9fa      	bls.n	800a09e <_free_r+0x42>
 800a0a8:	6811      	ldr	r1, [r2, #0]
 800a0aa:	1850      	adds	r0, r2, r1
 800a0ac:	42a0      	cmp	r0, r4
 800a0ae:	d10b      	bne.n	800a0c8 <_free_r+0x6c>
 800a0b0:	6820      	ldr	r0, [r4, #0]
 800a0b2:	4401      	add	r1, r0
 800a0b4:	1850      	adds	r0, r2, r1
 800a0b6:	4283      	cmp	r3, r0
 800a0b8:	6011      	str	r1, [r2, #0]
 800a0ba:	d1e0      	bne.n	800a07e <_free_r+0x22>
 800a0bc:	6818      	ldr	r0, [r3, #0]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	6053      	str	r3, [r2, #4]
 800a0c2:	4408      	add	r0, r1
 800a0c4:	6010      	str	r0, [r2, #0]
 800a0c6:	e7da      	b.n	800a07e <_free_r+0x22>
 800a0c8:	d902      	bls.n	800a0d0 <_free_r+0x74>
 800a0ca:	230c      	movs	r3, #12
 800a0cc:	602b      	str	r3, [r5, #0]
 800a0ce:	e7d6      	b.n	800a07e <_free_r+0x22>
 800a0d0:	6820      	ldr	r0, [r4, #0]
 800a0d2:	1821      	adds	r1, r4, r0
 800a0d4:	428b      	cmp	r3, r1
 800a0d6:	bf04      	itt	eq
 800a0d8:	6819      	ldreq	r1, [r3, #0]
 800a0da:	685b      	ldreq	r3, [r3, #4]
 800a0dc:	6063      	str	r3, [r4, #4]
 800a0de:	bf04      	itt	eq
 800a0e0:	1809      	addeq	r1, r1, r0
 800a0e2:	6021      	streq	r1, [r4, #0]
 800a0e4:	6054      	str	r4, [r2, #4]
 800a0e6:	e7ca      	b.n	800a07e <_free_r+0x22>
 800a0e8:	bd38      	pop	{r3, r4, r5, pc}
 800a0ea:	bf00      	nop
 800a0ec:	20002084 	.word	0x20002084

0800a0f0 <sbrk_aligned>:
 800a0f0:	b570      	push	{r4, r5, r6, lr}
 800a0f2:	4e0f      	ldr	r6, [pc, #60]	@ (800a130 <sbrk_aligned+0x40>)
 800a0f4:	460c      	mov	r4, r1
 800a0f6:	6831      	ldr	r1, [r6, #0]
 800a0f8:	4605      	mov	r5, r0
 800a0fa:	b911      	cbnz	r1, 800a102 <sbrk_aligned+0x12>
 800a0fc:	f000 fba6 	bl	800a84c <_sbrk_r>
 800a100:	6030      	str	r0, [r6, #0]
 800a102:	4621      	mov	r1, r4
 800a104:	4628      	mov	r0, r5
 800a106:	f000 fba1 	bl	800a84c <_sbrk_r>
 800a10a:	1c43      	adds	r3, r0, #1
 800a10c:	d103      	bne.n	800a116 <sbrk_aligned+0x26>
 800a10e:	f04f 34ff 	mov.w	r4, #4294967295
 800a112:	4620      	mov	r0, r4
 800a114:	bd70      	pop	{r4, r5, r6, pc}
 800a116:	1cc4      	adds	r4, r0, #3
 800a118:	f024 0403 	bic.w	r4, r4, #3
 800a11c:	42a0      	cmp	r0, r4
 800a11e:	d0f8      	beq.n	800a112 <sbrk_aligned+0x22>
 800a120:	1a21      	subs	r1, r4, r0
 800a122:	4628      	mov	r0, r5
 800a124:	f000 fb92 	bl	800a84c <_sbrk_r>
 800a128:	3001      	adds	r0, #1
 800a12a:	d1f2      	bne.n	800a112 <sbrk_aligned+0x22>
 800a12c:	e7ef      	b.n	800a10e <sbrk_aligned+0x1e>
 800a12e:	bf00      	nop
 800a130:	20002080 	.word	0x20002080

0800a134 <_malloc_r>:
 800a134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a138:	1ccd      	adds	r5, r1, #3
 800a13a:	f025 0503 	bic.w	r5, r5, #3
 800a13e:	3508      	adds	r5, #8
 800a140:	2d0c      	cmp	r5, #12
 800a142:	bf38      	it	cc
 800a144:	250c      	movcc	r5, #12
 800a146:	2d00      	cmp	r5, #0
 800a148:	4606      	mov	r6, r0
 800a14a:	db01      	blt.n	800a150 <_malloc_r+0x1c>
 800a14c:	42a9      	cmp	r1, r5
 800a14e:	d904      	bls.n	800a15a <_malloc_r+0x26>
 800a150:	230c      	movs	r3, #12
 800a152:	6033      	str	r3, [r6, #0]
 800a154:	2000      	movs	r0, #0
 800a156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a15a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a230 <_malloc_r+0xfc>
 800a15e:	f000 f869 	bl	800a234 <__malloc_lock>
 800a162:	f8d8 3000 	ldr.w	r3, [r8]
 800a166:	461c      	mov	r4, r3
 800a168:	bb44      	cbnz	r4, 800a1bc <_malloc_r+0x88>
 800a16a:	4629      	mov	r1, r5
 800a16c:	4630      	mov	r0, r6
 800a16e:	f7ff ffbf 	bl	800a0f0 <sbrk_aligned>
 800a172:	1c43      	adds	r3, r0, #1
 800a174:	4604      	mov	r4, r0
 800a176:	d158      	bne.n	800a22a <_malloc_r+0xf6>
 800a178:	f8d8 4000 	ldr.w	r4, [r8]
 800a17c:	4627      	mov	r7, r4
 800a17e:	2f00      	cmp	r7, #0
 800a180:	d143      	bne.n	800a20a <_malloc_r+0xd6>
 800a182:	2c00      	cmp	r4, #0
 800a184:	d04b      	beq.n	800a21e <_malloc_r+0xea>
 800a186:	6823      	ldr	r3, [r4, #0]
 800a188:	4639      	mov	r1, r7
 800a18a:	4630      	mov	r0, r6
 800a18c:	eb04 0903 	add.w	r9, r4, r3
 800a190:	f000 fb5c 	bl	800a84c <_sbrk_r>
 800a194:	4581      	cmp	r9, r0
 800a196:	d142      	bne.n	800a21e <_malloc_r+0xea>
 800a198:	6821      	ldr	r1, [r4, #0]
 800a19a:	1a6d      	subs	r5, r5, r1
 800a19c:	4629      	mov	r1, r5
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f7ff ffa6 	bl	800a0f0 <sbrk_aligned>
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d03a      	beq.n	800a21e <_malloc_r+0xea>
 800a1a8:	6823      	ldr	r3, [r4, #0]
 800a1aa:	442b      	add	r3, r5
 800a1ac:	6023      	str	r3, [r4, #0]
 800a1ae:	f8d8 3000 	ldr.w	r3, [r8]
 800a1b2:	685a      	ldr	r2, [r3, #4]
 800a1b4:	bb62      	cbnz	r2, 800a210 <_malloc_r+0xdc>
 800a1b6:	f8c8 7000 	str.w	r7, [r8]
 800a1ba:	e00f      	b.n	800a1dc <_malloc_r+0xa8>
 800a1bc:	6822      	ldr	r2, [r4, #0]
 800a1be:	1b52      	subs	r2, r2, r5
 800a1c0:	d420      	bmi.n	800a204 <_malloc_r+0xd0>
 800a1c2:	2a0b      	cmp	r2, #11
 800a1c4:	d917      	bls.n	800a1f6 <_malloc_r+0xc2>
 800a1c6:	1961      	adds	r1, r4, r5
 800a1c8:	42a3      	cmp	r3, r4
 800a1ca:	6025      	str	r5, [r4, #0]
 800a1cc:	bf18      	it	ne
 800a1ce:	6059      	strne	r1, [r3, #4]
 800a1d0:	6863      	ldr	r3, [r4, #4]
 800a1d2:	bf08      	it	eq
 800a1d4:	f8c8 1000 	streq.w	r1, [r8]
 800a1d8:	5162      	str	r2, [r4, r5]
 800a1da:	604b      	str	r3, [r1, #4]
 800a1dc:	4630      	mov	r0, r6
 800a1de:	f000 f82f 	bl	800a240 <__malloc_unlock>
 800a1e2:	f104 000b 	add.w	r0, r4, #11
 800a1e6:	1d23      	adds	r3, r4, #4
 800a1e8:	f020 0007 	bic.w	r0, r0, #7
 800a1ec:	1ac2      	subs	r2, r0, r3
 800a1ee:	bf1c      	itt	ne
 800a1f0:	1a1b      	subne	r3, r3, r0
 800a1f2:	50a3      	strne	r3, [r4, r2]
 800a1f4:	e7af      	b.n	800a156 <_malloc_r+0x22>
 800a1f6:	6862      	ldr	r2, [r4, #4]
 800a1f8:	42a3      	cmp	r3, r4
 800a1fa:	bf0c      	ite	eq
 800a1fc:	f8c8 2000 	streq.w	r2, [r8]
 800a200:	605a      	strne	r2, [r3, #4]
 800a202:	e7eb      	b.n	800a1dc <_malloc_r+0xa8>
 800a204:	4623      	mov	r3, r4
 800a206:	6864      	ldr	r4, [r4, #4]
 800a208:	e7ae      	b.n	800a168 <_malloc_r+0x34>
 800a20a:	463c      	mov	r4, r7
 800a20c:	687f      	ldr	r7, [r7, #4]
 800a20e:	e7b6      	b.n	800a17e <_malloc_r+0x4a>
 800a210:	461a      	mov	r2, r3
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	42a3      	cmp	r3, r4
 800a216:	d1fb      	bne.n	800a210 <_malloc_r+0xdc>
 800a218:	2300      	movs	r3, #0
 800a21a:	6053      	str	r3, [r2, #4]
 800a21c:	e7de      	b.n	800a1dc <_malloc_r+0xa8>
 800a21e:	230c      	movs	r3, #12
 800a220:	6033      	str	r3, [r6, #0]
 800a222:	4630      	mov	r0, r6
 800a224:	f000 f80c 	bl	800a240 <__malloc_unlock>
 800a228:	e794      	b.n	800a154 <_malloc_r+0x20>
 800a22a:	6005      	str	r5, [r0, #0]
 800a22c:	e7d6      	b.n	800a1dc <_malloc_r+0xa8>
 800a22e:	bf00      	nop
 800a230:	20002084 	.word	0x20002084

0800a234 <__malloc_lock>:
 800a234:	4801      	ldr	r0, [pc, #4]	@ (800a23c <__malloc_lock+0x8>)
 800a236:	f7ff bf0f 	b.w	800a058 <__retarget_lock_acquire_recursive>
 800a23a:	bf00      	nop
 800a23c:	2000207c 	.word	0x2000207c

0800a240 <__malloc_unlock>:
 800a240:	4801      	ldr	r0, [pc, #4]	@ (800a248 <__malloc_unlock+0x8>)
 800a242:	f7ff bf0a 	b.w	800a05a <__retarget_lock_release_recursive>
 800a246:	bf00      	nop
 800a248:	2000207c 	.word	0x2000207c

0800a24c <__ssputs_r>:
 800a24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a250:	688e      	ldr	r6, [r1, #8]
 800a252:	461f      	mov	r7, r3
 800a254:	42be      	cmp	r6, r7
 800a256:	680b      	ldr	r3, [r1, #0]
 800a258:	4682      	mov	sl, r0
 800a25a:	460c      	mov	r4, r1
 800a25c:	4690      	mov	r8, r2
 800a25e:	d82d      	bhi.n	800a2bc <__ssputs_r+0x70>
 800a260:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a264:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a268:	d026      	beq.n	800a2b8 <__ssputs_r+0x6c>
 800a26a:	6965      	ldr	r5, [r4, #20]
 800a26c:	6909      	ldr	r1, [r1, #16]
 800a26e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a272:	eba3 0901 	sub.w	r9, r3, r1
 800a276:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a27a:	1c7b      	adds	r3, r7, #1
 800a27c:	444b      	add	r3, r9
 800a27e:	106d      	asrs	r5, r5, #1
 800a280:	429d      	cmp	r5, r3
 800a282:	bf38      	it	cc
 800a284:	461d      	movcc	r5, r3
 800a286:	0553      	lsls	r3, r2, #21
 800a288:	d527      	bpl.n	800a2da <__ssputs_r+0x8e>
 800a28a:	4629      	mov	r1, r5
 800a28c:	f7ff ff52 	bl	800a134 <_malloc_r>
 800a290:	4606      	mov	r6, r0
 800a292:	b360      	cbz	r0, 800a2ee <__ssputs_r+0xa2>
 800a294:	6921      	ldr	r1, [r4, #16]
 800a296:	464a      	mov	r2, r9
 800a298:	f000 fae8 	bl	800a86c <memcpy>
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a2a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2a6:	81a3      	strh	r3, [r4, #12]
 800a2a8:	6126      	str	r6, [r4, #16]
 800a2aa:	6165      	str	r5, [r4, #20]
 800a2ac:	444e      	add	r6, r9
 800a2ae:	eba5 0509 	sub.w	r5, r5, r9
 800a2b2:	6026      	str	r6, [r4, #0]
 800a2b4:	60a5      	str	r5, [r4, #8]
 800a2b6:	463e      	mov	r6, r7
 800a2b8:	42be      	cmp	r6, r7
 800a2ba:	d900      	bls.n	800a2be <__ssputs_r+0x72>
 800a2bc:	463e      	mov	r6, r7
 800a2be:	6820      	ldr	r0, [r4, #0]
 800a2c0:	4632      	mov	r2, r6
 800a2c2:	4641      	mov	r1, r8
 800a2c4:	f000 faa8 	bl	800a818 <memmove>
 800a2c8:	68a3      	ldr	r3, [r4, #8]
 800a2ca:	1b9b      	subs	r3, r3, r6
 800a2cc:	60a3      	str	r3, [r4, #8]
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	4433      	add	r3, r6
 800a2d2:	6023      	str	r3, [r4, #0]
 800a2d4:	2000      	movs	r0, #0
 800a2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2da:	462a      	mov	r2, r5
 800a2dc:	f000 fad4 	bl	800a888 <_realloc_r>
 800a2e0:	4606      	mov	r6, r0
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	d1e0      	bne.n	800a2a8 <__ssputs_r+0x5c>
 800a2e6:	6921      	ldr	r1, [r4, #16]
 800a2e8:	4650      	mov	r0, sl
 800a2ea:	f7ff feb7 	bl	800a05c <_free_r>
 800a2ee:	230c      	movs	r3, #12
 800a2f0:	f8ca 3000 	str.w	r3, [sl]
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2fa:	81a3      	strh	r3, [r4, #12]
 800a2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a300:	e7e9      	b.n	800a2d6 <__ssputs_r+0x8a>
	...

0800a304 <_svfiprintf_r>:
 800a304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a308:	4698      	mov	r8, r3
 800a30a:	898b      	ldrh	r3, [r1, #12]
 800a30c:	061b      	lsls	r3, r3, #24
 800a30e:	b09d      	sub	sp, #116	@ 0x74
 800a310:	4607      	mov	r7, r0
 800a312:	460d      	mov	r5, r1
 800a314:	4614      	mov	r4, r2
 800a316:	d510      	bpl.n	800a33a <_svfiprintf_r+0x36>
 800a318:	690b      	ldr	r3, [r1, #16]
 800a31a:	b973      	cbnz	r3, 800a33a <_svfiprintf_r+0x36>
 800a31c:	2140      	movs	r1, #64	@ 0x40
 800a31e:	f7ff ff09 	bl	800a134 <_malloc_r>
 800a322:	6028      	str	r0, [r5, #0]
 800a324:	6128      	str	r0, [r5, #16]
 800a326:	b930      	cbnz	r0, 800a336 <_svfiprintf_r+0x32>
 800a328:	230c      	movs	r3, #12
 800a32a:	603b      	str	r3, [r7, #0]
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	b01d      	add	sp, #116	@ 0x74
 800a332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a336:	2340      	movs	r3, #64	@ 0x40
 800a338:	616b      	str	r3, [r5, #20]
 800a33a:	2300      	movs	r3, #0
 800a33c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a33e:	2320      	movs	r3, #32
 800a340:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a344:	f8cd 800c 	str.w	r8, [sp, #12]
 800a348:	2330      	movs	r3, #48	@ 0x30
 800a34a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a4e8 <_svfiprintf_r+0x1e4>
 800a34e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a352:	f04f 0901 	mov.w	r9, #1
 800a356:	4623      	mov	r3, r4
 800a358:	469a      	mov	sl, r3
 800a35a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a35e:	b10a      	cbz	r2, 800a364 <_svfiprintf_r+0x60>
 800a360:	2a25      	cmp	r2, #37	@ 0x25
 800a362:	d1f9      	bne.n	800a358 <_svfiprintf_r+0x54>
 800a364:	ebba 0b04 	subs.w	fp, sl, r4
 800a368:	d00b      	beq.n	800a382 <_svfiprintf_r+0x7e>
 800a36a:	465b      	mov	r3, fp
 800a36c:	4622      	mov	r2, r4
 800a36e:	4629      	mov	r1, r5
 800a370:	4638      	mov	r0, r7
 800a372:	f7ff ff6b 	bl	800a24c <__ssputs_r>
 800a376:	3001      	adds	r0, #1
 800a378:	f000 80a7 	beq.w	800a4ca <_svfiprintf_r+0x1c6>
 800a37c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a37e:	445a      	add	r2, fp
 800a380:	9209      	str	r2, [sp, #36]	@ 0x24
 800a382:	f89a 3000 	ldrb.w	r3, [sl]
 800a386:	2b00      	cmp	r3, #0
 800a388:	f000 809f 	beq.w	800a4ca <_svfiprintf_r+0x1c6>
 800a38c:	2300      	movs	r3, #0
 800a38e:	f04f 32ff 	mov.w	r2, #4294967295
 800a392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a396:	f10a 0a01 	add.w	sl, sl, #1
 800a39a:	9304      	str	r3, [sp, #16]
 800a39c:	9307      	str	r3, [sp, #28]
 800a39e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a3a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3a4:	4654      	mov	r4, sl
 800a3a6:	2205      	movs	r2, #5
 800a3a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ac:	484e      	ldr	r0, [pc, #312]	@ (800a4e8 <_svfiprintf_r+0x1e4>)
 800a3ae:	f7f5 ff17 	bl	80001e0 <memchr>
 800a3b2:	9a04      	ldr	r2, [sp, #16]
 800a3b4:	b9d8      	cbnz	r0, 800a3ee <_svfiprintf_r+0xea>
 800a3b6:	06d0      	lsls	r0, r2, #27
 800a3b8:	bf44      	itt	mi
 800a3ba:	2320      	movmi	r3, #32
 800a3bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3c0:	0711      	lsls	r1, r2, #28
 800a3c2:	bf44      	itt	mi
 800a3c4:	232b      	movmi	r3, #43	@ 0x2b
 800a3c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a3ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3d0:	d015      	beq.n	800a3fe <_svfiprintf_r+0xfa>
 800a3d2:	9a07      	ldr	r2, [sp, #28]
 800a3d4:	4654      	mov	r4, sl
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	f04f 0c0a 	mov.w	ip, #10
 800a3dc:	4621      	mov	r1, r4
 800a3de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3e2:	3b30      	subs	r3, #48	@ 0x30
 800a3e4:	2b09      	cmp	r3, #9
 800a3e6:	d94b      	bls.n	800a480 <_svfiprintf_r+0x17c>
 800a3e8:	b1b0      	cbz	r0, 800a418 <_svfiprintf_r+0x114>
 800a3ea:	9207      	str	r2, [sp, #28]
 800a3ec:	e014      	b.n	800a418 <_svfiprintf_r+0x114>
 800a3ee:	eba0 0308 	sub.w	r3, r0, r8
 800a3f2:	fa09 f303 	lsl.w	r3, r9, r3
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	9304      	str	r3, [sp, #16]
 800a3fa:	46a2      	mov	sl, r4
 800a3fc:	e7d2      	b.n	800a3a4 <_svfiprintf_r+0xa0>
 800a3fe:	9b03      	ldr	r3, [sp, #12]
 800a400:	1d19      	adds	r1, r3, #4
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	9103      	str	r1, [sp, #12]
 800a406:	2b00      	cmp	r3, #0
 800a408:	bfbb      	ittet	lt
 800a40a:	425b      	neglt	r3, r3
 800a40c:	f042 0202 	orrlt.w	r2, r2, #2
 800a410:	9307      	strge	r3, [sp, #28]
 800a412:	9307      	strlt	r3, [sp, #28]
 800a414:	bfb8      	it	lt
 800a416:	9204      	strlt	r2, [sp, #16]
 800a418:	7823      	ldrb	r3, [r4, #0]
 800a41a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a41c:	d10a      	bne.n	800a434 <_svfiprintf_r+0x130>
 800a41e:	7863      	ldrb	r3, [r4, #1]
 800a420:	2b2a      	cmp	r3, #42	@ 0x2a
 800a422:	d132      	bne.n	800a48a <_svfiprintf_r+0x186>
 800a424:	9b03      	ldr	r3, [sp, #12]
 800a426:	1d1a      	adds	r2, r3, #4
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	9203      	str	r2, [sp, #12]
 800a42c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a430:	3402      	adds	r4, #2
 800a432:	9305      	str	r3, [sp, #20]
 800a434:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a4f8 <_svfiprintf_r+0x1f4>
 800a438:	7821      	ldrb	r1, [r4, #0]
 800a43a:	2203      	movs	r2, #3
 800a43c:	4650      	mov	r0, sl
 800a43e:	f7f5 fecf 	bl	80001e0 <memchr>
 800a442:	b138      	cbz	r0, 800a454 <_svfiprintf_r+0x150>
 800a444:	9b04      	ldr	r3, [sp, #16]
 800a446:	eba0 000a 	sub.w	r0, r0, sl
 800a44a:	2240      	movs	r2, #64	@ 0x40
 800a44c:	4082      	lsls	r2, r0
 800a44e:	4313      	orrs	r3, r2
 800a450:	3401      	adds	r4, #1
 800a452:	9304      	str	r3, [sp, #16]
 800a454:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a458:	4824      	ldr	r0, [pc, #144]	@ (800a4ec <_svfiprintf_r+0x1e8>)
 800a45a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a45e:	2206      	movs	r2, #6
 800a460:	f7f5 febe 	bl	80001e0 <memchr>
 800a464:	2800      	cmp	r0, #0
 800a466:	d036      	beq.n	800a4d6 <_svfiprintf_r+0x1d2>
 800a468:	4b21      	ldr	r3, [pc, #132]	@ (800a4f0 <_svfiprintf_r+0x1ec>)
 800a46a:	bb1b      	cbnz	r3, 800a4b4 <_svfiprintf_r+0x1b0>
 800a46c:	9b03      	ldr	r3, [sp, #12]
 800a46e:	3307      	adds	r3, #7
 800a470:	f023 0307 	bic.w	r3, r3, #7
 800a474:	3308      	adds	r3, #8
 800a476:	9303      	str	r3, [sp, #12]
 800a478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a47a:	4433      	add	r3, r6
 800a47c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a47e:	e76a      	b.n	800a356 <_svfiprintf_r+0x52>
 800a480:	fb0c 3202 	mla	r2, ip, r2, r3
 800a484:	460c      	mov	r4, r1
 800a486:	2001      	movs	r0, #1
 800a488:	e7a8      	b.n	800a3dc <_svfiprintf_r+0xd8>
 800a48a:	2300      	movs	r3, #0
 800a48c:	3401      	adds	r4, #1
 800a48e:	9305      	str	r3, [sp, #20]
 800a490:	4619      	mov	r1, r3
 800a492:	f04f 0c0a 	mov.w	ip, #10
 800a496:	4620      	mov	r0, r4
 800a498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a49c:	3a30      	subs	r2, #48	@ 0x30
 800a49e:	2a09      	cmp	r2, #9
 800a4a0:	d903      	bls.n	800a4aa <_svfiprintf_r+0x1a6>
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d0c6      	beq.n	800a434 <_svfiprintf_r+0x130>
 800a4a6:	9105      	str	r1, [sp, #20]
 800a4a8:	e7c4      	b.n	800a434 <_svfiprintf_r+0x130>
 800a4aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e7f0      	b.n	800a496 <_svfiprintf_r+0x192>
 800a4b4:	ab03      	add	r3, sp, #12
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	462a      	mov	r2, r5
 800a4ba:	4b0e      	ldr	r3, [pc, #56]	@ (800a4f4 <_svfiprintf_r+0x1f0>)
 800a4bc:	a904      	add	r1, sp, #16
 800a4be:	4638      	mov	r0, r7
 800a4c0:	f3af 8000 	nop.w
 800a4c4:	1c42      	adds	r2, r0, #1
 800a4c6:	4606      	mov	r6, r0
 800a4c8:	d1d6      	bne.n	800a478 <_svfiprintf_r+0x174>
 800a4ca:	89ab      	ldrh	r3, [r5, #12]
 800a4cc:	065b      	lsls	r3, r3, #25
 800a4ce:	f53f af2d 	bmi.w	800a32c <_svfiprintf_r+0x28>
 800a4d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4d4:	e72c      	b.n	800a330 <_svfiprintf_r+0x2c>
 800a4d6:	ab03      	add	r3, sp, #12
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	462a      	mov	r2, r5
 800a4dc:	4b05      	ldr	r3, [pc, #20]	@ (800a4f4 <_svfiprintf_r+0x1f0>)
 800a4de:	a904      	add	r1, sp, #16
 800a4e0:	4638      	mov	r0, r7
 800a4e2:	f000 f879 	bl	800a5d8 <_printf_i>
 800a4e6:	e7ed      	b.n	800a4c4 <_svfiprintf_r+0x1c0>
 800a4e8:	0800a970 	.word	0x0800a970
 800a4ec:	0800a97a 	.word	0x0800a97a
 800a4f0:	00000000 	.word	0x00000000
 800a4f4:	0800a24d 	.word	0x0800a24d
 800a4f8:	0800a976 	.word	0x0800a976

0800a4fc <_printf_common>:
 800a4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a500:	4616      	mov	r6, r2
 800a502:	4698      	mov	r8, r3
 800a504:	688a      	ldr	r2, [r1, #8]
 800a506:	690b      	ldr	r3, [r1, #16]
 800a508:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a50c:	4293      	cmp	r3, r2
 800a50e:	bfb8      	it	lt
 800a510:	4613      	movlt	r3, r2
 800a512:	6033      	str	r3, [r6, #0]
 800a514:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a518:	4607      	mov	r7, r0
 800a51a:	460c      	mov	r4, r1
 800a51c:	b10a      	cbz	r2, 800a522 <_printf_common+0x26>
 800a51e:	3301      	adds	r3, #1
 800a520:	6033      	str	r3, [r6, #0]
 800a522:	6823      	ldr	r3, [r4, #0]
 800a524:	0699      	lsls	r1, r3, #26
 800a526:	bf42      	ittt	mi
 800a528:	6833      	ldrmi	r3, [r6, #0]
 800a52a:	3302      	addmi	r3, #2
 800a52c:	6033      	strmi	r3, [r6, #0]
 800a52e:	6825      	ldr	r5, [r4, #0]
 800a530:	f015 0506 	ands.w	r5, r5, #6
 800a534:	d106      	bne.n	800a544 <_printf_common+0x48>
 800a536:	f104 0a19 	add.w	sl, r4, #25
 800a53a:	68e3      	ldr	r3, [r4, #12]
 800a53c:	6832      	ldr	r2, [r6, #0]
 800a53e:	1a9b      	subs	r3, r3, r2
 800a540:	42ab      	cmp	r3, r5
 800a542:	dc26      	bgt.n	800a592 <_printf_common+0x96>
 800a544:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a548:	6822      	ldr	r2, [r4, #0]
 800a54a:	3b00      	subs	r3, #0
 800a54c:	bf18      	it	ne
 800a54e:	2301      	movne	r3, #1
 800a550:	0692      	lsls	r2, r2, #26
 800a552:	d42b      	bmi.n	800a5ac <_printf_common+0xb0>
 800a554:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a558:	4641      	mov	r1, r8
 800a55a:	4638      	mov	r0, r7
 800a55c:	47c8      	blx	r9
 800a55e:	3001      	adds	r0, #1
 800a560:	d01e      	beq.n	800a5a0 <_printf_common+0xa4>
 800a562:	6823      	ldr	r3, [r4, #0]
 800a564:	6922      	ldr	r2, [r4, #16]
 800a566:	f003 0306 	and.w	r3, r3, #6
 800a56a:	2b04      	cmp	r3, #4
 800a56c:	bf02      	ittt	eq
 800a56e:	68e5      	ldreq	r5, [r4, #12]
 800a570:	6833      	ldreq	r3, [r6, #0]
 800a572:	1aed      	subeq	r5, r5, r3
 800a574:	68a3      	ldr	r3, [r4, #8]
 800a576:	bf0c      	ite	eq
 800a578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a57c:	2500      	movne	r5, #0
 800a57e:	4293      	cmp	r3, r2
 800a580:	bfc4      	itt	gt
 800a582:	1a9b      	subgt	r3, r3, r2
 800a584:	18ed      	addgt	r5, r5, r3
 800a586:	2600      	movs	r6, #0
 800a588:	341a      	adds	r4, #26
 800a58a:	42b5      	cmp	r5, r6
 800a58c:	d11a      	bne.n	800a5c4 <_printf_common+0xc8>
 800a58e:	2000      	movs	r0, #0
 800a590:	e008      	b.n	800a5a4 <_printf_common+0xa8>
 800a592:	2301      	movs	r3, #1
 800a594:	4652      	mov	r2, sl
 800a596:	4641      	mov	r1, r8
 800a598:	4638      	mov	r0, r7
 800a59a:	47c8      	blx	r9
 800a59c:	3001      	adds	r0, #1
 800a59e:	d103      	bne.n	800a5a8 <_printf_common+0xac>
 800a5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5a8:	3501      	adds	r5, #1
 800a5aa:	e7c6      	b.n	800a53a <_printf_common+0x3e>
 800a5ac:	18e1      	adds	r1, r4, r3
 800a5ae:	1c5a      	adds	r2, r3, #1
 800a5b0:	2030      	movs	r0, #48	@ 0x30
 800a5b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a5b6:	4422      	add	r2, r4
 800a5b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a5bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a5c0:	3302      	adds	r3, #2
 800a5c2:	e7c7      	b.n	800a554 <_printf_common+0x58>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	4622      	mov	r2, r4
 800a5c8:	4641      	mov	r1, r8
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	47c8      	blx	r9
 800a5ce:	3001      	adds	r0, #1
 800a5d0:	d0e6      	beq.n	800a5a0 <_printf_common+0xa4>
 800a5d2:	3601      	adds	r6, #1
 800a5d4:	e7d9      	b.n	800a58a <_printf_common+0x8e>
	...

0800a5d8 <_printf_i>:
 800a5d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5dc:	7e0f      	ldrb	r7, [r1, #24]
 800a5de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5e0:	2f78      	cmp	r7, #120	@ 0x78
 800a5e2:	4691      	mov	r9, r2
 800a5e4:	4680      	mov	r8, r0
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	469a      	mov	sl, r3
 800a5ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5ee:	d807      	bhi.n	800a600 <_printf_i+0x28>
 800a5f0:	2f62      	cmp	r7, #98	@ 0x62
 800a5f2:	d80a      	bhi.n	800a60a <_printf_i+0x32>
 800a5f4:	2f00      	cmp	r7, #0
 800a5f6:	f000 80d2 	beq.w	800a79e <_printf_i+0x1c6>
 800a5fa:	2f58      	cmp	r7, #88	@ 0x58
 800a5fc:	f000 80b9 	beq.w	800a772 <_printf_i+0x19a>
 800a600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a604:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a608:	e03a      	b.n	800a680 <_printf_i+0xa8>
 800a60a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a60e:	2b15      	cmp	r3, #21
 800a610:	d8f6      	bhi.n	800a600 <_printf_i+0x28>
 800a612:	a101      	add	r1, pc, #4	@ (adr r1, 800a618 <_printf_i+0x40>)
 800a614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a618:	0800a671 	.word	0x0800a671
 800a61c:	0800a685 	.word	0x0800a685
 800a620:	0800a601 	.word	0x0800a601
 800a624:	0800a601 	.word	0x0800a601
 800a628:	0800a601 	.word	0x0800a601
 800a62c:	0800a601 	.word	0x0800a601
 800a630:	0800a685 	.word	0x0800a685
 800a634:	0800a601 	.word	0x0800a601
 800a638:	0800a601 	.word	0x0800a601
 800a63c:	0800a601 	.word	0x0800a601
 800a640:	0800a601 	.word	0x0800a601
 800a644:	0800a785 	.word	0x0800a785
 800a648:	0800a6af 	.word	0x0800a6af
 800a64c:	0800a73f 	.word	0x0800a73f
 800a650:	0800a601 	.word	0x0800a601
 800a654:	0800a601 	.word	0x0800a601
 800a658:	0800a7a7 	.word	0x0800a7a7
 800a65c:	0800a601 	.word	0x0800a601
 800a660:	0800a6af 	.word	0x0800a6af
 800a664:	0800a601 	.word	0x0800a601
 800a668:	0800a601 	.word	0x0800a601
 800a66c:	0800a747 	.word	0x0800a747
 800a670:	6833      	ldr	r3, [r6, #0]
 800a672:	1d1a      	adds	r2, r3, #4
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	6032      	str	r2, [r6, #0]
 800a678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a67c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a680:	2301      	movs	r3, #1
 800a682:	e09d      	b.n	800a7c0 <_printf_i+0x1e8>
 800a684:	6833      	ldr	r3, [r6, #0]
 800a686:	6820      	ldr	r0, [r4, #0]
 800a688:	1d19      	adds	r1, r3, #4
 800a68a:	6031      	str	r1, [r6, #0]
 800a68c:	0606      	lsls	r6, r0, #24
 800a68e:	d501      	bpl.n	800a694 <_printf_i+0xbc>
 800a690:	681d      	ldr	r5, [r3, #0]
 800a692:	e003      	b.n	800a69c <_printf_i+0xc4>
 800a694:	0645      	lsls	r5, r0, #25
 800a696:	d5fb      	bpl.n	800a690 <_printf_i+0xb8>
 800a698:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a69c:	2d00      	cmp	r5, #0
 800a69e:	da03      	bge.n	800a6a8 <_printf_i+0xd0>
 800a6a0:	232d      	movs	r3, #45	@ 0x2d
 800a6a2:	426d      	negs	r5, r5
 800a6a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6a8:	4859      	ldr	r0, [pc, #356]	@ (800a810 <_printf_i+0x238>)
 800a6aa:	230a      	movs	r3, #10
 800a6ac:	e011      	b.n	800a6d2 <_printf_i+0xfa>
 800a6ae:	6821      	ldr	r1, [r4, #0]
 800a6b0:	6833      	ldr	r3, [r6, #0]
 800a6b2:	0608      	lsls	r0, r1, #24
 800a6b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a6b8:	d402      	bmi.n	800a6c0 <_printf_i+0xe8>
 800a6ba:	0649      	lsls	r1, r1, #25
 800a6bc:	bf48      	it	mi
 800a6be:	b2ad      	uxthmi	r5, r5
 800a6c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a6c2:	4853      	ldr	r0, [pc, #332]	@ (800a810 <_printf_i+0x238>)
 800a6c4:	6033      	str	r3, [r6, #0]
 800a6c6:	bf14      	ite	ne
 800a6c8:	230a      	movne	r3, #10
 800a6ca:	2308      	moveq	r3, #8
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6d2:	6866      	ldr	r6, [r4, #4]
 800a6d4:	60a6      	str	r6, [r4, #8]
 800a6d6:	2e00      	cmp	r6, #0
 800a6d8:	bfa2      	ittt	ge
 800a6da:	6821      	ldrge	r1, [r4, #0]
 800a6dc:	f021 0104 	bicge.w	r1, r1, #4
 800a6e0:	6021      	strge	r1, [r4, #0]
 800a6e2:	b90d      	cbnz	r5, 800a6e8 <_printf_i+0x110>
 800a6e4:	2e00      	cmp	r6, #0
 800a6e6:	d04b      	beq.n	800a780 <_printf_i+0x1a8>
 800a6e8:	4616      	mov	r6, r2
 800a6ea:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6ee:	fb03 5711 	mls	r7, r3, r1, r5
 800a6f2:	5dc7      	ldrb	r7, [r0, r7]
 800a6f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6f8:	462f      	mov	r7, r5
 800a6fa:	42bb      	cmp	r3, r7
 800a6fc:	460d      	mov	r5, r1
 800a6fe:	d9f4      	bls.n	800a6ea <_printf_i+0x112>
 800a700:	2b08      	cmp	r3, #8
 800a702:	d10b      	bne.n	800a71c <_printf_i+0x144>
 800a704:	6823      	ldr	r3, [r4, #0]
 800a706:	07df      	lsls	r7, r3, #31
 800a708:	d508      	bpl.n	800a71c <_printf_i+0x144>
 800a70a:	6923      	ldr	r3, [r4, #16]
 800a70c:	6861      	ldr	r1, [r4, #4]
 800a70e:	4299      	cmp	r1, r3
 800a710:	bfde      	ittt	le
 800a712:	2330      	movle	r3, #48	@ 0x30
 800a714:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a718:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a71c:	1b92      	subs	r2, r2, r6
 800a71e:	6122      	str	r2, [r4, #16]
 800a720:	f8cd a000 	str.w	sl, [sp]
 800a724:	464b      	mov	r3, r9
 800a726:	aa03      	add	r2, sp, #12
 800a728:	4621      	mov	r1, r4
 800a72a:	4640      	mov	r0, r8
 800a72c:	f7ff fee6 	bl	800a4fc <_printf_common>
 800a730:	3001      	adds	r0, #1
 800a732:	d14a      	bne.n	800a7ca <_printf_i+0x1f2>
 800a734:	f04f 30ff 	mov.w	r0, #4294967295
 800a738:	b004      	add	sp, #16
 800a73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a73e:	6823      	ldr	r3, [r4, #0]
 800a740:	f043 0320 	orr.w	r3, r3, #32
 800a744:	6023      	str	r3, [r4, #0]
 800a746:	4833      	ldr	r0, [pc, #204]	@ (800a814 <_printf_i+0x23c>)
 800a748:	2778      	movs	r7, #120	@ 0x78
 800a74a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a74e:	6823      	ldr	r3, [r4, #0]
 800a750:	6831      	ldr	r1, [r6, #0]
 800a752:	061f      	lsls	r7, r3, #24
 800a754:	f851 5b04 	ldr.w	r5, [r1], #4
 800a758:	d402      	bmi.n	800a760 <_printf_i+0x188>
 800a75a:	065f      	lsls	r7, r3, #25
 800a75c:	bf48      	it	mi
 800a75e:	b2ad      	uxthmi	r5, r5
 800a760:	6031      	str	r1, [r6, #0]
 800a762:	07d9      	lsls	r1, r3, #31
 800a764:	bf44      	itt	mi
 800a766:	f043 0320 	orrmi.w	r3, r3, #32
 800a76a:	6023      	strmi	r3, [r4, #0]
 800a76c:	b11d      	cbz	r5, 800a776 <_printf_i+0x19e>
 800a76e:	2310      	movs	r3, #16
 800a770:	e7ac      	b.n	800a6cc <_printf_i+0xf4>
 800a772:	4827      	ldr	r0, [pc, #156]	@ (800a810 <_printf_i+0x238>)
 800a774:	e7e9      	b.n	800a74a <_printf_i+0x172>
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	f023 0320 	bic.w	r3, r3, #32
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	e7f6      	b.n	800a76e <_printf_i+0x196>
 800a780:	4616      	mov	r6, r2
 800a782:	e7bd      	b.n	800a700 <_printf_i+0x128>
 800a784:	6833      	ldr	r3, [r6, #0]
 800a786:	6825      	ldr	r5, [r4, #0]
 800a788:	6961      	ldr	r1, [r4, #20]
 800a78a:	1d18      	adds	r0, r3, #4
 800a78c:	6030      	str	r0, [r6, #0]
 800a78e:	062e      	lsls	r6, r5, #24
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	d501      	bpl.n	800a798 <_printf_i+0x1c0>
 800a794:	6019      	str	r1, [r3, #0]
 800a796:	e002      	b.n	800a79e <_printf_i+0x1c6>
 800a798:	0668      	lsls	r0, r5, #25
 800a79a:	d5fb      	bpl.n	800a794 <_printf_i+0x1bc>
 800a79c:	8019      	strh	r1, [r3, #0]
 800a79e:	2300      	movs	r3, #0
 800a7a0:	6123      	str	r3, [r4, #16]
 800a7a2:	4616      	mov	r6, r2
 800a7a4:	e7bc      	b.n	800a720 <_printf_i+0x148>
 800a7a6:	6833      	ldr	r3, [r6, #0]
 800a7a8:	1d1a      	adds	r2, r3, #4
 800a7aa:	6032      	str	r2, [r6, #0]
 800a7ac:	681e      	ldr	r6, [r3, #0]
 800a7ae:	6862      	ldr	r2, [r4, #4]
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f7f5 fd14 	bl	80001e0 <memchr>
 800a7b8:	b108      	cbz	r0, 800a7be <_printf_i+0x1e6>
 800a7ba:	1b80      	subs	r0, r0, r6
 800a7bc:	6060      	str	r0, [r4, #4]
 800a7be:	6863      	ldr	r3, [r4, #4]
 800a7c0:	6123      	str	r3, [r4, #16]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7c8:	e7aa      	b.n	800a720 <_printf_i+0x148>
 800a7ca:	6923      	ldr	r3, [r4, #16]
 800a7cc:	4632      	mov	r2, r6
 800a7ce:	4649      	mov	r1, r9
 800a7d0:	4640      	mov	r0, r8
 800a7d2:	47d0      	blx	sl
 800a7d4:	3001      	adds	r0, #1
 800a7d6:	d0ad      	beq.n	800a734 <_printf_i+0x15c>
 800a7d8:	6823      	ldr	r3, [r4, #0]
 800a7da:	079b      	lsls	r3, r3, #30
 800a7dc:	d413      	bmi.n	800a806 <_printf_i+0x22e>
 800a7de:	68e0      	ldr	r0, [r4, #12]
 800a7e0:	9b03      	ldr	r3, [sp, #12]
 800a7e2:	4298      	cmp	r0, r3
 800a7e4:	bfb8      	it	lt
 800a7e6:	4618      	movlt	r0, r3
 800a7e8:	e7a6      	b.n	800a738 <_printf_i+0x160>
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	4632      	mov	r2, r6
 800a7ee:	4649      	mov	r1, r9
 800a7f0:	4640      	mov	r0, r8
 800a7f2:	47d0      	blx	sl
 800a7f4:	3001      	adds	r0, #1
 800a7f6:	d09d      	beq.n	800a734 <_printf_i+0x15c>
 800a7f8:	3501      	adds	r5, #1
 800a7fa:	68e3      	ldr	r3, [r4, #12]
 800a7fc:	9903      	ldr	r1, [sp, #12]
 800a7fe:	1a5b      	subs	r3, r3, r1
 800a800:	42ab      	cmp	r3, r5
 800a802:	dcf2      	bgt.n	800a7ea <_printf_i+0x212>
 800a804:	e7eb      	b.n	800a7de <_printf_i+0x206>
 800a806:	2500      	movs	r5, #0
 800a808:	f104 0619 	add.w	r6, r4, #25
 800a80c:	e7f5      	b.n	800a7fa <_printf_i+0x222>
 800a80e:	bf00      	nop
 800a810:	0800a981 	.word	0x0800a981
 800a814:	0800a992 	.word	0x0800a992

0800a818 <memmove>:
 800a818:	4288      	cmp	r0, r1
 800a81a:	b510      	push	{r4, lr}
 800a81c:	eb01 0402 	add.w	r4, r1, r2
 800a820:	d902      	bls.n	800a828 <memmove+0x10>
 800a822:	4284      	cmp	r4, r0
 800a824:	4623      	mov	r3, r4
 800a826:	d807      	bhi.n	800a838 <memmove+0x20>
 800a828:	1e43      	subs	r3, r0, #1
 800a82a:	42a1      	cmp	r1, r4
 800a82c:	d008      	beq.n	800a840 <memmove+0x28>
 800a82e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a832:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a836:	e7f8      	b.n	800a82a <memmove+0x12>
 800a838:	4402      	add	r2, r0
 800a83a:	4601      	mov	r1, r0
 800a83c:	428a      	cmp	r2, r1
 800a83e:	d100      	bne.n	800a842 <memmove+0x2a>
 800a840:	bd10      	pop	{r4, pc}
 800a842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a84a:	e7f7      	b.n	800a83c <memmove+0x24>

0800a84c <_sbrk_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	4d06      	ldr	r5, [pc, #24]	@ (800a868 <_sbrk_r+0x1c>)
 800a850:	2300      	movs	r3, #0
 800a852:	4604      	mov	r4, r0
 800a854:	4608      	mov	r0, r1
 800a856:	602b      	str	r3, [r5, #0]
 800a858:	f7f6 fdf8 	bl	800144c <_sbrk>
 800a85c:	1c43      	adds	r3, r0, #1
 800a85e:	d102      	bne.n	800a866 <_sbrk_r+0x1a>
 800a860:	682b      	ldr	r3, [r5, #0]
 800a862:	b103      	cbz	r3, 800a866 <_sbrk_r+0x1a>
 800a864:	6023      	str	r3, [r4, #0]
 800a866:	bd38      	pop	{r3, r4, r5, pc}
 800a868:	20002078 	.word	0x20002078

0800a86c <memcpy>:
 800a86c:	440a      	add	r2, r1
 800a86e:	4291      	cmp	r1, r2
 800a870:	f100 33ff 	add.w	r3, r0, #4294967295
 800a874:	d100      	bne.n	800a878 <memcpy+0xc>
 800a876:	4770      	bx	lr
 800a878:	b510      	push	{r4, lr}
 800a87a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a87e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a882:	4291      	cmp	r1, r2
 800a884:	d1f9      	bne.n	800a87a <memcpy+0xe>
 800a886:	bd10      	pop	{r4, pc}

0800a888 <_realloc_r>:
 800a888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a88c:	4680      	mov	r8, r0
 800a88e:	4615      	mov	r5, r2
 800a890:	460c      	mov	r4, r1
 800a892:	b921      	cbnz	r1, 800a89e <_realloc_r+0x16>
 800a894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a898:	4611      	mov	r1, r2
 800a89a:	f7ff bc4b 	b.w	800a134 <_malloc_r>
 800a89e:	b92a      	cbnz	r2, 800a8ac <_realloc_r+0x24>
 800a8a0:	f7ff fbdc 	bl	800a05c <_free_r>
 800a8a4:	2400      	movs	r4, #0
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ac:	f000 f81a 	bl	800a8e4 <_malloc_usable_size_r>
 800a8b0:	4285      	cmp	r5, r0
 800a8b2:	4606      	mov	r6, r0
 800a8b4:	d802      	bhi.n	800a8bc <_realloc_r+0x34>
 800a8b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a8ba:	d8f4      	bhi.n	800a8a6 <_realloc_r+0x1e>
 800a8bc:	4629      	mov	r1, r5
 800a8be:	4640      	mov	r0, r8
 800a8c0:	f7ff fc38 	bl	800a134 <_malloc_r>
 800a8c4:	4607      	mov	r7, r0
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d0ec      	beq.n	800a8a4 <_realloc_r+0x1c>
 800a8ca:	42b5      	cmp	r5, r6
 800a8cc:	462a      	mov	r2, r5
 800a8ce:	4621      	mov	r1, r4
 800a8d0:	bf28      	it	cs
 800a8d2:	4632      	movcs	r2, r6
 800a8d4:	f7ff ffca 	bl	800a86c <memcpy>
 800a8d8:	4621      	mov	r1, r4
 800a8da:	4640      	mov	r0, r8
 800a8dc:	f7ff fbbe 	bl	800a05c <_free_r>
 800a8e0:	463c      	mov	r4, r7
 800a8e2:	e7e0      	b.n	800a8a6 <_realloc_r+0x1e>

0800a8e4 <_malloc_usable_size_r>:
 800a8e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e8:	1f18      	subs	r0, r3, #4
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	bfbc      	itt	lt
 800a8ee:	580b      	ldrlt	r3, [r1, r0]
 800a8f0:	18c0      	addlt	r0, r0, r3
 800a8f2:	4770      	bx	lr

0800a8f4 <_init>:
 800a8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f6:	bf00      	nop
 800a8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8fa:	bc08      	pop	{r3}
 800a8fc:	469e      	mov	lr, r3
 800a8fe:	4770      	bx	lr

0800a900 <_fini>:
 800a900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a902:	bf00      	nop
 800a904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a906:	bc08      	pop	{r3}
 800a908:	469e      	mov	lr, r3
 800a90a:	4770      	bx	lr
