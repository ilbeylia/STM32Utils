
STM32Utils.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da48  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  0800dbd8  0800dbd8  0000ebd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddec  0800ddec  0000f16c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ddec  0800ddec  0000edec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ddf4  0800ddf4  0000f16c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddf4  0800ddf4  0000edf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ddf8  0800ddf8  0000edf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  0800ddfc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f16c  2**0
                  CONTENTS
 10 .bss          00002498  2000016c  2000016c  0000f16c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002604  20002604  0000f16c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f16c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fb70  00000000  00000000  0000f19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000527e  00000000  00000000  0002ed0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d60  00000000  00000000  00033f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001684  00000000  00000000  00035cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000298b8  00000000  00000000  00037374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029322  00000000  00000000  00060c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e216a  00000000  00000000  00089f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016c0b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000083d4  00000000  00000000  0016c0fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003c  00000000  00000000  001744d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000016c 	.word	0x2000016c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dbc0 	.word	0x0800dbc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000170 	.word	0x20000170
 80001cc:	0800dbc0 	.word	0x0800dbc0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <status_led_init>:
// status led config >> for four leds
void status_led_init(Status_led_s *status_led, GPIO_TypeDef * Led1_GPIOx, uint16_t Led1_GPIO_pin,
		GPIO_TypeDef * Led2_GPIOx, uint16_t Led2_GPIO_pin,
		GPIO_TypeDef * Led3_GPIOx, uint16_t Led3_GPIO_pin,
		GPIO_TypeDef * Led4_GPIOx, uint16_t Led4_GPIO_pin)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4613      	mov	r3, r2
 800057e:	80fb      	strh	r3, [r7, #6]
	status_led->Led1_GPIOx = Led1_GPIOx;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	601a      	str	r2, [r3, #0]
	status_led->Led1_GPIO_pin = Led1_GPIO_pin;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	88fa      	ldrh	r2, [r7, #6]
 800058a:	809a      	strh	r2, [r3, #4]

	status_led->Led2_GPIOx = Led2_GPIOx;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	683a      	ldr	r2, [r7, #0]
 8000590:	609a      	str	r2, [r3, #8]
	status_led->Led2_GPIO_pin = Led2_GPIO_pin;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	8b3a      	ldrh	r2, [r7, #24]
 8000596:	819a      	strh	r2, [r3, #12]

	status_led->Led3_GPIOx = Led3_GPIOx;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	69fa      	ldr	r2, [r7, #28]
 800059c:	611a      	str	r2, [r3, #16]
	status_led->Led3_GPIO_pin = Led3_GPIO_pin;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	8c3a      	ldrh	r2, [r7, #32]
 80005a2:	829a      	strh	r2, [r3, #20]

	status_led->Led4_GPIOx = Led4_GPIOx;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005a8:	619a      	str	r2, [r3, #24]
	status_led->Led4_GPIO_pin = Led4_GPIO_pin;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80005ae:	839a      	strh	r2, [r3, #28]

}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <status_led_process>:

// led 1 -- kırmızı
// led 2 -- yeşil
// led 3 -- 2. yeşil
// led 4 -- sarı
void status_led_process(Status_led_s* status_led, Status_led_mode_e Mode){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	70fb      	strb	r3, [r7, #3]
	switch (Mode) {
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	2b04      	cmp	r3, #4
 80005cc:	f200 80a4 	bhi.w	8000718 <status_led_process+0x15c>
 80005d0:	a201      	add	r2, pc, #4	@ (adr r2, 80005d8 <status_led_process+0x1c>)
 80005d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d6:	bf00      	nop
 80005d8:	080005ed 	.word	0x080005ed
 80005dc:	0800061b 	.word	0x0800061b
 80005e0:	080006eb 	.word	0x080006eb
 80005e4:	08000677 	.word	0x08000677
 80005e8:	08000649 	.word	0x08000649
		case LED_STOP :
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 1);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6818      	ldr	r0, [r3, #0]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	889b      	ldrh	r3, [r3, #4]
 80005f4:	2201      	movs	r2, #1
 80005f6:	4619      	mov	r1, r3
 80005f8:	f002 fe24 	bl	8003244 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80005fc:	20c8      	movs	r0, #200	@ 0xc8
 80005fe:	f001 f981 	bl	8001904 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 0);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6818      	ldr	r0, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	889b      	ldrh	r3, [r3, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	4619      	mov	r1, r3
 800060e:	f002 fe19 	bl	8003244 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000612:	20c8      	movs	r0, #200	@ 0xc8
 8000614:	f001 f976 	bl	8001904 <HAL_Delay>
			break;
 8000618:	e095      	b.n	8000746 <status_led_process+0x18a>
		case LED_START :
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 1);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6898      	ldr	r0, [r3, #8]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	899b      	ldrh	r3, [r3, #12]
 8000622:	2201      	movs	r2, #1
 8000624:	4619      	mov	r1, r3
 8000626:	f002 fe0d 	bl	8003244 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 800062a:	20c8      	movs	r0, #200	@ 0xc8
 800062c:	f001 f96a 	bl	8001904 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 0);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6898      	ldr	r0, [r3, #8]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	899b      	ldrh	r3, [r3, #12]
 8000638:	2200      	movs	r2, #0
 800063a:	4619      	mov	r1, r3
 800063c:	f002 fe02 	bl	8003244 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000640:	20c8      	movs	r0, #200	@ 0xc8
 8000642:	f001 f95f 	bl	8001904 <HAL_Delay>
			break;
 8000646:	e07e      	b.n	8000746 <status_led_process+0x18a>
		case LED_OKAY :
			HAL_GPIO_WritePin(status_led->Led3_GPIOx, status_led->Led3_GPIO_pin, 1);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	6918      	ldr	r0, [r3, #16]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	8a9b      	ldrh	r3, [r3, #20]
 8000650:	2201      	movs	r2, #1
 8000652:	4619      	mov	r1, r3
 8000654:	f002 fdf6 	bl	8003244 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000658:	20c8      	movs	r0, #200	@ 0xc8
 800065a:	f001 f953 	bl	8001904 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led3_GPIOx, status_led->Led3_GPIO_pin, 0);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6918      	ldr	r0, [r3, #16]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	8a9b      	ldrh	r3, [r3, #20]
 8000666:	2200      	movs	r2, #0
 8000668:	4619      	mov	r1, r3
 800066a:	f002 fdeb 	bl	8003244 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 800066e:	20c8      	movs	r0, #200	@ 0xc8
 8000670:	f001 f948 	bl	8001904 <HAL_Delay>
			break;
 8000674:	e067      	b.n	8000746 <status_led_process+0x18a>
		case LED_GO :
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 0);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6898      	ldr	r0, [r3, #8]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	899b      	ldrh	r3, [r3, #12]
 800067e:	2200      	movs	r2, #0
 8000680:	4619      	mov	r1, r3
 8000682:	f002 fddf 	bl	8003244 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 1);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6818      	ldr	r0, [r3, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	889b      	ldrh	r3, [r3, #4]
 800068e:	2201      	movs	r2, #1
 8000690:	4619      	mov	r1, r3
 8000692:	f002 fdd7 	bl	8003244 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000696:	20c8      	movs	r0, #200	@ 0xc8
 8000698:	f001 f934 	bl	8001904 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 0);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6818      	ldr	r0, [r3, #0]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	889b      	ldrh	r3, [r3, #4]
 80006a4:	2200      	movs	r2, #0
 80006a6:	4619      	mov	r1, r3
 80006a8:	f002 fdcc 	bl	8003244 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 1);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6998      	ldr	r0, [r3, #24]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	8b9b      	ldrh	r3, [r3, #28]
 80006b4:	2201      	movs	r2, #1
 80006b6:	4619      	mov	r1, r3
 80006b8:	f002 fdc4 	bl	8003244 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80006bc:	20c8      	movs	r0, #200	@ 0xc8
 80006be:	f001 f921 	bl	8001904 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 0);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6998      	ldr	r0, [r3, #24]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	8b9b      	ldrh	r3, [r3, #28]
 80006ca:	2200      	movs	r2, #0
 80006cc:	4619      	mov	r1, r3
 80006ce:	f002 fdb9 	bl	8003244 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 1);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6898      	ldr	r0, [r3, #8]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	899b      	ldrh	r3, [r3, #12]
 80006da:	2201      	movs	r2, #1
 80006dc:	4619      	mov	r1, r3
 80006de:	f002 fdb1 	bl	8003244 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80006e2:	20c8      	movs	r0, #200	@ 0xc8
 80006e4:	f001 f90e 	bl	8001904 <HAL_Delay>
			break;
 80006e8:	e02d      	b.n	8000746 <status_led_process+0x18a>
		case LED_STAY :
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 1);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6998      	ldr	r0, [r3, #24]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	8b9b      	ldrh	r3, [r3, #28]
 80006f2:	2201      	movs	r2, #1
 80006f4:	4619      	mov	r1, r3
 80006f6:	f002 fda5 	bl	8003244 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80006fa:	20c8      	movs	r0, #200	@ 0xc8
 80006fc:	f001 f902 	bl	8001904 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 0);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6998      	ldr	r0, [r3, #24]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	8b9b      	ldrh	r3, [r3, #28]
 8000708:	2200      	movs	r2, #0
 800070a:	4619      	mov	r1, r3
 800070c:	f002 fd9a 	bl	8003244 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000710:	20c8      	movs	r0, #200	@ 0xc8
 8000712:	f001 f8f7 	bl	8001904 <HAL_Delay>
			break;
 8000716:	e016      	b.n	8000746 <status_led_process+0x18a>

		default:
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 1);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6818      	ldr	r0, [r3, #0]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	889b      	ldrh	r3, [r3, #4]
 8000720:	2201      	movs	r2, #1
 8000722:	4619      	mov	r1, r3
 8000724:	f002 fd8e 	bl	8003244 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000728:	2064      	movs	r0, #100	@ 0x64
 800072a:	f001 f8eb 	bl	8001904 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 0);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	889b      	ldrh	r3, [r3, #4]
 8000736:	2200      	movs	r2, #0
 8000738:	4619      	mov	r1, r3
 800073a:	f002 fd83 	bl	8003244 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 800073e:	2064      	movs	r0, #100	@ 0x64
 8000740:	f001 f8e0 	bl	8001904 <HAL_Delay>
			break;
 8000744:	bf00      	nop
	}
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop

08000750 <Flash_WR>:
 *      Author: ilbeyli
 */

#include "FLASH_PROCESS_lib.h"

void Flash_WR(uint32_t Flash_Address, uint32_t Flash_WR_Data){
 8000750:	b5b0      	push	{r4, r5, r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 800075a:	f002 fa2d 	bl	8002bb8 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);  // add sector usage
 800075e:	2102      	movs	r1, #2
 8000760:	200b      	movs	r0, #11
 8000762:	f002 fb8b 	bl	8002e7c <FLASH_Erase_Sector>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Flash_Address, Flash_WR_Data);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2200      	movs	r2, #0
 800076a:	461c      	mov	r4, r3
 800076c:	4615      	mov	r5, r2
 800076e:	4622      	mov	r2, r4
 8000770:	462b      	mov	r3, r5
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	2002      	movs	r0, #2
 8000776:	f002 f9cb 	bl	8002b10 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 800077a:	f002 fa3f 	bl	8002bfc <HAL_FLASH_Lock>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bdb0      	pop	{r4, r5, r7, pc}

08000786 <Flash_RD>:

uint32_t Flash_RD(uint32_t Flash_Address){
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
	return *((uint32_t*)Flash_Address);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <init_servo>:
void init_servo(	servo_config* 		servo_config,
					GPIO_TypeDef*		servo_GPIOx,
					uint32_t 			servo_GPIO_pin,
					TIM_HandleTypeDef*	Timer_Handle,
					uint32_t			Timer_Channel)
{
 800079e:	b480      	push	{r7}
 80007a0:	b085      	sub	sp, #20
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	60f8      	str	r0, [r7, #12]
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	603b      	str	r3, [r7, #0]
	servo_config->servo_GPIOx 			=servo_GPIOx;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	601a      	str	r2, [r3, #0]
	servo_config->servo_GPIO_pin 		=servo_GPIO_pin;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	605a      	str	r2, [r3, #4]
	servo_config->Timer_Handle 			=Timer_Handle;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	609a      	str	r2, [r3, #8]
	servo_config->Timer_Channel			=Timer_Channel;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	69ba      	ldr	r2, [r7, #24]
 80007c2:	60da      	str	r2, [r3, #12]
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <map>:


uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	69b9      	ldr	r1, [r7, #24]
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	1a8a      	subs	r2, r1, r2
 80007ea:	fb03 f202 	mul.w	r2, r3, r2
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	1acb      	subs	r3, r1, r3
 80007f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	4413      	add	r3, r2
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <step_init>:
void step_init(	step_config* step_config,
					TIM_HandleTypeDef*	Timer_handle,
					uint32_t			Timer_channel,
					GPIO_TypeDef*		dir_GPIOx,
					uint16_t			dir_GPIO_Pin)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	603b      	str	r3, [r7, #0]
		step_config->Timer_handle 	= Timer_handle;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	601a      	str	r2, [r3, #0]
		step_config->Timer_channel 	= Timer_channel;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	605a      	str	r2, [r3, #4]
		step_config->dir_GPIOx		= dir_GPIOx;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	683a      	ldr	r2, [r7, #0]
 8000826:	609a      	str	r2, [r3, #8]
		step_config->dir_GPIO_Pin	= dir_GPIO_Pin;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	8b3a      	ldrh	r2, [r7, #24]
 800082c:	819a      	strh	r2, [r3, #12]

}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <step_durdur>:
			__HAL_TIM_SET_COMPARE(step_config->Timer_handle, step_config->Timer_channel, 100);
		}
	}
}

void step_durdur(step_config* step_config){
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
	if (step_config->step_set.sayac == step_config->step_set.adim){
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	691a      	ldr	r2, [r3, #16]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	429a      	cmp	r2, r3
 800084c:	d10d      	bne.n	800086a <step_durdur+0x30>
		HAL_TIM_PWM_Stop_IT(step_config->Timer_handle, step_config->Timer_channel);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	4619      	mov	r1, r3
 8000858:	4610      	mov	r0, r2
 800085a:	f004 fe71 	bl	8005540 <HAL_TIM_PWM_Stop_IT>
		step_config->step_set.durum = Step_DURDU;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
		step_config->step_set.sayac =0;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
	}

}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef * htim)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	if (htim-> Instance == TIM1){
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a09      	ldr	r2, [pc, #36]	@ (80008a8 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d10b      	bne.n	800089e <HAL_TIM_PWM_PulseFinishedCallback+0x2a>

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	7f1b      	ldrb	r3, [r3, #28]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d104      	bne.n	8000898 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
		{
			step1.step_set.sayac++;
 800088e:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	3301      	adds	r3, #1
 8000894:	4a05      	ldr	r2, [pc, #20]	@ (80008ac <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000896:	6113      	str	r3, [r2, #16]
		}

		step_durdur(&step1);
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 800089a:	f7ff ffce 	bl	800083a <step_durdur>

		}

}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40010000 	.word	0x40010000
 80008ac:	20000374 	.word	0x20000374

080008b0 <HAL_GPIO_EXTI_Callback>:


// Yapilan ayarlari kaydetmek icin
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 80008ba:	88fb      	ldrh	r3, [r7, #6]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d105      	bne.n	80008cc <HAL_GPIO_EXTI_Callback+0x1c>
    {
    	Flash_WR(0x080E0000, flash_ref);
 80008c0:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x24>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	4804      	ldr	r0, [pc, #16]	@ (80008d8 <HAL_GPIO_EXTI_Callback+0x28>)
 80008c8:	f7ff ff42 	bl	8000750 <Flash_WR>
    }

}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200003c0 	.word	0x200003c0
 80008d8:	080e0000 	.word	0x080e0000

080008dc <SD_Init>:
			step_durdur(&step1);
			break;
	}
}

void SD_Init(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
    res = f_mount(&fs, "", 1);
 80008e0:	2201      	movs	r2, #1
 80008e2:	490a      	ldr	r1, [pc, #40]	@ (800090c <SD_Init+0x30>)
 80008e4:	480a      	ldr	r0, [pc, #40]	@ (8000910 <SD_Init+0x34>)
 80008e6:	f00a fe51 	bl	800b58c <f_mount>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <SD_Init+0x38>)
 80008f0:	701a      	strb	r2, [r3, #0]
    if (res == FR_OK) {
 80008f2:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <SD_Init+0x38>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d103      	bne.n	8000902 <SD_Init+0x26>
        printf("SD Card mounted successfully.\n");
 80008fa:	4807      	ldr	r0, [pc, #28]	@ (8000918 <SD_Init+0x3c>)
 80008fc:	f00c f912 	bl	800cb24 <puts>
    } else {
        printf("Failed to mount SD Card.\n");
    }
}
 8000900:	e002      	b.n	8000908 <SD_Init+0x2c>
        printf("Failed to mount SD Card.\n");
 8000902:	4806      	ldr	r0, [pc, #24]	@ (800091c <SD_Init+0x40>)
 8000904:	f00c f90e 	bl	800cb24 <puts>
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	0800dbd8 	.word	0x0800dbd8
 8000910:	20000408 	.word	0x20000408
 8000914:	20000868 	.word	0x20000868
 8000918:	0800dbdc 	.word	0x0800dbdc
 800091c:	0800dbfc 	.word	0x0800dbfc

08000920 <SD_WriteData>:

void SD_WriteData(const char *data){
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	res = f_open(&fil, "data.txt", FA_OPEN_APPEND | FA_WRITE);
 8000928:	2232      	movs	r2, #50	@ 0x32
 800092a:	4919      	ldr	r1, [pc, #100]	@ (8000990 <SD_WriteData+0x70>)
 800092c:	4819      	ldr	r0, [pc, #100]	@ (8000994 <SD_WriteData+0x74>)
 800092e:	f00a fe73 	bl	800b618 <f_open>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <SD_WriteData+0x78>)
 8000938:	701a      	strb	r2, [r3, #0]
	if (res == FR_OK) {
 800093a:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <SD_WriteData+0x78>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d11e      	bne.n	8000980 <SD_WriteData+0x60>
		res = f_write(&fil, data, strlen(data), &bw);  // Use strlen(data) for proper size
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff fc44 	bl	80001d0 <strlen>
 8000948:	4602      	mov	r2, r0
 800094a:	4b14      	ldr	r3, [pc, #80]	@ (800099c <SD_WriteData+0x7c>)
 800094c:	6879      	ldr	r1, [r7, #4]
 800094e:	4811      	ldr	r0, [pc, #68]	@ (8000994 <SD_WriteData+0x74>)
 8000950:	f00b f81c 	bl	800b98c <f_write>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <SD_WriteData+0x78>)
 800095a:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK) {
 800095c:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <SD_WriteData+0x78>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d103      	bne.n	800096c <SD_WriteData+0x4c>
			printf("Data written successfully.\n");
 8000964:	480e      	ldr	r0, [pc, #56]	@ (80009a0 <SD_WriteData+0x80>)
 8000966:	f00c f8dd 	bl	800cb24 <puts>
 800096a:	e005      	b.n	8000978 <SD_WriteData+0x58>
			//burada birsey gosteririm belki ledi
		} else {
			printf("Failed to write data. Error: %d\n", res);
 800096c:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <SD_WriteData+0x78>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	480c      	ldr	r0, [pc, #48]	@ (80009a4 <SD_WriteData+0x84>)
 8000974:	f00c f86e 	bl	800ca54 <iprintf>
			//burada birsey gosteririm belki ledi
		}
		f_close(&fil);
 8000978:	4806      	ldr	r0, [pc, #24]	@ (8000994 <SD_WriteData+0x74>)
 800097a:	f00b f9fa 	bl	800bd72 <f_close>
	} else {
		//buraya birsey eklerim
		//burada birsey gosteririm belki ledi
		printf("Data written error.\n");
	}
}
 800097e:	e002      	b.n	8000986 <SD_WriteData+0x66>
		printf("Data written error.\n");
 8000980:	4809      	ldr	r0, [pc, #36]	@ (80009a8 <SD_WriteData+0x88>)
 8000982:	f00c f8cf 	bl	800cb24 <puts>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	0800dc18 	.word	0x0800dc18
 8000994:	20000638 	.word	0x20000638
 8000998:	20000868 	.word	0x20000868
 800099c:	2000086c 	.word	0x2000086c
 80009a0:	0800dc24 	.word	0x0800dc24
 80009a4:	0800dc40 	.word	0x0800dc40
 80009a8:	0800dc64 	.word	0x0800dc64

080009ac <SD_Select>:


void SD_Select(void) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2104      	movs	r1, #4
 80009b4:	4802      	ldr	r0, [pc, #8]	@ (80009c0 <SD_Select+0x14>)
 80009b6:	f002 fc45 	bl	8003244 <HAL_GPIO_WritePin>
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40020400 	.word	0x40020400

080009c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ca:	f000 ff29 	bl	8001820 <HAL_Init>
  /* USER CODE BEGIN Init */
//Led
  status_led_init(&statusLED, GPIOD, GPIO_PIN_13, GPIOD, GPIO_PIN_14, GPIOD, GPIO_PIN_15, GPIOD, GPIO_PIN_12);
 80009ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d2:	9304      	str	r3, [sp, #16]
 80009d4:	4b47      	ldr	r3, [pc, #284]	@ (8000af4 <main+0x130>)
 80009d6:	9303      	str	r3, [sp, #12]
 80009d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009dc:	9302      	str	r3, [sp, #8]
 80009de:	4b45      	ldr	r3, [pc, #276]	@ (8000af4 <main+0x130>)
 80009e0:	9301      	str	r3, [sp, #4]
 80009e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	4b42      	ldr	r3, [pc, #264]	@ (8000af4 <main+0x130>)
 80009ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009ee:	4941      	ldr	r1, [pc, #260]	@ (8000af4 <main+0x130>)
 80009f0:	4841      	ldr	r0, [pc, #260]	@ (8000af8 <main+0x134>)
 80009f2:	f7ff fdbd 	bl	8000570 <status_led_init>
//StepMotor
  step_init(&step1, &htim1, TIM_CHANNEL_1, dir_GPIO_Port, dir_Pin);
 80009f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	4b3d      	ldr	r3, [pc, #244]	@ (8000af4 <main+0x130>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	493e      	ldr	r1, [pc, #248]	@ (8000afc <main+0x138>)
 8000a02:	483f      	ldr	r0, [pc, #252]	@ (8000b00 <main+0x13c>)
 8000a04:	f7ff ff00 	bl	8000808 <step_init>
//Servo
  init_servo(&servo1, GPIOA, GPIO_PIN_15, &htim2, TIM_CHANNEL_1);
 8000a08:	2300      	movs	r3, #0
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b04 <main+0x140>)
 8000a0e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a12:	493d      	ldr	r1, [pc, #244]	@ (8000b08 <main+0x144>)
 8000a14:	483d      	ldr	r0, [pc, #244]	@ (8000b0c <main+0x148>)
 8000a16:	f7ff fec2 	bl	800079e <init_servo>
//Lcd
//  LCD_Init(&hi2c1);

  //SD card
  MX_SPI1_Init();
 8000a1a:	f000 f98b 	bl	8000d34 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000a1e:	f007 f835 	bl	8007a8c <MX_FATFS_Init>
  SD_Init();
 8000a22:	f7ff ff5b 	bl	80008dc <SD_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a26:	f000 f887 	bl	8000b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2a:	f000 faef 	bl	800100c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a2e:	f000 facd 	bl	8000fcc <MX_DMA_Init>
  MX_ADC1_Init();
 8000a32:	f000 f8eb 	bl	8000c0c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000a36:	f000 f9b3 	bl	8000da0 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000a3a:	f00b fa21 	bl	800be80 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000a3e:	f000 fa4f 	bl	8000ee0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000a42:	f000 f949 	bl	8000cd8 <MX_I2C1_Init>
  MX_CRC_Init();
 8000a46:	f000 f933 	bl	8000cb0 <MX_CRC_Init>
  MX_SPI1_Init();
 8000a4a:	f000 f973 	bl	8000d34 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000a4e:	f007 f81d 	bl	8007a8c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
 8000a52:	2201      	movs	r2, #1
 8000a54:	492e      	ldr	r1, [pc, #184]	@ (8000b10 <main+0x14c>)
 8000a56:	482f      	ldr	r0, [pc, #188]	@ (8000b14 <main+0x150>)
 8000a58:	f000 ffbc 	bl	80019d4 <HAL_ADC_Start_DMA>
  status_led_process(&statusLED, LED_GO);
 8000a5c:	2103      	movs	r1, #3
 8000a5e:	4826      	ldr	r0, [pc, #152]	@ (8000af8 <main+0x134>)
 8000a60:	f7ff fdac 	bl	80005bc <status_led_process>
  HAL_Delay(5000);
 8000a64:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a68:	f000 ff4c 	bl	8001904 <HAL_Delay>

  read_step_value = Flash_RD(0x080E0000);
 8000a6c:	482a      	ldr	r0, [pc, #168]	@ (8000b18 <main+0x154>)
 8000a6e:	f7ff fe8a 	bl	8000786 <Flash_RD>
 8000a72:	4603      	mov	r3, r0
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b29      	ldr	r3, [pc, #164]	@ (8000b1c <main+0x158>)
 8000a78:	601a      	str	r2, [r3, #0]

  SD_Select();
 8000a7a:	f7ff ff97 	bl	80009ac <SD_Select>
  SD_WriteData("test ABC \n");
 8000a7e:	4828      	ldr	r0, [pc, #160]	@ (8000b20 <main+0x15c>)
 8000a80:	f7ff ff4e 	bl	8000920 <SD_WriteData>
//	angle = map(adc_buffer[0],0,4095,0,180);
//	flash_ref = angle;
//	servo_angle(&servo1, angle);
//	HAL_Delay(1000);

	  read_step_value = map(adc_buffer[0], 0, 4095, 0, 180);
 8000a84:	4b22      	ldr	r3, [pc, #136]	@ (8000b10 <main+0x14c>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	23b4      	movs	r3, #180	@ 0xb4
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000a94:	2100      	movs	r1, #0
 8000a96:	f7ff fe9b 	bl	80007d0 <map>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b1c <main+0x158>)
 8000aa0:	601a      	str	r2, [r3, #0]
	  data_buffer[0] = (uint32_t)read_step_value;
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b1c <main+0x158>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b24 <main+0x160>)
 8000aaa:	601a      	str	r2, [r3, #0]
	  crc_value = HAL_CRC_Calculate(&hcrc, data_buffer, 1);
 8000aac:	2201      	movs	r2, #1
 8000aae:	491d      	ldr	r1, [pc, #116]	@ (8000b24 <main+0x160>)
 8000ab0:	481d      	ldr	r0, [pc, #116]	@ (8000b28 <main+0x164>)
 8000ab2:	f001 fc8a 	bl	80023ca <HAL_CRC_Calculate>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b2c <main+0x168>)
 8000aba:	6013      	str	r3, [r2, #0]
	  snprintf((char*)send_data, sizeof(send_data), "%d,%lu\n", read_step_value, crc_value);
 8000abc:	4b17      	ldr	r3, [pc, #92]	@ (8000b1c <main+0x158>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <main+0x168>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	4a19      	ldr	r2, [pc, #100]	@ (8000b30 <main+0x16c>)
 8000aca:	2132      	movs	r1, #50	@ 0x32
 8000acc:	4819      	ldr	r0, [pc, #100]	@ (8000b34 <main+0x170>)
 8000ace:	f00c f831 	bl	800cb34 <sniprintf>
	  while (CDC_Transmit_FS((uint8_t*)send_data, strlen((char*)send_data)) == USBD_BUSY) {
 8000ad2:	e002      	b.n	8000ada <main+0x116>
	      HAL_Delay(1);
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f000 ff15 	bl	8001904 <HAL_Delay>
	  while (CDC_Transmit_FS((uint8_t*)send_data, strlen((char*)send_data)) == USBD_BUSY) {
 8000ada:	4816      	ldr	r0, [pc, #88]	@ (8000b34 <main+0x170>)
 8000adc:	f7ff fb78 	bl	80001d0 <strlen>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4813      	ldr	r0, [pc, #76]	@ (8000b34 <main+0x170>)
 8000ae8:	f00b fa88 	bl	800bffc <CDC_Transmit_FS>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d0f0      	beq.n	8000ad4 <main+0x110>
	  read_step_value = map(adc_buffer[0], 0, 4095, 0, 180);
 8000af2:	e7c7      	b.n	8000a84 <main+0xc0>
 8000af4:	40020c00 	.word	0x40020c00
 8000af8:	200003a0 	.word	0x200003a0
 8000afc:	200002e4 	.word	0x200002e4
 8000b00:	20000374 	.word	0x20000374
 8000b04:	2000032c 	.word	0x2000032c
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	20000390 	.word	0x20000390
 8000b10:	200003c4 	.word	0x200003c4
 8000b14:	20000188 	.word	0x20000188
 8000b18:	080e0000 	.word	0x080e0000
 8000b1c:	200003c8 	.word	0x200003c8
 8000b20:	0800dc78 	.word	0x0800dc78
 8000b24:	20000404 	.word	0x20000404
 8000b28:	20000230 	.word	0x20000230
 8000b2c:	20000400 	.word	0x20000400
 8000b30:	0800dc84 	.word	0x0800dc84
 8000b34:	200003cc 	.word	0x200003cc

08000b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b094      	sub	sp, #80	@ 0x50
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 0320 	add.w	r3, r7, #32
 8000b42:	2230      	movs	r2, #48	@ 0x30
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f00c f900 	bl	800cd4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	4b28      	ldr	r3, [pc, #160]	@ (8000c04 <SystemClock_Config+0xcc>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b64:	4a27      	ldr	r2, [pc, #156]	@ (8000c04 <SystemClock_Config+0xcc>)
 8000b66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6c:	4b25      	ldr	r3, [pc, #148]	@ (8000c04 <SystemClock_Config+0xcc>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	4b22      	ldr	r3, [pc, #136]	@ (8000c08 <SystemClock_Config+0xd0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a21      	ldr	r2, [pc, #132]	@ (8000c08 <SystemClock_Config+0xd0>)
 8000b82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b86:	6013      	str	r3, [r2, #0]
 8000b88:	4b1f      	ldr	r3, [pc, #124]	@ (8000c08 <SystemClock_Config+0xd0>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b94:	2301      	movs	r3, #1
 8000b96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b98:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ba2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000bac:	2348      	movs	r3, #72	@ 0x48
 8000bae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb8:	f107 0320 	add.w	r3, r7, #32
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f003 ff09 	bl	80049d4 <HAL_RCC_OscConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bc8:	f000 fb00 	bl	80011cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bcc:	230f      	movs	r3, #15
 8000bce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	2102      	movs	r1, #2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f004 f96a 	bl	8004ec4 <HAL_RCC_ClockConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bf6:	f000 fae9 	bl	80011cc <Error_Handler>
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	3750      	adds	r7, #80	@ 0x50
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40007000 	.word	0x40007000

08000c0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c12:	463b      	mov	r3, r7
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c20:	4a21      	ldr	r2, [pc, #132]	@ (8000ca8 <MX_ADC1_Init+0x9c>)
 8000c22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c4c:	4a17      	ldr	r2, [pc, #92]	@ (8000cac <MX_ADC1_Init+0xa0>)
 8000c4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c6a:	480e      	ldr	r0, [pc, #56]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c6c:	f000 fe6e 	bl	800194c <HAL_ADC_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c76:	f000 faa9 	bl	80011cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000c82:	2303      	movs	r3, #3
 8000c84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c86:	463b      	mov	r3, r7
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4806      	ldr	r0, [pc, #24]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c8c:	f000 ffd0 	bl	8001c30 <HAL_ADC_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c96:	f000 fa99 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000188 	.word	0x20000188
 8000ca8:	40012000 	.word	0x40012000
 8000cac:	0f000001 	.word	0x0f000001

08000cb0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <MX_CRC_Init+0x20>)
 8000cb6:	4a07      	ldr	r2, [pc, #28]	@ (8000cd4 <MX_CRC_Init+0x24>)
 8000cb8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_CRC_Init+0x20>)
 8000cbc:	f001 fb69 	bl	8002392 <HAL_CRC_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000cc6:	f000 fa81 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000230 	.word	0x20000230
 8000cd4:	40023000 	.word	0x40023000

08000cd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <MX_I2C1_Init+0x50>)
 8000cde:	4a13      	ldr	r2, [pc, #76]	@ (8000d2c <MX_I2C1_Init+0x54>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <MX_I2C1_Init+0x50>)
 8000ce4:	4a12      	ldr	r2, [pc, #72]	@ (8000d30 <MX_I2C1_Init+0x58>)
 8000ce6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <MX_I2C1_Init+0x50>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <MX_I2C1_Init+0x50>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <MX_I2C1_Init+0x50>)
 8000cf6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cfa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <MX_I2C1_Init+0x50>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <MX_I2C1_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d08:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <MX_I2C1_Init+0x50>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <MX_I2C1_Init+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	@ (8000d28 <MX_I2C1_Init+0x50>)
 8000d16:	f002 fac7 	bl	80032a8 <HAL_I2C_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d20:	f000 fa54 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000238 	.word	0x20000238
 8000d2c:	40005400 	.word	0x40005400
 8000d30:	000186a0 	.word	0x000186a0

08000d34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d38:	4b17      	ldr	r3, [pc, #92]	@ (8000d98 <MX_SPI1_Init+0x64>)
 8000d3a:	4a18      	ldr	r2, [pc, #96]	@ (8000d9c <MX_SPI1_Init+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d3e:	4b16      	ldr	r3, [pc, #88]	@ (8000d98 <MX_SPI1_Init+0x64>)
 8000d40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d46:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <MX_SPI1_Init+0x64>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <MX_SPI1_Init+0x64>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d52:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <MX_SPI1_Init+0x64>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <MX_SPI1_Init+0x64>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <MX_SPI1_Init+0x64>)
 8000d60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <MX_SPI1_Init+0x64>)
 8000d68:	2230      	movs	r2, #48	@ 0x30
 8000d6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <MX_SPI1_Init+0x64>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d72:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <MX_SPI1_Init+0x64>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d78:	4b07      	ldr	r3, [pc, #28]	@ (8000d98 <MX_SPI1_Init+0x64>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <MX_SPI1_Init+0x64>)
 8000d80:	220a      	movs	r2, #10
 8000d82:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d84:	4804      	ldr	r0, [pc, #16]	@ (8000d98 <MX_SPI1_Init+0x64>)
 8000d86:	f004 faa9 	bl	80052dc <HAL_SPI_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d90:	f000 fa1c 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	2000028c 	.word	0x2000028c
 8000d9c:	40013000 	.word	0x40013000

08000da0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b096      	sub	sp, #88	@ 0x58
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]
 8000dce:	615a      	str	r2, [r3, #20]
 8000dd0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2220      	movs	r2, #32
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f00b ffb7 	bl	800cd4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dde:	4b3e      	ldr	r3, [pc, #248]	@ (8000ed8 <MX_TIM1_Init+0x138>)
 8000de0:	4a3e      	ldr	r2, [pc, #248]	@ (8000edc <MX_TIM1_Init+0x13c>)
 8000de2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000de4:	4b3c      	ldr	r3, [pc, #240]	@ (8000ed8 <MX_TIM1_Init+0x138>)
 8000de6:	2247      	movs	r2, #71	@ 0x47
 8000de8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed8 <MX_TIM1_Init+0x138>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000df0:	4b39      	ldr	r3, [pc, #228]	@ (8000ed8 <MX_TIM1_Init+0x138>)
 8000df2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000df6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df8:	4b37      	ldr	r3, [pc, #220]	@ (8000ed8 <MX_TIM1_Init+0x138>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dfe:	4b36      	ldr	r3, [pc, #216]	@ (8000ed8 <MX_TIM1_Init+0x138>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e04:	4b34      	ldr	r3, [pc, #208]	@ (8000ed8 <MX_TIM1_Init+0x138>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e0a:	4833      	ldr	r0, [pc, #204]	@ (8000ed8 <MX_TIM1_Init+0x138>)
 8000e0c:	f004 faef 	bl	80053ee <HAL_TIM_Base_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e16:	f000 f9d9 	bl	80011cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e20:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e24:	4619      	mov	r1, r3
 8000e26:	482c      	ldr	r0, [pc, #176]	@ (8000ed8 <MX_TIM1_Init+0x138>)
 8000e28:	f004 fdfa 	bl	8005a20 <HAL_TIM_ConfigClockSource>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e32:	f000 f9cb 	bl	80011cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e36:	4828      	ldr	r0, [pc, #160]	@ (8000ed8 <MX_TIM1_Init+0x138>)
 8000e38:	f004 fb28 	bl	800548c <HAL_TIM_PWM_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e42:	f000 f9c3 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e4e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e52:	4619      	mov	r1, r3
 8000e54:	4820      	ldr	r0, [pc, #128]	@ (8000ed8 <MX_TIM1_Init+0x138>)
 8000e56:	f005 f9ef 	bl	8006238 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e60:	f000 f9b4 	bl	80011cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e64:	2360      	movs	r3, #96	@ 0x60
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e70:	2300      	movs	r3, #0
 8000e72:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e84:	2200      	movs	r2, #0
 8000e86:	4619      	mov	r1, r3
 8000e88:	4813      	ldr	r0, [pc, #76]	@ (8000ed8 <MX_TIM1_Init+0x138>)
 8000e8a:	f004 fd07 	bl	800589c <HAL_TIM_PWM_ConfigChannel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000e94:	f000 f99a 	bl	80011cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eb0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4807      	ldr	r0, [pc, #28]	@ (8000ed8 <MX_TIM1_Init+0x138>)
 8000ebc:	f005 fa38 	bl	8006330 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000ec6:	f000 f981 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000eca:	4803      	ldr	r0, [pc, #12]	@ (8000ed8 <MX_TIM1_Init+0x138>)
 8000ecc:	f000 fb12 	bl	80014f4 <HAL_TIM_MspPostInit>

}
 8000ed0:	bf00      	nop
 8000ed2:	3758      	adds	r7, #88	@ 0x58
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200002e4 	.word	0x200002e4
 8000edc:	40010000 	.word	0x40010000

08000ee0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08e      	sub	sp, #56	@ 0x38
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef4:	f107 0320 	add.w	r3, r7, #32
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
 8000f0c:	615a      	str	r2, [r3, #20]
 8000f0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f10:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc8 <MX_TIM2_Init+0xe8>)
 8000f12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8000f18:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc8 <MX_TIM2_Init+0xe8>)
 8000f1a:	2248      	movs	r2, #72	@ 0x48
 8000f1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc8 <MX_TIM2_Init+0xe8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000f24:	4b28      	ldr	r3, [pc, #160]	@ (8000fc8 <MX_TIM2_Init+0xe8>)
 8000f26:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000f2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2c:	4b26      	ldr	r3, [pc, #152]	@ (8000fc8 <MX_TIM2_Init+0xe8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f32:	4b25      	ldr	r3, [pc, #148]	@ (8000fc8 <MX_TIM2_Init+0xe8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f38:	4823      	ldr	r0, [pc, #140]	@ (8000fc8 <MX_TIM2_Init+0xe8>)
 8000f3a:	f004 fa58 	bl	80053ee <HAL_TIM_Base_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000f44:	f000 f942 	bl	80011cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f52:	4619      	mov	r1, r3
 8000f54:	481c      	ldr	r0, [pc, #112]	@ (8000fc8 <MX_TIM2_Init+0xe8>)
 8000f56:	f004 fd63 	bl	8005a20 <HAL_TIM_ConfigClockSource>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000f60:	f000 f934 	bl	80011cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f64:	4818      	ldr	r0, [pc, #96]	@ (8000fc8 <MX_TIM2_Init+0xe8>)
 8000f66:	f004 fa91 	bl	800548c <HAL_TIM_PWM_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f70:	f000 f92c 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f7c:	f107 0320 	add.w	r3, r7, #32
 8000f80:	4619      	mov	r1, r3
 8000f82:	4811      	ldr	r0, [pc, #68]	@ (8000fc8 <MX_TIM2_Init+0xe8>)
 8000f84:	f005 f958 	bl	8006238 <HAL_TIMEx_MasterConfigSynchronization>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000f8e:	f000 f91d 	bl	80011cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f92:	2360      	movs	r3, #96	@ 0x60
 8000f94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4807      	ldr	r0, [pc, #28]	@ (8000fc8 <MX_TIM2_Init+0xe8>)
 8000faa:	f004 fc77 	bl	800589c <HAL_TIM_PWM_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000fb4:	f000 f90a 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fb8:	4803      	ldr	r0, [pc, #12]	@ (8000fc8 <MX_TIM2_Init+0xe8>)
 8000fba:	f000 fa9b 	bl	80014f4 <HAL_TIM_MspPostInit>

}
 8000fbe:	bf00      	nop
 8000fc0:	3738      	adds	r7, #56	@ 0x38
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000032c 	.word	0x2000032c

08000fcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <MX_DMA_Init+0x3c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a0b      	ldr	r2, [pc, #44]	@ (8001008 <MX_DMA_Init+0x3c>)
 8000fdc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <MX_DMA_Init+0x3c>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2038      	movs	r0, #56	@ 0x38
 8000ff4:	f001 f997 	bl	8002326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ff8:	2038      	movs	r0, #56	@ 0x38
 8000ffa:	f001 f9b0 	bl	800235e <HAL_NVIC_EnableIRQ>

}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800

0800100c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	@ 0x30
 8001010:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
 8001026:	4b63      	ldr	r3, [pc, #396]	@ (80011b4 <MX_GPIO_Init+0x1a8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a62      	ldr	r2, [pc, #392]	@ (80011b4 <MX_GPIO_Init+0x1a8>)
 800102c:	f043 0310 	orr.w	r3, r3, #16
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b60      	ldr	r3, [pc, #384]	@ (80011b4 <MX_GPIO_Init+0x1a8>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0310 	and.w	r3, r3, #16
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	4b5c      	ldr	r3, [pc, #368]	@ (80011b4 <MX_GPIO_Init+0x1a8>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a5b      	ldr	r2, [pc, #364]	@ (80011b4 <MX_GPIO_Init+0x1a8>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b59      	ldr	r3, [pc, #356]	@ (80011b4 <MX_GPIO_Init+0x1a8>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	4b55      	ldr	r3, [pc, #340]	@ (80011b4 <MX_GPIO_Init+0x1a8>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	4a54      	ldr	r2, [pc, #336]	@ (80011b4 <MX_GPIO_Init+0x1a8>)
 8001064:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001068:	6313      	str	r3, [r2, #48]	@ 0x30
 800106a:	4b52      	ldr	r3, [pc, #328]	@ (80011b4 <MX_GPIO_Init+0x1a8>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b4e      	ldr	r3, [pc, #312]	@ (80011b4 <MX_GPIO_Init+0x1a8>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	4a4d      	ldr	r2, [pc, #308]	@ (80011b4 <MX_GPIO_Init+0x1a8>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6313      	str	r3, [r2, #48]	@ 0x30
 8001086:	4b4b      	ldr	r3, [pc, #300]	@ (80011b4 <MX_GPIO_Init+0x1a8>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	4b47      	ldr	r3, [pc, #284]	@ (80011b4 <MX_GPIO_Init+0x1a8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a46      	ldr	r2, [pc, #280]	@ (80011b4 <MX_GPIO_Init+0x1a8>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b44      	ldr	r3, [pc, #272]	@ (80011b4 <MX_GPIO_Init+0x1a8>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b40      	ldr	r3, [pc, #256]	@ (80011b4 <MX_GPIO_Init+0x1a8>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	4a3f      	ldr	r2, [pc, #252]	@ (80011b4 <MX_GPIO_Init+0x1a8>)
 80010b8:	f043 0308 	orr.w	r3, r3, #8
 80010bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010be:	4b3d      	ldr	r3, [pc, #244]	@ (80011b4 <MX_GPIO_Init+0x1a8>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, lcd_d5_Pin|lcd_d6_Pin|lcd_d7_Pin|GPIO_PIN_10
 80010ca:	2200      	movs	r2, #0
 80010cc:	f240 413a 	movw	r1, #1082	@ 0x43a
 80010d0:	4839      	ldr	r0, [pc, #228]	@ (80011b8 <MX_GPIO_Init+0x1ac>)
 80010d2:	f002 f8b7 	bl	8003244 <HAL_GPIO_WritePin>
                          |lcd_d4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2130      	movs	r1, #48	@ 0x30
 80010da:	4838      	ldr	r0, [pc, #224]	@ (80011bc <MX_GPIO_Init+0x1b0>)
 80010dc:	f002 f8b2 	bl	8003244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|lcd_rs_Pin|lcd_e_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	212c      	movs	r1, #44	@ 0x2c
 80010e4:	4836      	ldr	r0, [pc, #216]	@ (80011c0 <MX_GPIO_Init+0x1b4>)
 80010e6:	f002 f8ad 	bl	8003244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, dir_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 80010f0:	4834      	ldr	r0, [pc, #208]	@ (80011c4 <MX_GPIO_Init+0x1b8>)
 80010f2:	f002 f8a7 	bl	8003244 <HAL_GPIO_WritePin>
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : lcd_d5_Pin lcd_d6_Pin lcd_d7_Pin PE10
                           lcd_d4_Pin */
  GPIO_InitStruct.Pin = lcd_d5_Pin|lcd_d6_Pin|lcd_d7_Pin|GPIO_PIN_10
 80010f6:	f240 433a 	movw	r3, #1082	@ 0x43a
 80010fa:	61fb      	str	r3, [r7, #28]
                          |lcd_d4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	482a      	ldr	r0, [pc, #168]	@ (80011b8 <MX_GPIO_Init+0x1ac>)
 8001110:	f001 fefc 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001114:	2301      	movs	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001118:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	4827      	ldr	r0, [pc, #156]	@ (80011c8 <MX_GPIO_Init+0x1bc>)
 800112a:	f001 feef 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800112e:	2330      	movs	r3, #48	@ 0x30
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	2301      	movs	r3, #1
 8001134:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	4619      	mov	r1, r3
 8001144:	481d      	ldr	r0, [pc, #116]	@ (80011bc <MX_GPIO_Init+0x1b0>)
 8001146:	f001 fee1 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin lcd_rs_Pin lcd_e_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|lcd_rs_Pin|lcd_e_Pin;
 800114a:	232c      	movs	r3, #44	@ 0x2c
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	4817      	ldr	r0, [pc, #92]	@ (80011c0 <MX_GPIO_Init+0x1b4>)
 8001162:	f001 fed3 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : dir_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = dir_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001166:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 800116a:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	4811      	ldr	r0, [pc, #68]	@ (80011c4 <MX_GPIO_Init+0x1b8>)
 8001180:	f001 fec4 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001184:	230e      	movs	r3, #14
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118c:	2301      	movs	r3, #1
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4619      	mov	r1, r3
 8001196:	480b      	ldr	r0, [pc, #44]	@ (80011c4 <MX_GPIO_Init+0x1b8>)
 8001198:	f001 feb8 	bl	8002f0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	2006      	movs	r0, #6
 80011a2:	f001 f8c0 	bl	8002326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011a6:	2006      	movs	r0, #6
 80011a8:	f001 f8d9 	bl	800235e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ac:	bf00      	nop
 80011ae:	3730      	adds	r7, #48	@ 0x30
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40020800 	.word	0x40020800
 80011c0:	40020400 	.word	0x40020400
 80011c4:	40020c00 	.word	0x40020c00
 80011c8:	40020000 	.word	0x40020000

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <Error_Handler+0x8>

080011d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <HAL_MspInit+0x4c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001224 <HAL_MspInit+0x4c>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <HAL_MspInit+0x4c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <HAL_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	4a08      	ldr	r2, [pc, #32]	@ (8001224 <HAL_MspInit+0x4c>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001208:	6413      	str	r3, [r2, #64]	@ 0x40
 800120a:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_MspInit+0x4c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001216:	2007      	movs	r0, #7
 8001218:	f001 f87a 	bl	8002310 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800

08001228 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a2f      	ldr	r2, [pc, #188]	@ (8001304 <HAL_ADC_MspInit+0xdc>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d158      	bne.n	80012fc <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b2e      	ldr	r3, [pc, #184]	@ (8001308 <HAL_ADC_MspInit+0xe0>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001252:	4a2d      	ldr	r2, [pc, #180]	@ (8001308 <HAL_ADC_MspInit+0xe0>)
 8001254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001258:	6453      	str	r3, [r2, #68]	@ 0x44
 800125a:	4b2b      	ldr	r3, [pc, #172]	@ (8001308 <HAL_ADC_MspInit+0xe0>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b27      	ldr	r3, [pc, #156]	@ (8001308 <HAL_ADC_MspInit+0xe0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a26      	ldr	r2, [pc, #152]	@ (8001308 <HAL_ADC_MspInit+0xe0>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b24      	ldr	r3, [pc, #144]	@ (8001308 <HAL_ADC_MspInit+0xe0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001282:	2302      	movs	r3, #2
 8001284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001286:	2303      	movs	r3, #3
 8001288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	481d      	ldr	r0, [pc, #116]	@ (800130c <HAL_ADC_MspInit+0xe4>)
 8001296:	f001 fe39 	bl	8002f0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800129a:	4b1d      	ldr	r3, [pc, #116]	@ (8001310 <HAL_ADC_MspInit+0xe8>)
 800129c:	4a1d      	ldr	r2, [pc, #116]	@ (8001314 <HAL_ADC_MspInit+0xec>)
 800129e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001310 <HAL_ADC_MspInit+0xe8>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <HAL_ADC_MspInit+0xe8>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ac:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <HAL_ADC_MspInit+0xe8>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012b2:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <HAL_ADC_MspInit+0xe8>)
 80012b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012ba:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <HAL_ADC_MspInit+0xe8>)
 80012bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <HAL_ADC_MspInit+0xe8>)
 80012c4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <HAL_ADC_MspInit+0xe8>)
 80012cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012d0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80012d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <HAL_ADC_MspInit+0xe8>)
 80012d4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012d8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012da:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <HAL_ADC_MspInit+0xe8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012e0:	480b      	ldr	r0, [pc, #44]	@ (8001310 <HAL_ADC_MspInit+0xe8>)
 80012e2:	f001 f8a5 	bl	8002430 <HAL_DMA_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80012ec:	f7ff ff6e 	bl	80011cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a07      	ldr	r2, [pc, #28]	@ (8001310 <HAL_ADC_MspInit+0xe8>)
 80012f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80012f6:	4a06      	ldr	r2, [pc, #24]	@ (8001310 <HAL_ADC_MspInit+0xe8>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	@ 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40012000 	.word	0x40012000
 8001308:	40023800 	.word	0x40023800
 800130c:	40020000 	.word	0x40020000
 8001310:	200001d0 	.word	0x200001d0
 8001314:	40026410 	.word	0x40026410

08001318 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0b      	ldr	r2, [pc, #44]	@ (8001354 <HAL_CRC_MspInit+0x3c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10d      	bne.n	8001346 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <HAL_CRC_MspInit+0x40>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a09      	ldr	r2, [pc, #36]	@ (8001358 <HAL_CRC_MspInit+0x40>)
 8001334:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <HAL_CRC_MspInit+0x40>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001346:	bf00      	nop
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40023000 	.word	0x40023000
 8001358:	40023800 	.word	0x40023800

0800135c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	@ 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a19      	ldr	r2, [pc, #100]	@ (80013e0 <HAL_I2C_MspInit+0x84>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d12b      	bne.n	80013d6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <HAL_I2C_MspInit+0x88>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a17      	ldr	r2, [pc, #92]	@ (80013e4 <HAL_I2C_MspInit+0x88>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <HAL_I2C_MspInit+0x88>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800139a:	23c0      	movs	r3, #192	@ 0xc0
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139e:	2312      	movs	r3, #18
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013aa:	2304      	movs	r3, #4
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	480c      	ldr	r0, [pc, #48]	@ (80013e8 <HAL_I2C_MspInit+0x8c>)
 80013b6:	f001 fda9 	bl	8002f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <HAL_I2C_MspInit+0x88>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	4a08      	ldr	r2, [pc, #32]	@ (80013e4 <HAL_I2C_MspInit+0x88>)
 80013c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <HAL_I2C_MspInit+0x88>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80013d6:	bf00      	nop
 80013d8:	3728      	adds	r7, #40	@ 0x28
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40005400 	.word	0x40005400
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020400 	.word	0x40020400

080013ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	@ 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a19      	ldr	r2, [pc, #100]	@ (8001470 <HAL_SPI_MspInit+0x84>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d12b      	bne.n	8001466 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <HAL_SPI_MspInit+0x88>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	4a17      	ldr	r2, [pc, #92]	@ (8001474 <HAL_SPI_MspInit+0x88>)
 8001418:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800141c:	6453      	str	r3, [r2, #68]	@ 0x44
 800141e:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <HAL_SPI_MspInit+0x88>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001422:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <HAL_SPI_MspInit+0x88>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a10      	ldr	r2, [pc, #64]	@ (8001474 <HAL_SPI_MspInit+0x88>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <HAL_SPI_MspInit+0x88>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001446:	23e0      	movs	r3, #224	@ 0xe0
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001456:	2305      	movs	r3, #5
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	@ (8001478 <HAL_SPI_MspInit+0x8c>)
 8001462:	f001 fd53 	bl	8002f0c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	@ 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40013000 	.word	0x40013000
 8001474:	40023800 	.word	0x40023800
 8001478:	40020000 	.word	0x40020000

0800147c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a18      	ldr	r2, [pc, #96]	@ (80014ec <HAL_TIM_Base_MspInit+0x70>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d116      	bne.n	80014bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <HAL_TIM_Base_MspInit+0x74>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001496:	4a16      	ldr	r2, [pc, #88]	@ (80014f0 <HAL_TIM_Base_MspInit+0x74>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6453      	str	r3, [r2, #68]	@ 0x44
 800149e:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <HAL_TIM_Base_MspInit+0x74>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	201b      	movs	r0, #27
 80014b0:	f000 ff39 	bl	8002326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80014b4:	201b      	movs	r0, #27
 80014b6:	f000 ff52 	bl	800235e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014ba:	e012      	b.n	80014e2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014c4:	d10d      	bne.n	80014e2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <HAL_TIM_Base_MspInit+0x74>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	4a08      	ldr	r2, [pc, #32]	@ (80014f0 <HAL_TIM_Base_MspInit+0x74>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_TIM_Base_MspInit+0x74>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40010000 	.word	0x40010000
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	@ 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a25      	ldr	r2, [pc, #148]	@ (80015a8 <HAL_TIM_MspPostInit+0xb4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d11f      	bne.n	8001556 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b24      	ldr	r3, [pc, #144]	@ (80015ac <HAL_TIM_MspPostInit+0xb8>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	4a23      	ldr	r2, [pc, #140]	@ (80015ac <HAL_TIM_MspPostInit+0xb8>)
 8001520:	f043 0310 	orr.w	r3, r3, #16
 8001524:	6313      	str	r3, [r2, #48]	@ 0x30
 8001526:	4b21      	ldr	r3, [pc, #132]	@ (80015ac <HAL_TIM_MspPostInit+0xb8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001532:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001544:	2301      	movs	r3, #1
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	4818      	ldr	r0, [pc, #96]	@ (80015b0 <HAL_TIM_MspPostInit+0xbc>)
 8001550:	f001 fcdc 	bl	8002f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001554:	e023      	b.n	800159e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800155e:	d11e      	bne.n	800159e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <HAL_TIM_MspPostInit+0xb8>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001568:	4a10      	ldr	r2, [pc, #64]	@ (80015ac <HAL_TIM_MspPostInit+0xb8>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001570:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <HAL_TIM_MspPostInit+0xb8>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800157c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800158e:	2301      	movs	r3, #1
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	4806      	ldr	r0, [pc, #24]	@ (80015b4 <HAL_TIM_MspPostInit+0xc0>)
 800159a:	f001 fcb7 	bl	8002f0c <HAL_GPIO_Init>
}
 800159e:	bf00      	nop
 80015a0:	3728      	adds	r7, #40	@ 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40010000 	.word	0x40010000
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40020000 	.word	0x40020000

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <NMI_Handler+0x4>

080015c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <HardFault_Handler+0x4>

080015c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <MemManage_Handler+0x4>

080015d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <UsageFault_Handler+0x4>

080015e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160e:	f000 f959 	bl	80018c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}

08001616 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800161a:	2001      	movs	r0, #1
 800161c:	f001 fe2c 	bl	8003278 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001628:	4802      	ldr	r0, [pc, #8]	@ (8001634 <TIM1_CC_IRQHandler+0x10>)
 800162a:	f004 f847 	bl	80056bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200002e4 	.word	0x200002e4

08001638 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <DMA2_Stream0_IRQHandler+0x10>)
 800163e:	f000 fffd 	bl	800263c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200001d0 	.word	0x200001d0

0800164c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <OTG_FS_IRQHandler+0x10>)
 8001652:	f002 f8b1 	bl	80037b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20001db4 	.word	0x20001db4

08001660 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	e00a      	b.n	8001688 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001672:	f3af 8000 	nop.w
 8001676:	4601      	mov	r1, r0
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	60ba      	str	r2, [r7, #8]
 800167e:	b2ca      	uxtb	r2, r1
 8001680:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	429a      	cmp	r2, r3
 800168e:	dbf0      	blt.n	8001672 <_read+0x12>
  }

  return len;
 8001690:	687b      	ldr	r3, [r7, #4]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	e009      	b.n	80016c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	60ba      	str	r2, [r7, #8]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dbf1      	blt.n	80016ac <_write+0x12>
  }
  return len;
 80016c8:	687b      	ldr	r3, [r7, #4]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_close>:

int _close(int file)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016fa:	605a      	str	r2, [r3, #4]
  return 0;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <_isatty>:

int _isatty(int file)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001744:	4a14      	ldr	r2, [pc, #80]	@ (8001798 <_sbrk+0x5c>)
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <_sbrk+0x60>)
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001750:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001758:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <_sbrk+0x64>)
 800175a:	4a12      	ldr	r2, [pc, #72]	@ (80017a4 <_sbrk+0x68>)
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175e:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d207      	bcs.n	800177c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800176c:	f00b fb3c 	bl	800cde8 <__errno>
 8001770:	4603      	mov	r3, r0
 8001772:	220c      	movs	r2, #12
 8001774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	e009      	b.n	8001790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800177c:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001782:	4b07      	ldr	r3, [pc, #28]	@ (80017a0 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	4a05      	ldr	r2, [pc, #20]	@ (80017a0 <_sbrk+0x64>)
 800178c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20020000 	.word	0x20020000
 800179c:	00000400 	.word	0x00000400
 80017a0:	20000870 	.word	0x20000870
 80017a4:	20002608 	.word	0x20002608

080017a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <SystemInit+0x20>)
 80017ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017b2:	4a05      	ldr	r2, [pc, #20]	@ (80017c8 <SystemInit+0x20>)
 80017b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001804 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017d0:	f7ff ffea 	bl	80017a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d4:	480c      	ldr	r0, [pc, #48]	@ (8001808 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017d6:	490d      	ldr	r1, [pc, #52]	@ (800180c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001810 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017dc:	e002      	b.n	80017e4 <LoopCopyDataInit>

080017de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e2:	3304      	adds	r3, #4

080017e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e8:	d3f9      	bcc.n	80017de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001818 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f0:	e001      	b.n	80017f6 <LoopFillZerobss>

080017f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f4:	3204      	adds	r2, #4

080017f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f8:	d3fb      	bcc.n	80017f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017fa:	f00b fafb 	bl	800cdf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fe:	f7ff f8e1 	bl	80009c4 <main>
  bx  lr    
 8001802:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001804:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800180c:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001810:	0800ddfc 	.word	0x0800ddfc
  ldr r2, =_sbss
 8001814:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8001818:	20002604 	.word	0x20002604

0800181c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800181c:	e7fe      	b.n	800181c <ADC_IRQHandler>
	...

08001820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001824:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0d      	ldr	r2, [pc, #52]	@ (8001860 <HAL_Init+0x40>)
 800182a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800182e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001830:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <HAL_Init+0x40>)
 8001836:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800183a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800183c:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <HAL_Init+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a07      	ldr	r2, [pc, #28]	@ (8001860 <HAL_Init+0x40>)
 8001842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001846:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001848:	2003      	movs	r0, #3
 800184a:	f000 fd61 	bl	8002310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184e:	2000      	movs	r0, #0
 8001850:	f000 f808 	bl	8001864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001854:	f7ff fcc0 	bl	80011d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023c00 	.word	0x40023c00

08001864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800186c:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <HAL_InitTick+0x54>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <HAL_InitTick+0x58>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	4619      	mov	r1, r3
 8001876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800187a:	fbb3 f3f1 	udiv	r3, r3, r1
 800187e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001882:	4618      	mov	r0, r3
 8001884:	f000 fd79 	bl	800237a <HAL_SYSTICK_Config>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e00e      	b.n	80018b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b0f      	cmp	r3, #15
 8001896:	d80a      	bhi.n	80018ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001898:	2200      	movs	r2, #0
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	f04f 30ff 	mov.w	r0, #4294967295
 80018a0:	f000 fd41 	bl	8002326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a4:	4a06      	ldr	r2, [pc, #24]	@ (80018c0 <HAL_InitTick+0x5c>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e000      	b.n	80018b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000008 	.word	0x20000008
 80018c0:	20000004 	.word	0x20000004

080018c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c8:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_IncTick+0x20>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <HAL_IncTick+0x24>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <HAL_IncTick+0x24>)
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000008 	.word	0x20000008
 80018e8:	20000874 	.word	0x20000874

080018ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b03      	ldr	r3, [pc, #12]	@ (8001900 <HAL_GetTick+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000874 	.word	0x20000874

08001904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800190c:	f7ff ffee 	bl	80018ec <HAL_GetTick>
 8001910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191c:	d005      	beq.n	800192a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191e:	4b0a      	ldr	r3, [pc, #40]	@ (8001948 <HAL_Delay+0x44>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4413      	add	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800192a:	bf00      	nop
 800192c:	f7ff ffde 	bl	80018ec <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	429a      	cmp	r2, r3
 800193a:	d8f7      	bhi.n	800192c <HAL_Delay+0x28>
  {
  }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000008 	.word	0x20000008

0800194c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e033      	b.n	80019ca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	2b00      	cmp	r3, #0
 8001968:	d109      	bne.n	800197e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff fc5c 	bl	8001228 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	2b00      	cmp	r3, #0
 8001988:	d118      	bne.n	80019bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001992:	f023 0302 	bic.w	r3, r3, #2
 8001996:	f043 0202 	orr.w	r2, r3, #2
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fa68 	bl	8001e74 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f023 0303 	bic.w	r3, r3, #3
 80019b2:	f043 0201 	orr.w	r2, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80019ba:	e001      	b.n	80019c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_Start_DMA+0x1e>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e0e9      	b.n	8001bc6 <HAL_ADC_Start_DMA+0x1f2>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d018      	beq.n	8001a3a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a18:	4b6d      	ldr	r3, [pc, #436]	@ (8001bd0 <HAL_ADC_Start_DMA+0x1fc>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a6d      	ldr	r2, [pc, #436]	@ (8001bd4 <HAL_ADC_Start_DMA+0x200>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	0c9a      	lsrs	r2, r3, #18
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001a2c:	e002      	b.n	8001a34 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f9      	bne.n	8001a2e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a48:	d107      	bne.n	8001a5a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a58:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	f040 80a1 	bne.w	8001bac <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001a72:	f023 0301 	bic.w	r3, r3, #1
 8001a76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d007      	beq.n	8001a9c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a94:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001aa8:	d106      	bne.n	8001ab8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	f023 0206 	bic.w	r2, r3, #6
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ab6:	e002      	b.n	8001abe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ac6:	4b44      	ldr	r3, [pc, #272]	@ (8001bd8 <HAL_ADC_Start_DMA+0x204>)
 8001ac8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ace:	4a43      	ldr	r2, [pc, #268]	@ (8001bdc <HAL_ADC_Start_DMA+0x208>)
 8001ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ad6:	4a42      	ldr	r2, [pc, #264]	@ (8001be0 <HAL_ADC_Start_DMA+0x20c>)
 8001ad8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ade:	4a41      	ldr	r2, [pc, #260]	@ (8001be4 <HAL_ADC_Start_DMA+0x210>)
 8001ae0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001aea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001afa:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b0a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	334c      	adds	r3, #76	@ 0x4c
 8001b16:	4619      	mov	r1, r3
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f000 fd36 	bl	800258c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 031f 	and.w	r3, r3, #31
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d12a      	bne.n	8001b82 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a2d      	ldr	r2, [pc, #180]	@ (8001be8 <HAL_ADC_Start_DMA+0x214>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d015      	beq.n	8001b62 <HAL_ADC_Start_DMA+0x18e>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8001bec <HAL_ADC_Start_DMA+0x218>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d105      	bne.n	8001b4c <HAL_ADC_Start_DMA+0x178>
 8001b40:	4b25      	ldr	r3, [pc, #148]	@ (8001bd8 <HAL_ADC_Start_DMA+0x204>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00a      	beq.n	8001b62 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a27      	ldr	r2, [pc, #156]	@ (8001bf0 <HAL_ADC_Start_DMA+0x21c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d136      	bne.n	8001bc4 <HAL_ADC_Start_DMA+0x1f0>
 8001b56:	4b20      	ldr	r3, [pc, #128]	@ (8001bd8 <HAL_ADC_Start_DMA+0x204>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d130      	bne.n	8001bc4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d129      	bne.n	8001bc4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	e020      	b.n	8001bc4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a18      	ldr	r2, [pc, #96]	@ (8001be8 <HAL_ADC_Start_DMA+0x214>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d11b      	bne.n	8001bc4 <HAL_ADC_Start_DMA+0x1f0>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d114      	bne.n	8001bc4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	e00b      	b.n	8001bc4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	f043 0210 	orr.w	r2, r3, #16
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbc:	f043 0201 	orr.w	r2, r3, #1
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	431bde83 	.word	0x431bde83
 8001bd8:	40012300 	.word	0x40012300
 8001bdc:	0800206d 	.word	0x0800206d
 8001be0:	08002127 	.word	0x08002127
 8001be4:	08002143 	.word	0x08002143
 8001be8:	40012000 	.word	0x40012000
 8001bec:	40012100 	.word	0x40012100
 8001bf0:	40012200 	.word	0x40012200

08001bf4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x1c>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e105      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x228>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b09      	cmp	r3, #9
 8001c5a:	d925      	bls.n	8001ca8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68d9      	ldr	r1, [r3, #12]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	3b1e      	subs	r3, #30
 8001c72:	2207      	movs	r2, #7
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43da      	mvns	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	400a      	ands	r2, r1
 8001c80:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68d9      	ldr	r1, [r3, #12]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	4603      	mov	r3, r0
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4403      	add	r3, r0
 8001c9a:	3b1e      	subs	r3, #30
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	e022      	b.n	8001cee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6919      	ldr	r1, [r3, #16]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	400a      	ands	r2, r1
 8001cca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6919      	ldr	r1, [r3, #16]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	4618      	mov	r0, r3
 8001cde:	4603      	mov	r3, r0
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4403      	add	r3, r0
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b06      	cmp	r3, #6
 8001cf4:	d824      	bhi.n	8001d40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	3b05      	subs	r3, #5
 8001d08:	221f      	movs	r2, #31
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	400a      	ands	r2, r1
 8001d16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	3b05      	subs	r3, #5
 8001d32:	fa00 f203 	lsl.w	r2, r0, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d3e:	e04c      	b.n	8001dda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b0c      	cmp	r3, #12
 8001d46:	d824      	bhi.n	8001d92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	3b23      	subs	r3, #35	@ 0x23
 8001d5a:	221f      	movs	r2, #31
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43da      	mvns	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	400a      	ands	r2, r1
 8001d68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	3b23      	subs	r3, #35	@ 0x23
 8001d84:	fa00 f203 	lsl.w	r2, r0, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d90:	e023      	b.n	8001dda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	3b41      	subs	r3, #65	@ 0x41
 8001da4:	221f      	movs	r2, #31
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	400a      	ands	r2, r1
 8001db2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	3b41      	subs	r3, #65	@ 0x41
 8001dce:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dda:	4b22      	ldr	r3, [pc, #136]	@ (8001e64 <HAL_ADC_ConfigChannel+0x234>)
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a21      	ldr	r2, [pc, #132]	@ (8001e68 <HAL_ADC_ConfigChannel+0x238>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d109      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1cc>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b12      	cmp	r3, #18
 8001dee:	d105      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a19      	ldr	r2, [pc, #100]	@ (8001e68 <HAL_ADC_ConfigChannel+0x238>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d123      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x21e>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b10      	cmp	r3, #16
 8001e0c:	d003      	beq.n	8001e16 <HAL_ADC_ConfigChannel+0x1e6>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b11      	cmp	r3, #17
 8001e14:	d11b      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b10      	cmp	r3, #16
 8001e28:	d111      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e2a:	4b10      	ldr	r3, [pc, #64]	@ (8001e6c <HAL_ADC_ConfigChannel+0x23c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a10      	ldr	r2, [pc, #64]	@ (8001e70 <HAL_ADC_ConfigChannel+0x240>)
 8001e30:	fba2 2303 	umull	r2, r3, r2, r3
 8001e34:	0c9a      	lsrs	r2, r3, #18
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e40:	e002      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f9      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	40012300 	.word	0x40012300
 8001e68:	40012000 	.word	0x40012000
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	431bde83 	.word	0x431bde83

08001e74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e7c:	4b79      	ldr	r3, [pc, #484]	@ (8002064 <ADC_Init+0x1f0>)
 8001e7e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ea8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	021a      	lsls	r2, r3, #8
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ecc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6899      	ldr	r1, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f06:	4a58      	ldr	r2, [pc, #352]	@ (8002068 <ADC_Init+0x1f4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d022      	beq.n	8001f52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6899      	ldr	r1, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6899      	ldr	r1, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	e00f      	b.n	8001f72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f70:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0202 	bic.w	r2, r2, #2
 8001f80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6899      	ldr	r1, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7e1b      	ldrb	r3, [r3, #24]
 8001f8c:	005a      	lsls	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01b      	beq.n	8001fd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001fbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6859      	ldr	r1, [r3, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	035a      	lsls	r2, r3, #13
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	e007      	b.n	8001fe8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fe6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	3b01      	subs	r3, #1
 8002004:	051a      	lsls	r2, r3, #20
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800201c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6899      	ldr	r1, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800202a:	025a      	lsls	r2, r3, #9
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002042:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6899      	ldr	r1, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	029a      	lsls	r2, r3, #10
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	609a      	str	r2, [r3, #8]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	40012300 	.word	0x40012300
 8002068:	0f000001 	.word	0x0f000001

0800206c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002078:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002082:	2b00      	cmp	r3, #0
 8002084:	d13c      	bne.n	8002100 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d12b      	bne.n	80020f8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d127      	bne.n	80020f8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ae:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d119      	bne.n	80020f8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0220 	bic.w	r2, r2, #32
 80020d2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d105      	bne.n	80020f8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f0:	f043 0201 	orr.w	r2, r3, #1
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f7ff fd7b 	bl	8001bf4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020fe:	e00e      	b.n	800211e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f7ff fd85 	bl	8001c1c <HAL_ADC_ErrorCallback>
}
 8002112:	e004      	b.n	800211e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
}
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b084      	sub	sp, #16
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002132:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7ff fd67 	bl	8001c08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800214e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2240      	movs	r2, #64	@ 0x40
 8002154:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215a:	f043 0204 	orr.w	r2, r3, #4
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f7ff fd5a 	bl	8001c1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002180:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800218c:	4013      	ands	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002198:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800219c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a2:	4a04      	ldr	r2, [pc, #16]	@ (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	60d3      	str	r3, [r2, #12]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021bc:	4b04      	ldr	r3, [pc, #16]	@ (80021d0 <__NVIC_GetPriorityGrouping+0x18>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	f003 0307 	and.w	r3, r3, #7
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	db0b      	blt.n	80021fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	f003 021f 	and.w	r2, r3, #31
 80021ec:	4907      	ldr	r1, [pc, #28]	@ (800220c <__NVIC_EnableIRQ+0x38>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	2001      	movs	r0, #1
 80021f6:	fa00 f202 	lsl.w	r2, r0, r2
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000e100 	.word	0xe000e100

08002210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	6039      	str	r1, [r7, #0]
 800221a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	2b00      	cmp	r3, #0
 8002222:	db0a      	blt.n	800223a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	b2da      	uxtb	r2, r3
 8002228:	490c      	ldr	r1, [pc, #48]	@ (800225c <__NVIC_SetPriority+0x4c>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	0112      	lsls	r2, r2, #4
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	440b      	add	r3, r1
 8002234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002238:	e00a      	b.n	8002250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4908      	ldr	r1, [pc, #32]	@ (8002260 <__NVIC_SetPriority+0x50>)
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	3b04      	subs	r3, #4
 8002248:	0112      	lsls	r2, r2, #4
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	440b      	add	r3, r1
 800224e:	761a      	strb	r2, [r3, #24]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000e100 	.word	0xe000e100
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	@ 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f1c3 0307 	rsb	r3, r3, #7
 800227e:	2b04      	cmp	r3, #4
 8002280:	bf28      	it	cs
 8002282:	2304      	movcs	r3, #4
 8002284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3304      	adds	r3, #4
 800228a:	2b06      	cmp	r3, #6
 800228c:	d902      	bls.n	8002294 <NVIC_EncodePriority+0x30>
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3b03      	subs	r3, #3
 8002292:	e000      	b.n	8002296 <NVIC_EncodePriority+0x32>
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	f04f 32ff 	mov.w	r2, #4294967295
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43da      	mvns	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	401a      	ands	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ac:	f04f 31ff 	mov.w	r1, #4294967295
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa01 f303 	lsl.w	r3, r1, r3
 80022b6:	43d9      	mvns	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	4313      	orrs	r3, r2
         );
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3724      	adds	r7, #36	@ 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022dc:	d301      	bcc.n	80022e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022de:	2301      	movs	r3, #1
 80022e0:	e00f      	b.n	8002302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e2:	4a0a      	ldr	r2, [pc, #40]	@ (800230c <SysTick_Config+0x40>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ea:	210f      	movs	r1, #15
 80022ec:	f04f 30ff 	mov.w	r0, #4294967295
 80022f0:	f7ff ff8e 	bl	8002210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f4:	4b05      	ldr	r3, [pc, #20]	@ (800230c <SysTick_Config+0x40>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fa:	4b04      	ldr	r3, [pc, #16]	@ (800230c <SysTick_Config+0x40>)
 80022fc:	2207      	movs	r2, #7
 80022fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	e000e010 	.word	0xe000e010

08002310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff29 	bl	8002170 <__NVIC_SetPriorityGrouping>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002338:	f7ff ff3e 	bl	80021b8 <__NVIC_GetPriorityGrouping>
 800233c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	6978      	ldr	r0, [r7, #20]
 8002344:	f7ff ff8e 	bl	8002264 <NVIC_EncodePriority>
 8002348:	4602      	mov	r2, r0
 800234a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff5d 	bl	8002210 <__NVIC_SetPriority>
}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff31 	bl	80021d4 <__NVIC_EnableIRQ>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff ffa2 	bl	80022cc <SysTick_Config>
 8002388:	4603      	mov	r3, r0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e00e      	b.n	80023c2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	795b      	ldrb	r3, [r3, #5]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d105      	bne.n	80023ba <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7fe ffaf 	bl	8001318 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b087      	sub	sp, #28
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2202      	movs	r2, #2
 80023de:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	e00a      	b.n	800240c <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	441a      	add	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	3301      	adds	r3, #1
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	429a      	cmp	r2, r3
 8002412:	d3f0      	bcc.n	80023f6 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2201      	movs	r2, #1
 8002420:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002422:	693b      	ldr	r3, [r7, #16]
}
 8002424:	4618      	mov	r0, r3
 8002426:	371c      	adds	r7, #28
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800243c:	f7ff fa56 	bl	80018ec <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e099      	b.n	8002580 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0201 	bic.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800246c:	e00f      	b.n	800248e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800246e:	f7ff fa3d 	bl	80018ec <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b05      	cmp	r3, #5
 800247a:	d908      	bls.n	800248e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2220      	movs	r2, #32
 8002480:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2203      	movs	r2, #3
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e078      	b.n	8002580 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1e8      	bne.n	800246e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	4b38      	ldr	r3, [pc, #224]	@ (8002588 <HAL_DMA_Init+0x158>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d107      	bne.n	80024f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f0:	4313      	orrs	r3, r2
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f023 0307 	bic.w	r3, r3, #7
 800250e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251e:	2b04      	cmp	r3, #4
 8002520:	d117      	bne.n	8002552 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00e      	beq.n	8002552 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fa6f 	bl	8002a18 <DMA_CheckFifoParam>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2240      	movs	r2, #64	@ 0x40
 8002544:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800254e:	2301      	movs	r3, #1
 8002550:	e016      	b.n	8002580 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fa26 	bl	80029ac <DMA_CalcBaseAndBitshift>
 8002560:	4603      	mov	r3, r0
 8002562:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002568:	223f      	movs	r2, #63	@ 0x3f
 800256a:	409a      	lsls	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	f010803f 	.word	0xf010803f

0800258c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_DMA_Start_IT+0x26>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e040      	b.n	8002634 <HAL_DMA_Start_IT+0xa8>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d12f      	bne.n	8002626 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2202      	movs	r2, #2
 80025ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f9b8 	bl	8002950 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e4:	223f      	movs	r2, #63	@ 0x3f
 80025e6:	409a      	lsls	r2, r3
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0216 	orr.w	r2, r2, #22
 80025fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	2b00      	cmp	r3, #0
 8002602:	d007      	beq.n	8002614 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0208 	orr.w	r2, r2, #8
 8002612:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	e005      	b.n	8002632 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800262e:	2302      	movs	r3, #2
 8002630:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002632:	7dfb      	ldrb	r3, [r7, #23]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002648:	4b8e      	ldr	r3, [pc, #568]	@ (8002884 <HAL_DMA_IRQHandler+0x248>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a8e      	ldr	r2, [pc, #568]	@ (8002888 <HAL_DMA_IRQHandler+0x24c>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	0a9b      	lsrs	r3, r3, #10
 8002654:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002666:	2208      	movs	r2, #8
 8002668:	409a      	lsls	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4013      	ands	r3, r2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d01a      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d013      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0204 	bic.w	r2, r2, #4
 800268e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002694:	2208      	movs	r2, #8
 8002696:	409a      	lsls	r2, r3
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a0:	f043 0201 	orr.w	r2, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ac:	2201      	movs	r2, #1
 80026ae:	409a      	lsls	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d012      	beq.n	80026de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ca:	2201      	movs	r2, #1
 80026cc:	409a      	lsls	r2, r3
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d6:	f043 0202 	orr.w	r2, r3, #2
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e2:	2204      	movs	r2, #4
 80026e4:	409a      	lsls	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d012      	beq.n	8002714 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00b      	beq.n	8002714 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002700:	2204      	movs	r2, #4
 8002702:	409a      	lsls	r2, r3
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270c:	f043 0204 	orr.w	r2, r3, #4
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002718:	2210      	movs	r2, #16
 800271a:	409a      	lsls	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4013      	ands	r3, r2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d043      	beq.n	80027ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d03c      	beq.n	80027ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002736:	2210      	movs	r2, #16
 8002738:	409a      	lsls	r2, r3
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d018      	beq.n	800277e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d108      	bne.n	800276c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	2b00      	cmp	r3, #0
 8002760:	d024      	beq.n	80027ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	4798      	blx	r3
 800276a:	e01f      	b.n	80027ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01b      	beq.n	80027ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
 800277c:	e016      	b.n	80027ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d107      	bne.n	800279c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0208 	bic.w	r2, r2, #8
 800279a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b0:	2220      	movs	r2, #32
 80027b2:	409a      	lsls	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 808f 	beq.w	80028dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 8087 	beq.w	80028dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d2:	2220      	movs	r2, #32
 80027d4:	409a      	lsls	r2, r3
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b05      	cmp	r3, #5
 80027e4:	d136      	bne.n	8002854 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0216 	bic.w	r2, r2, #22
 80027f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695a      	ldr	r2, [r3, #20]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002804:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d103      	bne.n	8002816 <HAL_DMA_IRQHandler+0x1da>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002812:	2b00      	cmp	r3, #0
 8002814:	d007      	beq.n	8002826 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0208 	bic.w	r2, r2, #8
 8002824:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282a:	223f      	movs	r2, #63	@ 0x3f
 800282c:	409a      	lsls	r2, r3
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002846:	2b00      	cmp	r3, #0
 8002848:	d07e      	beq.n	8002948 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	4798      	blx	r3
        }
        return;
 8002852:	e079      	b.n	8002948 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d01d      	beq.n	800289e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10d      	bne.n	800288c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002874:	2b00      	cmp	r3, #0
 8002876:	d031      	beq.n	80028dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	4798      	blx	r3
 8002880:	e02c      	b.n	80028dc <HAL_DMA_IRQHandler+0x2a0>
 8002882:	bf00      	nop
 8002884:	20000000 	.word	0x20000000
 8002888:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002890:	2b00      	cmp	r3, #0
 8002892:	d023      	beq.n	80028dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	4798      	blx	r3
 800289c:	e01e      	b.n	80028dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10f      	bne.n	80028cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0210 	bic.w	r2, r2, #16
 80028ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d032      	beq.n	800294a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d022      	beq.n	8002936 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2205      	movs	r2, #5
 80028f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	3301      	adds	r3, #1
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	429a      	cmp	r2, r3
 8002912:	d307      	bcc.n	8002924 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f2      	bne.n	8002908 <HAL_DMA_IRQHandler+0x2cc>
 8002922:	e000      	b.n	8002926 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002924:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	4798      	blx	r3
 8002946:	e000      	b.n	800294a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002948:	bf00      	nop
    }
  }
}
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800296c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b40      	cmp	r3, #64	@ 0x40
 800297c:	d108      	bne.n	8002990 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800298e:	e007      	b.n	80029a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	60da      	str	r2, [r3, #12]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	3b10      	subs	r3, #16
 80029bc:	4a14      	ldr	r2, [pc, #80]	@ (8002a10 <DMA_CalcBaseAndBitshift+0x64>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	091b      	lsrs	r3, r3, #4
 80029c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029c6:	4a13      	ldr	r2, [pc, #76]	@ (8002a14 <DMA_CalcBaseAndBitshift+0x68>)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4413      	add	r3, r2
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	d909      	bls.n	80029ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029e2:	f023 0303 	bic.w	r3, r3, #3
 80029e6:	1d1a      	adds	r2, r3, #4
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80029ec:	e007      	b.n	80029fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029f6:	f023 0303 	bic.w	r3, r3, #3
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	aaaaaaab 	.word	0xaaaaaaab
 8002a14:	0800dd30 	.word	0x0800dd30

08002a18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d11f      	bne.n	8002a72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d856      	bhi.n	8002ae6 <DMA_CheckFifoParam+0xce>
 8002a38:	a201      	add	r2, pc, #4	@ (adr r2, 8002a40 <DMA_CheckFifoParam+0x28>)
 8002a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3e:	bf00      	nop
 8002a40:	08002a51 	.word	0x08002a51
 8002a44:	08002a63 	.word	0x08002a63
 8002a48:	08002a51 	.word	0x08002a51
 8002a4c:	08002ae7 	.word	0x08002ae7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d046      	beq.n	8002aea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a60:	e043      	b.n	8002aea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a66:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a6a:	d140      	bne.n	8002aee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a70:	e03d      	b.n	8002aee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a7a:	d121      	bne.n	8002ac0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d837      	bhi.n	8002af2 <DMA_CheckFifoParam+0xda>
 8002a82:	a201      	add	r2, pc, #4	@ (adr r2, 8002a88 <DMA_CheckFifoParam+0x70>)
 8002a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a88:	08002a99 	.word	0x08002a99
 8002a8c:	08002a9f 	.word	0x08002a9f
 8002a90:	08002a99 	.word	0x08002a99
 8002a94:	08002ab1 	.word	0x08002ab1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a9c:	e030      	b.n	8002b00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d025      	beq.n	8002af6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aae:	e022      	b.n	8002af6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ab8:	d11f      	bne.n	8002afa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002abe:	e01c      	b.n	8002afa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d903      	bls.n	8002ace <DMA_CheckFifoParam+0xb6>
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d003      	beq.n	8002ad4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002acc:	e018      	b.n	8002b00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad2:	e015      	b.n	8002b00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00e      	beq.n	8002afe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae4:	e00b      	b.n	8002afe <DMA_CheckFifoParam+0xe6>
      break;
 8002ae6:	bf00      	nop
 8002ae8:	e00a      	b.n	8002b00 <DMA_CheckFifoParam+0xe8>
      break;
 8002aea:	bf00      	nop
 8002aec:	e008      	b.n	8002b00 <DMA_CheckFifoParam+0xe8>
      break;
 8002aee:	bf00      	nop
 8002af0:	e006      	b.n	8002b00 <DMA_CheckFifoParam+0xe8>
      break;
 8002af2:	bf00      	nop
 8002af4:	e004      	b.n	8002b00 <DMA_CheckFifoParam+0xe8>
      break;
 8002af6:	bf00      	nop
 8002af8:	e002      	b.n	8002b00 <DMA_CheckFifoParam+0xe8>
      break;   
 8002afa:	bf00      	nop
 8002afc:	e000      	b.n	8002b00 <DMA_CheckFifoParam+0xe8>
      break;
 8002afe:	bf00      	nop
    }
  } 
  
  return status; 
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop

08002b10 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b22:	4b23      	ldr	r3, [pc, #140]	@ (8002bb0 <HAL_FLASH_Program+0xa0>)
 8002b24:	7e1b      	ldrb	r3, [r3, #24]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_FLASH_Program+0x1e>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e03b      	b.n	8002ba6 <HAL_FLASH_Program+0x96>
 8002b2e:	4b20      	ldr	r3, [pc, #128]	@ (8002bb0 <HAL_FLASH_Program+0xa0>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b34:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b38:	f000 f870 	bl	8002c1c <FLASH_WaitForLastOperation>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d12b      	bne.n	8002b9e <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d105      	bne.n	8002b58 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002b4c:	783b      	ldrb	r3, [r7, #0]
 8002b4e:	4619      	mov	r1, r3
 8002b50:	68b8      	ldr	r0, [r7, #8]
 8002b52:	f000 f91b 	bl	8002d8c <FLASH_Program_Byte>
 8002b56:	e016      	b.n	8002b86 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d105      	bne.n	8002b6a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002b5e:	883b      	ldrh	r3, [r7, #0]
 8002b60:	4619      	mov	r1, r3
 8002b62:	68b8      	ldr	r0, [r7, #8]
 8002b64:	f000 f8ee 	bl	8002d44 <FLASH_Program_HalfWord>
 8002b68:	e00d      	b.n	8002b86 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d105      	bne.n	8002b7c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	4619      	mov	r1, r3
 8002b74:	68b8      	ldr	r0, [r7, #8]
 8002b76:	f000 f8c3 	bl	8002d00 <FLASH_Program_Word>
 8002b7a:	e004      	b.n	8002b86 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b80:	68b8      	ldr	r0, [r7, #8]
 8002b82:	f000 f88b 	bl	8002c9c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b86:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b8a:	f000 f847 	bl	8002c1c <FLASH_WaitForLastOperation>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002b92:	4b08      	ldr	r3, [pc, #32]	@ (8002bb4 <HAL_FLASH_Program+0xa4>)
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	4a07      	ldr	r2, [pc, #28]	@ (8002bb4 <HAL_FLASH_Program+0xa4>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b9e:	4b04      	ldr	r3, [pc, #16]	@ (8002bb0 <HAL_FLASH_Program+0xa0>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	761a      	strb	r2, [r3, #24]

  return status;
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000878 	.word	0x20000878
 8002bb4:	40023c00 	.word	0x40023c00

08002bb8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf0 <HAL_FLASH_Unlock+0x38>)
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	da0b      	bge.n	8002be2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002bca:	4b09      	ldr	r3, [pc, #36]	@ (8002bf0 <HAL_FLASH_Unlock+0x38>)
 8002bcc:	4a09      	ldr	r2, [pc, #36]	@ (8002bf4 <HAL_FLASH_Unlock+0x3c>)
 8002bce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002bd0:	4b07      	ldr	r3, [pc, #28]	@ (8002bf0 <HAL_FLASH_Unlock+0x38>)
 8002bd2:	4a09      	ldr	r2, [pc, #36]	@ (8002bf8 <HAL_FLASH_Unlock+0x40>)
 8002bd4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002bd6:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <HAL_FLASH_Unlock+0x38>)
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	da01      	bge.n	8002be2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002be2:	79fb      	ldrb	r3, [r7, #7]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	40023c00 	.word	0x40023c00
 8002bf4:	45670123 	.word	0x45670123
 8002bf8:	cdef89ab 	.word	0xcdef89ab

08002bfc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002c00:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <HAL_FLASH_Lock+0x1c>)
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	4a04      	ldr	r2, [pc, #16]	@ (8002c18 <HAL_FLASH_Lock+0x1c>)
 8002c06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c0a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40023c00 	.word	0x40023c00

08002c1c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c28:	4b1a      	ldr	r3, [pc, #104]	@ (8002c94 <FLASH_WaitForLastOperation+0x78>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002c2e:	f7fe fe5d 	bl	80018ec <HAL_GetTick>
 8002c32:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002c34:	e010      	b.n	8002c58 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d00c      	beq.n	8002c58 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d007      	beq.n	8002c54 <FLASH_WaitForLastOperation+0x38>
 8002c44:	f7fe fe52 	bl	80018ec <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d201      	bcs.n	8002c58 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e019      	b.n	8002c8c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002c58:	4b0f      	ldr	r3, [pc, #60]	@ (8002c98 <FLASH_WaitForLastOperation+0x7c>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1e8      	bne.n	8002c36 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002c64:	4b0c      	ldr	r3, [pc, #48]	@ (8002c98 <FLASH_WaitForLastOperation+0x7c>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002c70:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <FLASH_WaitForLastOperation+0x7c>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002c76:	4b08      	ldr	r3, [pc, #32]	@ (8002c98 <FLASH_WaitForLastOperation+0x7c>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002c82:	f000 f8a5 	bl	8002dd0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0

}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000878 	.word	0x20000878
 8002c98:	40023c00 	.word	0x40023c00

08002c9c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002ca8:	4b14      	ldr	r3, [pc, #80]	@ (8002cfc <FLASH_Program_DoubleWord+0x60>)
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	4a13      	ldr	r2, [pc, #76]	@ (8002cfc <FLASH_Program_DoubleWord+0x60>)
 8002cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	@ (8002cfc <FLASH_Program_DoubleWord+0x60>)
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	4a10      	ldr	r2, [pc, #64]	@ (8002cfc <FLASH_Program_DoubleWord+0x60>)
 8002cba:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002cbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002cfc <FLASH_Program_DoubleWord+0x60>)
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cfc <FLASH_Program_DoubleWord+0x60>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002cd2:	f3bf 8f6f 	isb	sy
}
 8002cd6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8002cd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	000a      	movs	r2, r1
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	68f9      	ldr	r1, [r7, #12]
 8002cea:	3104      	adds	r1, #4
 8002cec:	4613      	mov	r3, r2
 8002cee:	600b      	str	r3, [r1, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	40023c00 	.word	0x40023c00

08002d00 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d40 <FLASH_Program_Word+0x40>)
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002d40 <FLASH_Program_Word+0x40>)
 8002d10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002d16:	4b0a      	ldr	r3, [pc, #40]	@ (8002d40 <FLASH_Program_Word+0x40>)
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	4a09      	ldr	r2, [pc, #36]	@ (8002d40 <FLASH_Program_Word+0x40>)
 8002d1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d20:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002d22:	4b07      	ldr	r3, [pc, #28]	@ (8002d40 <FLASH_Program_Word+0x40>)
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	4a06      	ldr	r2, [pc, #24]	@ (8002d40 <FLASH_Program_Word+0x40>)
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	601a      	str	r2, [r3, #0]
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	40023c00 	.word	0x40023c00

08002d44 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002d50:	4b0d      	ldr	r3, [pc, #52]	@ (8002d88 <FLASH_Program_HalfWord+0x44>)
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	4a0c      	ldr	r2, [pc, #48]	@ (8002d88 <FLASH_Program_HalfWord+0x44>)
 8002d56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <FLASH_Program_HalfWord+0x44>)
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	4a09      	ldr	r2, [pc, #36]	@ (8002d88 <FLASH_Program_HalfWord+0x44>)
 8002d62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002d68:	4b07      	ldr	r3, [pc, #28]	@ (8002d88 <FLASH_Program_HalfWord+0x44>)
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	4a06      	ldr	r2, [pc, #24]	@ (8002d88 <FLASH_Program_HalfWord+0x44>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	887a      	ldrh	r2, [r7, #2]
 8002d78:	801a      	strh	r2, [r3, #0]
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40023c00 	.word	0x40023c00

08002d8c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002d98:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <FLASH_Program_Byte+0x40>)
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8002dcc <FLASH_Program_Byte+0x40>)
 8002d9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002da2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002da4:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <FLASH_Program_Byte+0x40>)
 8002da6:	4a09      	ldr	r2, [pc, #36]	@ (8002dcc <FLASH_Program_Byte+0x40>)
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002dac:	4b07      	ldr	r3, [pc, #28]	@ (8002dcc <FLASH_Program_Byte+0x40>)
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	4a06      	ldr	r2, [pc, #24]	@ (8002dcc <FLASH_Program_Byte+0x40>)
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	701a      	strb	r2, [r3, #0]
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40023c00 	.word	0x40023c00

08002dd0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002dd4:	4b27      	ldr	r3, [pc, #156]	@ (8002e74 <FLASH_SetErrorCode+0xa4>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002de0:	4b25      	ldr	r3, [pc, #148]	@ (8002e78 <FLASH_SetErrorCode+0xa8>)
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	f043 0310 	orr.w	r3, r3, #16
 8002de8:	4a23      	ldr	r2, [pc, #140]	@ (8002e78 <FLASH_SetErrorCode+0xa8>)
 8002dea:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002dec:	4b21      	ldr	r3, [pc, #132]	@ (8002e74 <FLASH_SetErrorCode+0xa4>)
 8002dee:	2210      	movs	r2, #16
 8002df0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002df2:	4b20      	ldr	r3, [pc, #128]	@ (8002e74 <FLASH_SetErrorCode+0xa4>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8002e78 <FLASH_SetErrorCode+0xa8>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f043 0308 	orr.w	r3, r3, #8
 8002e06:	4a1c      	ldr	r2, [pc, #112]	@ (8002e78 <FLASH_SetErrorCode+0xa8>)
 8002e08:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e74 <FLASH_SetErrorCode+0xa4>)
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002e10:	4b18      	ldr	r3, [pc, #96]	@ (8002e74 <FLASH_SetErrorCode+0xa4>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002e1c:	4b16      	ldr	r3, [pc, #88]	@ (8002e78 <FLASH_SetErrorCode+0xa8>)
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	f043 0304 	orr.w	r3, r3, #4
 8002e24:	4a14      	ldr	r2, [pc, #80]	@ (8002e78 <FLASH_SetErrorCode+0xa8>)
 8002e26:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002e28:	4b12      	ldr	r3, [pc, #72]	@ (8002e74 <FLASH_SetErrorCode+0xa4>)
 8002e2a:	2240      	movs	r2, #64	@ 0x40
 8002e2c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002e2e:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <FLASH_SetErrorCode+0xa4>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d008      	beq.n	8002e4c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e78 <FLASH_SetErrorCode+0xa8>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f043 0302 	orr.w	r3, r3, #2
 8002e42:	4a0d      	ldr	r2, [pc, #52]	@ (8002e78 <FLASH_SetErrorCode+0xa8>)
 8002e44:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002e46:	4b0b      	ldr	r3, [pc, #44]	@ (8002e74 <FLASH_SetErrorCode+0xa4>)
 8002e48:	2280      	movs	r2, #128	@ 0x80
 8002e4a:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002e4c:	4b09      	ldr	r3, [pc, #36]	@ (8002e74 <FLASH_SetErrorCode+0xa4>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002e58:	4b07      	ldr	r3, [pc, #28]	@ (8002e78 <FLASH_SetErrorCode+0xa8>)
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	f043 0320 	orr.w	r3, r3, #32
 8002e60:	4a05      	ldr	r2, [pc, #20]	@ (8002e78 <FLASH_SetErrorCode+0xa8>)
 8002e62:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <FLASH_SetErrorCode+0xa4>)
 8002e66:	2202      	movs	r2, #2
 8002e68:	60da      	str	r2, [r3, #12]
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	40023c00 	.word	0x40023c00
 8002e78:	20000878 	.word	0x20000878

08002e7c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d102      	bne.n	8002e98 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	e010      	b.n	8002eba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d103      	bne.n	8002ea6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002e9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	e009      	b.n	8002eba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002ea6:	78fb      	ldrb	r3, [r7, #3]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d103      	bne.n	8002eb4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002eac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	e002      	b.n	8002eba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002eb4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002eb8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002eba:	4b13      	ldr	r3, [pc, #76]	@ (8002f08 <FLASH_Erase_Sector+0x8c>)
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	4a12      	ldr	r2, [pc, #72]	@ (8002f08 <FLASH_Erase_Sector+0x8c>)
 8002ec0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ec4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002ec6:	4b10      	ldr	r3, [pc, #64]	@ (8002f08 <FLASH_Erase_Sector+0x8c>)
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	490f      	ldr	r1, [pc, #60]	@ (8002f08 <FLASH_Erase_Sector+0x8c>)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f08 <FLASH_Erase_Sector+0x8c>)
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8002f08 <FLASH_Erase_Sector+0x8c>)
 8002ed8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002edc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002ede:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <FLASH_Erase_Sector+0x8c>)
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	4a07      	ldr	r2, [pc, #28]	@ (8002f08 <FLASH_Erase_Sector+0x8c>)
 8002eea:	f043 0302 	orr.w	r3, r3, #2
 8002eee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002ef0:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <FLASH_Erase_Sector+0x8c>)
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	4a04      	ldr	r2, [pc, #16]	@ (8002f08 <FLASH_Erase_Sector+0x8c>)
 8002ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002efa:	6113      	str	r3, [r2, #16]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	40023c00 	.word	0x40023c00

08002f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	@ 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	e16b      	b.n	8003200 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f28:	2201      	movs	r2, #1
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	f040 815a 	bne.w	80031fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d005      	beq.n	8002f5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d130      	bne.n	8002fc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	2203      	movs	r2, #3
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4013      	ands	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f94:	2201      	movs	r2, #1
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	091b      	lsrs	r3, r3, #4
 8002faa:	f003 0201 	and.w	r2, r3, #1
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d017      	beq.n	8002ffc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d123      	bne.n	8003050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	08da      	lsrs	r2, r3, #3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3208      	adds	r2, #8
 8003010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	220f      	movs	r2, #15
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	08da      	lsrs	r2, r3, #3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3208      	adds	r2, #8
 800304a:	69b9      	ldr	r1, [r7, #24]
 800304c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	2203      	movs	r2, #3
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0203 	and.w	r2, r3, #3
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80b4 	beq.w	80031fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	4b60      	ldr	r3, [pc, #384]	@ (8003218 <HAL_GPIO_Init+0x30c>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309a:	4a5f      	ldr	r2, [pc, #380]	@ (8003218 <HAL_GPIO_Init+0x30c>)
 800309c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003218 <HAL_GPIO_Init+0x30c>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ae:	4a5b      	ldr	r2, [pc, #364]	@ (800321c <HAL_GPIO_Init+0x310>)
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	3302      	adds	r3, #2
 80030b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	220f      	movs	r2, #15
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a52      	ldr	r2, [pc, #328]	@ (8003220 <HAL_GPIO_Init+0x314>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d02b      	beq.n	8003132 <HAL_GPIO_Init+0x226>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a51      	ldr	r2, [pc, #324]	@ (8003224 <HAL_GPIO_Init+0x318>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d025      	beq.n	800312e <HAL_GPIO_Init+0x222>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a50      	ldr	r2, [pc, #320]	@ (8003228 <HAL_GPIO_Init+0x31c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01f      	beq.n	800312a <HAL_GPIO_Init+0x21e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4f      	ldr	r2, [pc, #316]	@ (800322c <HAL_GPIO_Init+0x320>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d019      	beq.n	8003126 <HAL_GPIO_Init+0x21a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4e      	ldr	r2, [pc, #312]	@ (8003230 <HAL_GPIO_Init+0x324>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d013      	beq.n	8003122 <HAL_GPIO_Init+0x216>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a4d      	ldr	r2, [pc, #308]	@ (8003234 <HAL_GPIO_Init+0x328>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00d      	beq.n	800311e <HAL_GPIO_Init+0x212>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a4c      	ldr	r2, [pc, #304]	@ (8003238 <HAL_GPIO_Init+0x32c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d007      	beq.n	800311a <HAL_GPIO_Init+0x20e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4b      	ldr	r2, [pc, #300]	@ (800323c <HAL_GPIO_Init+0x330>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d101      	bne.n	8003116 <HAL_GPIO_Init+0x20a>
 8003112:	2307      	movs	r3, #7
 8003114:	e00e      	b.n	8003134 <HAL_GPIO_Init+0x228>
 8003116:	2308      	movs	r3, #8
 8003118:	e00c      	b.n	8003134 <HAL_GPIO_Init+0x228>
 800311a:	2306      	movs	r3, #6
 800311c:	e00a      	b.n	8003134 <HAL_GPIO_Init+0x228>
 800311e:	2305      	movs	r3, #5
 8003120:	e008      	b.n	8003134 <HAL_GPIO_Init+0x228>
 8003122:	2304      	movs	r3, #4
 8003124:	e006      	b.n	8003134 <HAL_GPIO_Init+0x228>
 8003126:	2303      	movs	r3, #3
 8003128:	e004      	b.n	8003134 <HAL_GPIO_Init+0x228>
 800312a:	2302      	movs	r3, #2
 800312c:	e002      	b.n	8003134 <HAL_GPIO_Init+0x228>
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <HAL_GPIO_Init+0x228>
 8003132:	2300      	movs	r3, #0
 8003134:	69fa      	ldr	r2, [r7, #28]
 8003136:	f002 0203 	and.w	r2, r2, #3
 800313a:	0092      	lsls	r2, r2, #2
 800313c:	4093      	lsls	r3, r2
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4313      	orrs	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003144:	4935      	ldr	r1, [pc, #212]	@ (800321c <HAL_GPIO_Init+0x310>)
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	089b      	lsrs	r3, r3, #2
 800314a:	3302      	adds	r3, #2
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003152:	4b3b      	ldr	r3, [pc, #236]	@ (8003240 <HAL_GPIO_Init+0x334>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	43db      	mvns	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4013      	ands	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003176:	4a32      	ldr	r2, [pc, #200]	@ (8003240 <HAL_GPIO_Init+0x334>)
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800317c:	4b30      	ldr	r3, [pc, #192]	@ (8003240 <HAL_GPIO_Init+0x334>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031a0:	4a27      	ldr	r2, [pc, #156]	@ (8003240 <HAL_GPIO_Init+0x334>)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031a6:	4b26      	ldr	r3, [pc, #152]	@ (8003240 <HAL_GPIO_Init+0x334>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003240 <HAL_GPIO_Init+0x334>)
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003240 <HAL_GPIO_Init+0x334>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031f4:	4a12      	ldr	r2, [pc, #72]	@ (8003240 <HAL_GPIO_Init+0x334>)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3301      	adds	r3, #1
 80031fe:	61fb      	str	r3, [r7, #28]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	2b0f      	cmp	r3, #15
 8003204:	f67f ae90 	bls.w	8002f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003208:	bf00      	nop
 800320a:	bf00      	nop
 800320c:	3724      	adds	r7, #36	@ 0x24
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800
 800321c:	40013800 	.word	0x40013800
 8003220:	40020000 	.word	0x40020000
 8003224:	40020400 	.word	0x40020400
 8003228:	40020800 	.word	0x40020800
 800322c:	40020c00 	.word	0x40020c00
 8003230:	40021000 	.word	0x40021000
 8003234:	40021400 	.word	0x40021400
 8003238:	40021800 	.word	0x40021800
 800323c:	40021c00 	.word	0x40021c00
 8003240:	40013c00 	.word	0x40013c00

08003244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	807b      	strh	r3, [r7, #2]
 8003250:	4613      	mov	r3, r2
 8003252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003254:	787b      	ldrb	r3, [r7, #1]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800325a:	887a      	ldrh	r2, [r7, #2]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003260:	e003      	b.n	800326a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003262:	887b      	ldrh	r3, [r7, #2]
 8003264:	041a      	lsls	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	619a      	str	r2, [r3, #24]
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
	...

08003278 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003282:	4b08      	ldr	r3, [pc, #32]	@ (80032a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	4013      	ands	r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d006      	beq.n	800329c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800328e:	4a05      	ldr	r2, [pc, #20]	@ (80032a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003290:	88fb      	ldrh	r3, [r7, #6]
 8003292:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003294:	88fb      	ldrh	r3, [r7, #6]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd fb0a 	bl	80008b0 <HAL_GPIO_EXTI_Callback>
  }
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40013c00 	.word	0x40013c00

080032a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e12b      	b.n	8003512 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fe f844 	bl	800135c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2224      	movs	r2, #36	@ 0x24
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0201 	bic.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800330a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800330c:	f001 ffd2 	bl	80052b4 <HAL_RCC_GetPCLK1Freq>
 8003310:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	4a81      	ldr	r2, [pc, #516]	@ (800351c <HAL_I2C_Init+0x274>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d807      	bhi.n	800332c <HAL_I2C_Init+0x84>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4a80      	ldr	r2, [pc, #512]	@ (8003520 <HAL_I2C_Init+0x278>)
 8003320:	4293      	cmp	r3, r2
 8003322:	bf94      	ite	ls
 8003324:	2301      	movls	r3, #1
 8003326:	2300      	movhi	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	e006      	b.n	800333a <HAL_I2C_Init+0x92>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4a7d      	ldr	r2, [pc, #500]	@ (8003524 <HAL_I2C_Init+0x27c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	bf94      	ite	ls
 8003334:	2301      	movls	r3, #1
 8003336:	2300      	movhi	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e0e7      	b.n	8003512 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4a78      	ldr	r2, [pc, #480]	@ (8003528 <HAL_I2C_Init+0x280>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	0c9b      	lsrs	r3, r3, #18
 800334c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	430a      	orrs	r2, r1
 8003360:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	4a6a      	ldr	r2, [pc, #424]	@ (800351c <HAL_I2C_Init+0x274>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d802      	bhi.n	800337c <HAL_I2C_Init+0xd4>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	3301      	adds	r3, #1
 800337a:	e009      	b.n	8003390 <HAL_I2C_Init+0xe8>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003382:	fb02 f303 	mul.w	r3, r2, r3
 8003386:	4a69      	ldr	r2, [pc, #420]	@ (800352c <HAL_I2C_Init+0x284>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	099b      	lsrs	r3, r3, #6
 800338e:	3301      	adds	r3, #1
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	430b      	orrs	r3, r1
 8003396:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80033a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	495c      	ldr	r1, [pc, #368]	@ (800351c <HAL_I2C_Init+0x274>)
 80033ac:	428b      	cmp	r3, r1
 80033ae:	d819      	bhi.n	80033e4 <HAL_I2C_Init+0x13c>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	1e59      	subs	r1, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80033be:	1c59      	adds	r1, r3, #1
 80033c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033c4:	400b      	ands	r3, r1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_I2C_Init+0x138>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1e59      	subs	r1, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d8:	3301      	adds	r3, #1
 80033da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033de:	e051      	b.n	8003484 <HAL_I2C_Init+0x1dc>
 80033e0:	2304      	movs	r3, #4
 80033e2:	e04f      	b.n	8003484 <HAL_I2C_Init+0x1dc>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d111      	bne.n	8003410 <HAL_I2C_Init+0x168>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1e58      	subs	r0, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	440b      	add	r3, r1
 80033fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fe:	3301      	adds	r3, #1
 8003400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	e012      	b.n	8003436 <HAL_I2C_Init+0x18e>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1e58      	subs	r0, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6859      	ldr	r1, [r3, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	0099      	lsls	r1, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	fbb0 f3f3 	udiv	r3, r0, r3
 8003426:	3301      	adds	r3, #1
 8003428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_I2C_Init+0x196>
 800343a:	2301      	movs	r3, #1
 800343c:	e022      	b.n	8003484 <HAL_I2C_Init+0x1dc>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10e      	bne.n	8003464 <HAL_I2C_Init+0x1bc>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1e58      	subs	r0, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6859      	ldr	r1, [r3, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	440b      	add	r3, r1
 8003454:	fbb0 f3f3 	udiv	r3, r0, r3
 8003458:	3301      	adds	r3, #1
 800345a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800345e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003462:	e00f      	b.n	8003484 <HAL_I2C_Init+0x1dc>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1e58      	subs	r0, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6859      	ldr	r1, [r3, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	0099      	lsls	r1, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	fbb0 f3f3 	udiv	r3, r0, r3
 800347a:	3301      	adds	r3, #1
 800347c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003480:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	6809      	ldr	r1, [r1, #0]
 8003488:	4313      	orrs	r3, r2
 800348a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69da      	ldr	r2, [r3, #28]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80034b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6911      	ldr	r1, [r2, #16]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68d2      	ldr	r2, [r2, #12]
 80034be:	4311      	orrs	r1, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	430b      	orrs	r3, r1
 80034c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	000186a0 	.word	0x000186a0
 8003520:	001e847f 	.word	0x001e847f
 8003524:	003d08ff 	.word	0x003d08ff
 8003528:	431bde83 	.word	0x431bde83
 800352c:	10624dd3 	.word	0x10624dd3

08003530 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af02      	add	r7, sp, #8
 8003536:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e101      	b.n	8003746 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d106      	bne.n	8003562 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f008 fe95 	bl	800c28c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2203      	movs	r2, #3
 8003566:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003570:	d102      	bne.n	8003578 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f003 f854 	bl	800662a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	7c1a      	ldrb	r2, [r3, #16]
 800358a:	f88d 2000 	strb.w	r2, [sp]
 800358e:	3304      	adds	r3, #4
 8003590:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003592:	f002 ff33 	bl	80063fc <USB_CoreInit>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0ce      	b.n	8003746 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2100      	movs	r1, #0
 80035ae:	4618      	mov	r0, r3
 80035b0:	f003 f84c 	bl	800664c <USB_SetCurrentMode>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2202      	movs	r2, #2
 80035be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e0bf      	b.n	8003746 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c6:	2300      	movs	r3, #0
 80035c8:	73fb      	strb	r3, [r7, #15]
 80035ca:	e04a      	b.n	8003662 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035cc:	7bfa      	ldrb	r2, [r7, #15]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	3315      	adds	r3, #21
 80035dc:	2201      	movs	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035e0:	7bfa      	ldrb	r2, [r7, #15]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3314      	adds	r3, #20
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035f4:	7bfa      	ldrb	r2, [r7, #15]
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	b298      	uxth	r0, r3
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	332e      	adds	r3, #46	@ 0x2e
 8003608:	4602      	mov	r2, r0
 800360a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800360c:	7bfa      	ldrb	r2, [r7, #15]
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	3318      	adds	r3, #24
 800361c:	2200      	movs	r2, #0
 800361e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003620:	7bfa      	ldrb	r2, [r7, #15]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	331c      	adds	r3, #28
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003634:	7bfa      	ldrb	r2, [r7, #15]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	3320      	adds	r3, #32
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003648:	7bfa      	ldrb	r2, [r7, #15]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	3324      	adds	r3, #36	@ 0x24
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	3301      	adds	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	791b      	ldrb	r3, [r3, #4]
 8003666:	7bfa      	ldrb	r2, [r7, #15]
 8003668:	429a      	cmp	r2, r3
 800366a:	d3af      	bcc.n	80035cc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800366c:	2300      	movs	r3, #0
 800366e:	73fb      	strb	r3, [r7, #15]
 8003670:	e044      	b.n	80036fc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003672:	7bfa      	ldrb	r2, [r7, #15]
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003688:	7bfa      	ldrb	r2, [r7, #15]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800369e:	7bfa      	ldrb	r2, [r7, #15]
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036b4:	7bfa      	ldrb	r2, [r7, #15]
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036ca:	7bfa      	ldrb	r2, [r7, #15]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036e0:	7bfa      	ldrb	r2, [r7, #15]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
 80036f8:	3301      	adds	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	791b      	ldrb	r3, [r3, #4]
 8003700:	7bfa      	ldrb	r2, [r7, #15]
 8003702:	429a      	cmp	r2, r3
 8003704:	d3b5      	bcc.n	8003672 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	7c1a      	ldrb	r2, [r3, #16]
 800370e:	f88d 2000 	strb.w	r2, [sp]
 8003712:	3304      	adds	r3, #4
 8003714:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003716:	f002 ffe5 	bl	80066e4 <USB_DevInit>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e00c      	b.n	8003746 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f004 f82f 	bl	80077a2 <USB_DevDisconnect>

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_PCD_Start+0x1c>
 8003766:	2302      	movs	r3, #2
 8003768:	e022      	b.n	80037b0 <HAL_PCD_Start+0x62>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003782:	2b01      	cmp	r3, #1
 8003784:	d105      	bne.n	8003792 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f002 ff36 	bl	8006608 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f003 ffdd 	bl	8007760 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037b8:	b590      	push	{r4, r7, lr}
 80037ba:	b08d      	sub	sp, #52	@ 0x34
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f004 f89b 	bl	800790a <USB_GetMode>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f040 848c 	bne.w	80040f4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f003 ffff 	bl	80077e4 <USB_ReadInterrupts>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8482 	beq.w	80040f2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	0a1b      	lsrs	r3, r3, #8
 80037f8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f003 ffec 	bl	80077e4 <USB_ReadInterrupts>
 800380c:	4603      	mov	r3, r0
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b02      	cmp	r3, #2
 8003814:	d107      	bne.n	8003826 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f002 0202 	and.w	r2, r2, #2
 8003824:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f003 ffda 	bl	80077e4 <USB_ReadInterrupts>
 8003830:	4603      	mov	r3, r0
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b10      	cmp	r3, #16
 8003838:	d161      	bne.n	80038fe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699a      	ldr	r2, [r3, #24]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0210 	bic.w	r2, r2, #16
 8003848:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	f003 020f 	and.w	r2, r3, #15
 8003856:	4613      	mov	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	4413      	add	r3, r2
 8003866:	3304      	adds	r3, #4
 8003868:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	0c5b      	lsrs	r3, r3, #17
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	2b02      	cmp	r3, #2
 8003874:	d124      	bne.n	80038c0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800387c:	4013      	ands	r3, r2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d035      	beq.n	80038ee <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800388c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003890:	b29b      	uxth	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	6a38      	ldr	r0, [r7, #32]
 8003896:	f003 fe11 	bl	80074bc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038a6:	441a      	add	r2, r3
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	695a      	ldr	r2, [r3, #20]
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038b8:	441a      	add	r2, r3
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	615a      	str	r2, [r3, #20]
 80038be:	e016      	b.n	80038ee <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	0c5b      	lsrs	r3, r3, #17
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	2b06      	cmp	r3, #6
 80038ca:	d110      	bne.n	80038ee <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038d2:	2208      	movs	r2, #8
 80038d4:	4619      	mov	r1, r3
 80038d6:	6a38      	ldr	r0, [r7, #32]
 80038d8:	f003 fdf0 	bl	80074bc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	695a      	ldr	r2, [r3, #20]
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	091b      	lsrs	r3, r3, #4
 80038e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038e8:	441a      	add	r2, r3
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699a      	ldr	r2, [r3, #24]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0210 	orr.w	r2, r2, #16
 80038fc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f003 ff6e 	bl	80077e4 <USB_ReadInterrupts>
 8003908:	4603      	mov	r3, r0
 800390a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800390e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003912:	f040 80a7 	bne.w	8003a64 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f003 ff73 	bl	800780a <USB_ReadDevAllOutEpInterrupt>
 8003924:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003926:	e099      	b.n	8003a5c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 808e 	beq.w	8003a50 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	4611      	mov	r1, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f003 ff97 	bl	8007872 <USB_ReadDevOutEPInterrupt>
 8003944:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00c      	beq.n	800396a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800395c:	461a      	mov	r2, r3
 800395e:	2301      	movs	r3, #1
 8003960:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003962:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fea3 	bl	80046b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00c      	beq.n	800398e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003980:	461a      	mov	r2, r3
 8003982:	2308      	movs	r3, #8
 8003984:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003986:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 ff79 	bl	8004880 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039a4:	461a      	mov	r2, r3
 80039a6:	2310      	movs	r3, #16
 80039a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d030      	beq.n	8003a16 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039bc:	2b80      	cmp	r3, #128	@ 0x80
 80039be:	d109      	bne.n	80039d4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039d2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80039d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d6:	4613      	mov	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	4413      	add	r3, r2
 80039e6:	3304      	adds	r3, #4
 80039e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	78db      	ldrb	r3, [r3, #3]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d108      	bne.n	8003a04 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2200      	movs	r2, #0
 80039f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	4619      	mov	r1, r3
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f008 fd58 	bl	800c4b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a10:	461a      	mov	r2, r3
 8003a12:	2302      	movs	r3, #2
 8003a14:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2320      	movs	r3, #32
 8003a30:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d009      	beq.n	8003a50 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a4e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a52:	3301      	adds	r3, #1
 8003a54:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f47f af62 	bne.w	8003928 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f003 febb 	bl	80077e4 <USB_ReadInterrupts>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a78:	f040 80db 	bne.w	8003c32 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f003 fedc 	bl	800783e <USB_ReadDevAllInEpInterrupt>
 8003a86:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003a8c:	e0cd      	b.n	8003c2a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80c2 	beq.w	8003c1e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f003 ff02 	bl	80078ae <USB_ReadDevInEPInterrupt>
 8003aaa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d057      	beq.n	8003b66 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	2201      	movs	r2, #1
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	69f9      	ldr	r1, [r7, #28]
 8003ad2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	2301      	movs	r3, #1
 8003aea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	799b      	ldrb	r3, [r3, #6]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d132      	bne.n	8003b5a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	3320      	adds	r3, #32
 8003b04:	6819      	ldr	r1, [r3, #0]
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4403      	add	r3, r0
 8003b14:	331c      	adds	r3, #28
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4419      	add	r1, r3
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b1e:	4613      	mov	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4403      	add	r3, r0
 8003b28:	3320      	adds	r3, #32
 8003b2a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d113      	bne.n	8003b5a <HAL_PCD_IRQHandler+0x3a2>
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	3324      	adds	r3, #36	@ 0x24
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d108      	bne.n	8003b5a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b52:	461a      	mov	r2, r3
 8003b54:	2101      	movs	r1, #1
 8003b56:	f003 ff09 	bl	800796c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	4619      	mov	r1, r3
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f008 fc22 	bl	800c3aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	2308      	movs	r3, #8
 8003b80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2310      	movs	r3, #16
 8003b9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	2340      	movs	r3, #64	@ 0x40
 8003bb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d023      	beq.n	8003c0c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003bc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bc6:	6a38      	ldr	r0, [r7, #32]
 8003bc8:	f002 fef0 	bl	80069ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bce:	4613      	mov	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	3310      	adds	r3, #16
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	4413      	add	r3, r2
 8003bdc:	3304      	adds	r3, #4
 8003bde:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	78db      	ldrb	r3, [r3, #3]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d108      	bne.n	8003bfa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2200      	movs	r2, #0
 8003bec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f008 fc6f 	bl	800c4d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c06:	461a      	mov	r2, r3
 8003c08:	2302      	movs	r3, #2
 8003c0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 fcbd 	bl	8004598 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	3301      	adds	r3, #1
 8003c22:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f47f af2e 	bne.w	8003a8e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f003 fdd4 	bl	80077e4 <USB_ReadInterrupts>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c46:	d122      	bne.n	8003c8e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c56:	f023 0301 	bic.w	r3, r3, #1
 8003c5a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d108      	bne.n	8003c78 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c6e:	2100      	movs	r1, #0
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fea3 	bl	80049bc <HAL_PCDEx_LPM_Callback>
 8003c76:	e002      	b.n	8003c7e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f008 fc0d 	bl	800c498 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695a      	ldr	r2, [r3, #20]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003c8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f003 fda6 	bl	80077e4 <USB_ReadInterrupts>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ca2:	d112      	bne.n	8003cca <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d102      	bne.n	8003cba <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f008 fbc9 	bl	800c44c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695a      	ldr	r2, [r3, #20]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003cc8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f003 fd88 	bl	80077e4 <USB_ReadInterrupts>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cde:	f040 80b7 	bne.w	8003e50 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cf0:	f023 0301 	bic.w	r3, r3, #1
 8003cf4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2110      	movs	r1, #16
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f002 fe55 	bl	80069ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d02:	2300      	movs	r3, #0
 8003d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d06:	e046      	b.n	8003d96 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d14:	461a      	mov	r2, r3
 8003d16:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d1a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d2c:	0151      	lsls	r1, r2, #5
 8003d2e:	69fa      	ldr	r2, [r7, #28]
 8003d30:	440a      	add	r2, r1
 8003d32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d48:	461a      	mov	r2, r3
 8003d4a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d4e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d60:	0151      	lsls	r1, r2, #5
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	440a      	add	r2, r1
 8003d66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d80:	0151      	lsls	r1, r2, #5
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	440a      	add	r2, r1
 8003d86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d8a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d8e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d92:	3301      	adds	r3, #1
 8003d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	791b      	ldrb	r3, [r3, #4]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d3b2      	bcc.n	8003d08 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003db0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003db4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	7bdb      	ldrb	r3, [r3, #15]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d016      	beq.n	8003dec <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dce:	f043 030b 	orr.w	r3, r3, #11
 8003dd2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dde:	69fa      	ldr	r2, [r7, #28]
 8003de0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003de4:	f043 030b 	orr.w	r3, r3, #11
 8003de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dea:	e015      	b.n	8003e18 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dfa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003dfe:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003e02:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e12:	f043 030b 	orr.w	r3, r3, #11
 8003e16:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e26:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003e2a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6818      	ldr	r0, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f003 fd96 	bl	800796c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003e4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f003 fcc5 	bl	80077e4 <USB_ReadInterrupts>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e64:	d123      	bne.n	8003eae <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f003 fd5b 	bl	8007926 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f002 fe12 	bl	8006a9e <USB_GetDevSpeed>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681c      	ldr	r4, [r3, #0]
 8003e86:	f001 fa09 	bl	800529c <HAL_RCC_GetHCLKFreq>
 8003e8a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e90:	461a      	mov	r2, r3
 8003e92:	4620      	mov	r0, r4
 8003e94:	f002 fb16 	bl	80064c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f008 faae 	bl	800c3fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695a      	ldr	r2, [r3, #20]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003eac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f003 fc96 	bl	80077e4 <USB_ReadInterrupts>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d10a      	bne.n	8003ed8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f008 fa8b 	bl	800c3de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f002 0208 	and.w	r2, r2, #8
 8003ed6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f003 fc81 	bl	80077e4 <USB_ReadInterrupts>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ee8:	2b80      	cmp	r3, #128	@ 0x80
 8003eea:	d123      	bne.n	8003f34 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ef8:	2301      	movs	r3, #1
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003efc:	e014      	b.n	8003f28 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f02:	4613      	mov	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	4413      	add	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d105      	bne.n	8003f22 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fb0a 	bl	8004536 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	3301      	adds	r3, #1
 8003f26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	791b      	ldrb	r3, [r3, #4]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d3e4      	bcc.n	8003efe <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f003 fc53 	bl	80077e4 <USB_ReadInterrupts>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f48:	d13c      	bne.n	8003fc4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f4e:	e02b      	b.n	8003fa8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	3318      	adds	r3, #24
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d115      	bne.n	8003fa2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003f76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	da12      	bge.n	8003fa2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f80:	4613      	mov	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	3317      	adds	r3, #23
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 faca 	bl	8004536 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	791b      	ldrb	r3, [r3, #4]
 8003fac:	461a      	mov	r2, r3
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d3cd      	bcc.n	8003f50 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695a      	ldr	r2, [r3, #20]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003fc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f003 fc0b 	bl	80077e4 <USB_ReadInterrupts>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fd8:	d156      	bne.n	8004088 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fda:	2301      	movs	r3, #1
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fde:	e045      	b.n	800406c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d12e      	bne.n	8004066 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004008:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800400a:	2b00      	cmp	r3, #0
 800400c:	da2b      	bge.n	8004066 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800401a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800401e:	429a      	cmp	r2, r3
 8004020:	d121      	bne.n	8004066 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004026:	4613      	mov	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004034:	2201      	movs	r2, #1
 8004036:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10a      	bne.n	8004066 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800405e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004062:	6053      	str	r3, [r2, #4]
            break;
 8004064:	e008      	b.n	8004078 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004068:	3301      	adds	r3, #1
 800406a:	627b      	str	r3, [r7, #36]	@ 0x24
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	791b      	ldrb	r3, [r3, #4]
 8004070:	461a      	mov	r2, r3
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004074:	4293      	cmp	r3, r2
 8004076:	d3b3      	bcc.n	8003fe0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004086:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f003 fba9 	bl	80077e4 <USB_ReadInterrupts>
 8004092:	4603      	mov	r3, r0
 8004094:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800409c:	d10a      	bne.n	80040b4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f008 fa2c 	bl	800c4fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695a      	ldr	r2, [r3, #20]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80040b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f003 fb93 	bl	80077e4 <USB_ReadInterrupts>
 80040be:	4603      	mov	r3, r0
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	d115      	bne.n	80040f4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f008 fa1c 	bl	800c518 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6859      	ldr	r1, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]
 80040f0:	e000      	b.n	80040f4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80040f2:	bf00      	nop
    }
  }
}
 80040f4:	3734      	adds	r7, #52	@ 0x34
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd90      	pop	{r4, r7, pc}

080040fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b082      	sub	sp, #8
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	460b      	mov	r3, r1
 8004104:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_PCD_SetAddress+0x1a>
 8004110:	2302      	movs	r3, #2
 8004112:	e012      	b.n	800413a <HAL_PCD_SetAddress+0x40>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	4611      	mov	r1, r2
 800412a:	4618      	mov	r0, r3
 800412c:	f003 faf2 	bl	8007714 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	4608      	mov	r0, r1
 800414c:	4611      	mov	r1, r2
 800414e:	461a      	mov	r2, r3
 8004150:	4603      	mov	r3, r0
 8004152:	70fb      	strb	r3, [r7, #3]
 8004154:	460b      	mov	r3, r1
 8004156:	803b      	strh	r3, [r7, #0]
 8004158:	4613      	mov	r3, r2
 800415a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800415c:	2300      	movs	r3, #0
 800415e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004160:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004164:	2b00      	cmp	r3, #0
 8004166:	da0f      	bge.n	8004188 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	f003 020f 	and.w	r2, r3, #15
 800416e:	4613      	mov	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	3310      	adds	r3, #16
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	4413      	add	r3, r2
 800417c:	3304      	adds	r3, #4
 800417e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	705a      	strb	r2, [r3, #1]
 8004186:	e00f      	b.n	80041a8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004188:	78fb      	ldrb	r3, [r7, #3]
 800418a:	f003 020f 	and.w	r2, r3, #15
 800418e:	4613      	mov	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	4413      	add	r3, r2
 800419e:	3304      	adds	r3, #4
 80041a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80041b4:	883b      	ldrh	r3, [r7, #0]
 80041b6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	78ba      	ldrb	r2, [r7, #2]
 80041c2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	785b      	ldrb	r3, [r3, #1]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d004      	beq.n	80041d6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	461a      	mov	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80041d6:	78bb      	ldrb	r3, [r7, #2]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d102      	bne.n	80041e2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_PCD_EP_Open+0xae>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e00e      	b.n	800420e <HAL_PCD_EP_Open+0xcc>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68f9      	ldr	r1, [r7, #12]
 80041fe:	4618      	mov	r0, r3
 8004200:	f002 fc72 	bl	8006ae8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800420c:	7afb      	ldrb	r3, [r7, #11]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	460b      	mov	r3, r1
 8004220:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004222:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004226:	2b00      	cmp	r3, #0
 8004228:	da0f      	bge.n	800424a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800422a:	78fb      	ldrb	r3, [r7, #3]
 800422c:	f003 020f 	and.w	r2, r3, #15
 8004230:	4613      	mov	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	4413      	add	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	3310      	adds	r3, #16
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4413      	add	r3, r2
 800423e:	3304      	adds	r3, #4
 8004240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	705a      	strb	r2, [r3, #1]
 8004248:	e00f      	b.n	800426a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	f003 020f 	and.w	r2, r3, #15
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	4413      	add	r3, r2
 8004260:	3304      	adds	r3, #4
 8004262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_PCD_EP_Close+0x6e>
 8004280:	2302      	movs	r3, #2
 8004282:	e00e      	b.n	80042a2 <HAL_PCD_EP_Close+0x8c>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68f9      	ldr	r1, [r7, #12]
 8004292:	4618      	mov	r0, r3
 8004294:	f002 fcb0 	bl	8006bf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b086      	sub	sp, #24
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
 80042b6:	460b      	mov	r3, r1
 80042b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042ba:	7afb      	ldrb	r3, [r7, #11]
 80042bc:	f003 020f 	and.w	r2, r3, #15
 80042c0:	4613      	mov	r3, r2
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	3304      	adds	r3, #4
 80042d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2200      	movs	r2, #0
 80042e4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2200      	movs	r2, #0
 80042ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042ec:	7afb      	ldrb	r3, [r7, #11]
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	799b      	ldrb	r3, [r3, #6]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d102      	bne.n	8004306 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	799b      	ldrb	r3, [r3, #6]
 800430e:	461a      	mov	r2, r3
 8004310:	6979      	ldr	r1, [r7, #20]
 8004312:	f002 fd4d 	bl	8006db0 <USB_EPStartXfer>

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	f003 020f 	and.w	r2, r3, #15
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	4613      	mov	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004342:	681b      	ldr	r3, [r3, #0]
}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	607a      	str	r2, [r7, #4]
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	460b      	mov	r3, r1
 800435e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004360:	7afb      	ldrb	r3, [r7, #11]
 8004362:	f003 020f 	and.w	r2, r3, #15
 8004366:	4613      	mov	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	3310      	adds	r3, #16
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4413      	add	r3, r2
 8004374:	3304      	adds	r3, #4
 8004376:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2200      	movs	r2, #0
 8004388:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2201      	movs	r2, #1
 800438e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004390:	7afb      	ldrb	r3, [r7, #11]
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	b2da      	uxtb	r2, r3
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	799b      	ldrb	r3, [r3, #6]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d102      	bne.n	80043aa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	799b      	ldrb	r3, [r3, #6]
 80043b2:	461a      	mov	r2, r3
 80043b4:	6979      	ldr	r1, [r7, #20]
 80043b6:	f002 fcfb 	bl	8006db0 <USB_EPStartXfer>

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	7912      	ldrb	r2, [r2, #4]
 80043da:	4293      	cmp	r3, r2
 80043dc:	d901      	bls.n	80043e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e04f      	b.n	8004482 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	da0f      	bge.n	800440a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043ea:	78fb      	ldrb	r3, [r7, #3]
 80043ec:	f003 020f 	and.w	r2, r3, #15
 80043f0:	4613      	mov	r3, r2
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	3310      	adds	r3, #16
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	4413      	add	r3, r2
 80043fe:	3304      	adds	r3, #4
 8004400:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	705a      	strb	r2, [r3, #1]
 8004408:	e00d      	b.n	8004426 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800440a:	78fa      	ldrb	r2, [r7, #3]
 800440c:	4613      	mov	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	4413      	add	r3, r2
 800441c:	3304      	adds	r3, #4
 800441e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	b2da      	uxtb	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_PCD_EP_SetStall+0x82>
 8004442:	2302      	movs	r3, #2
 8004444:	e01d      	b.n	8004482 <HAL_PCD_EP_SetStall+0xbe>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68f9      	ldr	r1, [r7, #12]
 8004454:	4618      	mov	r0, r3
 8004456:	f003 f889 	bl	800756c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800445a:	78fb      	ldrb	r3, [r7, #3]
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	2b00      	cmp	r3, #0
 8004462:	d109      	bne.n	8004478 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	7999      	ldrb	r1, [r3, #6]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004472:	461a      	mov	r2, r3
 8004474:	f003 fa7a 	bl	800796c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	460b      	mov	r3, r1
 8004494:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004496:	78fb      	ldrb	r3, [r7, #3]
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	7912      	ldrb	r2, [r2, #4]
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d901      	bls.n	80044a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e042      	b.n	800452e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	da0f      	bge.n	80044d0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	f003 020f 	and.w	r2, r3, #15
 80044b6:	4613      	mov	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	3310      	adds	r3, #16
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	4413      	add	r3, r2
 80044c4:	3304      	adds	r3, #4
 80044c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2201      	movs	r2, #1
 80044cc:	705a      	strb	r2, [r3, #1]
 80044ce:	e00f      	b.n	80044f0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	f003 020f 	and.w	r2, r3, #15
 80044d6:	4613      	mov	r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	4413      	add	r3, r2
 80044e6:	3304      	adds	r3, #4
 80044e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	f003 030f 	and.w	r3, r3, #15
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_PCD_EP_ClrStall+0x86>
 800450c:	2302      	movs	r3, #2
 800450e:	e00e      	b.n	800452e <HAL_PCD_EP_ClrStall+0xa4>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68f9      	ldr	r1, [r7, #12]
 800451e:	4618      	mov	r0, r3
 8004520:	f003 f892 	bl	8007648 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	460b      	mov	r3, r1
 8004540:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004546:	2b00      	cmp	r3, #0
 8004548:	da0c      	bge.n	8004564 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800454a:	78fb      	ldrb	r3, [r7, #3]
 800454c:	f003 020f 	and.w	r2, r3, #15
 8004550:	4613      	mov	r3, r2
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	3310      	adds	r3, #16
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	3304      	adds	r3, #4
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	e00c      	b.n	800457e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004564:	78fb      	ldrb	r3, [r7, #3]
 8004566:	f003 020f 	and.w	r2, r3, #15
 800456a:	4613      	mov	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	4413      	add	r3, r2
 800457a:	3304      	adds	r3, #4
 800457c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68f9      	ldr	r1, [r7, #12]
 8004584:	4618      	mov	r0, r3
 8004586:	f002 feb1 	bl	80072ec <USB_EPStopXfer>
 800458a:	4603      	mov	r3, r0
 800458c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800458e:	7afb      	ldrb	r3, [r7, #11]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08a      	sub	sp, #40	@ 0x28
 800459c:	af02      	add	r7, sp, #8
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	4613      	mov	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	3310      	adds	r3, #16
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	4413      	add	r3, r2
 80045bc:	3304      	adds	r3, #4
 80045be:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	695a      	ldr	r2, [r3, #20]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d901      	bls.n	80045d0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e06b      	b.n	80046a8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	69fa      	ldr	r2, [r7, #28]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d902      	bls.n	80045ec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	3303      	adds	r3, #3
 80045f0:	089b      	lsrs	r3, r3, #2
 80045f2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045f4:	e02a      	b.n	800464c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	429a      	cmp	r2, r3
 800460a:	d902      	bls.n	8004612 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	3303      	adds	r3, #3
 8004616:	089b      	lsrs	r3, r3, #2
 8004618:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	68d9      	ldr	r1, [r3, #12]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	b2da      	uxtb	r2, r3
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	4603      	mov	r3, r0
 800462e:	6978      	ldr	r0, [r7, #20]
 8004630:	f002 ff06 	bl	8007440 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	441a      	add	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	695a      	ldr	r2, [r3, #20]
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	441a      	add	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	429a      	cmp	r2, r3
 8004660:	d809      	bhi.n	8004676 <PCD_WriteEmptyTxFifo+0xde>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	695a      	ldr	r2, [r3, #20]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800466a:	429a      	cmp	r2, r3
 800466c:	d203      	bcs.n	8004676 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1bf      	bne.n	80045f6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	691a      	ldr	r2, [r3, #16]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	429a      	cmp	r2, r3
 8004680:	d811      	bhi.n	80046a6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	2201      	movs	r2, #1
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	43db      	mvns	r3, r3
 800469c:	6939      	ldr	r1, [r7, #16]
 800469e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046a2:	4013      	ands	r3, r2
 80046a4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3720      	adds	r7, #32
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	333c      	adds	r3, #60	@ 0x3c
 80046c8:	3304      	adds	r3, #4
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	799b      	ldrb	r3, [r3, #6]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d17b      	bne.n	80047de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d015      	beq.n	800471c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	4a61      	ldr	r2, [pc, #388]	@ (8004878 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	f240 80b9 	bls.w	800486c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 80b3 	beq.w	800486c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004712:	461a      	mov	r2, r3
 8004714:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004718:	6093      	str	r3, [r2, #8]
 800471a:	e0a7      	b.n	800486c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b00      	cmp	r3, #0
 8004724:	d009      	beq.n	800473a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004732:	461a      	mov	r2, r3
 8004734:	2320      	movs	r3, #32
 8004736:	6093      	str	r3, [r2, #8]
 8004738:	e098      	b.n	800486c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004740:	2b00      	cmp	r3, #0
 8004742:	f040 8093 	bne.w	800486c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	4a4b      	ldr	r2, [pc, #300]	@ (8004878 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d90f      	bls.n	800476e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004764:	461a      	mov	r2, r3
 8004766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800476a:	6093      	str	r3, [r2, #8]
 800476c:	e07e      	b.n	800486c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	4613      	mov	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	4413      	add	r3, r2
 8004780:	3304      	adds	r3, #4
 8004782:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a1a      	ldr	r2, [r3, #32]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	0159      	lsls	r1, r3, #5
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	440b      	add	r3, r1
 8004790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800479a:	1ad2      	subs	r2, r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d114      	bne.n	80047d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d109      	bne.n	80047c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047b8:	461a      	mov	r2, r3
 80047ba:	2101      	movs	r1, #1
 80047bc:	f003 f8d6 	bl	800796c <USB_EP0_OutStart>
 80047c0:	e006      	b.n	80047d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	441a      	add	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	4619      	mov	r1, r3
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f007 fdcc 	bl	800c374 <HAL_PCD_DataOutStageCallback>
 80047dc:	e046      	b.n	800486c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	4a26      	ldr	r2, [pc, #152]	@ (800487c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d124      	bne.n	8004830 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047fc:	461a      	mov	r2, r3
 80047fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004802:	6093      	str	r3, [r2, #8]
 8004804:	e032      	b.n	800486c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f003 0320 	and.w	r3, r3, #32
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800481c:	461a      	mov	r2, r3
 800481e:	2320      	movs	r3, #32
 8004820:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	4619      	mov	r1, r3
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f007 fda3 	bl	800c374 <HAL_PCD_DataOutStageCallback>
 800482e:	e01d      	b.n	800486c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d114      	bne.n	8004860 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	4613      	mov	r3, r2
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	4413      	add	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	440b      	add	r3, r1
 8004844:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d108      	bne.n	8004860 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004858:	461a      	mov	r2, r3
 800485a:	2100      	movs	r1, #0
 800485c:	f003 f886 	bl	800796c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	b2db      	uxtb	r3, r3
 8004864:	4619      	mov	r1, r3
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f007 fd84 	bl	800c374 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3720      	adds	r7, #32
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	4f54300a 	.word	0x4f54300a
 800487c:	4f54310a 	.word	0x4f54310a

08004880 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	333c      	adds	r3, #60	@ 0x3c
 8004898:	3304      	adds	r3, #4
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4a15      	ldr	r2, [pc, #84]	@ (8004908 <PCD_EP_OutSetupPacket_int+0x88>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d90e      	bls.n	80048d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d009      	beq.n	80048d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048cc:	461a      	mov	r2, r3
 80048ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f007 fd3b 	bl	800c350 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004908 <PCD_EP_OutSetupPacket_int+0x88>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d90c      	bls.n	80048fc <PCD_EP_OutSetupPacket_int+0x7c>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	799b      	ldrb	r3, [r3, #6]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d108      	bne.n	80048fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048f4:	461a      	mov	r2, r3
 80048f6:	2101      	movs	r1, #1
 80048f8:	f003 f838 	bl	800796c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	4f54300a 	.word	0x4f54300a

0800490c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	70fb      	strb	r3, [r7, #3]
 8004918:	4613      	mov	r3, r2
 800491a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004922:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d107      	bne.n	800493a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800492a:	883b      	ldrh	r3, [r7, #0]
 800492c:	0419      	lsls	r1, r3, #16
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	430a      	orrs	r2, r1
 8004936:	629a      	str	r2, [r3, #40]	@ 0x28
 8004938:	e028      	b.n	800498c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004940:	0c1b      	lsrs	r3, r3, #16
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	4413      	add	r3, r2
 8004946:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004948:	2300      	movs	r3, #0
 800494a:	73fb      	strb	r3, [r7, #15]
 800494c:	e00d      	b.n	800496a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	3340      	adds	r3, #64	@ 0x40
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	0c1b      	lsrs	r3, r3, #16
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	4413      	add	r3, r2
 8004962:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	3301      	adds	r3, #1
 8004968:	73fb      	strb	r3, [r7, #15]
 800496a:	7bfa      	ldrb	r2, [r7, #15]
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	3b01      	subs	r3, #1
 8004970:	429a      	cmp	r2, r3
 8004972:	d3ec      	bcc.n	800494e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004974:	883b      	ldrh	r3, [r7, #0]
 8004976:	0418      	lsls	r0, r3, #16
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6819      	ldr	r1, [r3, #0]
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	3b01      	subs	r3, #1
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	4302      	orrs	r2, r0
 8004984:	3340      	adds	r3, #64	@ 0x40
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	460b      	mov	r3, r1
 80049a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	887a      	ldrh	r2, [r7, #2]
 80049ac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e267      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d075      	beq.n	8004ade <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049f2:	4b88      	ldr	r3, [pc, #544]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 030c 	and.w	r3, r3, #12
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d00c      	beq.n	8004a18 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049fe:	4b85      	ldr	r3, [pc, #532]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a06:	2b08      	cmp	r3, #8
 8004a08:	d112      	bne.n	8004a30 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a0a:	4b82      	ldr	r3, [pc, #520]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a16:	d10b      	bne.n	8004a30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a18:	4b7e      	ldr	r3, [pc, #504]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d05b      	beq.n	8004adc <HAL_RCC_OscConfig+0x108>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d157      	bne.n	8004adc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e242      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a38:	d106      	bne.n	8004a48 <HAL_RCC_OscConfig+0x74>
 8004a3a:	4b76      	ldr	r3, [pc, #472]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a75      	ldr	r2, [pc, #468]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	e01d      	b.n	8004a84 <HAL_RCC_OscConfig+0xb0>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a50:	d10c      	bne.n	8004a6c <HAL_RCC_OscConfig+0x98>
 8004a52:	4b70      	ldr	r3, [pc, #448]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a6f      	ldr	r2, [pc, #444]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	4b6d      	ldr	r3, [pc, #436]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a6c      	ldr	r2, [pc, #432]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e00b      	b.n	8004a84 <HAL_RCC_OscConfig+0xb0>
 8004a6c:	4b69      	ldr	r3, [pc, #420]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a68      	ldr	r2, [pc, #416]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	4b66      	ldr	r3, [pc, #408]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a65      	ldr	r2, [pc, #404]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d013      	beq.n	8004ab4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8c:	f7fc ff2e 	bl	80018ec <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a94:	f7fc ff2a 	bl	80018ec <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b64      	cmp	r3, #100	@ 0x64
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e207      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa6:	4b5b      	ldr	r3, [pc, #364]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0xc0>
 8004ab2:	e014      	b.n	8004ade <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab4:	f7fc ff1a 	bl	80018ec <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004abc:	f7fc ff16 	bl	80018ec <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	@ 0x64
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e1f3      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ace:	4b51      	ldr	r3, [pc, #324]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0xe8>
 8004ada:	e000      	b.n	8004ade <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d063      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004aea:	4b4a      	ldr	r3, [pc, #296]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00b      	beq.n	8004b0e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004af6:	4b47      	ldr	r3, [pc, #284]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d11c      	bne.n	8004b3c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b02:	4b44      	ldr	r3, [pc, #272]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d116      	bne.n	8004b3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b0e:	4b41      	ldr	r3, [pc, #260]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d005      	beq.n	8004b26 <HAL_RCC_OscConfig+0x152>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d001      	beq.n	8004b26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e1c7      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b26:	4b3b      	ldr	r3, [pc, #236]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	4937      	ldr	r1, [pc, #220]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b3a:	e03a      	b.n	8004bb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d020      	beq.n	8004b86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b44:	4b34      	ldr	r3, [pc, #208]	@ (8004c18 <HAL_RCC_OscConfig+0x244>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4a:	f7fc fecf 	bl	80018ec <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b52:	f7fc fecb 	bl	80018ec <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e1a8      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b64:	4b2b      	ldr	r3, [pc, #172]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f0      	beq.n	8004b52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b70:	4b28      	ldr	r3, [pc, #160]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	4925      	ldr	r1, [pc, #148]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	600b      	str	r3, [r1, #0]
 8004b84:	e015      	b.n	8004bb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b86:	4b24      	ldr	r3, [pc, #144]	@ (8004c18 <HAL_RCC_OscConfig+0x244>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8c:	f7fc feae 	bl	80018ec <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b94:	f7fc feaa 	bl	80018ec <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e187      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d036      	beq.n	8004c2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d016      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bc6:	4b15      	ldr	r3, [pc, #84]	@ (8004c1c <HAL_RCC_OscConfig+0x248>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bcc:	f7fc fe8e 	bl	80018ec <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd4:	f7fc fe8a 	bl	80018ec <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e167      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f0      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x200>
 8004bf2:	e01b      	b.n	8004c2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bf4:	4b09      	ldr	r3, [pc, #36]	@ (8004c1c <HAL_RCC_OscConfig+0x248>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bfa:	f7fc fe77 	bl	80018ec <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c00:	e00e      	b.n	8004c20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c02:	f7fc fe73 	bl	80018ec <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d907      	bls.n	8004c20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e150      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
 8004c14:	40023800 	.word	0x40023800
 8004c18:	42470000 	.word	0x42470000
 8004c1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c20:	4b88      	ldr	r3, [pc, #544]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004c22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1ea      	bne.n	8004c02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8097 	beq.w	8004d68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c3e:	4b81      	ldr	r3, [pc, #516]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10f      	bne.n	8004c6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	4b7d      	ldr	r3, [pc, #500]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c52:	4a7c      	ldr	r2, [pc, #496]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c5a:	4b7a      	ldr	r3, [pc, #488]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c66:	2301      	movs	r3, #1
 8004c68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6a:	4b77      	ldr	r3, [pc, #476]	@ (8004e48 <HAL_RCC_OscConfig+0x474>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d118      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c76:	4b74      	ldr	r3, [pc, #464]	@ (8004e48 <HAL_RCC_OscConfig+0x474>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a73      	ldr	r2, [pc, #460]	@ (8004e48 <HAL_RCC_OscConfig+0x474>)
 8004c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c82:	f7fc fe33 	bl	80018ec <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c8a:	f7fc fe2f 	bl	80018ec <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e10c      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8004e48 <HAL_RCC_OscConfig+0x474>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d106      	bne.n	8004cbe <HAL_RCC_OscConfig+0x2ea>
 8004cb0:	4b64      	ldr	r3, [pc, #400]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb4:	4a63      	ldr	r2, [pc, #396]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004cb6:	f043 0301 	orr.w	r3, r3, #1
 8004cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cbc:	e01c      	b.n	8004cf8 <HAL_RCC_OscConfig+0x324>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	2b05      	cmp	r3, #5
 8004cc4:	d10c      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x30c>
 8004cc6:	4b5f      	ldr	r3, [pc, #380]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cca:	4a5e      	ldr	r2, [pc, #376]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004ccc:	f043 0304 	orr.w	r3, r3, #4
 8004cd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cd2:	4b5c      	ldr	r3, [pc, #368]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd6:	4a5b      	ldr	r2, [pc, #364]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cde:	e00b      	b.n	8004cf8 <HAL_RCC_OscConfig+0x324>
 8004ce0:	4b58      	ldr	r3, [pc, #352]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce4:	4a57      	ldr	r2, [pc, #348]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004ce6:	f023 0301 	bic.w	r3, r3, #1
 8004cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cec:	4b55      	ldr	r3, [pc, #340]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf0:	4a54      	ldr	r2, [pc, #336]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004cf2:	f023 0304 	bic.w	r3, r3, #4
 8004cf6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d015      	beq.n	8004d2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d00:	f7fc fdf4 	bl	80018ec <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d06:	e00a      	b.n	8004d1e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d08:	f7fc fdf0 	bl	80018ec <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e0cb      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1e:	4b49      	ldr	r3, [pc, #292]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0ee      	beq.n	8004d08 <HAL_RCC_OscConfig+0x334>
 8004d2a:	e014      	b.n	8004d56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d2c:	f7fc fdde 	bl	80018ec <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d32:	e00a      	b.n	8004d4a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d34:	f7fc fdda 	bl	80018ec <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e0b5      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1ee      	bne.n	8004d34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d56:	7dfb      	ldrb	r3, [r7, #23]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d105      	bne.n	8004d68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d5c:	4b39      	ldr	r3, [pc, #228]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d60:	4a38      	ldr	r2, [pc, #224]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004d62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 80a1 	beq.w	8004eb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d72:	4b34      	ldr	r3, [pc, #208]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 030c 	and.w	r3, r3, #12
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d05c      	beq.n	8004e38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d141      	bne.n	8004e0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d86:	4b31      	ldr	r3, [pc, #196]	@ (8004e4c <HAL_RCC_OscConfig+0x478>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d8c:	f7fc fdae 	bl	80018ec <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d94:	f7fc fdaa 	bl	80018ec <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e087      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da6:	4b27      	ldr	r3, [pc, #156]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69da      	ldr	r2, [r3, #28]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc0:	019b      	lsls	r3, r3, #6
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	041b      	lsls	r3, r3, #16
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd4:	061b      	lsls	r3, r3, #24
 8004dd6:	491b      	ldr	r1, [pc, #108]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8004e4c <HAL_RCC_OscConfig+0x478>)
 8004dde:	2201      	movs	r2, #1
 8004de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de2:	f7fc fd83 	bl	80018ec <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dea:	f7fc fd7f 	bl	80018ec <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e05c      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dfc:	4b11      	ldr	r3, [pc, #68]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0f0      	beq.n	8004dea <HAL_RCC_OscConfig+0x416>
 8004e08:	e054      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e0a:	4b10      	ldr	r3, [pc, #64]	@ (8004e4c <HAL_RCC_OscConfig+0x478>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e10:	f7fc fd6c 	bl	80018ec <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e18:	f7fc fd68 	bl	80018ec <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e045      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e2a:	4b06      	ldr	r3, [pc, #24]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f0      	bne.n	8004e18 <HAL_RCC_OscConfig+0x444>
 8004e36:	e03d      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d107      	bne.n	8004e50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e038      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
 8004e44:	40023800 	.word	0x40023800
 8004e48:	40007000 	.word	0x40007000
 8004e4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e50:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec0 <HAL_RCC_OscConfig+0x4ec>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d028      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d121      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d11a      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e80:	4013      	ands	r3, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d111      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e96:	085b      	lsrs	r3, r3, #1
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d107      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d001      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e000      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40023800 	.word	0x40023800

08004ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0cc      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ed8:	4b68      	ldr	r3, [pc, #416]	@ (800507c <HAL_RCC_ClockConfig+0x1b8>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d90c      	bls.n	8004f00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee6:	4b65      	ldr	r3, [pc, #404]	@ (800507c <HAL_RCC_ClockConfig+0x1b8>)
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eee:	4b63      	ldr	r3, [pc, #396]	@ (800507c <HAL_RCC_ClockConfig+0x1b8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d001      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e0b8      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d020      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d005      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f18:	4b59      	ldr	r3, [pc, #356]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	4a58      	ldr	r2, [pc, #352]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f30:	4b53      	ldr	r3, [pc, #332]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	4a52      	ldr	r2, [pc, #328]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004f36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f3c:	4b50      	ldr	r3, [pc, #320]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	494d      	ldr	r1, [pc, #308]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d044      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d107      	bne.n	8004f72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f62:	4b47      	ldr	r3, [pc, #284]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d119      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e07f      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d003      	beq.n	8004f82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d107      	bne.n	8004f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f82:	4b3f      	ldr	r3, [pc, #252]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d109      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e06f      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f92:	4b3b      	ldr	r3, [pc, #236]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e067      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fa2:	4b37      	ldr	r3, [pc, #220]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f023 0203 	bic.w	r2, r3, #3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	4934      	ldr	r1, [pc, #208]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fb4:	f7fc fc9a 	bl	80018ec <HAL_GetTick>
 8004fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fba:	e00a      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fbc:	f7fc fc96 	bl	80018ec <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e04f      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 020c 	and.w	r2, r3, #12
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d1eb      	bne.n	8004fbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fe4:	4b25      	ldr	r3, [pc, #148]	@ (800507c <HAL_RCC_ClockConfig+0x1b8>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d20c      	bcs.n	800500c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff2:	4b22      	ldr	r3, [pc, #136]	@ (800507c <HAL_RCC_ClockConfig+0x1b8>)
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffa:	4b20      	ldr	r3, [pc, #128]	@ (800507c <HAL_RCC_ClockConfig+0x1b8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0307 	and.w	r3, r3, #7
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d001      	beq.n	800500c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e032      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005018:	4b19      	ldr	r3, [pc, #100]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4916      	ldr	r1, [pc, #88]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005036:	4b12      	ldr	r3, [pc, #72]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	490e      	ldr	r1, [pc, #56]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	4313      	orrs	r3, r2
 8005048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800504a:	f000 f821 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 800504e:	4602      	mov	r2, r0
 8005050:	4b0b      	ldr	r3, [pc, #44]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	091b      	lsrs	r3, r3, #4
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	490a      	ldr	r1, [pc, #40]	@ (8005084 <HAL_RCC_ClockConfig+0x1c0>)
 800505c:	5ccb      	ldrb	r3, [r1, r3]
 800505e:	fa22 f303 	lsr.w	r3, r2, r3
 8005062:	4a09      	ldr	r2, [pc, #36]	@ (8005088 <HAL_RCC_ClockConfig+0x1c4>)
 8005064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005066:	4b09      	ldr	r3, [pc, #36]	@ (800508c <HAL_RCC_ClockConfig+0x1c8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f7fc fbfa 	bl	8001864 <HAL_InitTick>

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	40023c00 	.word	0x40023c00
 8005080:	40023800 	.word	0x40023800
 8005084:	0800dd18 	.word	0x0800dd18
 8005088:	20000000 	.word	0x20000000
 800508c:	20000004 	.word	0x20000004

08005090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005094:	b094      	sub	sp, #80	@ 0x50
 8005096:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050a8:	4b79      	ldr	r3, [pc, #484]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x200>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f003 030c 	and.w	r3, r3, #12
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d00d      	beq.n	80050d0 <HAL_RCC_GetSysClockFreq+0x40>
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	f200 80e1 	bhi.w	800527c <HAL_RCC_GetSysClockFreq+0x1ec>
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <HAL_RCC_GetSysClockFreq+0x34>
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d003      	beq.n	80050ca <HAL_RCC_GetSysClockFreq+0x3a>
 80050c2:	e0db      	b.n	800527c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050c4:	4b73      	ldr	r3, [pc, #460]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x204>)
 80050c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050c8:	e0db      	b.n	8005282 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050ca:	4b73      	ldr	r3, [pc, #460]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x208>)
 80050cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050ce:	e0d8      	b.n	8005282 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050d0:	4b6f      	ldr	r3, [pc, #444]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x200>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050da:	4b6d      	ldr	r3, [pc, #436]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x200>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d063      	beq.n	80051ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050e6:	4b6a      	ldr	r3, [pc, #424]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x200>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	099b      	lsrs	r3, r3, #6
 80050ec:	2200      	movs	r2, #0
 80050ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80050f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80050fa:	2300      	movs	r3, #0
 80050fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80050fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005102:	4622      	mov	r2, r4
 8005104:	462b      	mov	r3, r5
 8005106:	f04f 0000 	mov.w	r0, #0
 800510a:	f04f 0100 	mov.w	r1, #0
 800510e:	0159      	lsls	r1, r3, #5
 8005110:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005114:	0150      	lsls	r0, r2, #5
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4621      	mov	r1, r4
 800511c:	1a51      	subs	r1, r2, r1
 800511e:	6139      	str	r1, [r7, #16]
 8005120:	4629      	mov	r1, r5
 8005122:	eb63 0301 	sbc.w	r3, r3, r1
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	f04f 0300 	mov.w	r3, #0
 8005130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005134:	4659      	mov	r1, fp
 8005136:	018b      	lsls	r3, r1, #6
 8005138:	4651      	mov	r1, sl
 800513a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800513e:	4651      	mov	r1, sl
 8005140:	018a      	lsls	r2, r1, #6
 8005142:	4651      	mov	r1, sl
 8005144:	ebb2 0801 	subs.w	r8, r2, r1
 8005148:	4659      	mov	r1, fp
 800514a:	eb63 0901 	sbc.w	r9, r3, r1
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	f04f 0300 	mov.w	r3, #0
 8005156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800515a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800515e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005162:	4690      	mov	r8, r2
 8005164:	4699      	mov	r9, r3
 8005166:	4623      	mov	r3, r4
 8005168:	eb18 0303 	adds.w	r3, r8, r3
 800516c:	60bb      	str	r3, [r7, #8]
 800516e:	462b      	mov	r3, r5
 8005170:	eb49 0303 	adc.w	r3, r9, r3
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	f04f 0200 	mov.w	r2, #0
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005182:	4629      	mov	r1, r5
 8005184:	024b      	lsls	r3, r1, #9
 8005186:	4621      	mov	r1, r4
 8005188:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800518c:	4621      	mov	r1, r4
 800518e:	024a      	lsls	r2, r1, #9
 8005190:	4610      	mov	r0, r2
 8005192:	4619      	mov	r1, r3
 8005194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005196:	2200      	movs	r2, #0
 8005198:	62bb      	str	r3, [r7, #40]	@ 0x28
 800519a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800519c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051a0:	f7fb f86e 	bl	8000280 <__aeabi_uldivmod>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4613      	mov	r3, r2
 80051aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051ac:	e058      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ae:	4b38      	ldr	r3, [pc, #224]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x200>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	099b      	lsrs	r3, r3, #6
 80051b4:	2200      	movs	r2, #0
 80051b6:	4618      	mov	r0, r3
 80051b8:	4611      	mov	r1, r2
 80051ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051be:	623b      	str	r3, [r7, #32]
 80051c0:	2300      	movs	r3, #0
 80051c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051c8:	4642      	mov	r2, r8
 80051ca:	464b      	mov	r3, r9
 80051cc:	f04f 0000 	mov.w	r0, #0
 80051d0:	f04f 0100 	mov.w	r1, #0
 80051d4:	0159      	lsls	r1, r3, #5
 80051d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051da:	0150      	lsls	r0, r2, #5
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4641      	mov	r1, r8
 80051e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80051e6:	4649      	mov	r1, r9
 80051e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005200:	ebb2 040a 	subs.w	r4, r2, sl
 8005204:	eb63 050b 	sbc.w	r5, r3, fp
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	00eb      	lsls	r3, r5, #3
 8005212:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005216:	00e2      	lsls	r2, r4, #3
 8005218:	4614      	mov	r4, r2
 800521a:	461d      	mov	r5, r3
 800521c:	4643      	mov	r3, r8
 800521e:	18e3      	adds	r3, r4, r3
 8005220:	603b      	str	r3, [r7, #0]
 8005222:	464b      	mov	r3, r9
 8005224:	eb45 0303 	adc.w	r3, r5, r3
 8005228:	607b      	str	r3, [r7, #4]
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	f04f 0300 	mov.w	r3, #0
 8005232:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005236:	4629      	mov	r1, r5
 8005238:	028b      	lsls	r3, r1, #10
 800523a:	4621      	mov	r1, r4
 800523c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005240:	4621      	mov	r1, r4
 8005242:	028a      	lsls	r2, r1, #10
 8005244:	4610      	mov	r0, r2
 8005246:	4619      	mov	r1, r3
 8005248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800524a:	2200      	movs	r2, #0
 800524c:	61bb      	str	r3, [r7, #24]
 800524e:	61fa      	str	r2, [r7, #28]
 8005250:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005254:	f7fb f814 	bl	8000280 <__aeabi_uldivmod>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4613      	mov	r3, r2
 800525e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005260:	4b0b      	ldr	r3, [pc, #44]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x200>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	0c1b      	lsrs	r3, r3, #16
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	3301      	adds	r3, #1
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005270:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005272:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005274:	fbb2 f3f3 	udiv	r3, r2, r3
 8005278:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800527a:	e002      	b.n	8005282 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800527c:	4b05      	ldr	r3, [pc, #20]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x204>)
 800527e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005282:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005284:	4618      	mov	r0, r3
 8005286:	3750      	adds	r7, #80	@ 0x50
 8005288:	46bd      	mov	sp, r7
 800528a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800528e:	bf00      	nop
 8005290:	40023800 	.word	0x40023800
 8005294:	00f42400 	.word	0x00f42400
 8005298:	007a1200 	.word	0x007a1200

0800529c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052a0:	4b03      	ldr	r3, [pc, #12]	@ (80052b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052a2:	681b      	ldr	r3, [r3, #0]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	20000000 	.word	0x20000000

080052b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052b8:	f7ff fff0 	bl	800529c <HAL_RCC_GetHCLKFreq>
 80052bc:	4602      	mov	r2, r0
 80052be:	4b05      	ldr	r3, [pc, #20]	@ (80052d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	0a9b      	lsrs	r3, r3, #10
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	4903      	ldr	r1, [pc, #12]	@ (80052d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052ca:	5ccb      	ldrb	r3, [r1, r3]
 80052cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40023800 	.word	0x40023800
 80052d8:	0800dd28 	.word	0x0800dd28

080052dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e07b      	b.n	80053e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d108      	bne.n	8005308 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052fe:	d009      	beq.n	8005314 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	61da      	str	r2, [r3, #28]
 8005306:	e005      	b.n	8005314 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fc f85c 	bl	80013ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800534a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005398:	ea42 0103 	orr.w	r1, r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	0c1b      	lsrs	r3, r3, #16
 80053b2:	f003 0104 	and.w	r1, r3, #4
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ba:	f003 0210 	and.w	r2, r3, #16
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69da      	ldr	r2, [r3, #28]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b082      	sub	sp, #8
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e041      	b.n	8005484 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d106      	bne.n	800541a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7fc f831 	bl	800147c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2202      	movs	r2, #2
 800541e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3304      	adds	r3, #4
 800542a:	4619      	mov	r1, r3
 800542c:	4610      	mov	r0, r2
 800542e:	f000 fbe7 	bl	8005c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e041      	b.n	8005522 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f839 	bl	800552a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3304      	adds	r3, #4
 80054c8:	4619      	mov	r1, r3
 80054ca:	4610      	mov	r0, r2
 80054cc:	f000 fb98 	bl	8005c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
	...

08005540 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b0c      	cmp	r3, #12
 8005552:	d841      	bhi.n	80055d8 <HAL_TIM_PWM_Stop_IT+0x98>
 8005554:	a201      	add	r2, pc, #4	@ (adr r2, 800555c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8005556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555a:	bf00      	nop
 800555c:	08005591 	.word	0x08005591
 8005560:	080055d9 	.word	0x080055d9
 8005564:	080055d9 	.word	0x080055d9
 8005568:	080055d9 	.word	0x080055d9
 800556c:	080055a3 	.word	0x080055a3
 8005570:	080055d9 	.word	0x080055d9
 8005574:	080055d9 	.word	0x080055d9
 8005578:	080055d9 	.word	0x080055d9
 800557c:	080055b5 	.word	0x080055b5
 8005580:	080055d9 	.word	0x080055d9
 8005584:	080055d9 	.word	0x080055d9
 8005588:	080055d9 	.word	0x080055d9
 800558c:	080055c7 	.word	0x080055c7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0202 	bic.w	r2, r2, #2
 800559e:	60da      	str	r2, [r3, #12]
      break;
 80055a0:	e01d      	b.n	80055de <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0204 	bic.w	r2, r2, #4
 80055b0:	60da      	str	r2, [r3, #12]
      break;
 80055b2:	e014      	b.n	80055de <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0208 	bic.w	r2, r2, #8
 80055c2:	60da      	str	r2, [r3, #12]
      break;
 80055c4:	e00b      	b.n	80055de <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0210 	bic.w	r2, r2, #16
 80055d4:	60da      	str	r2, [r3, #12]
      break;
 80055d6:	e002      	b.n	80055de <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	73fb      	strb	r3, [r7, #15]
      break;
 80055dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80055de:	7bfb      	ldrb	r3, [r7, #15]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d161      	bne.n	80056a8 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2200      	movs	r2, #0
 80055ea:	6839      	ldr	r1, [r7, #0]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 fdfd 	bl	80061ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a2f      	ldr	r2, [pc, #188]	@ (80056b4 <HAL_TIM_PWM_Stop_IT+0x174>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d004      	beq.n	8005606 <HAL_TIM_PWM_Stop_IT+0xc6>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a2d      	ldr	r2, [pc, #180]	@ (80056b8 <HAL_TIM_PWM_Stop_IT+0x178>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d101      	bne.n	800560a <HAL_TIM_PWM_Stop_IT+0xca>
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <HAL_TIM_PWM_Stop_IT+0xcc>
 800560a:	2300      	movs	r3, #0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d017      	beq.n	8005640 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6a1a      	ldr	r2, [r3, #32]
 8005616:	f241 1311 	movw	r3, #4369	@ 0x1111
 800561a:	4013      	ands	r3, r2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10f      	bne.n	8005640 <HAL_TIM_PWM_Stop_IT+0x100>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6a1a      	ldr	r2, [r3, #32]
 8005626:	f240 4344 	movw	r3, #1092	@ 0x444
 800562a:	4013      	ands	r3, r2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d107      	bne.n	8005640 <HAL_TIM_PWM_Stop_IT+0x100>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800563e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6a1a      	ldr	r2, [r3, #32]
 8005646:	f241 1311 	movw	r3, #4369	@ 0x1111
 800564a:	4013      	ands	r3, r2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10f      	bne.n	8005670 <HAL_TIM_PWM_Stop_IT+0x130>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6a1a      	ldr	r2, [r3, #32]
 8005656:	f240 4344 	movw	r3, #1092	@ 0x444
 800565a:	4013      	ands	r3, r2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d107      	bne.n	8005670 <HAL_TIM_PWM_Stop_IT+0x130>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0201 	bic.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d104      	bne.n	8005680 <HAL_TIM_PWM_Stop_IT+0x140>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800567e:	e013      	b.n	80056a8 <HAL_TIM_PWM_Stop_IT+0x168>
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b04      	cmp	r3, #4
 8005684:	d104      	bne.n	8005690 <HAL_TIM_PWM_Stop_IT+0x150>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800568e:	e00b      	b.n	80056a8 <HAL_TIM_PWM_Stop_IT+0x168>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2b08      	cmp	r3, #8
 8005694:	d104      	bne.n	80056a0 <HAL_TIM_PWM_Stop_IT+0x160>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800569e:	e003      	b.n	80056a8 <HAL_TIM_PWM_Stop_IT+0x168>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40010000 	.word	0x40010000
 80056b8:	40010400 	.word	0x40010400

080056bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d020      	beq.n	8005720 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01b      	beq.n	8005720 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0202 	mvn.w	r2, #2
 80056f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fa65 	bl	8005bd6 <HAL_TIM_IC_CaptureCallback>
 800570c:	e005      	b.n	800571a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fa57 	bl	8005bc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7fb f8ad 	bl	8000874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	d020      	beq.n	800576c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01b      	beq.n	800576c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f06f 0204 	mvn.w	r2, #4
 800573c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2202      	movs	r2, #2
 8005742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fa3f 	bl	8005bd6 <HAL_TIM_IC_CaptureCallback>
 8005758:	e005      	b.n	8005766 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fa31 	bl	8005bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7fb f887 	bl	8000874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d020      	beq.n	80057b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01b      	beq.n	80057b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0208 	mvn.w	r2, #8
 8005788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2204      	movs	r2, #4
 800578e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fa19 	bl	8005bd6 <HAL_TIM_IC_CaptureCallback>
 80057a4:	e005      	b.n	80057b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fa0b 	bl	8005bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7fb f861 	bl	8000874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f003 0310 	and.w	r3, r3, #16
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d020      	beq.n	8005804 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01b      	beq.n	8005804 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0210 	mvn.w	r2, #16
 80057d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2208      	movs	r2, #8
 80057da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f9f3 	bl	8005bd6 <HAL_TIM_IC_CaptureCallback>
 80057f0:	e005      	b.n	80057fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f9e5 	bl	8005bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7fb f83b 	bl	8000874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00c      	beq.n	8005828 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b00      	cmp	r3, #0
 8005816:	d007      	beq.n	8005828 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f06f 0201 	mvn.w	r2, #1
 8005820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f9c3 	bl	8005bae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00c      	beq.n	800584c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005838:	2b00      	cmp	r3, #0
 800583a:	d007      	beq.n	800584c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fdce 	bl	80063e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00c      	beq.n	8005870 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800585c:	2b00      	cmp	r3, #0
 800585e:	d007      	beq.n	8005870 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f9bd 	bl	8005bea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00c      	beq.n	8005894 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b00      	cmp	r3, #0
 8005882:	d007      	beq.n	8005894 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f06f 0220 	mvn.w	r2, #32
 800588c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fda0 	bl	80063d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005894:	bf00      	nop
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d101      	bne.n	80058ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058b6:	2302      	movs	r3, #2
 80058b8:	e0ae      	b.n	8005a18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b0c      	cmp	r3, #12
 80058c6:	f200 809f 	bhi.w	8005a08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058ca:	a201      	add	r2, pc, #4	@ (adr r2, 80058d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d0:	08005905 	.word	0x08005905
 80058d4:	08005a09 	.word	0x08005a09
 80058d8:	08005a09 	.word	0x08005a09
 80058dc:	08005a09 	.word	0x08005a09
 80058e0:	08005945 	.word	0x08005945
 80058e4:	08005a09 	.word	0x08005a09
 80058e8:	08005a09 	.word	0x08005a09
 80058ec:	08005a09 	.word	0x08005a09
 80058f0:	08005987 	.word	0x08005987
 80058f4:	08005a09 	.word	0x08005a09
 80058f8:	08005a09 	.word	0x08005a09
 80058fc:	08005a09 	.word	0x08005a09
 8005900:	080059c7 	.word	0x080059c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fa24 	bl	8005d58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	699a      	ldr	r2, [r3, #24]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0208 	orr.w	r2, r2, #8
 800591e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0204 	bic.w	r2, r2, #4
 800592e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6999      	ldr	r1, [r3, #24]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	691a      	ldr	r2, [r3, #16]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	619a      	str	r2, [r3, #24]
      break;
 8005942:	e064      	b.n	8005a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fa74 	bl	8005e38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699a      	ldr	r2, [r3, #24]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800595e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699a      	ldr	r2, [r3, #24]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800596e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6999      	ldr	r1, [r3, #24]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	021a      	lsls	r2, r3, #8
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	619a      	str	r2, [r3, #24]
      break;
 8005984:	e043      	b.n	8005a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68b9      	ldr	r1, [r7, #8]
 800598c:	4618      	mov	r0, r3
 800598e:	f000 fac9 	bl	8005f24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69da      	ldr	r2, [r3, #28]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 0208 	orr.w	r2, r2, #8
 80059a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69da      	ldr	r2, [r3, #28]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0204 	bic.w	r2, r2, #4
 80059b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69d9      	ldr	r1, [r3, #28]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	691a      	ldr	r2, [r3, #16]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	61da      	str	r2, [r3, #28]
      break;
 80059c4:	e023      	b.n	8005a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68b9      	ldr	r1, [r7, #8]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 fb1d 	bl	800600c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69da      	ldr	r2, [r3, #28]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69da      	ldr	r2, [r3, #28]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69d9      	ldr	r1, [r3, #28]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	021a      	lsls	r2, r3, #8
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	61da      	str	r2, [r3, #28]
      break;
 8005a06:	e002      	b.n	8005a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_TIM_ConfigClockSource+0x1c>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e0b4      	b.n	8005ba6 <HAL_TIM_ConfigClockSource+0x186>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a74:	d03e      	beq.n	8005af4 <HAL_TIM_ConfigClockSource+0xd4>
 8005a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a7a:	f200 8087 	bhi.w	8005b8c <HAL_TIM_ConfigClockSource+0x16c>
 8005a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a82:	f000 8086 	beq.w	8005b92 <HAL_TIM_ConfigClockSource+0x172>
 8005a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a8a:	d87f      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x16c>
 8005a8c:	2b70      	cmp	r3, #112	@ 0x70
 8005a8e:	d01a      	beq.n	8005ac6 <HAL_TIM_ConfigClockSource+0xa6>
 8005a90:	2b70      	cmp	r3, #112	@ 0x70
 8005a92:	d87b      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x16c>
 8005a94:	2b60      	cmp	r3, #96	@ 0x60
 8005a96:	d050      	beq.n	8005b3a <HAL_TIM_ConfigClockSource+0x11a>
 8005a98:	2b60      	cmp	r3, #96	@ 0x60
 8005a9a:	d877      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x16c>
 8005a9c:	2b50      	cmp	r3, #80	@ 0x50
 8005a9e:	d03c      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0xfa>
 8005aa0:	2b50      	cmp	r3, #80	@ 0x50
 8005aa2:	d873      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x16c>
 8005aa4:	2b40      	cmp	r3, #64	@ 0x40
 8005aa6:	d058      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0x13a>
 8005aa8:	2b40      	cmp	r3, #64	@ 0x40
 8005aaa:	d86f      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x16c>
 8005aac:	2b30      	cmp	r3, #48	@ 0x30
 8005aae:	d064      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x15a>
 8005ab0:	2b30      	cmp	r3, #48	@ 0x30
 8005ab2:	d86b      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x16c>
 8005ab4:	2b20      	cmp	r3, #32
 8005ab6:	d060      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x15a>
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d867      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x16c>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d05c      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x15a>
 8005ac0:	2b10      	cmp	r3, #16
 8005ac2:	d05a      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x15a>
 8005ac4:	e062      	b.n	8005b8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ad6:	f000 fb69 	bl	80061ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ae8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	609a      	str	r2, [r3, #8]
      break;
 8005af2:	e04f      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b04:	f000 fb52 	bl	80061ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b16:	609a      	str	r2, [r3, #8]
      break;
 8005b18:	e03c      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b26:	461a      	mov	r2, r3
 8005b28:	f000 fac6 	bl	80060b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2150      	movs	r1, #80	@ 0x50
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 fb1f 	bl	8006176 <TIM_ITRx_SetConfig>
      break;
 8005b38:	e02c      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b46:	461a      	mov	r2, r3
 8005b48:	f000 fae5 	bl	8006116 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2160      	movs	r1, #96	@ 0x60
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 fb0f 	bl	8006176 <TIM_ITRx_SetConfig>
      break;
 8005b58:	e01c      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b66:	461a      	mov	r2, r3
 8005b68:	f000 faa6 	bl	80060b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2140      	movs	r1, #64	@ 0x40
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 faff 	bl	8006176 <TIM_ITRx_SetConfig>
      break;
 8005b78:	e00c      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4619      	mov	r1, r3
 8005b84:	4610      	mov	r0, r2
 8005b86:	f000 faf6 	bl	8006176 <TIM_ITRx_SetConfig>
      break;
 8005b8a:	e003      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b90:	e000      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
	...

08005c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a46      	ldr	r2, [pc, #280]	@ (8005d2c <TIM_Base_SetConfig+0x12c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d013      	beq.n	8005c40 <TIM_Base_SetConfig+0x40>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c1e:	d00f      	beq.n	8005c40 <TIM_Base_SetConfig+0x40>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a43      	ldr	r2, [pc, #268]	@ (8005d30 <TIM_Base_SetConfig+0x130>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00b      	beq.n	8005c40 <TIM_Base_SetConfig+0x40>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a42      	ldr	r2, [pc, #264]	@ (8005d34 <TIM_Base_SetConfig+0x134>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d007      	beq.n	8005c40 <TIM_Base_SetConfig+0x40>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a41      	ldr	r2, [pc, #260]	@ (8005d38 <TIM_Base_SetConfig+0x138>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d003      	beq.n	8005c40 <TIM_Base_SetConfig+0x40>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a40      	ldr	r2, [pc, #256]	@ (8005d3c <TIM_Base_SetConfig+0x13c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d108      	bne.n	8005c52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a35      	ldr	r2, [pc, #212]	@ (8005d2c <TIM_Base_SetConfig+0x12c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d02b      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c60:	d027      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a32      	ldr	r2, [pc, #200]	@ (8005d30 <TIM_Base_SetConfig+0x130>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d023      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a31      	ldr	r2, [pc, #196]	@ (8005d34 <TIM_Base_SetConfig+0x134>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d01f      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a30      	ldr	r2, [pc, #192]	@ (8005d38 <TIM_Base_SetConfig+0x138>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d01b      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a2f      	ldr	r2, [pc, #188]	@ (8005d3c <TIM_Base_SetConfig+0x13c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d017      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a2e      	ldr	r2, [pc, #184]	@ (8005d40 <TIM_Base_SetConfig+0x140>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d013      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a2d      	ldr	r2, [pc, #180]	@ (8005d44 <TIM_Base_SetConfig+0x144>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00f      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a2c      	ldr	r2, [pc, #176]	@ (8005d48 <TIM_Base_SetConfig+0x148>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00b      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a2b      	ldr	r2, [pc, #172]	@ (8005d4c <TIM_Base_SetConfig+0x14c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d007      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a2a      	ldr	r2, [pc, #168]	@ (8005d50 <TIM_Base_SetConfig+0x150>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d003      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a29      	ldr	r2, [pc, #164]	@ (8005d54 <TIM_Base_SetConfig+0x154>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d108      	bne.n	8005cc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a10      	ldr	r2, [pc, #64]	@ (8005d2c <TIM_Base_SetConfig+0x12c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_Base_SetConfig+0xf8>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a12      	ldr	r2, [pc, #72]	@ (8005d3c <TIM_Base_SetConfig+0x13c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d103      	bne.n	8005d00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d105      	bne.n	8005d1e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	f023 0201 	bic.w	r2, r3, #1
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	611a      	str	r2, [r3, #16]
  }
}
 8005d1e:	bf00      	nop
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40010000 	.word	0x40010000
 8005d30:	40000400 	.word	0x40000400
 8005d34:	40000800 	.word	0x40000800
 8005d38:	40000c00 	.word	0x40000c00
 8005d3c:	40010400 	.word	0x40010400
 8005d40:	40014000 	.word	0x40014000
 8005d44:	40014400 	.word	0x40014400
 8005d48:	40014800 	.word	0x40014800
 8005d4c:	40001800 	.word	0x40001800
 8005d50:	40001c00 	.word	0x40001c00
 8005d54:	40002000 	.word	0x40002000

08005d58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	f023 0201 	bic.w	r2, r3, #1
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0303 	bic.w	r3, r3, #3
 8005d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f023 0302 	bic.w	r3, r3, #2
 8005da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a20      	ldr	r2, [pc, #128]	@ (8005e30 <TIM_OC1_SetConfig+0xd8>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d003      	beq.n	8005dbc <TIM_OC1_SetConfig+0x64>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a1f      	ldr	r2, [pc, #124]	@ (8005e34 <TIM_OC1_SetConfig+0xdc>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d10c      	bne.n	8005dd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f023 0308 	bic.w	r3, r3, #8
 8005dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f023 0304 	bic.w	r3, r3, #4
 8005dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a15      	ldr	r2, [pc, #84]	@ (8005e30 <TIM_OC1_SetConfig+0xd8>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d003      	beq.n	8005de6 <TIM_OC1_SetConfig+0x8e>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a14      	ldr	r2, [pc, #80]	@ (8005e34 <TIM_OC1_SetConfig+0xdc>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d111      	bne.n	8005e0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	621a      	str	r2, [r3, #32]
}
 8005e24:	bf00      	nop
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	40010000 	.word	0x40010000
 8005e34:	40010400 	.word	0x40010400

08005e38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	f023 0210 	bic.w	r2, r3, #16
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	021b      	lsls	r3, r3, #8
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f023 0320 	bic.w	r3, r3, #32
 8005e82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a22      	ldr	r2, [pc, #136]	@ (8005f1c <TIM_OC2_SetConfig+0xe4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d003      	beq.n	8005ea0 <TIM_OC2_SetConfig+0x68>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a21      	ldr	r2, [pc, #132]	@ (8005f20 <TIM_OC2_SetConfig+0xe8>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d10d      	bne.n	8005ebc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a17      	ldr	r2, [pc, #92]	@ (8005f1c <TIM_OC2_SetConfig+0xe4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_OC2_SetConfig+0x94>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a16      	ldr	r2, [pc, #88]	@ (8005f20 <TIM_OC2_SetConfig+0xe8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d113      	bne.n	8005ef4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ed2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005eda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40010000 	.word	0x40010000
 8005f20:	40010400 	.word	0x40010400

08005f24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 0303 	bic.w	r3, r3, #3
 8005f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	021b      	lsls	r3, r3, #8
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a21      	ldr	r2, [pc, #132]	@ (8006004 <TIM_OC3_SetConfig+0xe0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d003      	beq.n	8005f8a <TIM_OC3_SetConfig+0x66>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a20      	ldr	r2, [pc, #128]	@ (8006008 <TIM_OC3_SetConfig+0xe4>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d10d      	bne.n	8005fa6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	021b      	lsls	r3, r3, #8
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a16      	ldr	r2, [pc, #88]	@ (8006004 <TIM_OC3_SetConfig+0xe0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d003      	beq.n	8005fb6 <TIM_OC3_SetConfig+0x92>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a15      	ldr	r2, [pc, #84]	@ (8006008 <TIM_OC3_SetConfig+0xe4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d113      	bne.n	8005fde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	621a      	str	r2, [r3, #32]
}
 8005ff8:	bf00      	nop
 8005ffa:	371c      	adds	r7, #28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	40010000 	.word	0x40010000
 8006008:	40010400 	.word	0x40010400

0800600c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800603a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	021b      	lsls	r3, r3, #8
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	4313      	orrs	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	031b      	lsls	r3, r3, #12
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	4313      	orrs	r3, r2
 8006062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a12      	ldr	r2, [pc, #72]	@ (80060b0 <TIM_OC4_SetConfig+0xa4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d003      	beq.n	8006074 <TIM_OC4_SetConfig+0x68>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a11      	ldr	r2, [pc, #68]	@ (80060b4 <TIM_OC4_SetConfig+0xa8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d109      	bne.n	8006088 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800607a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	019b      	lsls	r3, r3, #6
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	4313      	orrs	r3, r2
 8006086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	621a      	str	r2, [r3, #32]
}
 80060a2:	bf00      	nop
 80060a4:	371c      	adds	r7, #28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40010000 	.word	0x40010000
 80060b4:	40010400 	.word	0x40010400

080060b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	f023 0201 	bic.w	r2, r3, #1
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	011b      	lsls	r3, r3, #4
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f023 030a 	bic.w	r3, r3, #10
 80060f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	621a      	str	r2, [r3, #32]
}
 800610a:	bf00      	nop
 800610c:	371c      	adds	r7, #28
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006116:	b480      	push	{r7}
 8006118:	b087      	sub	sp, #28
 800611a:	af00      	add	r7, sp, #0
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	60b9      	str	r1, [r7, #8]
 8006120:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	f023 0210 	bic.w	r2, r3, #16
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006140:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	031b      	lsls	r3, r3, #12
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006152:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	4313      	orrs	r3, r2
 800615c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	621a      	str	r2, [r3, #32]
}
 800616a:	bf00      	nop
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006176:	b480      	push	{r7}
 8006178:	b085      	sub	sp, #20
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800618c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	f043 0307 	orr.w	r3, r3, #7
 8006198:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	609a      	str	r2, [r3, #8]
}
 80061a0:	bf00      	nop
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	021a      	lsls	r2, r3, #8
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	609a      	str	r2, [r3, #8]
}
 80061e0:	bf00      	nop
 80061e2:	371c      	adds	r7, #28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f003 031f 	and.w	r3, r3, #31
 80061fe:	2201      	movs	r2, #1
 8006200:	fa02 f303 	lsl.w	r3, r2, r3
 8006204:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a1a      	ldr	r2, [r3, #32]
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	43db      	mvns	r3, r3
 800620e:	401a      	ands	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a1a      	ldr	r2, [r3, #32]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f003 031f 	and.w	r3, r3, #31
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	fa01 f303 	lsl.w	r3, r1, r3
 8006224:	431a      	orrs	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	621a      	str	r2, [r3, #32]
}
 800622a:	bf00      	nop
 800622c:	371c      	adds	r7, #28
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
	...

08006238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800624c:	2302      	movs	r3, #2
 800624e:	e05a      	b.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a21      	ldr	r2, [pc, #132]	@ (8006314 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d022      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800629c:	d01d      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1d      	ldr	r2, [pc, #116]	@ (8006318 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d018      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a1b      	ldr	r2, [pc, #108]	@ (800631c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d013      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a1a      	ldr	r2, [pc, #104]	@ (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d00e      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a18      	ldr	r2, [pc, #96]	@ (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d009      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a17      	ldr	r2, [pc, #92]	@ (8006328 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d004      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a15      	ldr	r2, [pc, #84]	@ (800632c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d10c      	bne.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40010000 	.word	0x40010000
 8006318:	40000400 	.word	0x40000400
 800631c:	40000800 	.word	0x40000800
 8006320:	40000c00 	.word	0x40000c00
 8006324:	40010400 	.word	0x40010400
 8006328:	40014000 	.word	0x40014000
 800632c:	40001800 	.word	0x40001800

08006330 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800633a:	2300      	movs	r3, #0
 800633c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006348:	2302      	movs	r3, #2
 800634a:	e03d      	b.n	80063c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	4313      	orrs	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4313      	orrs	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063fc:	b084      	sub	sp, #16
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	f107 001c 	add.w	r0, r7, #28
 800640a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800640e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006412:	2b01      	cmp	r3, #1
 8006414:	d123      	bne.n	800645e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800642a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800643e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006442:	2b01      	cmp	r3, #1
 8006444:	d105      	bne.n	8006452 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 fae8 	bl	8007a28 <USB_CoreReset>
 8006458:	4603      	mov	r3, r0
 800645a:	73fb      	strb	r3, [r7, #15]
 800645c:	e01b      	b.n	8006496 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f001 fadc 	bl	8007a28 <USB_CoreReset>
 8006470:	4603      	mov	r3, r0
 8006472:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006474:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006478:	2b00      	cmp	r3, #0
 800647a:	d106      	bne.n	800648a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006480:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	639a      	str	r2, [r3, #56]	@ 0x38
 8006488:	e005      	b.n	8006496 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800648e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006496:	7fbb      	ldrb	r3, [r7, #30]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d10b      	bne.n	80064b4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f043 0206 	orr.w	r2, r3, #6
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f043 0220 	orr.w	r2, r3, #32
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064c0:	b004      	add	sp, #16
 80064c2:	4770      	bx	lr

080064c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	4613      	mov	r3, r2
 80064d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80064d2:	79fb      	ldrb	r3, [r7, #7]
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d165      	bne.n	80065a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4a41      	ldr	r2, [pc, #260]	@ (80065e0 <USB_SetTurnaroundTime+0x11c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d906      	bls.n	80064ee <USB_SetTurnaroundTime+0x2a>
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4a40      	ldr	r2, [pc, #256]	@ (80065e4 <USB_SetTurnaroundTime+0x120>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d202      	bcs.n	80064ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80064e8:	230f      	movs	r3, #15
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	e062      	b.n	80065b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	4a3c      	ldr	r2, [pc, #240]	@ (80065e4 <USB_SetTurnaroundTime+0x120>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d306      	bcc.n	8006504 <USB_SetTurnaroundTime+0x40>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	4a3b      	ldr	r2, [pc, #236]	@ (80065e8 <USB_SetTurnaroundTime+0x124>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d202      	bcs.n	8006504 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80064fe:	230e      	movs	r3, #14
 8006500:	617b      	str	r3, [r7, #20]
 8006502:	e057      	b.n	80065b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4a38      	ldr	r2, [pc, #224]	@ (80065e8 <USB_SetTurnaroundTime+0x124>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d306      	bcc.n	800651a <USB_SetTurnaroundTime+0x56>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4a37      	ldr	r2, [pc, #220]	@ (80065ec <USB_SetTurnaroundTime+0x128>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d202      	bcs.n	800651a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006514:	230d      	movs	r3, #13
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	e04c      	b.n	80065b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	4a33      	ldr	r2, [pc, #204]	@ (80065ec <USB_SetTurnaroundTime+0x128>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d306      	bcc.n	8006530 <USB_SetTurnaroundTime+0x6c>
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	4a32      	ldr	r2, [pc, #200]	@ (80065f0 <USB_SetTurnaroundTime+0x12c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d802      	bhi.n	8006530 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800652a:	230c      	movs	r3, #12
 800652c:	617b      	str	r3, [r7, #20]
 800652e:	e041      	b.n	80065b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4a2f      	ldr	r2, [pc, #188]	@ (80065f0 <USB_SetTurnaroundTime+0x12c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d906      	bls.n	8006546 <USB_SetTurnaroundTime+0x82>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4a2e      	ldr	r2, [pc, #184]	@ (80065f4 <USB_SetTurnaroundTime+0x130>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d802      	bhi.n	8006546 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006540:	230b      	movs	r3, #11
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	e036      	b.n	80065b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	4a2a      	ldr	r2, [pc, #168]	@ (80065f4 <USB_SetTurnaroundTime+0x130>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d906      	bls.n	800655c <USB_SetTurnaroundTime+0x98>
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	4a29      	ldr	r2, [pc, #164]	@ (80065f8 <USB_SetTurnaroundTime+0x134>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d802      	bhi.n	800655c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006556:	230a      	movs	r3, #10
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	e02b      	b.n	80065b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4a26      	ldr	r2, [pc, #152]	@ (80065f8 <USB_SetTurnaroundTime+0x134>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d906      	bls.n	8006572 <USB_SetTurnaroundTime+0xae>
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4a25      	ldr	r2, [pc, #148]	@ (80065fc <USB_SetTurnaroundTime+0x138>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d202      	bcs.n	8006572 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800656c:	2309      	movs	r3, #9
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	e020      	b.n	80065b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	4a21      	ldr	r2, [pc, #132]	@ (80065fc <USB_SetTurnaroundTime+0x138>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d306      	bcc.n	8006588 <USB_SetTurnaroundTime+0xc4>
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	4a20      	ldr	r2, [pc, #128]	@ (8006600 <USB_SetTurnaroundTime+0x13c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d802      	bhi.n	8006588 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006582:	2308      	movs	r3, #8
 8006584:	617b      	str	r3, [r7, #20]
 8006586:	e015      	b.n	80065b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4a1d      	ldr	r2, [pc, #116]	@ (8006600 <USB_SetTurnaroundTime+0x13c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d906      	bls.n	800659e <USB_SetTurnaroundTime+0xda>
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4a1c      	ldr	r2, [pc, #112]	@ (8006604 <USB_SetTurnaroundTime+0x140>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d202      	bcs.n	800659e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006598:	2307      	movs	r3, #7
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	e00a      	b.n	80065b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800659e:	2306      	movs	r3, #6
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	e007      	b.n	80065b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80065a4:	79fb      	ldrb	r3, [r7, #7]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d102      	bne.n	80065b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80065aa:	2309      	movs	r3, #9
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	e001      	b.n	80065b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80065b0:	2309      	movs	r3, #9
 80065b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	68da      	ldr	r2, [r3, #12]
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	029b      	lsls	r3, r3, #10
 80065c8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80065cc:	431a      	orrs	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	371c      	adds	r7, #28
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	00d8acbf 	.word	0x00d8acbf
 80065e4:	00e4e1c0 	.word	0x00e4e1c0
 80065e8:	00f42400 	.word	0x00f42400
 80065ec:	01067380 	.word	0x01067380
 80065f0:	011a499f 	.word	0x011a499f
 80065f4:	01312cff 	.word	0x01312cff
 80065f8:	014ca43f 	.word	0x014ca43f
 80065fc:	016e3600 	.word	0x016e3600
 8006600:	01a6ab1f 	.word	0x01a6ab1f
 8006604:	01e84800 	.word	0x01e84800

08006608 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f043 0201 	orr.w	r2, r3, #1
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f023 0201 	bic.w	r2, r3, #1
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d115      	bne.n	800669a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800667a:	200a      	movs	r0, #10
 800667c:	f7fb f942 	bl	8001904 <HAL_Delay>
      ms += 10U;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	330a      	adds	r3, #10
 8006684:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f001 f93f 	bl	800790a <USB_GetMode>
 800668c:	4603      	mov	r3, r0
 800668e:	2b01      	cmp	r3, #1
 8006690:	d01e      	beq.n	80066d0 <USB_SetCurrentMode+0x84>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2bc7      	cmp	r3, #199	@ 0xc7
 8006696:	d9f0      	bls.n	800667a <USB_SetCurrentMode+0x2e>
 8006698:	e01a      	b.n	80066d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800669a:	78fb      	ldrb	r3, [r7, #3]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d115      	bne.n	80066cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066ac:	200a      	movs	r0, #10
 80066ae:	f7fb f929 	bl	8001904 <HAL_Delay>
      ms += 10U;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	330a      	adds	r3, #10
 80066b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f001 f926 	bl	800790a <USB_GetMode>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <USB_SetCurrentMode+0x84>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2bc7      	cmp	r3, #199	@ 0xc7
 80066c8:	d9f0      	bls.n	80066ac <USB_SetCurrentMode+0x60>
 80066ca:	e001      	b.n	80066d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e005      	b.n	80066dc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2bc8      	cmp	r3, #200	@ 0xc8
 80066d4:	d101      	bne.n	80066da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066e4:	b084      	sub	sp, #16
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b086      	sub	sp, #24
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80066f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066fe:	2300      	movs	r3, #0
 8006700:	613b      	str	r3, [r7, #16]
 8006702:	e009      	b.n	8006718 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	3340      	adds	r3, #64	@ 0x40
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	2200      	movs	r2, #0
 8006710:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	3301      	adds	r3, #1
 8006716:	613b      	str	r3, [r7, #16]
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	2b0e      	cmp	r3, #14
 800671c:	d9f2      	bls.n	8006704 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800671e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006722:	2b00      	cmp	r3, #0
 8006724:	d11c      	bne.n	8006760 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006734:	f043 0302 	orr.w	r3, r3, #2
 8006738:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006756:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	639a      	str	r2, [r3, #56]	@ 0x38
 800675e:	e00b      	b.n	8006778 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006764:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006770:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800677e:	461a      	mov	r2, r3
 8006780:	2300      	movs	r3, #0
 8006782:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006784:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006788:	2b01      	cmp	r3, #1
 800678a:	d10d      	bne.n	80067a8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800678c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006790:	2b00      	cmp	r3, #0
 8006792:	d104      	bne.n	800679e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006794:	2100      	movs	r1, #0
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f968 	bl	8006a6c <USB_SetDevSpeed>
 800679c:	e008      	b.n	80067b0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800679e:	2101      	movs	r1, #1
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f963 	bl	8006a6c <USB_SetDevSpeed>
 80067a6:	e003      	b.n	80067b0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067a8:	2103      	movs	r1, #3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f95e 	bl	8006a6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067b0:	2110      	movs	r1, #16
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f8fa 	bl	80069ac <USB_FlushTxFifo>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f924 	bl	8006a10 <USB_FlushRxFifo>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067d8:	461a      	mov	r2, r3
 80067da:	2300      	movs	r3, #0
 80067dc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e4:	461a      	mov	r2, r3
 80067e6:	2300      	movs	r3, #0
 80067e8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067f0:	461a      	mov	r2, r3
 80067f2:	2300      	movs	r3, #0
 80067f4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067f6:	2300      	movs	r3, #0
 80067f8:	613b      	str	r3, [r7, #16]
 80067fa:	e043      	b.n	8006884 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800680e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006812:	d118      	bne.n	8006846 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10a      	bne.n	8006830 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4413      	add	r3, r2
 8006822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006826:	461a      	mov	r2, r3
 8006828:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	e013      	b.n	8006858 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800683c:	461a      	mov	r2, r3
 800683e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006842:	6013      	str	r3, [r2, #0]
 8006844:	e008      	b.n	8006858 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	015a      	lsls	r2, r3, #5
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4413      	add	r3, r2
 800684e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006852:	461a      	mov	r2, r3
 8006854:	2300      	movs	r3, #0
 8006856:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006864:	461a      	mov	r2, r3
 8006866:	2300      	movs	r3, #0
 8006868:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006876:	461a      	mov	r2, r3
 8006878:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800687c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	3301      	adds	r3, #1
 8006882:	613b      	str	r3, [r7, #16]
 8006884:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006888:	461a      	mov	r2, r3
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	4293      	cmp	r3, r2
 800688e:	d3b5      	bcc.n	80067fc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006890:	2300      	movs	r3, #0
 8006892:	613b      	str	r3, [r7, #16]
 8006894:	e043      	b.n	800691e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068ac:	d118      	bne.n	80068e0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10a      	bne.n	80068ca <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c0:	461a      	mov	r2, r3
 80068c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80068c6:	6013      	str	r3, [r2, #0]
 80068c8:	e013      	b.n	80068f2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068d6:	461a      	mov	r2, r3
 80068d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	e008      	b.n	80068f2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ec:	461a      	mov	r2, r3
 80068ee:	2300      	movs	r3, #0
 80068f0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068fe:	461a      	mov	r2, r3
 8006900:	2300      	movs	r3, #0
 8006902:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006910:	461a      	mov	r2, r3
 8006912:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006916:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	3301      	adds	r3, #1
 800691c:	613b      	str	r3, [r7, #16]
 800691e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006922:	461a      	mov	r2, r3
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	4293      	cmp	r3, r2
 8006928:	d3b5      	bcc.n	8006896 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800693c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800694a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800694c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006950:	2b00      	cmp	r3, #0
 8006952:	d105      	bne.n	8006960 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	f043 0210 	orr.w	r2, r3, #16
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	699a      	ldr	r2, [r3, #24]
 8006964:	4b10      	ldr	r3, [pc, #64]	@ (80069a8 <USB_DevInit+0x2c4>)
 8006966:	4313      	orrs	r3, r2
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800696c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	f043 0208 	orr.w	r2, r3, #8
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006980:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006984:	2b01      	cmp	r3, #1
 8006986:	d107      	bne.n	8006998 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006990:	f043 0304 	orr.w	r3, r3, #4
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006998:	7dfb      	ldrb	r3, [r7, #23]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3718      	adds	r7, #24
 800699e:	46bd      	mov	sp, r7
 80069a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069a4:	b004      	add	sp, #16
 80069a6:	4770      	bx	lr
 80069a8:	803c3800 	.word	0x803c3800

080069ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3301      	adds	r3, #1
 80069be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069c6:	d901      	bls.n	80069cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e01b      	b.n	8006a04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	daf2      	bge.n	80069ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	019b      	lsls	r3, r3, #6
 80069dc:	f043 0220 	orr.w	r2, r3, #32
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	3301      	adds	r3, #1
 80069e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069f0:	d901      	bls.n	80069f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e006      	b.n	8006a04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	f003 0320 	and.w	r3, r3, #32
 80069fe:	2b20      	cmp	r3, #32
 8006a00:	d0f0      	beq.n	80069e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a28:	d901      	bls.n	8006a2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e018      	b.n	8006a60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	daf2      	bge.n	8006a1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a36:	2300      	movs	r3, #0
 8006a38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2210      	movs	r2, #16
 8006a3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	3301      	adds	r3, #1
 8006a44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a4c:	d901      	bls.n	8006a52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e006      	b.n	8006a60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	f003 0310 	and.w	r3, r3, #16
 8006a5a:	2b10      	cmp	r3, #16
 8006a5c:	d0f0      	beq.n	8006a40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	68f9      	ldr	r1, [r7, #12]
 8006a88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b087      	sub	sp, #28
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f003 0306 	and.w	r3, r3, #6
 8006ab6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d102      	bne.n	8006ac4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	75fb      	strb	r3, [r7, #23]
 8006ac2:	e00a      	b.n	8006ada <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d002      	beq.n	8006ad0 <USB_GetDevSpeed+0x32>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2b06      	cmp	r3, #6
 8006ace:	d102      	bne.n	8006ad6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	75fb      	strb	r3, [r7, #23]
 8006ad4:	e001      	b.n	8006ada <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006ad6:	230f      	movs	r3, #15
 8006ad8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	371c      	adds	r7, #28
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	785b      	ldrb	r3, [r3, #1]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d13a      	bne.n	8006b7a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b0a:	69da      	ldr	r2, [r3, #28]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	f003 030f 	and.w	r3, r3, #15
 8006b14:	2101      	movs	r1, #1
 8006b16:	fa01 f303 	lsl.w	r3, r1, r3
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	68f9      	ldr	r1, [r7, #12]
 8006b1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b22:	4313      	orrs	r3, r2
 8006b24:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d155      	bne.n	8006be8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	791b      	ldrb	r3, [r3, #4]
 8006b56:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b58:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	059b      	lsls	r3, r3, #22
 8006b5e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b60:	4313      	orrs	r3, r2
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	0151      	lsls	r1, r2, #5
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	440a      	add	r2, r1
 8006b6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b76:	6013      	str	r3, [r2, #0]
 8006b78:	e036      	b.n	8006be8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b80:	69da      	ldr	r2, [r3, #28]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	f003 030f 	and.w	r3, r3, #15
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b90:	041b      	lsls	r3, r3, #16
 8006b92:	68f9      	ldr	r1, [r7, #12]
 8006b94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d11a      	bne.n	8006be8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	791b      	ldrb	r3, [r3, #4]
 8006bcc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bce:	430b      	orrs	r3, r1
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	0151      	lsls	r1, r2, #5
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	440a      	add	r2, r1
 8006bda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006be2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006be6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
	...

08006bf8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	785b      	ldrb	r3, [r3, #1]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d161      	bne.n	8006cd8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c2a:	d11f      	bne.n	8006c6c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	0151      	lsls	r1, r2, #5
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	440a      	add	r2, r1
 8006c42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c4a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	0151      	lsls	r1, r2, #5
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	440a      	add	r2, r1
 8006c62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	f003 030f 	and.w	r3, r3, #15
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	43db      	mvns	r3, r3
 8006c86:	68f9      	ldr	r1, [r7, #12]
 8006c88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c96:	69da      	ldr	r2, [r3, #28]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	f003 030f 	and.w	r3, r3, #15
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	43db      	mvns	r3, r3
 8006caa:	68f9      	ldr	r1, [r7, #12]
 8006cac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	0159      	lsls	r1, r3, #5
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	440b      	add	r3, r1
 8006cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cce:	4619      	mov	r1, r3
 8006cd0:	4b35      	ldr	r3, [pc, #212]	@ (8006da8 <USB_DeactivateEndpoint+0x1b0>)
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	600b      	str	r3, [r1, #0]
 8006cd6:	e060      	b.n	8006d9a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cee:	d11f      	bne.n	8006d30 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	0151      	lsls	r1, r2, #5
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	440a      	add	r2, r1
 8006d06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d0e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	0151      	lsls	r1, r2, #5
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	440a      	add	r2, r1
 8006d26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	f003 030f 	and.w	r3, r3, #15
 8006d40:	2101      	movs	r1, #1
 8006d42:	fa01 f303 	lsl.w	r3, r1, r3
 8006d46:	041b      	lsls	r3, r3, #16
 8006d48:	43db      	mvns	r3, r3
 8006d4a:	68f9      	ldr	r1, [r7, #12]
 8006d4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d50:	4013      	ands	r3, r2
 8006d52:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d5a:	69da      	ldr	r2, [r3, #28]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	f003 030f 	and.w	r3, r3, #15
 8006d64:	2101      	movs	r1, #1
 8006d66:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6a:	041b      	lsls	r3, r3, #16
 8006d6c:	43db      	mvns	r3, r3
 8006d6e:	68f9      	ldr	r1, [r7, #12]
 8006d70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d74:	4013      	ands	r3, r2
 8006d76:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	0159      	lsls	r1, r3, #5
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	440b      	add	r3, r1
 8006d8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d92:	4619      	mov	r1, r3
 8006d94:	4b05      	ldr	r3, [pc, #20]	@ (8006dac <USB_DeactivateEndpoint+0x1b4>)
 8006d96:	4013      	ands	r3, r2
 8006d98:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	ec337800 	.word	0xec337800
 8006dac:	eff37800 	.word	0xeff37800

08006db0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08a      	sub	sp, #40	@ 0x28
 8006db4:	af02      	add	r7, sp, #8
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	785b      	ldrb	r3, [r3, #1]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	f040 817f 	bne.w	80070d0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d132      	bne.n	8006e40 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	0151      	lsls	r1, r2, #5
 8006dec:	69fa      	ldr	r2, [r7, #28]
 8006dee:	440a      	add	r2, r1
 8006df0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006df4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006df8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006dfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	015a      	lsls	r2, r3, #5
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	0151      	lsls	r1, r2, #5
 8006e10:	69fa      	ldr	r2, [r7, #28]
 8006e12:	440a      	add	r2, r1
 8006e14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	0151      	lsls	r1, r2, #5
 8006e30:	69fa      	ldr	r2, [r7, #28]
 8006e32:	440a      	add	r2, r1
 8006e34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e38:	0cdb      	lsrs	r3, r3, #19
 8006e3a:	04db      	lsls	r3, r3, #19
 8006e3c:	6113      	str	r3, [r2, #16]
 8006e3e:	e097      	b.n	8006f70 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	0151      	lsls	r1, r2, #5
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	440a      	add	r2, r1
 8006e56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e5a:	0cdb      	lsrs	r3, r3, #19
 8006e5c:	04db      	lsls	r3, r3, #19
 8006e5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	0151      	lsls	r1, r2, #5
 8006e72:	69fa      	ldr	r2, [r7, #28]
 8006e74:	440a      	add	r2, r1
 8006e76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e7a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e7e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e82:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d11a      	bne.n	8006ec0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d903      	bls.n	8006e9e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	0151      	lsls	r1, r2, #5
 8006eb0:	69fa      	ldr	r2, [r7, #28]
 8006eb2:	440a      	add	r2, r1
 8006eb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ebc:	6113      	str	r3, [r2, #16]
 8006ebe:	e044      	b.n	8006f4a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	691a      	ldr	r2, [r3, #16]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	4413      	add	r3, r2
 8006eca:	1e5a      	subs	r2, r3, #1
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee2:	691a      	ldr	r2, [r3, #16]
 8006ee4:	8afb      	ldrh	r3, [r7, #22]
 8006ee6:	04d9      	lsls	r1, r3, #19
 8006ee8:	4ba4      	ldr	r3, [pc, #656]	@ (800717c <USB_EPStartXfer+0x3cc>)
 8006eea:	400b      	ands	r3, r1
 8006eec:	69b9      	ldr	r1, [r7, #24]
 8006eee:	0148      	lsls	r0, r1, #5
 8006ef0:	69f9      	ldr	r1, [r7, #28]
 8006ef2:	4401      	add	r1, r0
 8006ef4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	791b      	ldrb	r3, [r3, #4]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d122      	bne.n	8006f4a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	0151      	lsls	r1, r2, #5
 8006f16:	69fa      	ldr	r2, [r7, #28]
 8006f18:	440a      	add	r2, r1
 8006f1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f1e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006f22:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f30:	691a      	ldr	r2, [r3, #16]
 8006f32:	8afb      	ldrh	r3, [r7, #22]
 8006f34:	075b      	lsls	r3, r3, #29
 8006f36:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006f3a:	69b9      	ldr	r1, [r7, #24]
 8006f3c:	0148      	lsls	r0, r1, #5
 8006f3e:	69f9      	ldr	r1, [r7, #28]
 8006f40:	4401      	add	r1, r0
 8006f42:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f46:	4313      	orrs	r3, r2
 8006f48:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f56:	691a      	ldr	r2, [r3, #16]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f60:	69b9      	ldr	r1, [r7, #24]
 8006f62:	0148      	lsls	r0, r1, #5
 8006f64:	69f9      	ldr	r1, [r7, #28]
 8006f66:	4401      	add	r1, r0
 8006f68:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f70:	79fb      	ldrb	r3, [r7, #7]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d14b      	bne.n	800700e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d009      	beq.n	8006f92 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	69db      	ldr	r3, [r3, #28]
 8006f90:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	791b      	ldrb	r3, [r3, #4]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d128      	bne.n	8006fec <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d110      	bne.n	8006fcc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	0151      	lsls	r1, r2, #5
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	440a      	add	r2, r1
 8006fc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fc4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006fc8:	6013      	str	r3, [r2, #0]
 8006fca:	e00f      	b.n	8006fec <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	0151      	lsls	r1, r2, #5
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	440a      	add	r2, r1
 8006fe2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fe6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fea:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	0151      	lsls	r1, r2, #5
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	440a      	add	r2, r1
 8007002:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007006:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	e166      	b.n	80072dc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	0151      	lsls	r1, r2, #5
 8007020:	69fa      	ldr	r2, [r7, #28]
 8007022:	440a      	add	r2, r1
 8007024:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007028:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800702c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	791b      	ldrb	r3, [r3, #4]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d015      	beq.n	8007062 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 814e 	beq.w	80072dc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007046:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	f003 030f 	and.w	r3, r3, #15
 8007050:	2101      	movs	r1, #1
 8007052:	fa01 f303 	lsl.w	r3, r1, r3
 8007056:	69f9      	ldr	r1, [r7, #28]
 8007058:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800705c:	4313      	orrs	r3, r2
 800705e:	634b      	str	r3, [r1, #52]	@ 0x34
 8007060:	e13c      	b.n	80072dc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800706e:	2b00      	cmp	r3, #0
 8007070:	d110      	bne.n	8007094 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	0151      	lsls	r1, r2, #5
 8007084:	69fa      	ldr	r2, [r7, #28]
 8007086:	440a      	add	r2, r1
 8007088:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800708c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	e00f      	b.n	80070b4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	0151      	lsls	r1, r2, #5
 80070a6:	69fa      	ldr	r2, [r7, #28]
 80070a8:	440a      	add	r2, r1
 80070aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070b2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	68d9      	ldr	r1, [r3, #12]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	781a      	ldrb	r2, [r3, #0]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	b298      	uxth	r0, r3
 80070c2:	79fb      	ldrb	r3, [r7, #7]
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	4603      	mov	r3, r0
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 f9b9 	bl	8007440 <USB_WritePacket>
 80070ce:	e105      	b.n	80072dc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	0151      	lsls	r1, r2, #5
 80070e2:	69fa      	ldr	r2, [r7, #28]
 80070e4:	440a      	add	r2, r1
 80070e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070ea:	0cdb      	lsrs	r3, r3, #19
 80070ec:	04db      	lsls	r3, r3, #19
 80070ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	0151      	lsls	r1, r2, #5
 8007102:	69fa      	ldr	r2, [r7, #28]
 8007104:	440a      	add	r2, r1
 8007106:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800710a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800710e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007112:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d132      	bne.n	8007180 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	689a      	ldr	r2, [r3, #8]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	689a      	ldr	r2, [r3, #8]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	4413      	add	r3, r2
 800713a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800713e:	691a      	ldr	r2, [r3, #16]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007148:	69b9      	ldr	r1, [r7, #24]
 800714a:	0148      	lsls	r0, r1, #5
 800714c:	69f9      	ldr	r1, [r7, #28]
 800714e:	4401      	add	r1, r0
 8007150:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007154:	4313      	orrs	r3, r2
 8007156:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	69ba      	ldr	r2, [r7, #24]
 8007168:	0151      	lsls	r1, r2, #5
 800716a:	69fa      	ldr	r2, [r7, #28]
 800716c:	440a      	add	r2, r1
 800716e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007172:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007176:	6113      	str	r3, [r2, #16]
 8007178:	e062      	b.n	8007240 <USB_EPStartXfer+0x490>
 800717a:	bf00      	nop
 800717c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d123      	bne.n	80071d0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	4413      	add	r3, r2
 8007190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007194:	691a      	ldr	r2, [r3, #16]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800719e:	69b9      	ldr	r1, [r7, #24]
 80071a0:	0148      	lsls	r0, r1, #5
 80071a2:	69f9      	ldr	r1, [r7, #28]
 80071a4:	4401      	add	r1, r0
 80071a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80071aa:	4313      	orrs	r3, r2
 80071ac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	0151      	lsls	r1, r2, #5
 80071c0:	69fa      	ldr	r2, [r7, #28]
 80071c2:	440a      	add	r2, r1
 80071c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80071cc:	6113      	str	r3, [r2, #16]
 80071ce:	e037      	b.n	8007240 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	691a      	ldr	r2, [r3, #16]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	4413      	add	r3, r2
 80071da:	1e5a      	subs	r2, r3, #1
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	8afa      	ldrh	r2, [r7, #22]
 80071ec:	fb03 f202 	mul.w	r2, r3, r2
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007200:	691a      	ldr	r2, [r3, #16]
 8007202:	8afb      	ldrh	r3, [r7, #22]
 8007204:	04d9      	lsls	r1, r3, #19
 8007206:	4b38      	ldr	r3, [pc, #224]	@ (80072e8 <USB_EPStartXfer+0x538>)
 8007208:	400b      	ands	r3, r1
 800720a:	69b9      	ldr	r1, [r7, #24]
 800720c:	0148      	lsls	r0, r1, #5
 800720e:	69f9      	ldr	r1, [r7, #28]
 8007210:	4401      	add	r1, r0
 8007212:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007216:	4313      	orrs	r3, r2
 8007218:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	015a      	lsls	r2, r3, #5
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	4413      	add	r3, r2
 8007222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007226:	691a      	ldr	r2, [r3, #16]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	6a1b      	ldr	r3, [r3, #32]
 800722c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007230:	69b9      	ldr	r1, [r7, #24]
 8007232:	0148      	lsls	r0, r1, #5
 8007234:	69f9      	ldr	r1, [r7, #28]
 8007236:	4401      	add	r1, r0
 8007238:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800723c:	4313      	orrs	r3, r2
 800723e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007240:	79fb      	ldrb	r3, [r7, #7]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d10d      	bne.n	8007262 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d009      	beq.n	8007262 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	68d9      	ldr	r1, [r3, #12]
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	4413      	add	r3, r2
 800725a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800725e:	460a      	mov	r2, r1
 8007260:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	791b      	ldrb	r3, [r3, #4]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d128      	bne.n	80072bc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007276:	2b00      	cmp	r3, #0
 8007278:	d110      	bne.n	800729c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	0151      	lsls	r1, r2, #5
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	440a      	add	r2, r1
 8007290:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007294:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007298:	6013      	str	r3, [r2, #0]
 800729a:	e00f      	b.n	80072bc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	69ba      	ldr	r2, [r7, #24]
 80072ac:	0151      	lsls	r1, r2, #5
 80072ae:	69fa      	ldr	r2, [r7, #28]
 80072b0:	440a      	add	r2, r1
 80072b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69ba      	ldr	r2, [r7, #24]
 80072cc:	0151      	lsls	r1, r2, #5
 80072ce:	69fa      	ldr	r2, [r7, #28]
 80072d0:	440a      	add	r2, r1
 80072d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072d6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80072da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3720      	adds	r7, #32
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	1ff80000 	.word	0x1ff80000

080072ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	785b      	ldrb	r3, [r3, #1]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d14a      	bne.n	80073a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800731e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007322:	f040 8086 	bne.w	8007432 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	4413      	add	r3, r2
 8007330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	7812      	ldrb	r2, [r2, #0]
 800733a:	0151      	lsls	r1, r2, #5
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	440a      	add	r2, r1
 8007340:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007344:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007348:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	4413      	add	r3, r2
 8007354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	7812      	ldrb	r2, [r2, #0]
 800735e:	0151      	lsls	r1, r2, #5
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	440a      	add	r2, r1
 8007364:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007368:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800736c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3301      	adds	r3, #1
 8007372:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f242 7210 	movw	r2, #10000	@ 0x2710
 800737a:	4293      	cmp	r3, r2
 800737c:	d902      	bls.n	8007384 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	75fb      	strb	r3, [r7, #23]
          break;
 8007382:	e056      	b.n	8007432 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	015a      	lsls	r2, r3, #5
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	4413      	add	r3, r2
 800738e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007398:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800739c:	d0e7      	beq.n	800736e <USB_EPStopXfer+0x82>
 800739e:	e048      	b.n	8007432 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073b8:	d13b      	bne.n	8007432 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	7812      	ldrb	r2, [r2, #0]
 80073ce:	0151      	lsls	r1, r2, #5
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	440a      	add	r2, r1
 80073d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80073dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	7812      	ldrb	r2, [r2, #0]
 80073f2:	0151      	lsls	r1, r2, #5
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	440a      	add	r2, r1
 80073f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007400:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3301      	adds	r3, #1
 8007406:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800740e:	4293      	cmp	r3, r2
 8007410:	d902      	bls.n	8007418 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	75fb      	strb	r3, [r7, #23]
          break;
 8007416:	e00c      	b.n	8007432 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800742c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007430:	d0e7      	beq.n	8007402 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007432:	7dfb      	ldrb	r3, [r7, #23]
}
 8007434:	4618      	mov	r0, r3
 8007436:	371c      	adds	r7, #28
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007440:	b480      	push	{r7}
 8007442:	b089      	sub	sp, #36	@ 0x24
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	4611      	mov	r1, r2
 800744c:	461a      	mov	r2, r3
 800744e:	460b      	mov	r3, r1
 8007450:	71fb      	strb	r3, [r7, #7]
 8007452:	4613      	mov	r3, r2
 8007454:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800745e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007462:	2b00      	cmp	r3, #0
 8007464:	d123      	bne.n	80074ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007466:	88bb      	ldrh	r3, [r7, #4]
 8007468:	3303      	adds	r3, #3
 800746a:	089b      	lsrs	r3, r3, #2
 800746c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800746e:	2300      	movs	r3, #0
 8007470:	61bb      	str	r3, [r7, #24]
 8007472:	e018      	b.n	80074a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007474:	79fb      	ldrb	r3, [r7, #7]
 8007476:	031a      	lsls	r2, r3, #12
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	4413      	add	r3, r2
 800747c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007480:	461a      	mov	r2, r3
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	3301      	adds	r3, #1
 800748c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	3301      	adds	r3, #1
 8007492:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	3301      	adds	r3, #1
 8007498:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	3301      	adds	r3, #1
 800749e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	3301      	adds	r3, #1
 80074a4:	61bb      	str	r3, [r7, #24]
 80074a6:	69ba      	ldr	r2, [r7, #24]
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d3e2      	bcc.n	8007474 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3724      	adds	r7, #36	@ 0x24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80074bc:	b480      	push	{r7}
 80074be:	b08b      	sub	sp, #44	@ 0x2c
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	4613      	mov	r3, r2
 80074c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80074d2:	88fb      	ldrh	r3, [r7, #6]
 80074d4:	089b      	lsrs	r3, r3, #2
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80074da:	88fb      	ldrh	r3, [r7, #6]
 80074dc:	f003 0303 	and.w	r3, r3, #3
 80074e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80074e2:	2300      	movs	r3, #0
 80074e4:	623b      	str	r3, [r7, #32]
 80074e6:	e014      	b.n	8007512 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80074f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f6:	3301      	adds	r3, #1
 80074f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80074fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fc:	3301      	adds	r3, #1
 80074fe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007502:	3301      	adds	r3, #1
 8007504:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007508:	3301      	adds	r3, #1
 800750a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	3301      	adds	r3, #1
 8007510:	623b      	str	r3, [r7, #32]
 8007512:	6a3a      	ldr	r2, [r7, #32]
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	429a      	cmp	r2, r3
 8007518:	d3e6      	bcc.n	80074e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800751a:	8bfb      	ldrh	r3, [r7, #30]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d01e      	beq.n	800755e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007520:	2300      	movs	r3, #0
 8007522:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800752a:	461a      	mov	r2, r3
 800752c:	f107 0310 	add.w	r3, r7, #16
 8007530:	6812      	ldr	r2, [r2, #0]
 8007532:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	b2db      	uxtb	r3, r3
 800753a:	00db      	lsls	r3, r3, #3
 800753c:	fa22 f303 	lsr.w	r3, r2, r3
 8007540:	b2da      	uxtb	r2, r3
 8007542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007544:	701a      	strb	r2, [r3, #0]
      i++;
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	3301      	adds	r3, #1
 800754a:	623b      	str	r3, [r7, #32]
      pDest++;
 800754c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754e:	3301      	adds	r3, #1
 8007550:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007552:	8bfb      	ldrh	r3, [r7, #30]
 8007554:	3b01      	subs	r3, #1
 8007556:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007558:	8bfb      	ldrh	r3, [r7, #30]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1ea      	bne.n	8007534 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800755e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007560:	4618      	mov	r0, r3
 8007562:	372c      	adds	r7, #44	@ 0x2c
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	785b      	ldrb	r3, [r3, #1]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d12c      	bne.n	80075e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4413      	add	r3, r2
 8007590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	db12      	blt.n	80075c0 <USB_EPSetStall+0x54>
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00f      	beq.n	80075c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	0151      	lsls	r1, r2, #5
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	440a      	add	r2, r1
 80075b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80075be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	0151      	lsls	r1, r2, #5
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	440a      	add	r2, r1
 80075d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	e02b      	b.n	800763a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	db12      	blt.n	800761a <USB_EPSetStall+0xae>
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00f      	beq.n	800761a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	4413      	add	r3, r2
 8007602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	0151      	lsls	r1, r2, #5
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	440a      	add	r2, r1
 8007610:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007614:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007618:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	0151      	lsls	r1, r2, #5
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	440a      	add	r2, r1
 8007630:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007634:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007638:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	785b      	ldrb	r3, [r3, #1]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d128      	bne.n	80076b6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	0151      	lsls	r1, r2, #5
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	440a      	add	r2, r1
 800767a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800767e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007682:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	791b      	ldrb	r3, [r3, #4]
 8007688:	2b03      	cmp	r3, #3
 800768a:	d003      	beq.n	8007694 <USB_EPClearStall+0x4c>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	791b      	ldrb	r3, [r3, #4]
 8007690:	2b02      	cmp	r3, #2
 8007692:	d138      	bne.n	8007706 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	4413      	add	r3, r2
 800769c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	0151      	lsls	r1, r2, #5
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	440a      	add	r2, r1
 80076aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076b2:	6013      	str	r3, [r2, #0]
 80076b4:	e027      	b.n	8007706 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	0151      	lsls	r1, r2, #5
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	440a      	add	r2, r1
 80076cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076d0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	791b      	ldrb	r3, [r3, #4]
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d003      	beq.n	80076e6 <USB_EPClearStall+0x9e>
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	791b      	ldrb	r3, [r3, #4]
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d10f      	bne.n	8007706 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	0151      	lsls	r1, r2, #5
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	440a      	add	r2, r1
 80076fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007704:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007732:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007736:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	78fb      	ldrb	r3, [r7, #3]
 8007742:	011b      	lsls	r3, r3, #4
 8007744:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007748:	68f9      	ldr	r1, [r7, #12]
 800774a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800774e:	4313      	orrs	r3, r2
 8007750:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800777a:	f023 0303 	bic.w	r3, r3, #3
 800777e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800778e:	f023 0302 	bic.w	r3, r3, #2
 8007792:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b085      	sub	sp, #20
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80077bc:	f023 0303 	bic.w	r3, r3, #3
 80077c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077d0:	f043 0302 	orr.w	r3, r3, #2
 80077d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	4013      	ands	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80077fc:	68fb      	ldr	r3, [r7, #12]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3714      	adds	r7, #20
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800780a:	b480      	push	{r7}
 800780c:	b085      	sub	sp, #20
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007826:	69db      	ldr	r3, [r3, #28]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	4013      	ands	r3, r2
 800782c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	0c1b      	lsrs	r3, r3, #16
}
 8007832:	4618      	mov	r0, r3
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800783e:	b480      	push	{r7}
 8007840:	b085      	sub	sp, #20
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800785a:	69db      	ldr	r3, [r3, #28]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	4013      	ands	r3, r2
 8007860:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	b29b      	uxth	r3, r3
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007872:	b480      	push	{r7}
 8007874:	b085      	sub	sp, #20
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	460b      	mov	r3, r1
 800787c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007882:	78fb      	ldrb	r3, [r7, #3]
 8007884:	015a      	lsls	r2, r3, #5
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	4413      	add	r3, r2
 800788a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	4013      	ands	r3, r2
 800789e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078a0:	68bb      	ldr	r3, [r7, #8]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b087      	sub	sp, #28
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	460b      	mov	r3, r1
 80078b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80078d2:	78fb      	ldrb	r3, [r7, #3]
 80078d4:	f003 030f 	and.w	r3, r3, #15
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	fa22 f303 	lsr.w	r3, r2, r3
 80078de:	01db      	lsls	r3, r3, #7
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80078e8:	78fb      	ldrb	r3, [r7, #3]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	4013      	ands	r3, r2
 80078fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078fc:	68bb      	ldr	r3, [r7, #8]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	371c      	adds	r7, #28
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800790a:	b480      	push	{r7}
 800790c:	b083      	sub	sp, #12
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	f003 0301 	and.w	r3, r3, #1
}
 800791a:	4618      	mov	r0, r3
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007926:	b480      	push	{r7}
 8007928:	b085      	sub	sp, #20
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007940:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007944:	f023 0307 	bic.w	r3, r3, #7
 8007948:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800795c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800796c:	b480      	push	{r7}
 800796e:	b087      	sub	sp, #28
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	460b      	mov	r3, r1
 8007976:	607a      	str	r2, [r7, #4]
 8007978:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	333c      	adds	r3, #60	@ 0x3c
 8007982:	3304      	adds	r3, #4
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	4a26      	ldr	r2, [pc, #152]	@ (8007a24 <USB_EP0_OutStart+0xb8>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d90a      	bls.n	80079a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800799c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079a0:	d101      	bne.n	80079a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	e037      	b.n	8007a16 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ac:	461a      	mov	r2, r3
 80079ae:	2300      	movs	r3, #0
 80079b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80079c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079d4:	f043 0318 	orr.w	r3, r3, #24
 80079d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079e8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80079ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80079ee:	7afb      	ldrb	r3, [r7, #11]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d10f      	bne.n	8007a14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079fa:	461a      	mov	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a0e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007a12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	371c      	adds	r7, #28
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	4f54300a 	.word	0x4f54300a

08007a28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	3301      	adds	r3, #1
 8007a38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a40:	d901      	bls.n	8007a46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e01b      	b.n	8007a7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	daf2      	bge.n	8007a34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	f043 0201 	orr.w	r2, r3, #1
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	3301      	adds	r3, #1
 8007a62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a6a:	d901      	bls.n	8007a70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e006      	b.n	8007a7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d0f0      	beq.n	8007a5e <USB_CoreReset+0x36>

  return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
	...

08007a8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007a90:	4904      	ldr	r1, [pc, #16]	@ (8007aa4 <MX_FATFS_Init+0x18>)
 8007a92:	4805      	ldr	r0, [pc, #20]	@ (8007aa8 <MX_FATFS_Init+0x1c>)
 8007a94:	f004 f9e4 	bl	800be60 <FATFS_LinkDriver>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	4b03      	ldr	r3, [pc, #12]	@ (8007aac <MX_FATFS_Init+0x20>)
 8007a9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007aa0:	bf00      	nop
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	2000089c 	.word	0x2000089c
 8007aa8:	2000000c 	.word	0x2000000c
 8007aac:	20000898 	.word	0x20000898

08007ab0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007ab4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8007aca:	4b06      	ldr	r3, [pc, #24]	@ (8007ae4 <USER_initialize+0x24>)
 8007acc:	2201      	movs	r2, #1
 8007ace:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007ad0:	4b04      	ldr	r3, [pc, #16]	@ (8007ae4 <USER_initialize+0x24>)
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	20000009 	.word	0x20000009

08007ae8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	4603      	mov	r3, r0
 8007af0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8007af2:	4b06      	ldr	r3, [pc, #24]	@ (8007b0c <USER_status+0x24>)
 8007af4:	2201      	movs	r2, #1
 8007af6:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007af8:	4b04      	ldr	r3, [pc, #16]	@ (8007b0c <USER_status+0x24>)
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	20000009 	.word	0x20000009

08007b10 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60b9      	str	r1, [r7, #8]
 8007b18:	607a      	str	r2, [r7, #4]
 8007b1a:	603b      	str	r3, [r7, #0]
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8007b20:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b085      	sub	sp, #20
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
 8007b38:	603b      	str	r3, [r7, #0]
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8007b3e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	4603      	mov	r3, r0
 8007b54:	603a      	str	r2, [r7, #0]
 8007b56:	71fb      	strb	r3, [r7, #7]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	73fb      	strb	r3, [r7, #15]
    return res;
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
	...

08007b70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b7c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007b80:	f004 fe62 	bl	800c848 <USBD_static_malloc>
 8007b84:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d109      	bne.n	8007ba0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	32b0      	adds	r2, #176	@ 0xb0
 8007b96:	2100      	movs	r1, #0
 8007b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	e0d4      	b.n	8007d4a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007ba0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f005 f8d0 	bl	800cd4c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	32b0      	adds	r2, #176	@ 0xb0
 8007bb6:	68f9      	ldr	r1, [r7, #12]
 8007bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	32b0      	adds	r2, #176	@ 0xb0
 8007bc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	7c1b      	ldrb	r3, [r3, #16]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d138      	bne.n	8007c4a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007bd8:	4b5e      	ldr	r3, [pc, #376]	@ (8007d54 <USBD_CDC_Init+0x1e4>)
 8007bda:	7819      	ldrb	r1, [r3, #0]
 8007bdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007be0:	2202      	movs	r2, #2
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f004 fd0d 	bl	800c602 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007be8:	4b5a      	ldr	r3, [pc, #360]	@ (8007d54 <USBD_CDC_Init+0x1e4>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	f003 020f 	and.w	r2, r3, #15
 8007bf0:	6879      	ldr	r1, [r7, #4]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	440b      	add	r3, r1
 8007bfc:	3324      	adds	r3, #36	@ 0x24
 8007bfe:	2201      	movs	r2, #1
 8007c00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c02:	4b55      	ldr	r3, [pc, #340]	@ (8007d58 <USBD_CDC_Init+0x1e8>)
 8007c04:	7819      	ldrb	r1, [r3, #0]
 8007c06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f004 fcf8 	bl	800c602 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c12:	4b51      	ldr	r3, [pc, #324]	@ (8007d58 <USBD_CDC_Init+0x1e8>)
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	f003 020f 	and.w	r2, r3, #15
 8007c1a:	6879      	ldr	r1, [r7, #4]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	440b      	add	r3, r1
 8007c26:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007c2e:	4b4b      	ldr	r3, [pc, #300]	@ (8007d5c <USBD_CDC_Init+0x1ec>)
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	f003 020f 	and.w	r2, r3, #15
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	440b      	add	r3, r1
 8007c42:	3326      	adds	r3, #38	@ 0x26
 8007c44:	2210      	movs	r2, #16
 8007c46:	801a      	strh	r2, [r3, #0]
 8007c48:	e035      	b.n	8007cb6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007c4a:	4b42      	ldr	r3, [pc, #264]	@ (8007d54 <USBD_CDC_Init+0x1e4>)
 8007c4c:	7819      	ldrb	r1, [r3, #0]
 8007c4e:	2340      	movs	r3, #64	@ 0x40
 8007c50:	2202      	movs	r2, #2
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f004 fcd5 	bl	800c602 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007c58:	4b3e      	ldr	r3, [pc, #248]	@ (8007d54 <USBD_CDC_Init+0x1e4>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	f003 020f 	and.w	r2, r3, #15
 8007c60:	6879      	ldr	r1, [r7, #4]
 8007c62:	4613      	mov	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	440b      	add	r3, r1
 8007c6c:	3324      	adds	r3, #36	@ 0x24
 8007c6e:	2201      	movs	r2, #1
 8007c70:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c72:	4b39      	ldr	r3, [pc, #228]	@ (8007d58 <USBD_CDC_Init+0x1e8>)
 8007c74:	7819      	ldrb	r1, [r3, #0]
 8007c76:	2340      	movs	r3, #64	@ 0x40
 8007c78:	2202      	movs	r2, #2
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f004 fcc1 	bl	800c602 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c80:	4b35      	ldr	r3, [pc, #212]	@ (8007d58 <USBD_CDC_Init+0x1e8>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	f003 020f 	and.w	r2, r3, #15
 8007c88:	6879      	ldr	r1, [r7, #4]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	440b      	add	r3, r1
 8007c94:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c98:	2201      	movs	r2, #1
 8007c9a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8007d5c <USBD_CDC_Init+0x1ec>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	f003 020f 	and.w	r2, r3, #15
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	440b      	add	r3, r1
 8007cb0:	3326      	adds	r3, #38	@ 0x26
 8007cb2:	2210      	movs	r2, #16
 8007cb4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007cb6:	4b29      	ldr	r3, [pc, #164]	@ (8007d5c <USBD_CDC_Init+0x1ec>)
 8007cb8:	7819      	ldrb	r1, [r3, #0]
 8007cba:	2308      	movs	r3, #8
 8007cbc:	2203      	movs	r2, #3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f004 fc9f 	bl	800c602 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007cc4:	4b25      	ldr	r3, [pc, #148]	@ (8007d5c <USBD_CDC_Init+0x1ec>)
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	f003 020f 	and.w	r2, r3, #15
 8007ccc:	6879      	ldr	r1, [r7, #4]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	4413      	add	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	440b      	add	r3, r1
 8007cd8:	3324      	adds	r3, #36	@ 0x24
 8007cda:	2201      	movs	r2, #1
 8007cdc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	33b0      	adds	r3, #176	@ 0xb0
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007d14:	2302      	movs	r3, #2
 8007d16:	e018      	b.n	8007d4a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	7c1b      	ldrb	r3, [r3, #16]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10a      	bne.n	8007d36 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d20:	4b0d      	ldr	r3, [pc, #52]	@ (8007d58 <USBD_CDC_Init+0x1e8>)
 8007d22:	7819      	ldrb	r1, [r3, #0]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f004 fd56 	bl	800c7e0 <USBD_LL_PrepareReceive>
 8007d34:	e008      	b.n	8007d48 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d36:	4b08      	ldr	r3, [pc, #32]	@ (8007d58 <USBD_CDC_Init+0x1e8>)
 8007d38:	7819      	ldrb	r1, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d40:	2340      	movs	r3, #64	@ 0x40
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f004 fd4c 	bl	800c7e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	200000a7 	.word	0x200000a7
 8007d58:	200000a8 	.word	0x200000a8
 8007d5c:	200000a9 	.word	0x200000a9

08007d60 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007d6c:	4b3a      	ldr	r3, [pc, #232]	@ (8007e58 <USBD_CDC_DeInit+0xf8>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f004 fc6b 	bl	800c64e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007d78:	4b37      	ldr	r3, [pc, #220]	@ (8007e58 <USBD_CDC_DeInit+0xf8>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	f003 020f 	and.w	r2, r3, #15
 8007d80:	6879      	ldr	r1, [r7, #4]
 8007d82:	4613      	mov	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4413      	add	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	440b      	add	r3, r1
 8007d8c:	3324      	adds	r3, #36	@ 0x24
 8007d8e:	2200      	movs	r2, #0
 8007d90:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007d92:	4b32      	ldr	r3, [pc, #200]	@ (8007e5c <USBD_CDC_DeInit+0xfc>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f004 fc58 	bl	800c64e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8007e5c <USBD_CDC_DeInit+0xfc>)
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	f003 020f 	and.w	r2, r3, #15
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	4613      	mov	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	440b      	add	r3, r1
 8007db2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007db6:	2200      	movs	r2, #0
 8007db8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007dba:	4b29      	ldr	r3, [pc, #164]	@ (8007e60 <USBD_CDC_DeInit+0x100>)
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f004 fc44 	bl	800c64e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007dc6:	4b26      	ldr	r3, [pc, #152]	@ (8007e60 <USBD_CDC_DeInit+0x100>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	f003 020f 	and.w	r2, r3, #15
 8007dce:	6879      	ldr	r1, [r7, #4]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	440b      	add	r3, r1
 8007dda:	3324      	adds	r3, #36	@ 0x24
 8007ddc:	2200      	movs	r2, #0
 8007dde:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007de0:	4b1f      	ldr	r3, [pc, #124]	@ (8007e60 <USBD_CDC_DeInit+0x100>)
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	f003 020f 	and.w	r2, r3, #15
 8007de8:	6879      	ldr	r1, [r7, #4]
 8007dea:	4613      	mov	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	440b      	add	r3, r1
 8007df4:	3326      	adds	r3, #38	@ 0x26
 8007df6:	2200      	movs	r2, #0
 8007df8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	32b0      	adds	r2, #176	@ 0xb0
 8007e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01f      	beq.n	8007e4c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	33b0      	adds	r3, #176	@ 0xb0
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	32b0      	adds	r2, #176	@ 0xb0
 8007e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f004 fd18 	bl	800c864 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	32b0      	adds	r2, #176	@ 0xb0
 8007e3e:	2100      	movs	r1, #0
 8007e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	200000a7 	.word	0x200000a7
 8007e5c:	200000a8 	.word	0x200000a8
 8007e60:	200000a9 	.word	0x200000a9

08007e64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	32b0      	adds	r2, #176	@ 0xb0
 8007e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e0bf      	b.n	8008014 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d050      	beq.n	8007f42 <USBD_CDC_Setup+0xde>
 8007ea0:	2b20      	cmp	r3, #32
 8007ea2:	f040 80af 	bne.w	8008004 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	88db      	ldrh	r3, [r3, #6]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d03a      	beq.n	8007f24 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	b25b      	sxtb	r3, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	da1b      	bge.n	8007ef0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	33b0      	adds	r3, #176	@ 0xb0
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007ece:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ed0:	683a      	ldr	r2, [r7, #0]
 8007ed2:	88d2      	ldrh	r2, [r2, #6]
 8007ed4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	88db      	ldrh	r3, [r3, #6]
 8007eda:	2b07      	cmp	r3, #7
 8007edc:	bf28      	it	cs
 8007ede:	2307      	movcs	r3, #7
 8007ee0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	89fa      	ldrh	r2, [r7, #14]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f001 fd93 	bl	8009a14 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007eee:	e090      	b.n	8008012 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	785a      	ldrb	r2, [r3, #1]
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	88db      	ldrh	r3, [r3, #6]
 8007efe:	2b3f      	cmp	r3, #63	@ 0x3f
 8007f00:	d803      	bhi.n	8007f0a <USBD_CDC_Setup+0xa6>
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	88db      	ldrh	r3, [r3, #6]
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	e000      	b.n	8007f0c <USBD_CDC_Setup+0xa8>
 8007f0a:	2240      	movs	r2, #64	@ 0x40
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007f12:	6939      	ldr	r1, [r7, #16]
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f001 fda5 	bl	8009a6c <USBD_CtlPrepareRx>
      break;
 8007f22:	e076      	b.n	8008012 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	33b0      	adds	r3, #176	@ 0xb0
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	7850      	ldrb	r0, [r2, #1]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	4798      	blx	r3
      break;
 8007f40:	e067      	b.n	8008012 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	785b      	ldrb	r3, [r3, #1]
 8007f46:	2b0b      	cmp	r3, #11
 8007f48:	d851      	bhi.n	8007fee <USBD_CDC_Setup+0x18a>
 8007f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f50 <USBD_CDC_Setup+0xec>)
 8007f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f50:	08007f81 	.word	0x08007f81
 8007f54:	08007ffd 	.word	0x08007ffd
 8007f58:	08007fef 	.word	0x08007fef
 8007f5c:	08007fef 	.word	0x08007fef
 8007f60:	08007fef 	.word	0x08007fef
 8007f64:	08007fef 	.word	0x08007fef
 8007f68:	08007fef 	.word	0x08007fef
 8007f6c:	08007fef 	.word	0x08007fef
 8007f70:	08007fef 	.word	0x08007fef
 8007f74:	08007fef 	.word	0x08007fef
 8007f78:	08007fab 	.word	0x08007fab
 8007f7c:	08007fd5 	.word	0x08007fd5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d107      	bne.n	8007f9c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f8c:	f107 030a 	add.w	r3, r7, #10
 8007f90:	2202      	movs	r2, #2
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f001 fd3d 	bl	8009a14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f9a:	e032      	b.n	8008002 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 fcbb 	bl	800991a <USBD_CtlError>
            ret = USBD_FAIL;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	75fb      	strb	r3, [r7, #23]
          break;
 8007fa8:	e02b      	b.n	8008002 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	d107      	bne.n	8007fc6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007fb6:	f107 030d 	add.w	r3, r7, #13
 8007fba:	2201      	movs	r2, #1
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f001 fd28 	bl	8009a14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fc4:	e01d      	b.n	8008002 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f001 fca6 	bl	800991a <USBD_CtlError>
            ret = USBD_FAIL;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	75fb      	strb	r3, [r7, #23]
          break;
 8007fd2:	e016      	b.n	8008002 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b03      	cmp	r3, #3
 8007fde:	d00f      	beq.n	8008000 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f001 fc99 	bl	800991a <USBD_CtlError>
            ret = USBD_FAIL;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007fec:	e008      	b.n	8008000 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f001 fc92 	bl	800991a <USBD_CtlError>
          ret = USBD_FAIL;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	75fb      	strb	r3, [r7, #23]
          break;
 8007ffa:	e002      	b.n	8008002 <USBD_CDC_Setup+0x19e>
          break;
 8007ffc:	bf00      	nop
 8007ffe:	e008      	b.n	8008012 <USBD_CDC_Setup+0x1ae>
          break;
 8008000:	bf00      	nop
      }
      break;
 8008002:	e006      	b.n	8008012 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008004:	6839      	ldr	r1, [r7, #0]
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f001 fc87 	bl	800991a <USBD_CtlError>
      ret = USBD_FAIL;
 800800c:	2303      	movs	r3, #3
 800800e:	75fb      	strb	r3, [r7, #23]
      break;
 8008010:	bf00      	nop
  }

  return (uint8_t)ret;
 8008012:	7dfb      	ldrb	r3, [r7, #23]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800802e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	32b0      	adds	r2, #176	@ 0xb0
 800803a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008042:	2303      	movs	r3, #3
 8008044:	e065      	b.n	8008112 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	32b0      	adds	r2, #176	@ 0xb0
 8008050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008054:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008056:	78fb      	ldrb	r3, [r7, #3]
 8008058:	f003 020f 	and.w	r2, r3, #15
 800805c:	6879      	ldr	r1, [r7, #4]
 800805e:	4613      	mov	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4413      	add	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	440b      	add	r3, r1
 8008068:	3318      	adds	r3, #24
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d02f      	beq.n	80080d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	f003 020f 	and.w	r2, r3, #15
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	4613      	mov	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	440b      	add	r3, r1
 8008082:	3318      	adds	r3, #24
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	78fb      	ldrb	r3, [r7, #3]
 8008088:	f003 010f 	and.w	r1, r3, #15
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	460b      	mov	r3, r1
 8008090:	00db      	lsls	r3, r3, #3
 8008092:	440b      	add	r3, r1
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4403      	add	r3, r0
 8008098:	331c      	adds	r3, #28
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	fbb2 f1f3 	udiv	r1, r2, r3
 80080a0:	fb01 f303 	mul.w	r3, r1, r3
 80080a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d112      	bne.n	80080d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80080aa:	78fb      	ldrb	r3, [r7, #3]
 80080ac:	f003 020f 	and.w	r2, r3, #15
 80080b0:	6879      	ldr	r1, [r7, #4]
 80080b2:	4613      	mov	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	440b      	add	r3, r1
 80080bc:	3318      	adds	r3, #24
 80080be:	2200      	movs	r2, #0
 80080c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80080c2:	78f9      	ldrb	r1, [r7, #3]
 80080c4:	2300      	movs	r3, #0
 80080c6:	2200      	movs	r2, #0
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f004 fb68 	bl	800c79e <USBD_LL_Transmit>
 80080ce:	e01f      	b.n	8008110 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	33b0      	adds	r3, #176	@ 0xb0
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d010      	beq.n	8008110 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	33b0      	adds	r3, #176	@ 0xb0
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800810c:	78fa      	ldrb	r2, [r7, #3]
 800810e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b084      	sub	sp, #16
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	460b      	mov	r3, r1
 8008124:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	32b0      	adds	r2, #176	@ 0xb0
 8008130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008134:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	32b0      	adds	r2, #176	@ 0xb0
 8008140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008148:	2303      	movs	r3, #3
 800814a:	e01a      	b.n	8008182 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800814c:	78fb      	ldrb	r3, [r7, #3]
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f004 fb66 	bl	800c822 <USBD_LL_GetRxDataSize>
 8008156:	4602      	mov	r2, r0
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	33b0      	adds	r3, #176	@ 0xb0
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800817c:	4611      	mov	r1, r2
 800817e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	32b0      	adds	r2, #176	@ 0xb0
 800819c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e024      	b.n	80081f6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	33b0      	adds	r3, #176	@ 0xb0
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d019      	beq.n	80081f4 <USBD_CDC_EP0_RxReady+0x6a>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80081c6:	2bff      	cmp	r3, #255	@ 0xff
 80081c8:	d014      	beq.n	80081f4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	33b0      	adds	r3, #176	@ 0xb0
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80081e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80081ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	22ff      	movs	r2, #255	@ 0xff
 80081f0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008208:	2182      	movs	r1, #130	@ 0x82
 800820a:	4818      	ldr	r0, [pc, #96]	@ (800826c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800820c:	f000 fd4f 	bl	8008cae <USBD_GetEpDesc>
 8008210:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008212:	2101      	movs	r1, #1
 8008214:	4815      	ldr	r0, [pc, #84]	@ (800826c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008216:	f000 fd4a 	bl	8008cae <USBD_GetEpDesc>
 800821a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800821c:	2181      	movs	r1, #129	@ 0x81
 800821e:	4813      	ldr	r0, [pc, #76]	@ (800826c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008220:	f000 fd45 	bl	8008cae <USBD_GetEpDesc>
 8008224:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	2210      	movs	r2, #16
 8008230:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d006      	beq.n	8008246 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	2200      	movs	r2, #0
 800823c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008240:	711a      	strb	r2, [r3, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d006      	beq.n	800825a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008254:	711a      	strb	r2, [r3, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2243      	movs	r2, #67	@ 0x43
 800825e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008260:	4b02      	ldr	r3, [pc, #8]	@ (800826c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008262:	4618      	mov	r0, r3
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	20000064 	.word	0x20000064

08008270 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008278:	2182      	movs	r1, #130	@ 0x82
 800827a:	4818      	ldr	r0, [pc, #96]	@ (80082dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800827c:	f000 fd17 	bl	8008cae <USBD_GetEpDesc>
 8008280:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008282:	2101      	movs	r1, #1
 8008284:	4815      	ldr	r0, [pc, #84]	@ (80082dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008286:	f000 fd12 	bl	8008cae <USBD_GetEpDesc>
 800828a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800828c:	2181      	movs	r1, #129	@ 0x81
 800828e:	4813      	ldr	r0, [pc, #76]	@ (80082dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008290:	f000 fd0d 	bl	8008cae <USBD_GetEpDesc>
 8008294:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d002      	beq.n	80082a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	2210      	movs	r2, #16
 80082a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d006      	beq.n	80082b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	2200      	movs	r2, #0
 80082ac:	711a      	strb	r2, [r3, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f042 0202 	orr.w	r2, r2, #2
 80082b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d006      	beq.n	80082ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	711a      	strb	r2, [r3, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f042 0202 	orr.w	r2, r2, #2
 80082c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2243      	movs	r2, #67	@ 0x43
 80082ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082d0:	4b02      	ldr	r3, [pc, #8]	@ (80082dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3718      	adds	r7, #24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	20000064 	.word	0x20000064

080082e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80082e8:	2182      	movs	r1, #130	@ 0x82
 80082ea:	4818      	ldr	r0, [pc, #96]	@ (800834c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082ec:	f000 fcdf 	bl	8008cae <USBD_GetEpDesc>
 80082f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80082f2:	2101      	movs	r1, #1
 80082f4:	4815      	ldr	r0, [pc, #84]	@ (800834c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082f6:	f000 fcda 	bl	8008cae <USBD_GetEpDesc>
 80082fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80082fc:	2181      	movs	r1, #129	@ 0x81
 80082fe:	4813      	ldr	r0, [pc, #76]	@ (800834c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008300:	f000 fcd5 	bl	8008cae <USBD_GetEpDesc>
 8008304:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	2210      	movs	r2, #16
 8008310:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d006      	beq.n	8008326 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	2200      	movs	r2, #0
 800831c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008320:	711a      	strb	r2, [r3, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d006      	beq.n	800833a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008334:	711a      	strb	r2, [r3, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2243      	movs	r2, #67	@ 0x43
 800833e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008340:	4b02      	ldr	r3, [pc, #8]	@ (800834c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008342:	4618      	mov	r0, r3
 8008344:	3718      	adds	r7, #24
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	20000064 	.word	0x20000064

08008350 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	220a      	movs	r2, #10
 800835c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800835e:	4b03      	ldr	r3, [pc, #12]	@ (800836c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008360:	4618      	mov	r0, r3
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	20000020 	.word	0x20000020

08008370 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008380:	2303      	movs	r3, #3
 8008382:	e009      	b.n	8008398 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	33b0      	adds	r3, #176	@ 0xb0
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b087      	sub	sp, #28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	32b0      	adds	r2, #176	@ 0xb0
 80083ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083be:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d101      	bne.n	80083ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e008      	b.n	80083dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	371c      	adds	r7, #28
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	32b0      	adds	r2, #176	@ 0xb0
 80083fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008400:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008408:	2303      	movs	r3, #3
 800840a:	e004      	b.n	8008416 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3714      	adds	r7, #20
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
	...

08008424 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	32b0      	adds	r2, #176	@ 0xb0
 8008436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800843c:	2301      	movs	r3, #1
 800843e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d101      	bne.n	800844a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008446:	2303      	movs	r3, #3
 8008448:	e025      	b.n	8008496 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008450:	2b00      	cmp	r3, #0
 8008452:	d11f      	bne.n	8008494 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2201      	movs	r2, #1
 8008458:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800845c:	4b10      	ldr	r3, [pc, #64]	@ (80084a0 <USBD_CDC_TransmitPacket+0x7c>)
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	f003 020f 	and.w	r2, r3, #15
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	4613      	mov	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4403      	add	r3, r0
 8008476:	3318      	adds	r3, #24
 8008478:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800847a:	4b09      	ldr	r3, [pc, #36]	@ (80084a0 <USBD_CDC_TransmitPacket+0x7c>)
 800847c:	7819      	ldrb	r1, [r3, #0]
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f004 f987 	bl	800c79e <USBD_LL_Transmit>

    ret = USBD_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008494:	7bfb      	ldrb	r3, [r7, #15]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	200000a7 	.word	0x200000a7

080084a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	32b0      	adds	r2, #176	@ 0xb0
 80084b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	32b0      	adds	r2, #176	@ 0xb0
 80084c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e018      	b.n	8008504 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	7c1b      	ldrb	r3, [r3, #16]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10a      	bne.n	80084f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084da:	4b0c      	ldr	r3, [pc, #48]	@ (800850c <USBD_CDC_ReceivePacket+0x68>)
 80084dc:	7819      	ldrb	r1, [r3, #0]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80084e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f004 f979 	bl	800c7e0 <USBD_LL_PrepareReceive>
 80084ee:	e008      	b.n	8008502 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084f0:	4b06      	ldr	r3, [pc, #24]	@ (800850c <USBD_CDC_ReceivePacket+0x68>)
 80084f2:	7819      	ldrb	r1, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80084fa:	2340      	movs	r3, #64	@ 0x40
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f004 f96f 	bl	800c7e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	200000a8 	.word	0x200000a8

08008510 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	4613      	mov	r3, r2
 800851c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008524:	2303      	movs	r3, #3
 8008526:	e01f      	b.n	8008568 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d003      	beq.n	800854e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	79fa      	ldrb	r2, [r7, #7]
 800855a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f003 ffe9 	bl	800c534 <USBD_LL_Init>
 8008562:	4603      	mov	r3, r0
 8008564:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008566:	7dfb      	ldrb	r3, [r7, #23]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800857a:	2300      	movs	r3, #0
 800857c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008584:	2303      	movs	r3, #3
 8008586:	e025      	b.n	80085d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	32ae      	adds	r2, #174	@ 0xae
 800859a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00f      	beq.n	80085c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	32ae      	adds	r2, #174	@ 0xae
 80085ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b4:	f107 020e 	add.w	r2, r7, #14
 80085b8:	4610      	mov	r0, r2
 80085ba:	4798      	blx	r3
 80085bc:	4602      	mov	r2, r0
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80085ca:	1c5a      	adds	r2, r3, #1
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f003 fff1 	bl	800c5cc <USBD_LL_Start>
 80085ea:	4603      	mov	r3, r0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80085fe:	4618      	mov	r0, r3
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b084      	sub	sp, #16
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	460b      	mov	r3, r1
 8008614:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008620:	2b00      	cmp	r3, #0
 8008622:	d009      	beq.n	8008638 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	78fa      	ldrb	r2, [r7, #3]
 800862e:	4611      	mov	r1, r2
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	4798      	blx	r3
 8008634:	4603      	mov	r3, r0
 8008636:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008638:	7bfb      	ldrb	r3, [r7, #15]
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b084      	sub	sp, #16
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	460b      	mov	r3, r1
 800864c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	78fa      	ldrb	r2, [r7, #3]
 800865c:	4611      	mov	r1, r2
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	4798      	blx	r3
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008668:	2303      	movs	r3, #3
 800866a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800866c:	7bfb      	ldrb	r3, [r7, #15]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b084      	sub	sp, #16
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	4618      	mov	r0, r3
 800868a:	f001 f90c 	bl	80098a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800869c:	461a      	mov	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80086aa:	f003 031f 	and.w	r3, r3, #31
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d01a      	beq.n	80086e8 <USBD_LL_SetupStage+0x72>
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d822      	bhi.n	80086fc <USBD_LL_SetupStage+0x86>
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d002      	beq.n	80086c0 <USBD_LL_SetupStage+0x4a>
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d00a      	beq.n	80086d4 <USBD_LL_SetupStage+0x5e>
 80086be:	e01d      	b.n	80086fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fb63 	bl	8008d94 <USBD_StdDevReq>
 80086ce:	4603      	mov	r3, r0
 80086d0:	73fb      	strb	r3, [r7, #15]
      break;
 80086d2:	e020      	b.n	8008716 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fbcb 	bl	8008e78 <USBD_StdItfReq>
 80086e2:	4603      	mov	r3, r0
 80086e4:	73fb      	strb	r3, [r7, #15]
      break;
 80086e6:	e016      	b.n	8008716 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fc2d 	bl	8008f50 <USBD_StdEPReq>
 80086f6:	4603      	mov	r3, r0
 80086f8:	73fb      	strb	r3, [r7, #15]
      break;
 80086fa:	e00c      	b.n	8008716 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008702:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008706:	b2db      	uxtb	r3, r3
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f003 ffbe 	bl	800c68c <USBD_LL_StallEP>
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]
      break;
 8008714:	bf00      	nop
  }

  return ret;
 8008716:	7bfb      	ldrb	r3, [r7, #15]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	460b      	mov	r3, r1
 800872a:	607a      	str	r2, [r7, #4]
 800872c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008732:	7afb      	ldrb	r3, [r7, #11]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d16e      	bne.n	8008816 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800873e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008746:	2b03      	cmp	r3, #3
 8008748:	f040 8098 	bne.w	800887c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	689a      	ldr	r2, [r3, #8]
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	429a      	cmp	r2, r3
 8008756:	d913      	bls.n	8008780 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	689a      	ldr	r2, [r3, #8]
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	1ad2      	subs	r2, r2, r3
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	68da      	ldr	r2, [r3, #12]
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	4293      	cmp	r3, r2
 8008770:	bf28      	it	cs
 8008772:	4613      	movcs	r3, r2
 8008774:	461a      	mov	r2, r3
 8008776:	6879      	ldr	r1, [r7, #4]
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f001 f994 	bl	8009aa6 <USBD_CtlContinueRx>
 800877e:	e07d      	b.n	800887c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008786:	f003 031f 	and.w	r3, r3, #31
 800878a:	2b02      	cmp	r3, #2
 800878c:	d014      	beq.n	80087b8 <USBD_LL_DataOutStage+0x98>
 800878e:	2b02      	cmp	r3, #2
 8008790:	d81d      	bhi.n	80087ce <USBD_LL_DataOutStage+0xae>
 8008792:	2b00      	cmp	r3, #0
 8008794:	d002      	beq.n	800879c <USBD_LL_DataOutStage+0x7c>
 8008796:	2b01      	cmp	r3, #1
 8008798:	d003      	beq.n	80087a2 <USBD_LL_DataOutStage+0x82>
 800879a:	e018      	b.n	80087ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	75bb      	strb	r3, [r7, #22]
            break;
 80087a0:	e018      	b.n	80087d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	4619      	mov	r1, r3
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 fa64 	bl	8008c7a <USBD_CoreFindIF>
 80087b2:	4603      	mov	r3, r0
 80087b4:	75bb      	strb	r3, [r7, #22]
            break;
 80087b6:	e00d      	b.n	80087d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	4619      	mov	r1, r3
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 fa66 	bl	8008c94 <USBD_CoreFindEP>
 80087c8:	4603      	mov	r3, r0
 80087ca:	75bb      	strb	r3, [r7, #22]
            break;
 80087cc:	e002      	b.n	80087d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	75bb      	strb	r3, [r7, #22]
            break;
 80087d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80087d4:	7dbb      	ldrb	r3, [r7, #22]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d119      	bne.n	800880e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	2b03      	cmp	r3, #3
 80087e4:	d113      	bne.n	800880e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80087e6:	7dba      	ldrb	r2, [r7, #22]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	32ae      	adds	r2, #174	@ 0xae
 80087ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00b      	beq.n	800880e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80087f6:	7dba      	ldrb	r2, [r7, #22]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80087fe:	7dba      	ldrb	r2, [r7, #22]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	32ae      	adds	r2, #174	@ 0xae
 8008804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f001 f95a 	bl	8009ac8 <USBD_CtlSendStatus>
 8008814:	e032      	b.n	800887c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008816:	7afb      	ldrb	r3, [r7, #11]
 8008818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800881c:	b2db      	uxtb	r3, r3
 800881e:	4619      	mov	r1, r3
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f000 fa37 	bl	8008c94 <USBD_CoreFindEP>
 8008826:	4603      	mov	r3, r0
 8008828:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800882a:	7dbb      	ldrb	r3, [r7, #22]
 800882c:	2bff      	cmp	r3, #255	@ 0xff
 800882e:	d025      	beq.n	800887c <USBD_LL_DataOutStage+0x15c>
 8008830:	7dbb      	ldrb	r3, [r7, #22]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d122      	bne.n	800887c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b03      	cmp	r3, #3
 8008840:	d117      	bne.n	8008872 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008842:	7dba      	ldrb	r2, [r7, #22]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	32ae      	adds	r2, #174	@ 0xae
 8008848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00f      	beq.n	8008872 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008852:	7dba      	ldrb	r2, [r7, #22]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800885a:	7dba      	ldrb	r2, [r7, #22]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	32ae      	adds	r2, #174	@ 0xae
 8008860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	7afa      	ldrb	r2, [r7, #11]
 8008868:	4611      	mov	r1, r2
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	4798      	blx	r3
 800886e:	4603      	mov	r3, r0
 8008870:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008872:	7dfb      	ldrb	r3, [r7, #23]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d001      	beq.n	800887c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008878:	7dfb      	ldrb	r3, [r7, #23]
 800887a:	e000      	b.n	800887e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b086      	sub	sp, #24
 800888a:	af00      	add	r7, sp, #0
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	460b      	mov	r3, r1
 8008890:	607a      	str	r2, [r7, #4]
 8008892:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008894:	7afb      	ldrb	r3, [r7, #11]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d16f      	bne.n	800897a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	3314      	adds	r3, #20
 800889e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d15a      	bne.n	8008960 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	689a      	ldr	r2, [r3, #8]
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d914      	bls.n	80088e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	689a      	ldr	r2, [r3, #8]
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	1ad2      	subs	r2, r2, r3
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	461a      	mov	r2, r3
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f001 f8bc 	bl	8009a4a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088d2:	2300      	movs	r3, #0
 80088d4:	2200      	movs	r2, #0
 80088d6:	2100      	movs	r1, #0
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f003 ff81 	bl	800c7e0 <USBD_LL_PrepareReceive>
 80088de:	e03f      	b.n	8008960 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	68da      	ldr	r2, [r3, #12]
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d11c      	bne.n	8008926 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	685a      	ldr	r2, [r3, #4]
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d316      	bcc.n	8008926 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008902:	429a      	cmp	r2, r3
 8008904:	d20f      	bcs.n	8008926 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008906:	2200      	movs	r2, #0
 8008908:	2100      	movs	r1, #0
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f001 f89d 	bl	8009a4a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008918:	2300      	movs	r3, #0
 800891a:	2200      	movs	r2, #0
 800891c:	2100      	movs	r1, #0
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f003 ff5e 	bl	800c7e0 <USBD_LL_PrepareReceive>
 8008924:	e01c      	b.n	8008960 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800892c:	b2db      	uxtb	r3, r3
 800892e:	2b03      	cmp	r3, #3
 8008930:	d10f      	bne.n	8008952 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d009      	beq.n	8008952 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008952:	2180      	movs	r1, #128	@ 0x80
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f003 fe99 	bl	800c68c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f001 f8c7 	bl	8009aee <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d03a      	beq.n	80089e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f7ff fe42 	bl	80085f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008978:	e032      	b.n	80089e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800897a:	7afb      	ldrb	r3, [r7, #11]
 800897c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008980:	b2db      	uxtb	r3, r3
 8008982:	4619      	mov	r1, r3
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f000 f985 	bl	8008c94 <USBD_CoreFindEP>
 800898a:	4603      	mov	r3, r0
 800898c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800898e:	7dfb      	ldrb	r3, [r7, #23]
 8008990:	2bff      	cmp	r3, #255	@ 0xff
 8008992:	d025      	beq.n	80089e0 <USBD_LL_DataInStage+0x15a>
 8008994:	7dfb      	ldrb	r3, [r7, #23]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d122      	bne.n	80089e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d11c      	bne.n	80089e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80089a6:	7dfa      	ldrb	r2, [r7, #23]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	32ae      	adds	r2, #174	@ 0xae
 80089ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d014      	beq.n	80089e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80089b6:	7dfa      	ldrb	r2, [r7, #23]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80089be:	7dfa      	ldrb	r2, [r7, #23]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	32ae      	adds	r2, #174	@ 0xae
 80089c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	7afa      	ldrb	r2, [r7, #11]
 80089cc:	4611      	mov	r1, r2
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	4798      	blx	r3
 80089d2:	4603      	mov	r3, r0
 80089d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80089d6:	7dbb      	ldrb	r3, [r7, #22]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80089dc:	7dbb      	ldrb	r3, [r7, #22]
 80089de:	e000      	b.n	80089e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3718      	adds	r7, #24
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d014      	beq.n	8008a50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00e      	beq.n	8008a50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	6852      	ldr	r2, [r2, #4]
 8008a3e:	b2d2      	uxtb	r2, r2
 8008a40:	4611      	mov	r1, r2
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	4798      	blx	r3
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a50:	2340      	movs	r3, #64	@ 0x40
 8008a52:	2200      	movs	r2, #0
 8008a54:	2100      	movs	r1, #0
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f003 fdd3 	bl	800c602 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2240      	movs	r2, #64	@ 0x40
 8008a68:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a6c:	2340      	movs	r3, #64	@ 0x40
 8008a6e:	2200      	movs	r2, #0
 8008a70:	2180      	movs	r1, #128	@ 0x80
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f003 fdc5 	bl	800c602 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2240      	movs	r2, #64	@ 0x40
 8008a82:	621a      	str	r2, [r3, #32]

  return ret;
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	460b      	mov	r3, r1
 8008a98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	78fa      	ldrb	r2, [r7, #3]
 8008a9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b083      	sub	sp, #12
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b04      	cmp	r3, #4
 8008ac0:	d006      	beq.n	8008ad0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2204      	movs	r2, #4
 8008ad4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b083      	sub	sp, #12
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b04      	cmp	r3, #4
 8008af8:	d106      	bne.n	8008b08 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b082      	sub	sp, #8
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	d110      	bne.n	8008b4c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00b      	beq.n	8008b4c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d005      	beq.n	8008b4c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b082      	sub	sp, #8
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	460b      	mov	r3, r1
 8008b60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	32ae      	adds	r2, #174	@ 0xae
 8008b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e01c      	b.n	8008bb2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	d115      	bne.n	8008bb0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	32ae      	adds	r2, #174	@ 0xae
 8008b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00b      	beq.n	8008bb0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	32ae      	adds	r2, #174	@ 0xae
 8008ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba6:	6a1b      	ldr	r3, [r3, #32]
 8008ba8:	78fa      	ldrb	r2, [r7, #3]
 8008baa:	4611      	mov	r1, r2
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b082      	sub	sp, #8
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	32ae      	adds	r2, #174	@ 0xae
 8008bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d101      	bne.n	8008bdc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e01c      	b.n	8008c16 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	2b03      	cmp	r3, #3
 8008be6:	d115      	bne.n	8008c14 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	32ae      	adds	r2, #174	@ 0xae
 8008bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00b      	beq.n	8008c14 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	32ae      	adds	r2, #174	@ 0xae
 8008c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c0c:	78fa      	ldrb	r2, [r7, #3]
 8008c0e:	4611      	mov	r1, r2
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00e      	beq.n	8008c70 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	6852      	ldr	r2, [r2, #4]
 8008c5e:	b2d2      	uxtb	r2, r2
 8008c60:	4611      	mov	r1, r2
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	4798      	blx	r3
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b083      	sub	sp, #12
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	460b      	mov	r3, r1
 8008c84:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c86:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ca0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b086      	sub	sp, #24
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	885b      	ldrh	r3, [r3, #2]
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	7812      	ldrb	r2, [r2, #0]
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d91f      	bls.n	8008d14 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008cda:	e013      	b.n	8008d04 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008cdc:	f107 030a 	add.w	r3, r7, #10
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6978      	ldr	r0, [r7, #20]
 8008ce4:	f000 f81b 	bl	8008d1e <USBD_GetNextDesc>
 8008ce8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	785b      	ldrb	r3, [r3, #1]
 8008cee:	2b05      	cmp	r3, #5
 8008cf0:	d108      	bne.n	8008d04 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	789b      	ldrb	r3, [r3, #2]
 8008cfa:	78fa      	ldrb	r2, [r7, #3]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d008      	beq.n	8008d12 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008d00:	2300      	movs	r3, #0
 8008d02:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	885b      	ldrh	r3, [r3, #2]
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	897b      	ldrh	r3, [r7, #10]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d8e5      	bhi.n	8008cdc <USBD_GetEpDesc+0x2e>
 8008d10:	e000      	b.n	8008d14 <USBD_GetEpDesc+0x66>
          break;
 8008d12:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008d14:	693b      	ldr	r3, [r7, #16]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3718      	adds	r7, #24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b085      	sub	sp, #20
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	881b      	ldrh	r3, [r3, #0]
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	7812      	ldrb	r2, [r2, #0]
 8008d34:	4413      	add	r3, r2
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	461a      	mov	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4413      	add	r3, r2
 8008d46:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d48:	68fb      	ldr	r3, [r7, #12]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b087      	sub	sp, #28
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008d74:	8a3b      	ldrh	r3, [r7, #16]
 8008d76:	021b      	lsls	r3, r3, #8
 8008d78:	b21a      	sxth	r2, r3
 8008d7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	b21b      	sxth	r3, r3
 8008d82:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008d84:	89fb      	ldrh	r3, [r7, #14]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	371c      	adds	r7, #28
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
	...

08008d94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008daa:	2b40      	cmp	r3, #64	@ 0x40
 8008dac:	d005      	beq.n	8008dba <USBD_StdDevReq+0x26>
 8008dae:	2b40      	cmp	r3, #64	@ 0x40
 8008db0:	d857      	bhi.n	8008e62 <USBD_StdDevReq+0xce>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00f      	beq.n	8008dd6 <USBD_StdDevReq+0x42>
 8008db6:	2b20      	cmp	r3, #32
 8008db8:	d153      	bne.n	8008e62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	32ae      	adds	r2, #174	@ 0xae
 8008dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	4798      	blx	r3
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8008dd4:	e04a      	b.n	8008e6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	785b      	ldrb	r3, [r3, #1]
 8008dda:	2b09      	cmp	r3, #9
 8008ddc:	d83b      	bhi.n	8008e56 <USBD_StdDevReq+0xc2>
 8008dde:	a201      	add	r2, pc, #4	@ (adr r2, 8008de4 <USBD_StdDevReq+0x50>)
 8008de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de4:	08008e39 	.word	0x08008e39
 8008de8:	08008e4d 	.word	0x08008e4d
 8008dec:	08008e57 	.word	0x08008e57
 8008df0:	08008e43 	.word	0x08008e43
 8008df4:	08008e57 	.word	0x08008e57
 8008df8:	08008e17 	.word	0x08008e17
 8008dfc:	08008e0d 	.word	0x08008e0d
 8008e00:	08008e57 	.word	0x08008e57
 8008e04:	08008e2f 	.word	0x08008e2f
 8008e08:	08008e21 	.word	0x08008e21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fa3c 	bl	800928c <USBD_GetDescriptor>
          break;
 8008e14:	e024      	b.n	8008e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e16:	6839      	ldr	r1, [r7, #0]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fba1 	bl	8009560 <USBD_SetAddress>
          break;
 8008e1e:	e01f      	b.n	8008e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fbe0 	bl	80095e8 <USBD_SetConfig>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	73fb      	strb	r3, [r7, #15]
          break;
 8008e2c:	e018      	b.n	8008e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fc83 	bl	800973c <USBD_GetConfig>
          break;
 8008e36:	e013      	b.n	8008e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fcb4 	bl	80097a8 <USBD_GetStatus>
          break;
 8008e40:	e00e      	b.n	8008e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fce3 	bl	8009810 <USBD_SetFeature>
          break;
 8008e4a:	e009      	b.n	8008e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fd07 	bl	8009862 <USBD_ClrFeature>
          break;
 8008e54:	e004      	b.n	8008e60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008e56:	6839      	ldr	r1, [r7, #0]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fd5e 	bl	800991a <USBD_CtlError>
          break;
 8008e5e:	bf00      	nop
      }
      break;
 8008e60:	e004      	b.n	8008e6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fd58 	bl	800991a <USBD_CtlError>
      break;
 8008e6a:	bf00      	nop
  }

  return ret;
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop

08008e78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e8e:	2b40      	cmp	r3, #64	@ 0x40
 8008e90:	d005      	beq.n	8008e9e <USBD_StdItfReq+0x26>
 8008e92:	2b40      	cmp	r3, #64	@ 0x40
 8008e94:	d852      	bhi.n	8008f3c <USBD_StdItfReq+0xc4>
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d001      	beq.n	8008e9e <USBD_StdItfReq+0x26>
 8008e9a:	2b20      	cmp	r3, #32
 8008e9c:	d14e      	bne.n	8008f3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d840      	bhi.n	8008f2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	889b      	ldrh	r3, [r3, #4]
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d836      	bhi.n	8008f24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	889b      	ldrh	r3, [r3, #4]
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7ff fedb 	bl	8008c7a <USBD_CoreFindIF>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ec8:	7bbb      	ldrb	r3, [r7, #14]
 8008eca:	2bff      	cmp	r3, #255	@ 0xff
 8008ecc:	d01d      	beq.n	8008f0a <USBD_StdItfReq+0x92>
 8008ece:	7bbb      	ldrb	r3, [r7, #14]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d11a      	bne.n	8008f0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008ed4:	7bba      	ldrb	r2, [r7, #14]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	32ae      	adds	r2, #174	@ 0xae
 8008eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00f      	beq.n	8008f04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008ee4:	7bba      	ldrb	r2, [r7, #14]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008eec:	7bba      	ldrb	r2, [r7, #14]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	32ae      	adds	r2, #174	@ 0xae
 8008ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	4798      	blx	r3
 8008efe:	4603      	mov	r3, r0
 8008f00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f02:	e004      	b.n	8008f0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008f04:	2303      	movs	r3, #3
 8008f06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f08:	e001      	b.n	8008f0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	88db      	ldrh	r3, [r3, #6]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d110      	bne.n	8008f38 <USBD_StdItfReq+0xc0>
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10d      	bne.n	8008f38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fdd3 	bl	8009ac8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f22:	e009      	b.n	8008f38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fcf7 	bl	800991a <USBD_CtlError>
          break;
 8008f2c:	e004      	b.n	8008f38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fcf2 	bl	800991a <USBD_CtlError>
          break;
 8008f36:	e000      	b.n	8008f3a <USBD_StdItfReq+0xc2>
          break;
 8008f38:	bf00      	nop
      }
      break;
 8008f3a:	e004      	b.n	8008f46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fceb 	bl	800991a <USBD_CtlError>
      break;
 8008f44:	bf00      	nop
  }

  return ret;
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	889b      	ldrh	r3, [r3, #4]
 8008f62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f6c:	2b40      	cmp	r3, #64	@ 0x40
 8008f6e:	d007      	beq.n	8008f80 <USBD_StdEPReq+0x30>
 8008f70:	2b40      	cmp	r3, #64	@ 0x40
 8008f72:	f200 817f 	bhi.w	8009274 <USBD_StdEPReq+0x324>
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d02a      	beq.n	8008fd0 <USBD_StdEPReq+0x80>
 8008f7a:	2b20      	cmp	r3, #32
 8008f7c:	f040 817a 	bne.w	8009274 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f80:	7bbb      	ldrb	r3, [r7, #14]
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7ff fe85 	bl	8008c94 <USBD_CoreFindEP>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f8e:	7b7b      	ldrb	r3, [r7, #13]
 8008f90:	2bff      	cmp	r3, #255	@ 0xff
 8008f92:	f000 8174 	beq.w	800927e <USBD_StdEPReq+0x32e>
 8008f96:	7b7b      	ldrb	r3, [r7, #13]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f040 8170 	bne.w	800927e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008f9e:	7b7a      	ldrb	r2, [r7, #13]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008fa6:	7b7a      	ldrb	r2, [r7, #13]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	32ae      	adds	r2, #174	@ 0xae
 8008fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f000 8163 	beq.w	800927e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008fb8:	7b7a      	ldrb	r2, [r7, #13]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	32ae      	adds	r2, #174	@ 0xae
 8008fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	4798      	blx	r3
 8008fca:	4603      	mov	r3, r0
 8008fcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008fce:	e156      	b.n	800927e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	785b      	ldrb	r3, [r3, #1]
 8008fd4:	2b03      	cmp	r3, #3
 8008fd6:	d008      	beq.n	8008fea <USBD_StdEPReq+0x9a>
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	f300 8145 	bgt.w	8009268 <USBD_StdEPReq+0x318>
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f000 809b 	beq.w	800911a <USBD_StdEPReq+0x1ca>
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d03c      	beq.n	8009062 <USBD_StdEPReq+0x112>
 8008fe8:	e13e      	b.n	8009268 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d002      	beq.n	8008ffc <USBD_StdEPReq+0xac>
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d016      	beq.n	8009028 <USBD_StdEPReq+0xd8>
 8008ffa:	e02c      	b.n	8009056 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ffc:	7bbb      	ldrb	r3, [r7, #14]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00d      	beq.n	800901e <USBD_StdEPReq+0xce>
 8009002:	7bbb      	ldrb	r3, [r7, #14]
 8009004:	2b80      	cmp	r3, #128	@ 0x80
 8009006:	d00a      	beq.n	800901e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009008:	7bbb      	ldrb	r3, [r7, #14]
 800900a:	4619      	mov	r1, r3
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f003 fb3d 	bl	800c68c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009012:	2180      	movs	r1, #128	@ 0x80
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f003 fb39 	bl	800c68c <USBD_LL_StallEP>
 800901a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800901c:	e020      	b.n	8009060 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fc7a 	bl	800991a <USBD_CtlError>
              break;
 8009026:	e01b      	b.n	8009060 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	885b      	ldrh	r3, [r3, #2]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10e      	bne.n	800904e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009030:	7bbb      	ldrb	r3, [r7, #14]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00b      	beq.n	800904e <USBD_StdEPReq+0xfe>
 8009036:	7bbb      	ldrb	r3, [r7, #14]
 8009038:	2b80      	cmp	r3, #128	@ 0x80
 800903a:	d008      	beq.n	800904e <USBD_StdEPReq+0xfe>
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	88db      	ldrh	r3, [r3, #6]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d104      	bne.n	800904e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009044:	7bbb      	ldrb	r3, [r7, #14]
 8009046:	4619      	mov	r1, r3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f003 fb1f 	bl	800c68c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fd3a 	bl	8009ac8 <USBD_CtlSendStatus>

              break;
 8009054:	e004      	b.n	8009060 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 fc5e 	bl	800991a <USBD_CtlError>
              break;
 800905e:	bf00      	nop
          }
          break;
 8009060:	e107      	b.n	8009272 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b02      	cmp	r3, #2
 800906c:	d002      	beq.n	8009074 <USBD_StdEPReq+0x124>
 800906e:	2b03      	cmp	r3, #3
 8009070:	d016      	beq.n	80090a0 <USBD_StdEPReq+0x150>
 8009072:	e04b      	b.n	800910c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009074:	7bbb      	ldrb	r3, [r7, #14]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00d      	beq.n	8009096 <USBD_StdEPReq+0x146>
 800907a:	7bbb      	ldrb	r3, [r7, #14]
 800907c:	2b80      	cmp	r3, #128	@ 0x80
 800907e:	d00a      	beq.n	8009096 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009080:	7bbb      	ldrb	r3, [r7, #14]
 8009082:	4619      	mov	r1, r3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f003 fb01 	bl	800c68c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800908a:	2180      	movs	r1, #128	@ 0x80
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f003 fafd 	bl	800c68c <USBD_LL_StallEP>
 8009092:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009094:	e040      	b.n	8009118 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fc3e 	bl	800991a <USBD_CtlError>
              break;
 800909e:	e03b      	b.n	8009118 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	885b      	ldrh	r3, [r3, #2]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d136      	bne.n	8009116 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80090a8:	7bbb      	ldrb	r3, [r7, #14]
 80090aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d004      	beq.n	80090bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f003 fb07 	bl	800c6ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fd03 	bl	8009ac8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80090c2:	7bbb      	ldrb	r3, [r7, #14]
 80090c4:	4619      	mov	r1, r3
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7ff fde4 	bl	8008c94 <USBD_CoreFindEP>
 80090cc:	4603      	mov	r3, r0
 80090ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090d0:	7b7b      	ldrb	r3, [r7, #13]
 80090d2:	2bff      	cmp	r3, #255	@ 0xff
 80090d4:	d01f      	beq.n	8009116 <USBD_StdEPReq+0x1c6>
 80090d6:	7b7b      	ldrb	r3, [r7, #13]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d11c      	bne.n	8009116 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80090dc:	7b7a      	ldrb	r2, [r7, #13]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80090e4:	7b7a      	ldrb	r2, [r7, #13]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	32ae      	adds	r2, #174	@ 0xae
 80090ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d010      	beq.n	8009116 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80090f4:	7b7a      	ldrb	r2, [r7, #13]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	32ae      	adds	r2, #174	@ 0xae
 80090fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	4798      	blx	r3
 8009106:	4603      	mov	r3, r0
 8009108:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800910a:	e004      	b.n	8009116 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800910c:	6839      	ldr	r1, [r7, #0]
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fc03 	bl	800991a <USBD_CtlError>
              break;
 8009114:	e000      	b.n	8009118 <USBD_StdEPReq+0x1c8>
              break;
 8009116:	bf00      	nop
          }
          break;
 8009118:	e0ab      	b.n	8009272 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b02      	cmp	r3, #2
 8009124:	d002      	beq.n	800912c <USBD_StdEPReq+0x1dc>
 8009126:	2b03      	cmp	r3, #3
 8009128:	d032      	beq.n	8009190 <USBD_StdEPReq+0x240>
 800912a:	e097      	b.n	800925c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800912c:	7bbb      	ldrb	r3, [r7, #14]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d007      	beq.n	8009142 <USBD_StdEPReq+0x1f2>
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	2b80      	cmp	r3, #128	@ 0x80
 8009136:	d004      	beq.n	8009142 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 fbed 	bl	800991a <USBD_CtlError>
                break;
 8009140:	e091      	b.n	8009266 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009142:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009146:	2b00      	cmp	r3, #0
 8009148:	da0b      	bge.n	8009162 <USBD_StdEPReq+0x212>
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009150:	4613      	mov	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	3310      	adds	r3, #16
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	4413      	add	r3, r2
 800915e:	3304      	adds	r3, #4
 8009160:	e00b      	b.n	800917a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009162:	7bbb      	ldrb	r3, [r7, #14]
 8009164:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009168:	4613      	mov	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	4413      	add	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	4413      	add	r3, r2
 8009178:	3304      	adds	r3, #4
 800917a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	2200      	movs	r2, #0
 8009180:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	2202      	movs	r2, #2
 8009186:	4619      	mov	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fc43 	bl	8009a14 <USBD_CtlSendData>
              break;
 800918e:	e06a      	b.n	8009266 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009194:	2b00      	cmp	r3, #0
 8009196:	da11      	bge.n	80091bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	f003 020f 	and.w	r2, r3, #15
 800919e:	6879      	ldr	r1, [r7, #4]
 80091a0:	4613      	mov	r3, r2
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4413      	add	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	440b      	add	r3, r1
 80091aa:	3324      	adds	r3, #36	@ 0x24
 80091ac:	881b      	ldrh	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d117      	bne.n	80091e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fbb0 	bl	800991a <USBD_CtlError>
                  break;
 80091ba:	e054      	b.n	8009266 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091bc:	7bbb      	ldrb	r3, [r7, #14]
 80091be:	f003 020f 	and.w	r2, r3, #15
 80091c2:	6879      	ldr	r1, [r7, #4]
 80091c4:	4613      	mov	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	4413      	add	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	440b      	add	r3, r1
 80091ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80091d2:	881b      	ldrh	r3, [r3, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d104      	bne.n	80091e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80091d8:	6839      	ldr	r1, [r7, #0]
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fb9d 	bl	800991a <USBD_CtlError>
                  break;
 80091e0:	e041      	b.n	8009266 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	da0b      	bge.n	8009202 <USBD_StdEPReq+0x2b2>
 80091ea:	7bbb      	ldrb	r3, [r7, #14]
 80091ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091f0:	4613      	mov	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4413      	add	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	3310      	adds	r3, #16
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	4413      	add	r3, r2
 80091fe:	3304      	adds	r3, #4
 8009200:	e00b      	b.n	800921a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009202:	7bbb      	ldrb	r3, [r7, #14]
 8009204:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009208:	4613      	mov	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	4413      	add	r3, r2
 8009218:	3304      	adds	r3, #4
 800921a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800921c:	7bbb      	ldrb	r3, [r7, #14]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d002      	beq.n	8009228 <USBD_StdEPReq+0x2d8>
 8009222:	7bbb      	ldrb	r3, [r7, #14]
 8009224:	2b80      	cmp	r3, #128	@ 0x80
 8009226:	d103      	bne.n	8009230 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	2200      	movs	r2, #0
 800922c:	601a      	str	r2, [r3, #0]
 800922e:	e00e      	b.n	800924e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009230:	7bbb      	ldrb	r3, [r7, #14]
 8009232:	4619      	mov	r1, r3
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f003 fa67 	bl	800c708 <USBD_LL_IsStallEP>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d003      	beq.n	8009248 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	2201      	movs	r2, #1
 8009244:	601a      	str	r2, [r3, #0]
 8009246:	e002      	b.n	800924e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	2200      	movs	r2, #0
 800924c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	2202      	movs	r2, #2
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fbdd 	bl	8009a14 <USBD_CtlSendData>
              break;
 800925a:	e004      	b.n	8009266 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fb5b 	bl	800991a <USBD_CtlError>
              break;
 8009264:	bf00      	nop
          }
          break;
 8009266:	e004      	b.n	8009272 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fb55 	bl	800991a <USBD_CtlError>
          break;
 8009270:	bf00      	nop
      }
      break;
 8009272:	e005      	b.n	8009280 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009274:	6839      	ldr	r1, [r7, #0]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fb4f 	bl	800991a <USBD_CtlError>
      break;
 800927c:	e000      	b.n	8009280 <USBD_StdEPReq+0x330>
      break;
 800927e:	bf00      	nop
  }

  return ret;
 8009280:	7bfb      	ldrb	r3, [r7, #15]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
	...

0800928c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009296:	2300      	movs	r3, #0
 8009298:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800929a:	2300      	movs	r3, #0
 800929c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800929e:	2300      	movs	r3, #0
 80092a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	885b      	ldrh	r3, [r3, #2]
 80092a6:	0a1b      	lsrs	r3, r3, #8
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	3b01      	subs	r3, #1
 80092ac:	2b06      	cmp	r3, #6
 80092ae:	f200 8128 	bhi.w	8009502 <USBD_GetDescriptor+0x276>
 80092b2:	a201      	add	r2, pc, #4	@ (adr r2, 80092b8 <USBD_GetDescriptor+0x2c>)
 80092b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b8:	080092d5 	.word	0x080092d5
 80092bc:	080092ed 	.word	0x080092ed
 80092c0:	0800932d 	.word	0x0800932d
 80092c4:	08009503 	.word	0x08009503
 80092c8:	08009503 	.word	0x08009503
 80092cc:	080094a3 	.word	0x080094a3
 80092d0:	080094cf 	.word	0x080094cf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	7c12      	ldrb	r2, [r2, #16]
 80092e0:	f107 0108 	add.w	r1, r7, #8
 80092e4:	4610      	mov	r0, r2
 80092e6:	4798      	blx	r3
 80092e8:	60f8      	str	r0, [r7, #12]
      break;
 80092ea:	e112      	b.n	8009512 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	7c1b      	ldrb	r3, [r3, #16]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d10d      	bne.n	8009310 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092fc:	f107 0208 	add.w	r2, r7, #8
 8009300:	4610      	mov	r0, r2
 8009302:	4798      	blx	r3
 8009304:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	3301      	adds	r3, #1
 800930a:	2202      	movs	r2, #2
 800930c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800930e:	e100      	b.n	8009512 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009318:	f107 0208 	add.w	r2, r7, #8
 800931c:	4610      	mov	r0, r2
 800931e:	4798      	blx	r3
 8009320:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	3301      	adds	r3, #1
 8009326:	2202      	movs	r2, #2
 8009328:	701a      	strb	r2, [r3, #0]
      break;
 800932a:	e0f2      	b.n	8009512 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	885b      	ldrh	r3, [r3, #2]
 8009330:	b2db      	uxtb	r3, r3
 8009332:	2b05      	cmp	r3, #5
 8009334:	f200 80ac 	bhi.w	8009490 <USBD_GetDescriptor+0x204>
 8009338:	a201      	add	r2, pc, #4	@ (adr r2, 8009340 <USBD_GetDescriptor+0xb4>)
 800933a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933e:	bf00      	nop
 8009340:	08009359 	.word	0x08009359
 8009344:	0800938d 	.word	0x0800938d
 8009348:	080093c1 	.word	0x080093c1
 800934c:	080093f5 	.word	0x080093f5
 8009350:	08009429 	.word	0x08009429
 8009354:	0800945d 	.word	0x0800945d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00b      	beq.n	800937c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	7c12      	ldrb	r2, [r2, #16]
 8009370:	f107 0108 	add.w	r1, r7, #8
 8009374:	4610      	mov	r0, r2
 8009376:	4798      	blx	r3
 8009378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800937a:	e091      	b.n	80094a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 facb 	bl	800991a <USBD_CtlError>
            err++;
 8009384:	7afb      	ldrb	r3, [r7, #11]
 8009386:	3301      	adds	r3, #1
 8009388:	72fb      	strb	r3, [r7, #11]
          break;
 800938a:	e089      	b.n	80094a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00b      	beq.n	80093b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	7c12      	ldrb	r2, [r2, #16]
 80093a4:	f107 0108 	add.w	r1, r7, #8
 80093a8:	4610      	mov	r0, r2
 80093aa:	4798      	blx	r3
 80093ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ae:	e077      	b.n	80094a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fab1 	bl	800991a <USBD_CtlError>
            err++;
 80093b8:	7afb      	ldrb	r3, [r7, #11]
 80093ba:	3301      	adds	r3, #1
 80093bc:	72fb      	strb	r3, [r7, #11]
          break;
 80093be:	e06f      	b.n	80094a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00b      	beq.n	80093e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	7c12      	ldrb	r2, [r2, #16]
 80093d8:	f107 0108 	add.w	r1, r7, #8
 80093dc:	4610      	mov	r0, r2
 80093de:	4798      	blx	r3
 80093e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093e2:	e05d      	b.n	80094a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093e4:	6839      	ldr	r1, [r7, #0]
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fa97 	bl	800991a <USBD_CtlError>
            err++;
 80093ec:	7afb      	ldrb	r3, [r7, #11]
 80093ee:	3301      	adds	r3, #1
 80093f0:	72fb      	strb	r3, [r7, #11]
          break;
 80093f2:	e055      	b.n	80094a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00b      	beq.n	8009418 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	7c12      	ldrb	r2, [r2, #16]
 800940c:	f107 0108 	add.w	r1, r7, #8
 8009410:	4610      	mov	r0, r2
 8009412:	4798      	blx	r3
 8009414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009416:	e043      	b.n	80094a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fa7d 	bl	800991a <USBD_CtlError>
            err++;
 8009420:	7afb      	ldrb	r3, [r7, #11]
 8009422:	3301      	adds	r3, #1
 8009424:	72fb      	strb	r3, [r7, #11]
          break;
 8009426:	e03b      	b.n	80094a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800942e:	695b      	ldr	r3, [r3, #20]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00b      	beq.n	800944c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800943a:	695b      	ldr	r3, [r3, #20]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	7c12      	ldrb	r2, [r2, #16]
 8009440:	f107 0108 	add.w	r1, r7, #8
 8009444:	4610      	mov	r0, r2
 8009446:	4798      	blx	r3
 8009448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800944a:	e029      	b.n	80094a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fa63 	bl	800991a <USBD_CtlError>
            err++;
 8009454:	7afb      	ldrb	r3, [r7, #11]
 8009456:	3301      	adds	r3, #1
 8009458:	72fb      	strb	r3, [r7, #11]
          break;
 800945a:	e021      	b.n	80094a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00b      	beq.n	8009480 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	7c12      	ldrb	r2, [r2, #16]
 8009474:	f107 0108 	add.w	r1, r7, #8
 8009478:	4610      	mov	r0, r2
 800947a:	4798      	blx	r3
 800947c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800947e:	e00f      	b.n	80094a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009480:	6839      	ldr	r1, [r7, #0]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fa49 	bl	800991a <USBD_CtlError>
            err++;
 8009488:	7afb      	ldrb	r3, [r7, #11]
 800948a:	3301      	adds	r3, #1
 800948c:	72fb      	strb	r3, [r7, #11]
          break;
 800948e:	e007      	b.n	80094a0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009490:	6839      	ldr	r1, [r7, #0]
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fa41 	bl	800991a <USBD_CtlError>
          err++;
 8009498:	7afb      	ldrb	r3, [r7, #11]
 800949a:	3301      	adds	r3, #1
 800949c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800949e:	bf00      	nop
      }
      break;
 80094a0:	e037      	b.n	8009512 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	7c1b      	ldrb	r3, [r3, #16]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d109      	bne.n	80094be <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094b2:	f107 0208 	add.w	r2, r7, #8
 80094b6:	4610      	mov	r0, r2
 80094b8:	4798      	blx	r3
 80094ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094bc:	e029      	b.n	8009512 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fa2a 	bl	800991a <USBD_CtlError>
        err++;
 80094c6:	7afb      	ldrb	r3, [r7, #11]
 80094c8:	3301      	adds	r3, #1
 80094ca:	72fb      	strb	r3, [r7, #11]
      break;
 80094cc:	e021      	b.n	8009512 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	7c1b      	ldrb	r3, [r3, #16]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10d      	bne.n	80094f2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094de:	f107 0208 	add.w	r2, r7, #8
 80094e2:	4610      	mov	r0, r2
 80094e4:	4798      	blx	r3
 80094e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	3301      	adds	r3, #1
 80094ec:	2207      	movs	r2, #7
 80094ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094f0:	e00f      	b.n	8009512 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fa10 	bl	800991a <USBD_CtlError>
        err++;
 80094fa:	7afb      	ldrb	r3, [r7, #11]
 80094fc:	3301      	adds	r3, #1
 80094fe:	72fb      	strb	r3, [r7, #11]
      break;
 8009500:	e007      	b.n	8009512 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fa08 	bl	800991a <USBD_CtlError>
      err++;
 800950a:	7afb      	ldrb	r3, [r7, #11]
 800950c:	3301      	adds	r3, #1
 800950e:	72fb      	strb	r3, [r7, #11]
      break;
 8009510:	bf00      	nop
  }

  if (err != 0U)
 8009512:	7afb      	ldrb	r3, [r7, #11]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d11e      	bne.n	8009556 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	88db      	ldrh	r3, [r3, #6]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d016      	beq.n	800954e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009520:	893b      	ldrh	r3, [r7, #8]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00e      	beq.n	8009544 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	88da      	ldrh	r2, [r3, #6]
 800952a:	893b      	ldrh	r3, [r7, #8]
 800952c:	4293      	cmp	r3, r2
 800952e:	bf28      	it	cs
 8009530:	4613      	movcs	r3, r2
 8009532:	b29b      	uxth	r3, r3
 8009534:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009536:	893b      	ldrh	r3, [r7, #8]
 8009538:	461a      	mov	r2, r3
 800953a:	68f9      	ldr	r1, [r7, #12]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fa69 	bl	8009a14 <USBD_CtlSendData>
 8009542:	e009      	b.n	8009558 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f9e7 	bl	800991a <USBD_CtlError>
 800954c:	e004      	b.n	8009558 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 faba 	bl	8009ac8 <USBD_CtlSendStatus>
 8009554:	e000      	b.n	8009558 <USBD_GetDescriptor+0x2cc>
    return;
 8009556:	bf00      	nop
  }
}
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop

08009560 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	889b      	ldrh	r3, [r3, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d131      	bne.n	80095d6 <USBD_SetAddress+0x76>
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	88db      	ldrh	r3, [r3, #6]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d12d      	bne.n	80095d6 <USBD_SetAddress+0x76>
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	885b      	ldrh	r3, [r3, #2]
 800957e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009580:	d829      	bhi.n	80095d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	885b      	ldrh	r3, [r3, #2]
 8009586:	b2db      	uxtb	r3, r3
 8009588:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800958c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b03      	cmp	r3, #3
 8009598:	d104      	bne.n	80095a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800959a:	6839      	ldr	r1, [r7, #0]
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f9bc 	bl	800991a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095a2:	e01d      	b.n	80095e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	7bfa      	ldrb	r2, [r7, #15]
 80095a8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f003 f8d5 	bl	800c760 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fa86 	bl	8009ac8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d004      	beq.n	80095cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2202      	movs	r2, #2
 80095c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ca:	e009      	b.n	80095e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095d4:	e004      	b.n	80095e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f99e 	bl	800991a <USBD_CtlError>
  }
}
 80095de:	bf00      	nop
 80095e0:	bf00      	nop
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	885b      	ldrh	r3, [r3, #2]
 80095fa:	b2da      	uxtb	r2, r3
 80095fc:	4b4e      	ldr	r3, [pc, #312]	@ (8009738 <USBD_SetConfig+0x150>)
 80095fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009600:	4b4d      	ldr	r3, [pc, #308]	@ (8009738 <USBD_SetConfig+0x150>)
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d905      	bls.n	8009614 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f985 	bl	800991a <USBD_CtlError>
    return USBD_FAIL;
 8009610:	2303      	movs	r3, #3
 8009612:	e08c      	b.n	800972e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800961a:	b2db      	uxtb	r3, r3
 800961c:	2b02      	cmp	r3, #2
 800961e:	d002      	beq.n	8009626 <USBD_SetConfig+0x3e>
 8009620:	2b03      	cmp	r3, #3
 8009622:	d029      	beq.n	8009678 <USBD_SetConfig+0x90>
 8009624:	e075      	b.n	8009712 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009626:	4b44      	ldr	r3, [pc, #272]	@ (8009738 <USBD_SetConfig+0x150>)
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d020      	beq.n	8009670 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800962e:	4b42      	ldr	r3, [pc, #264]	@ (8009738 <USBD_SetConfig+0x150>)
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	461a      	mov	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009638:	4b3f      	ldr	r3, [pc, #252]	@ (8009738 <USBD_SetConfig+0x150>)
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	4619      	mov	r1, r3
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7fe ffe3 	bl	800860a <USBD_SetClassConfig>
 8009644:	4603      	mov	r3, r0
 8009646:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009648:	7bfb      	ldrb	r3, [r7, #15]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d008      	beq.n	8009660 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800964e:	6839      	ldr	r1, [r7, #0]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f962 	bl	800991a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2202      	movs	r2, #2
 800965a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800965e:	e065      	b.n	800972c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fa31 	bl	8009ac8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2203      	movs	r2, #3
 800966a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800966e:	e05d      	b.n	800972c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fa29 	bl	8009ac8 <USBD_CtlSendStatus>
      break;
 8009676:	e059      	b.n	800972c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009678:	4b2f      	ldr	r3, [pc, #188]	@ (8009738 <USBD_SetConfig+0x150>)
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d112      	bne.n	80096a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2202      	movs	r2, #2
 8009684:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009688:	4b2b      	ldr	r3, [pc, #172]	@ (8009738 <USBD_SetConfig+0x150>)
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	461a      	mov	r2, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009692:	4b29      	ldr	r3, [pc, #164]	@ (8009738 <USBD_SetConfig+0x150>)
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	4619      	mov	r1, r3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7fe ffd2 	bl	8008642 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 fa12 	bl	8009ac8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80096a4:	e042      	b.n	800972c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80096a6:	4b24      	ldr	r3, [pc, #144]	@ (8009738 <USBD_SetConfig+0x150>)
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	461a      	mov	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d02a      	beq.n	800970a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	4619      	mov	r1, r3
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f7fe ffc0 	bl	8008642 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80096c2:	4b1d      	ldr	r3, [pc, #116]	@ (8009738 <USBD_SetConfig+0x150>)
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	461a      	mov	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096cc:	4b1a      	ldr	r3, [pc, #104]	@ (8009738 <USBD_SetConfig+0x150>)
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	4619      	mov	r1, r3
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7fe ff99 	bl	800860a <USBD_SetClassConfig>
 80096d8:	4603      	mov	r3, r0
 80096da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00f      	beq.n	8009702 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f918 	bl	800991a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7fe ffa5 	bl	8008642 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2202      	movs	r2, #2
 80096fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009700:	e014      	b.n	800972c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f9e0 	bl	8009ac8 <USBD_CtlSendStatus>
      break;
 8009708:	e010      	b.n	800972c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f9dc 	bl	8009ac8 <USBD_CtlSendStatus>
      break;
 8009710:	e00c      	b.n	800972c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f900 	bl	800991a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800971a:	4b07      	ldr	r3, [pc, #28]	@ (8009738 <USBD_SetConfig+0x150>)
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	4619      	mov	r1, r3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7fe ff8e 	bl	8008642 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009726:	2303      	movs	r3, #3
 8009728:	73fb      	strb	r3, [r7, #15]
      break;
 800972a:	bf00      	nop
  }

  return ret;
 800972c:	7bfb      	ldrb	r3, [r7, #15]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	200008a0 	.word	0x200008a0

0800973c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	88db      	ldrh	r3, [r3, #6]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d004      	beq.n	8009758 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 f8e2 	bl	800991a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009756:	e023      	b.n	80097a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b02      	cmp	r3, #2
 8009762:	dc02      	bgt.n	800976a <USBD_GetConfig+0x2e>
 8009764:	2b00      	cmp	r3, #0
 8009766:	dc03      	bgt.n	8009770 <USBD_GetConfig+0x34>
 8009768:	e015      	b.n	8009796 <USBD_GetConfig+0x5a>
 800976a:	2b03      	cmp	r3, #3
 800976c:	d00b      	beq.n	8009786 <USBD_GetConfig+0x4a>
 800976e:	e012      	b.n	8009796 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	3308      	adds	r3, #8
 800977a:	2201      	movs	r2, #1
 800977c:	4619      	mov	r1, r3
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f948 	bl	8009a14 <USBD_CtlSendData>
        break;
 8009784:	e00c      	b.n	80097a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	3304      	adds	r3, #4
 800978a:	2201      	movs	r2, #1
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f940 	bl	8009a14 <USBD_CtlSendData>
        break;
 8009794:	e004      	b.n	80097a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 f8be 	bl	800991a <USBD_CtlError>
        break;
 800979e:	bf00      	nop
}
 80097a0:	bf00      	nop
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	3b01      	subs	r3, #1
 80097bc:	2b02      	cmp	r3, #2
 80097be:	d81e      	bhi.n	80097fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	88db      	ldrh	r3, [r3, #6]
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d004      	beq.n	80097d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f8a5 	bl	800991a <USBD_CtlError>
        break;
 80097d0:	e01a      	b.n	8009808 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2201      	movs	r2, #1
 80097d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d005      	beq.n	80097ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	f043 0202 	orr.w	r2, r3, #2
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	330c      	adds	r3, #12
 80097f2:	2202      	movs	r2, #2
 80097f4:	4619      	mov	r1, r3
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 f90c 	bl	8009a14 <USBD_CtlSendData>
      break;
 80097fc:	e004      	b.n	8009808 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f88a 	bl	800991a <USBD_CtlError>
      break;
 8009806:	bf00      	nop
  }
}
 8009808:	bf00      	nop
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	885b      	ldrh	r3, [r3, #2]
 800981e:	2b01      	cmp	r3, #1
 8009820:	d107      	bne.n	8009832 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 f94c 	bl	8009ac8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009830:	e013      	b.n	800985a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	885b      	ldrh	r3, [r3, #2]
 8009836:	2b02      	cmp	r3, #2
 8009838:	d10b      	bne.n	8009852 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	889b      	ldrh	r3, [r3, #4]
 800983e:	0a1b      	lsrs	r3, r3, #8
 8009840:	b29b      	uxth	r3, r3
 8009842:	b2da      	uxtb	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f93c 	bl	8009ac8 <USBD_CtlSendStatus>
}
 8009850:	e003      	b.n	800985a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009852:	6839      	ldr	r1, [r7, #0]
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 f860 	bl	800991a <USBD_CtlError>
}
 800985a:	bf00      	nop
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b082      	sub	sp, #8
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009872:	b2db      	uxtb	r3, r3
 8009874:	3b01      	subs	r3, #1
 8009876:	2b02      	cmp	r3, #2
 8009878:	d80b      	bhi.n	8009892 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	885b      	ldrh	r3, [r3, #2]
 800987e:	2b01      	cmp	r3, #1
 8009880:	d10c      	bne.n	800989c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f91c 	bl	8009ac8 <USBD_CtlSendStatus>
      }
      break;
 8009890:	e004      	b.n	800989c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009892:	6839      	ldr	r1, [r7, #0]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 f840 	bl	800991a <USBD_CtlError>
      break;
 800989a:	e000      	b.n	800989e <USBD_ClrFeature+0x3c>
      break;
 800989c:	bf00      	nop
  }
}
 800989e:	bf00      	nop
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b084      	sub	sp, #16
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
 80098ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	781a      	ldrb	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	3301      	adds	r3, #1
 80098c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	781a      	ldrb	r2, [r3, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3301      	adds	r3, #1
 80098ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f7ff fa40 	bl	8008d56 <SWAPBYTE>
 80098d6:	4603      	mov	r3, r0
 80098d8:	461a      	mov	r2, r3
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	3301      	adds	r3, #1
 80098e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	3301      	adds	r3, #1
 80098e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f7ff fa33 	bl	8008d56 <SWAPBYTE>
 80098f0:	4603      	mov	r3, r0
 80098f2:	461a      	mov	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	3301      	adds	r3, #1
 80098fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	3301      	adds	r3, #1
 8009902:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f7ff fa26 	bl	8008d56 <SWAPBYTE>
 800990a:	4603      	mov	r3, r0
 800990c:	461a      	mov	r2, r3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	80da      	strh	r2, [r3, #6]
}
 8009912:	bf00      	nop
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b082      	sub	sp, #8
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009924:	2180      	movs	r1, #128	@ 0x80
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f002 feb0 	bl	800c68c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800992c:	2100      	movs	r1, #0
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f002 feac 	bl	800c68c <USBD_LL_StallEP>
}
 8009934:	bf00      	nop
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b086      	sub	sp, #24
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009948:	2300      	movs	r3, #0
 800994a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d042      	beq.n	80099d8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009956:	6938      	ldr	r0, [r7, #16]
 8009958:	f000 f842 	bl	80099e0 <USBD_GetLen>
 800995c:	4603      	mov	r3, r0
 800995e:	3301      	adds	r3, #1
 8009960:	005b      	lsls	r3, r3, #1
 8009962:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009966:	d808      	bhi.n	800997a <USBD_GetString+0x3e>
 8009968:	6938      	ldr	r0, [r7, #16]
 800996a:	f000 f839 	bl	80099e0 <USBD_GetLen>
 800996e:	4603      	mov	r3, r0
 8009970:	3301      	adds	r3, #1
 8009972:	b29b      	uxth	r3, r3
 8009974:	005b      	lsls	r3, r3, #1
 8009976:	b29a      	uxth	r2, r3
 8009978:	e001      	b.n	800997e <USBD_GetString+0x42>
 800997a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009982:	7dfb      	ldrb	r3, [r7, #23]
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	4413      	add	r3, r2
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	7812      	ldrb	r2, [r2, #0]
 800998c:	701a      	strb	r2, [r3, #0]
  idx++;
 800998e:	7dfb      	ldrb	r3, [r7, #23]
 8009990:	3301      	adds	r3, #1
 8009992:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009994:	7dfb      	ldrb	r3, [r7, #23]
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	4413      	add	r3, r2
 800999a:	2203      	movs	r2, #3
 800999c:	701a      	strb	r2, [r3, #0]
  idx++;
 800999e:	7dfb      	ldrb	r3, [r7, #23]
 80099a0:	3301      	adds	r3, #1
 80099a2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80099a4:	e013      	b.n	80099ce <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80099a6:	7dfb      	ldrb	r3, [r7, #23]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	4413      	add	r3, r2
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	7812      	ldrb	r2, [r2, #0]
 80099b0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	3301      	adds	r3, #1
 80099b6:	613b      	str	r3, [r7, #16]
    idx++;
 80099b8:	7dfb      	ldrb	r3, [r7, #23]
 80099ba:	3301      	adds	r3, #1
 80099bc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80099be:	7dfb      	ldrb	r3, [r7, #23]
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	4413      	add	r3, r2
 80099c4:	2200      	movs	r2, #0
 80099c6:	701a      	strb	r2, [r3, #0]
    idx++;
 80099c8:	7dfb      	ldrb	r3, [r7, #23]
 80099ca:	3301      	adds	r3, #1
 80099cc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1e7      	bne.n	80099a6 <USBD_GetString+0x6a>
 80099d6:	e000      	b.n	80099da <USBD_GetString+0x9e>
    return;
 80099d8:	bf00      	nop
  }
}
 80099da:	3718      	adds	r7, #24
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80099e8:	2300      	movs	r3, #0
 80099ea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80099f0:	e005      	b.n	80099fe <USBD_GetLen+0x1e>
  {
    len++;
 80099f2:	7bfb      	ldrb	r3, [r7, #15]
 80099f4:	3301      	adds	r3, #1
 80099f6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	3301      	adds	r3, #1
 80099fc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1f5      	bne.n	80099f2 <USBD_GetLen+0x12>
  }

  return len;
 8009a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2202      	movs	r2, #2
 8009a24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	2100      	movs	r1, #0
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f002 feaf 	bl	800c79e <USBD_LL_Transmit>

  return USBD_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b084      	sub	sp, #16
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	60f8      	str	r0, [r7, #12]
 8009a52:	60b9      	str	r1, [r7, #8]
 8009a54:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	68ba      	ldr	r2, [r7, #8]
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f002 fe9e 	bl	800c79e <USBD_LL_Transmit>

  return USBD_OK;
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2203      	movs	r2, #3
 8009a7c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	2100      	movs	r1, #0
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f002 fea2 	bl	800c7e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b084      	sub	sp, #16
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	60f8      	str	r0, [r7, #12]
 8009aae:	60b9      	str	r1, [r7, #8]
 8009ab0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f002 fe91 	bl	800c7e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2204      	movs	r2, #4
 8009ad4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ad8:	2300      	movs	r3, #0
 8009ada:	2200      	movs	r2, #0
 8009adc:	2100      	movs	r1, #0
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f002 fe5d 	bl	800c79e <USBD_LL_Transmit>

  return USBD_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b082      	sub	sp, #8
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2205      	movs	r2, #5
 8009afa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009afe:	2300      	movs	r3, #0
 8009b00:	2200      	movs	r2, #0
 8009b02:	2100      	movs	r1, #0
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f002 fe6b 	bl	800c7e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009b1e:	79fb      	ldrb	r3, [r7, #7]
 8009b20:	4a08      	ldr	r2, [pc, #32]	@ (8009b44 <disk_status+0x30>)
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	4413      	add	r3, r2
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	79fa      	ldrb	r2, [r7, #7]
 8009b2c:	4905      	ldr	r1, [pc, #20]	@ (8009b44 <disk_status+0x30>)
 8009b2e:	440a      	add	r2, r1
 8009b30:	7a12      	ldrb	r2, [r2, #8]
 8009b32:	4610      	mov	r0, r2
 8009b34:	4798      	blx	r3
 8009b36:	4603      	mov	r3, r0
 8009b38:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	200008cc 	.word	0x200008cc

08009b48 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	4603      	mov	r3, r0
 8009b50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009b52:	2300      	movs	r3, #0
 8009b54:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009b56:	79fb      	ldrb	r3, [r7, #7]
 8009b58:	4a0e      	ldr	r2, [pc, #56]	@ (8009b94 <disk_initialize+0x4c>)
 8009b5a:	5cd3      	ldrb	r3, [r2, r3]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d114      	bne.n	8009b8a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009b60:	79fb      	ldrb	r3, [r7, #7]
 8009b62:	4a0c      	ldr	r2, [pc, #48]	@ (8009b94 <disk_initialize+0x4c>)
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4413      	add	r3, r2
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	79fa      	ldrb	r2, [r7, #7]
 8009b6e:	4909      	ldr	r1, [pc, #36]	@ (8009b94 <disk_initialize+0x4c>)
 8009b70:	440a      	add	r2, r1
 8009b72:	7a12      	ldrb	r2, [r2, #8]
 8009b74:	4610      	mov	r0, r2
 8009b76:	4798      	blx	r3
 8009b78:	4603      	mov	r3, r0
 8009b7a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d103      	bne.n	8009b8a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009b82:	79fb      	ldrb	r3, [r7, #7]
 8009b84:	4a03      	ldr	r2, [pc, #12]	@ (8009b94 <disk_initialize+0x4c>)
 8009b86:	2101      	movs	r1, #1
 8009b88:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	200008cc 	.word	0x200008cc

08009b98 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009b98:	b590      	push	{r4, r7, lr}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60b9      	str	r1, [r7, #8]
 8009ba0:	607a      	str	r2, [r7, #4]
 8009ba2:	603b      	str	r3, [r7, #0]
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
 8009baa:	4a0a      	ldr	r2, [pc, #40]	@ (8009bd4 <disk_read+0x3c>)
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	4413      	add	r3, r2
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	689c      	ldr	r4, [r3, #8]
 8009bb4:	7bfb      	ldrb	r3, [r7, #15]
 8009bb6:	4a07      	ldr	r2, [pc, #28]	@ (8009bd4 <disk_read+0x3c>)
 8009bb8:	4413      	add	r3, r2
 8009bba:	7a18      	ldrb	r0, [r3, #8]
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	68b9      	ldr	r1, [r7, #8]
 8009bc2:	47a0      	blx	r4
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	75fb      	strb	r3, [r7, #23]
  return res;
 8009bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	371c      	adds	r7, #28
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd90      	pop	{r4, r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	200008cc 	.word	0x200008cc

08009bd8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009bd8:	b590      	push	{r4, r7, lr}
 8009bda:	b087      	sub	sp, #28
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60b9      	str	r1, [r7, #8]
 8009be0:	607a      	str	r2, [r7, #4]
 8009be2:	603b      	str	r3, [r7, #0]
 8009be4:	4603      	mov	r3, r0
 8009be6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
 8009bea:	4a0a      	ldr	r2, [pc, #40]	@ (8009c14 <disk_write+0x3c>)
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4413      	add	r3, r2
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	68dc      	ldr	r4, [r3, #12]
 8009bf4:	7bfb      	ldrb	r3, [r7, #15]
 8009bf6:	4a07      	ldr	r2, [pc, #28]	@ (8009c14 <disk_write+0x3c>)
 8009bf8:	4413      	add	r3, r2
 8009bfa:	7a18      	ldrb	r0, [r3, #8]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	68b9      	ldr	r1, [r7, #8]
 8009c02:	47a0      	blx	r4
 8009c04:	4603      	mov	r3, r0
 8009c06:	75fb      	strb	r3, [r7, #23]
  return res;
 8009c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	371c      	adds	r7, #28
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd90      	pop	{r4, r7, pc}
 8009c12:	bf00      	nop
 8009c14:	200008cc 	.word	0x200008cc

08009c18 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	4603      	mov	r3, r0
 8009c20:	603a      	str	r2, [r7, #0]
 8009c22:	71fb      	strb	r3, [r7, #7]
 8009c24:	460b      	mov	r3, r1
 8009c26:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009c28:	79fb      	ldrb	r3, [r7, #7]
 8009c2a:	4a09      	ldr	r2, [pc, #36]	@ (8009c50 <disk_ioctl+0x38>)
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4413      	add	r3, r2
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	79fa      	ldrb	r2, [r7, #7]
 8009c36:	4906      	ldr	r1, [pc, #24]	@ (8009c50 <disk_ioctl+0x38>)
 8009c38:	440a      	add	r2, r1
 8009c3a:	7a10      	ldrb	r0, [r2, #8]
 8009c3c:	79b9      	ldrb	r1, [r7, #6]
 8009c3e:	683a      	ldr	r2, [r7, #0]
 8009c40:	4798      	blx	r3
 8009c42:	4603      	mov	r3, r0
 8009c44:	73fb      	strb	r3, [r7, #15]
  return res;
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	200008cc 	.word	0x200008cc

08009c54 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009c64:	89fb      	ldrh	r3, [r7, #14]
 8009c66:	021b      	lsls	r3, r3, #8
 8009c68:	b21a      	sxth	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	b21b      	sxth	r3, r3
 8009c70:	4313      	orrs	r3, r2
 8009c72:	b21b      	sxth	r3, r3
 8009c74:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009c76:	89fb      	ldrh	r3, [r7, #14]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3714      	adds	r7, #20
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	3303      	adds	r3, #3
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	021b      	lsls	r3, r3, #8
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	3202      	adds	r2, #2
 8009c9c:	7812      	ldrb	r2, [r2, #0]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	021b      	lsls	r3, r3, #8
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	3201      	adds	r2, #1
 8009caa:	7812      	ldrb	r2, [r2, #0]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	021b      	lsls	r3, r3, #8
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	7812      	ldrb	r2, [r2, #0]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	60fb      	str	r3, [r7, #12]
	return rv;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3714      	adds	r7, #20
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr

08009cca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009cca:	b480      	push	{r7}
 8009ccc:	b083      	sub	sp, #12
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	1c5a      	adds	r2, r3, #1
 8009cda:	607a      	str	r2, [r7, #4]
 8009cdc:	887a      	ldrh	r2, [r7, #2]
 8009cde:	b2d2      	uxtb	r2, r2
 8009ce0:	701a      	strb	r2, [r3, #0]
 8009ce2:	887b      	ldrh	r3, [r7, #2]
 8009ce4:	0a1b      	lsrs	r3, r3, #8
 8009ce6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	1c5a      	adds	r2, r3, #1
 8009cec:	607a      	str	r2, [r7, #4]
 8009cee:	887a      	ldrh	r2, [r7, #2]
 8009cf0:	b2d2      	uxtb	r2, r2
 8009cf2:	701a      	strb	r2, [r3, #0]
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	1c5a      	adds	r2, r3, #1
 8009d0e:	607a      	str	r2, [r7, #4]
 8009d10:	683a      	ldr	r2, [r7, #0]
 8009d12:	b2d2      	uxtb	r2, r2
 8009d14:	701a      	strb	r2, [r3, #0]
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	0a1b      	lsrs	r3, r3, #8
 8009d1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	1c5a      	adds	r2, r3, #1
 8009d20:	607a      	str	r2, [r7, #4]
 8009d22:	683a      	ldr	r2, [r7, #0]
 8009d24:	b2d2      	uxtb	r2, r2
 8009d26:	701a      	strb	r2, [r3, #0]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	0a1b      	lsrs	r3, r3, #8
 8009d2c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	1c5a      	adds	r2, r3, #1
 8009d32:	607a      	str	r2, [r7, #4]
 8009d34:	683a      	ldr	r2, [r7, #0]
 8009d36:	b2d2      	uxtb	r2, r2
 8009d38:	701a      	strb	r2, [r3, #0]
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	0a1b      	lsrs	r3, r3, #8
 8009d3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	1c5a      	adds	r2, r3, #1
 8009d44:	607a      	str	r2, [r7, #4]
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	b2d2      	uxtb	r2, r2
 8009d4a:	701a      	strb	r2, [r3, #0]
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009d58:	b480      	push	{r7}
 8009d5a:	b087      	sub	sp, #28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00d      	beq.n	8009d8e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009d72:	693a      	ldr	r2, [r7, #16]
 8009d74:	1c53      	adds	r3, r2, #1
 8009d76:	613b      	str	r3, [r7, #16]
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	1c59      	adds	r1, r3, #1
 8009d7c:	6179      	str	r1, [r7, #20]
 8009d7e:	7812      	ldrb	r2, [r2, #0]
 8009d80:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	3b01      	subs	r3, #1
 8009d86:	607b      	str	r3, [r7, #4]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1f1      	bne.n	8009d72 <mem_cpy+0x1a>
	}
}
 8009d8e:	bf00      	nop
 8009d90:	371c      	adds	r7, #28
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr

08009d9a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009d9a:	b480      	push	{r7}
 8009d9c:	b087      	sub	sp, #28
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	60f8      	str	r0, [r7, #12]
 8009da2:	60b9      	str	r1, [r7, #8]
 8009da4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	1c5a      	adds	r2, r3, #1
 8009dae:	617a      	str	r2, [r7, #20]
 8009db0:	68ba      	ldr	r2, [r7, #8]
 8009db2:	b2d2      	uxtb	r2, r2
 8009db4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	3b01      	subs	r3, #1
 8009dba:	607b      	str	r3, [r7, #4]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1f3      	bne.n	8009daa <mem_set+0x10>
}
 8009dc2:	bf00      	nop
 8009dc4:	bf00      	nop
 8009dc6:	371c      	adds	r7, #28
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009dd0:	b480      	push	{r7}
 8009dd2:	b089      	sub	sp, #36	@ 0x24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	61fb      	str	r3, [r7, #28]
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009de4:	2300      	movs	r3, #0
 8009de6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	61fa      	str	r2, [r7, #28]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	4619      	mov	r1, r3
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	1c5a      	adds	r2, r3, #1
 8009df6:	61ba      	str	r2, [r7, #24]
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	1acb      	subs	r3, r1, r3
 8009dfc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	3b01      	subs	r3, #1
 8009e02:	607b      	str	r3, [r7, #4]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d002      	beq.n	8009e10 <mem_cmp+0x40>
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d0eb      	beq.n	8009de8 <mem_cmp+0x18>

	return r;
 8009e10:	697b      	ldr	r3, [r7, #20]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3724      	adds	r7, #36	@ 0x24
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009e1e:	b480      	push	{r7}
 8009e20:	b083      	sub	sp, #12
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009e28:	e002      	b.n	8009e30 <chk_chr+0x12>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	607b      	str	r3, [r7, #4]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d005      	beq.n	8009e44 <chk_chr+0x26>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d1f2      	bne.n	8009e2a <chk_chr+0xc>
	return *str;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	781b      	ldrb	r3, [r3, #0]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009e5e:	2300      	movs	r3, #0
 8009e60:	60bb      	str	r3, [r7, #8]
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	60fb      	str	r3, [r7, #12]
 8009e66:	e029      	b.n	8009ebc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009e68:	4a27      	ldr	r2, [pc, #156]	@ (8009f08 <chk_lock+0xb4>)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	011b      	lsls	r3, r3, #4
 8009e6e:	4413      	add	r3, r2
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d01d      	beq.n	8009eb2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009e76:	4a24      	ldr	r2, [pc, #144]	@ (8009f08 <chk_lock+0xb4>)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	011b      	lsls	r3, r3, #4
 8009e7c:	4413      	add	r3, r2
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d116      	bne.n	8009eb6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009e88:	4a1f      	ldr	r2, [pc, #124]	@ (8009f08 <chk_lock+0xb4>)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	011b      	lsls	r3, r3, #4
 8009e8e:	4413      	add	r3, r2
 8009e90:	3304      	adds	r3, #4
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d10c      	bne.n	8009eb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8009f08 <chk_lock+0xb4>)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	011b      	lsls	r3, r3, #4
 8009ea2:	4413      	add	r3, r2
 8009ea4:	3308      	adds	r3, #8
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d102      	bne.n	8009eb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009eb0:	e007      	b.n	8009ec2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	60fb      	str	r3, [r7, #12]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d9d2      	bls.n	8009e68 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d109      	bne.n	8009edc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d102      	bne.n	8009ed4 <chk_lock+0x80>
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d101      	bne.n	8009ed8 <chk_lock+0x84>
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	e010      	b.n	8009efa <chk_lock+0xa6>
 8009ed8:	2312      	movs	r3, #18
 8009eda:	e00e      	b.n	8009efa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d108      	bne.n	8009ef4 <chk_lock+0xa0>
 8009ee2:	4a09      	ldr	r2, [pc, #36]	@ (8009f08 <chk_lock+0xb4>)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	011b      	lsls	r3, r3, #4
 8009ee8:	4413      	add	r3, r2
 8009eea:	330c      	adds	r3, #12
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ef2:	d101      	bne.n	8009ef8 <chk_lock+0xa4>
 8009ef4:	2310      	movs	r3, #16
 8009ef6:	e000      	b.n	8009efa <chk_lock+0xa6>
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3714      	adds	r7, #20
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	200008ac 	.word	0x200008ac

08009f0c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009f12:	2300      	movs	r3, #0
 8009f14:	607b      	str	r3, [r7, #4]
 8009f16:	e002      	b.n	8009f1e <enq_lock+0x12>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	607b      	str	r3, [r7, #4]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d806      	bhi.n	8009f32 <enq_lock+0x26>
 8009f24:	4a09      	ldr	r2, [pc, #36]	@ (8009f4c <enq_lock+0x40>)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	011b      	lsls	r3, r3, #4
 8009f2a:	4413      	add	r3, r2
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d1f2      	bne.n	8009f18 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	bf14      	ite	ne
 8009f38:	2301      	movne	r3, #1
 8009f3a:	2300      	moveq	r3, #0
 8009f3c:	b2db      	uxtb	r3, r3
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	370c      	adds	r7, #12
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr
 8009f4a:	bf00      	nop
 8009f4c:	200008ac 	.word	0x200008ac

08009f50 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	60fb      	str	r3, [r7, #12]
 8009f5e:	e01f      	b.n	8009fa0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009f60:	4a41      	ldr	r2, [pc, #260]	@ (800a068 <inc_lock+0x118>)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	011b      	lsls	r3, r3, #4
 8009f66:	4413      	add	r3, r2
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d113      	bne.n	8009f9a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009f72:	4a3d      	ldr	r2, [pc, #244]	@ (800a068 <inc_lock+0x118>)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	011b      	lsls	r3, r3, #4
 8009f78:	4413      	add	r3, r2
 8009f7a:	3304      	adds	r3, #4
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d109      	bne.n	8009f9a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009f86:	4a38      	ldr	r2, [pc, #224]	@ (800a068 <inc_lock+0x118>)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	011b      	lsls	r3, r3, #4
 8009f8c:	4413      	add	r3, r2
 8009f8e:	3308      	adds	r3, #8
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d006      	beq.n	8009fa8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	60fb      	str	r3, [r7, #12]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d9dc      	bls.n	8009f60 <inc_lock+0x10>
 8009fa6:	e000      	b.n	8009faa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009fa8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2b02      	cmp	r3, #2
 8009fae:	d132      	bne.n	800a016 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	e002      	b.n	8009fbc <inc_lock+0x6c>
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	60fb      	str	r3, [r7, #12]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d806      	bhi.n	8009fd0 <inc_lock+0x80>
 8009fc2:	4a29      	ldr	r2, [pc, #164]	@ (800a068 <inc_lock+0x118>)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	011b      	lsls	r3, r3, #4
 8009fc8:	4413      	add	r3, r2
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1f2      	bne.n	8009fb6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d101      	bne.n	8009fda <inc_lock+0x8a>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	e040      	b.n	800a05c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	4922      	ldr	r1, [pc, #136]	@ (800a068 <inc_lock+0x118>)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	011b      	lsls	r3, r3, #4
 8009fe4:	440b      	add	r3, r1
 8009fe6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	689a      	ldr	r2, [r3, #8]
 8009fec:	491e      	ldr	r1, [pc, #120]	@ (800a068 <inc_lock+0x118>)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	011b      	lsls	r3, r3, #4
 8009ff2:	440b      	add	r3, r1
 8009ff4:	3304      	adds	r3, #4
 8009ff6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	695a      	ldr	r2, [r3, #20]
 8009ffc:	491a      	ldr	r1, [pc, #104]	@ (800a068 <inc_lock+0x118>)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	011b      	lsls	r3, r3, #4
 800a002:	440b      	add	r3, r1
 800a004:	3308      	adds	r3, #8
 800a006:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a008:	4a17      	ldr	r2, [pc, #92]	@ (800a068 <inc_lock+0x118>)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	011b      	lsls	r3, r3, #4
 800a00e:	4413      	add	r3, r2
 800a010:	330c      	adds	r3, #12
 800a012:	2200      	movs	r2, #0
 800a014:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d009      	beq.n	800a030 <inc_lock+0xe0>
 800a01c:	4a12      	ldr	r2, [pc, #72]	@ (800a068 <inc_lock+0x118>)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	011b      	lsls	r3, r3, #4
 800a022:	4413      	add	r3, r2
 800a024:	330c      	adds	r3, #12
 800a026:	881b      	ldrh	r3, [r3, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d001      	beq.n	800a030 <inc_lock+0xe0>
 800a02c:	2300      	movs	r3, #0
 800a02e:	e015      	b.n	800a05c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d108      	bne.n	800a048 <inc_lock+0xf8>
 800a036:	4a0c      	ldr	r2, [pc, #48]	@ (800a068 <inc_lock+0x118>)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	011b      	lsls	r3, r3, #4
 800a03c:	4413      	add	r3, r2
 800a03e:	330c      	adds	r3, #12
 800a040:	881b      	ldrh	r3, [r3, #0]
 800a042:	3301      	adds	r3, #1
 800a044:	b29a      	uxth	r2, r3
 800a046:	e001      	b.n	800a04c <inc_lock+0xfc>
 800a048:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a04c:	4906      	ldr	r1, [pc, #24]	@ (800a068 <inc_lock+0x118>)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	011b      	lsls	r3, r3, #4
 800a052:	440b      	add	r3, r1
 800a054:	330c      	adds	r3, #12
 800a056:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	3301      	adds	r3, #1
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr
 800a068:	200008ac 	.word	0x200008ac

0800a06c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	3b01      	subs	r3, #1
 800a078:	607b      	str	r3, [r7, #4]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d825      	bhi.n	800a0cc <dec_lock+0x60>
		n = Files[i].ctr;
 800a080:	4a17      	ldr	r2, [pc, #92]	@ (800a0e0 <dec_lock+0x74>)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	011b      	lsls	r3, r3, #4
 800a086:	4413      	add	r3, r2
 800a088:	330c      	adds	r3, #12
 800a08a:	881b      	ldrh	r3, [r3, #0]
 800a08c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a08e:	89fb      	ldrh	r3, [r7, #14]
 800a090:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a094:	d101      	bne.n	800a09a <dec_lock+0x2e>
 800a096:	2300      	movs	r3, #0
 800a098:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a09a:	89fb      	ldrh	r3, [r7, #14]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d002      	beq.n	800a0a6 <dec_lock+0x3a>
 800a0a0:	89fb      	ldrh	r3, [r7, #14]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a0a6:	4a0e      	ldr	r2, [pc, #56]	@ (800a0e0 <dec_lock+0x74>)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	011b      	lsls	r3, r3, #4
 800a0ac:	4413      	add	r3, r2
 800a0ae:	330c      	adds	r3, #12
 800a0b0:	89fa      	ldrh	r2, [r7, #14]
 800a0b2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a0b4:	89fb      	ldrh	r3, [r7, #14]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d105      	bne.n	800a0c6 <dec_lock+0x5a>
 800a0ba:	4a09      	ldr	r2, [pc, #36]	@ (800a0e0 <dec_lock+0x74>)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	011b      	lsls	r3, r3, #4
 800a0c0:	4413      	add	r3, r2
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	737b      	strb	r3, [r7, #13]
 800a0ca:	e001      	b.n	800a0d0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a0d0:	7b7b      	ldrb	r3, [r7, #13]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3714      	adds	r7, #20
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	200008ac 	.word	0x200008ac

0800a0e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	60fb      	str	r3, [r7, #12]
 800a0f0:	e010      	b.n	800a114 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a0f2:	4a0d      	ldr	r2, [pc, #52]	@ (800a128 <clear_lock+0x44>)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	011b      	lsls	r3, r3, #4
 800a0f8:	4413      	add	r3, r2
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d105      	bne.n	800a10e <clear_lock+0x2a>
 800a102:	4a09      	ldr	r2, [pc, #36]	@ (800a128 <clear_lock+0x44>)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	011b      	lsls	r3, r3, #4
 800a108:	4413      	add	r3, r2
 800a10a:	2200      	movs	r2, #0
 800a10c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	3301      	adds	r3, #1
 800a112:	60fb      	str	r3, [r7, #12]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d9eb      	bls.n	800a0f2 <clear_lock+0xe>
	}
}
 800a11a:	bf00      	nop
 800a11c:	bf00      	nop
 800a11e:	3714      	adds	r7, #20
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr
 800a128:	200008ac 	.word	0x200008ac

0800a12c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b086      	sub	sp, #24
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	78db      	ldrb	r3, [r3, #3]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d034      	beq.n	800a1aa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a144:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	7858      	ldrb	r0, [r3, #1]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a150:	2301      	movs	r3, #1
 800a152:	697a      	ldr	r2, [r7, #20]
 800a154:	f7ff fd40 	bl	8009bd8 <disk_write>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d002      	beq.n	800a164 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a15e:	2301      	movs	r3, #1
 800a160:	73fb      	strb	r3, [r7, #15]
 800a162:	e022      	b.n	800a1aa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a1b      	ldr	r3, [r3, #32]
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	1ad2      	subs	r2, r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	429a      	cmp	r2, r3
 800a178:	d217      	bcs.n	800a1aa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	789b      	ldrb	r3, [r3, #2]
 800a17e:	613b      	str	r3, [r7, #16]
 800a180:	e010      	b.n	800a1a4 <sync_window+0x78>
					wsect += fs->fsize;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	697a      	ldr	r2, [r7, #20]
 800a188:	4413      	add	r3, r2
 800a18a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	7858      	ldrb	r0, [r3, #1]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a196:	2301      	movs	r3, #1
 800a198:	697a      	ldr	r2, [r7, #20]
 800a19a:	f7ff fd1d 	bl	8009bd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	613b      	str	r3, [r7, #16]
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d8eb      	bhi.n	800a182 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3718      	adds	r7, #24
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1c6:	683a      	ldr	r2, [r7, #0]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d01b      	beq.n	800a204 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f7ff ffad 	bl	800a12c <sync_window>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a1d6:	7bfb      	ldrb	r3, [r7, #15]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d113      	bne.n	800a204 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	7858      	ldrb	r0, [r3, #1]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	683a      	ldr	r2, [r7, #0]
 800a1ea:	f7ff fcd5 	bl	8009b98 <disk_read>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d004      	beq.n	800a1fe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a1f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1f8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	683a      	ldr	r2, [r7, #0]
 800a202:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800a204:	7bfb      	ldrb	r3, [r7, #15]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
	...

0800a210 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f7ff ff87 	bl	800a12c <sync_window>
 800a21e:	4603      	mov	r3, r0
 800a220:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a222:	7bfb      	ldrb	r3, [r7, #15]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d158      	bne.n	800a2da <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	2b03      	cmp	r3, #3
 800a22e:	d148      	bne.n	800a2c2 <sync_fs+0xb2>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	791b      	ldrb	r3, [r3, #4]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d144      	bne.n	800a2c2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3330      	adds	r3, #48	@ 0x30
 800a23c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a240:	2100      	movs	r1, #0
 800a242:	4618      	mov	r0, r3
 800a244:	f7ff fda9 	bl	8009d9a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	3330      	adds	r3, #48	@ 0x30
 800a24c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a250:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a254:	4618      	mov	r0, r3
 800a256:	f7ff fd38 	bl	8009cca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3330      	adds	r3, #48	@ 0x30
 800a25e:	4921      	ldr	r1, [pc, #132]	@ (800a2e4 <sync_fs+0xd4>)
 800a260:	4618      	mov	r0, r3
 800a262:	f7ff fd4d 	bl	8009d00 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	3330      	adds	r3, #48	@ 0x30
 800a26a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a26e:	491e      	ldr	r1, [pc, #120]	@ (800a2e8 <sync_fs+0xd8>)
 800a270:	4618      	mov	r0, r3
 800a272:	f7ff fd45 	bl	8009d00 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	3330      	adds	r3, #48	@ 0x30
 800a27a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	4619      	mov	r1, r3
 800a284:	4610      	mov	r0, r2
 800a286:	f7ff fd3b 	bl	8009d00 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	3330      	adds	r3, #48	@ 0x30
 800a28e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	4619      	mov	r1, r3
 800a298:	4610      	mov	r0, r2
 800a29a:	f7ff fd31 	bl	8009d00 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	69db      	ldr	r3, [r3, #28]
 800a2a2:	1c5a      	adds	r2, r3, #1
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	7858      	ldrb	r0, [r3, #1]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	f7ff fc8e 	bl	8009bd8 <disk_write>
			fs->fsi_flag = 0;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	785b      	ldrb	r3, [r3, #1]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7ff fca4 	bl	8009c18 <disk_ioctl>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d001      	beq.n	800a2da <sync_fs+0xca>
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	41615252 	.word	0x41615252
 800a2e8:	61417272 	.word	0x61417272

0800a2ec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	3b02      	subs	r3, #2
 800a2fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	695b      	ldr	r3, [r3, #20]
 800a300:	3b02      	subs	r3, #2
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	429a      	cmp	r2, r3
 800a306:	d301      	bcc.n	800a30c <clust2sect+0x20>
 800a308:	2300      	movs	r3, #0
 800a30a:	e008      	b.n	800a31e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	895b      	ldrh	r3, [r3, #10]
 800a310:	461a      	mov	r2, r3
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	fb03 f202 	mul.w	r2, r3, r2
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a31c:	4413      	add	r3, r2
}
 800a31e:	4618      	mov	r0, r3
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b086      	sub	sp, #24
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
 800a332:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d904      	bls.n	800a34a <get_fat+0x20>
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	429a      	cmp	r2, r3
 800a348:	d302      	bcc.n	800a350 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a34a:	2301      	movs	r3, #1
 800a34c:	617b      	str	r3, [r7, #20]
 800a34e:	e08e      	b.n	800a46e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a350:	f04f 33ff 	mov.w	r3, #4294967295
 800a354:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	2b03      	cmp	r3, #3
 800a35c:	d061      	beq.n	800a422 <get_fat+0xf8>
 800a35e:	2b03      	cmp	r3, #3
 800a360:	dc7b      	bgt.n	800a45a <get_fat+0x130>
 800a362:	2b01      	cmp	r3, #1
 800a364:	d002      	beq.n	800a36c <get_fat+0x42>
 800a366:	2b02      	cmp	r3, #2
 800a368:	d041      	beq.n	800a3ee <get_fat+0xc4>
 800a36a:	e076      	b.n	800a45a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	60fb      	str	r3, [r7, #12]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	085b      	lsrs	r3, r3, #1
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	4413      	add	r3, r2
 800a378:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	6a1a      	ldr	r2, [r3, #32]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	0a5b      	lsrs	r3, r3, #9
 800a382:	4413      	add	r3, r2
 800a384:	4619      	mov	r1, r3
 800a386:	6938      	ldr	r0, [r7, #16]
 800a388:	f7ff ff14 	bl	800a1b4 <move_window>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d166      	bne.n	800a460 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	1c5a      	adds	r2, r3, #1
 800a396:	60fa      	str	r2, [r7, #12]
 800a398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a39c:	693a      	ldr	r2, [r7, #16]
 800a39e:	4413      	add	r3, r2
 800a3a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a3a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	6a1a      	ldr	r2, [r3, #32]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	0a5b      	lsrs	r3, r3, #9
 800a3ae:	4413      	add	r3, r2
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	6938      	ldr	r0, [r7, #16]
 800a3b4:	f7ff fefe 	bl	800a1b4 <move_window>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d152      	bne.n	800a464 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3c4:	693a      	ldr	r2, [r7, #16]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a3cc:	021b      	lsls	r3, r3, #8
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	f003 0301 	and.w	r3, r3, #1
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d002      	beq.n	800a3e4 <get_fat+0xba>
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	091b      	lsrs	r3, r3, #4
 800a3e2:	e002      	b.n	800a3ea <get_fat+0xc0>
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3ea:	617b      	str	r3, [r7, #20]
			break;
 800a3ec:	e03f      	b.n	800a46e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	6a1a      	ldr	r2, [r3, #32]
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	0a1b      	lsrs	r3, r3, #8
 800a3f6:	4413      	add	r3, r2
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6938      	ldr	r0, [r7, #16]
 800a3fc:	f7ff feda 	bl	800a1b4 <move_window>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d130      	bne.n	800a468 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	005b      	lsls	r3, r3, #1
 800a410:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a414:	4413      	add	r3, r2
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff fc1c 	bl	8009c54 <ld_word>
 800a41c:	4603      	mov	r3, r0
 800a41e:	617b      	str	r3, [r7, #20]
			break;
 800a420:	e025      	b.n	800a46e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	6a1a      	ldr	r2, [r3, #32]
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	09db      	lsrs	r3, r3, #7
 800a42a:	4413      	add	r3, r2
 800a42c:	4619      	mov	r1, r3
 800a42e:	6938      	ldr	r0, [r7, #16]
 800a430:	f7ff fec0 	bl	800a1b4 <move_window>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d118      	bne.n	800a46c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a448:	4413      	add	r3, r2
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7ff fc1a 	bl	8009c84 <ld_dword>
 800a450:	4603      	mov	r3, r0
 800a452:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a456:	617b      	str	r3, [r7, #20]
			break;
 800a458:	e009      	b.n	800a46e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a45a:	2301      	movs	r3, #1
 800a45c:	617b      	str	r3, [r7, #20]
 800a45e:	e006      	b.n	800a46e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a460:	bf00      	nop
 800a462:	e004      	b.n	800a46e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a464:	bf00      	nop
 800a466:	e002      	b.n	800a46e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a468:	bf00      	nop
 800a46a:	e000      	b.n	800a46e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a46c:	bf00      	nop
		}
	}

	return val;
 800a46e:	697b      	ldr	r3, [r7, #20]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3718      	adds	r7, #24
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a478:	b590      	push	{r4, r7, lr}
 800a47a:	b089      	sub	sp, #36	@ 0x24
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a484:	2302      	movs	r3, #2
 800a486:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	f240 80d9 	bls.w	800a642 <put_fat+0x1ca>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	695b      	ldr	r3, [r3, #20]
 800a494:	68ba      	ldr	r2, [r7, #8]
 800a496:	429a      	cmp	r2, r3
 800a498:	f080 80d3 	bcs.w	800a642 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	2b03      	cmp	r3, #3
 800a4a2:	f000 8096 	beq.w	800a5d2 <put_fat+0x15a>
 800a4a6:	2b03      	cmp	r3, #3
 800a4a8:	f300 80cb 	bgt.w	800a642 <put_fat+0x1ca>
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d002      	beq.n	800a4b6 <put_fat+0x3e>
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d06e      	beq.n	800a592 <put_fat+0x11a>
 800a4b4:	e0c5      	b.n	800a642 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	61bb      	str	r3, [r7, #24]
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	085b      	lsrs	r3, r3, #1
 800a4be:	69ba      	ldr	r2, [r7, #24]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6a1a      	ldr	r2, [r3, #32]
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	0a5b      	lsrs	r3, r3, #9
 800a4cc:	4413      	add	r3, r2
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f7ff fe6f 	bl	800a1b4 <move_window>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4da:	7ffb      	ldrb	r3, [r7, #31]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f040 80a9 	bne.w	800a634 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	1c59      	adds	r1, r3, #1
 800a4ec:	61b9      	str	r1, [r7, #24]
 800a4ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4f2:	4413      	add	r3, r2
 800a4f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	f003 0301 	and.w	r3, r3, #1
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00d      	beq.n	800a51c <put_fat+0xa4>
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	b25b      	sxtb	r3, r3
 800a506:	f003 030f 	and.w	r3, r3, #15
 800a50a:	b25a      	sxtb	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	011b      	lsls	r3, r3, #4
 800a512:	b25b      	sxtb	r3, r3
 800a514:	4313      	orrs	r3, r2
 800a516:	b25b      	sxtb	r3, r3
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	e001      	b.n	800a520 <put_fat+0xa8>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	697a      	ldr	r2, [r7, #20]
 800a522:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2201      	movs	r2, #1
 800a528:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6a1a      	ldr	r2, [r3, #32]
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	0a5b      	lsrs	r3, r3, #9
 800a532:	4413      	add	r3, r2
 800a534:	4619      	mov	r1, r3
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f7ff fe3c 	bl	800a1b4 <move_window>
 800a53c:	4603      	mov	r3, r0
 800a53e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a540:	7ffb      	ldrb	r3, [r7, #31]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d178      	bne.n	800a638 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a552:	4413      	add	r3, r2
 800a554:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	f003 0301 	and.w	r3, r3, #1
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d003      	beq.n	800a568 <put_fat+0xf0>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	091b      	lsrs	r3, r3, #4
 800a564:	b2db      	uxtb	r3, r3
 800a566:	e00e      	b.n	800a586 <put_fat+0x10e>
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	b25b      	sxtb	r3, r3
 800a56e:	f023 030f 	bic.w	r3, r3, #15
 800a572:	b25a      	sxtb	r2, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	0a1b      	lsrs	r3, r3, #8
 800a578:	b25b      	sxtb	r3, r3
 800a57a:	f003 030f 	and.w	r3, r3, #15
 800a57e:	b25b      	sxtb	r3, r3
 800a580:	4313      	orrs	r3, r2
 800a582:	b25b      	sxtb	r3, r3
 800a584:	b2db      	uxtb	r3, r3
 800a586:	697a      	ldr	r2, [r7, #20]
 800a588:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2201      	movs	r2, #1
 800a58e:	70da      	strb	r2, [r3, #3]
			break;
 800a590:	e057      	b.n	800a642 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6a1a      	ldr	r2, [r3, #32]
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	0a1b      	lsrs	r3, r3, #8
 800a59a:	4413      	add	r3, r2
 800a59c:	4619      	mov	r1, r3
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f7ff fe08 	bl	800a1b4 <move_window>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a5a8:	7ffb      	ldrb	r3, [r7, #31]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d146      	bne.n	800a63c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	005b      	lsls	r3, r3, #1
 800a5b8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a5bc:	4413      	add	r3, r2
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	b292      	uxth	r2, r2
 800a5c2:	4611      	mov	r1, r2
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7ff fb80 	bl	8009cca <st_word>
			fs->wflag = 1;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	70da      	strb	r2, [r3, #3]
			break;
 800a5d0:	e037      	b.n	800a642 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6a1a      	ldr	r2, [r3, #32]
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	09db      	lsrs	r3, r3, #7
 800a5da:	4413      	add	r3, r2
 800a5dc:	4619      	mov	r1, r3
 800a5de:	68f8      	ldr	r0, [r7, #12]
 800a5e0:	f7ff fde8 	bl	800a1b4 <move_window>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a5e8:	7ffb      	ldrb	r3, [r7, #31]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d128      	bne.n	800a640 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a602:	4413      	add	r3, r2
 800a604:	4618      	mov	r0, r3
 800a606:	f7ff fb3d 	bl	8009c84 <ld_dword>
 800a60a:	4603      	mov	r3, r0
 800a60c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a610:	4323      	orrs	r3, r4
 800a612:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a622:	4413      	add	r3, r2
 800a624:	6879      	ldr	r1, [r7, #4]
 800a626:	4618      	mov	r0, r3
 800a628:	f7ff fb6a 	bl	8009d00 <st_dword>
			fs->wflag = 1;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2201      	movs	r2, #1
 800a630:	70da      	strb	r2, [r3, #3]
			break;
 800a632:	e006      	b.n	800a642 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a634:	bf00      	nop
 800a636:	e004      	b.n	800a642 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a638:	bf00      	nop
 800a63a:	e002      	b.n	800a642 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a63c:	bf00      	nop
 800a63e:	e000      	b.n	800a642 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a640:	bf00      	nop
		}
	}
	return res;
 800a642:	7ffb      	ldrb	r3, [r7, #31]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3724      	adds	r7, #36	@ 0x24
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd90      	pop	{r4, r7, pc}

0800a64c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b088      	sub	sp, #32
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a658:	2300      	movs	r3, #0
 800a65a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	2b01      	cmp	r3, #1
 800a666:	d904      	bls.n	800a672 <remove_chain+0x26>
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	695b      	ldr	r3, [r3, #20]
 800a66c:	68ba      	ldr	r2, [r7, #8]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d301      	bcc.n	800a676 <remove_chain+0x2a>
 800a672:	2302      	movs	r3, #2
 800a674:	e04b      	b.n	800a70e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00c      	beq.n	800a696 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a67c:	f04f 32ff 	mov.w	r2, #4294967295
 800a680:	6879      	ldr	r1, [r7, #4]
 800a682:	69b8      	ldr	r0, [r7, #24]
 800a684:	f7ff fef8 	bl	800a478 <put_fat>
 800a688:	4603      	mov	r3, r0
 800a68a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a68c:	7ffb      	ldrb	r3, [r7, #31]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d001      	beq.n	800a696 <remove_chain+0x4a>
 800a692:	7ffb      	ldrb	r3, [r7, #31]
 800a694:	e03b      	b.n	800a70e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a696:	68b9      	ldr	r1, [r7, #8]
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f7ff fe46 	bl	800a32a <get_fat>
 800a69e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d031      	beq.n	800a70a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d101      	bne.n	800a6b0 <remove_chain+0x64>
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	e02e      	b.n	800a70e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b6:	d101      	bne.n	800a6bc <remove_chain+0x70>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e028      	b.n	800a70e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a6bc:	2200      	movs	r2, #0
 800a6be:	68b9      	ldr	r1, [r7, #8]
 800a6c0:	69b8      	ldr	r0, [r7, #24]
 800a6c2:	f7ff fed9 	bl	800a478 <put_fat>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a6ca:	7ffb      	ldrb	r3, [r7, #31]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d001      	beq.n	800a6d4 <remove_chain+0x88>
 800a6d0:	7ffb      	ldrb	r3, [r7, #31]
 800a6d2:	e01c      	b.n	800a70e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	691a      	ldr	r2, [r3, #16]
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	695b      	ldr	r3, [r3, #20]
 800a6dc:	3b02      	subs	r3, #2
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d20b      	bcs.n	800a6fa <remove_chain+0xae>
			fs->free_clst++;
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	1c5a      	adds	r2, r3, #1
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	791b      	ldrb	r3, [r3, #4]
 800a6f0:	f043 0301 	orr.w	r3, r3, #1
 800a6f4:	b2da      	uxtb	r2, r3
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	695b      	ldr	r3, [r3, #20]
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	429a      	cmp	r2, r3
 800a706:	d3c6      	bcc.n	800a696 <remove_chain+0x4a>
 800a708:	e000      	b.n	800a70c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a70a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3720      	adds	r7, #32
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b088      	sub	sp, #32
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d10d      	bne.n	800a748 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d004      	beq.n	800a742 <create_chain+0x2c>
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	695b      	ldr	r3, [r3, #20]
 800a73c:	69ba      	ldr	r2, [r7, #24]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d31b      	bcc.n	800a77a <create_chain+0x64>
 800a742:	2301      	movs	r3, #1
 800a744:	61bb      	str	r3, [r7, #24]
 800a746:	e018      	b.n	800a77a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a748:	6839      	ldr	r1, [r7, #0]
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f7ff fded 	bl	800a32a <get_fat>
 800a750:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d801      	bhi.n	800a75c <create_chain+0x46>
 800a758:	2301      	movs	r3, #1
 800a75a:	e070      	b.n	800a83e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a762:	d101      	bne.n	800a768 <create_chain+0x52>
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	e06a      	b.n	800a83e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	695b      	ldr	r3, [r3, #20]
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d201      	bcs.n	800a776 <create_chain+0x60>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	e063      	b.n	800a83e <create_chain+0x128>
		scl = clst;
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	3301      	adds	r3, #1
 800a782:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	695b      	ldr	r3, [r3, #20]
 800a788:	69fa      	ldr	r2, [r7, #28]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d307      	bcc.n	800a79e <create_chain+0x88>
				ncl = 2;
 800a78e:	2302      	movs	r3, #2
 800a790:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a792:	69fa      	ldr	r2, [r7, #28]
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	429a      	cmp	r2, r3
 800a798:	d901      	bls.n	800a79e <create_chain+0x88>
 800a79a:	2300      	movs	r3, #0
 800a79c:	e04f      	b.n	800a83e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a79e:	69f9      	ldr	r1, [r7, #28]
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f7ff fdc2 	bl	800a32a <get_fat>
 800a7a6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00e      	beq.n	800a7cc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d003      	beq.n	800a7bc <create_chain+0xa6>
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ba:	d101      	bne.n	800a7c0 <create_chain+0xaa>
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	e03e      	b.n	800a83e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a7c0:	69fa      	ldr	r2, [r7, #28]
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d1da      	bne.n	800a77e <create_chain+0x68>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	e038      	b.n	800a83e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a7cc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a7ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a7d2:	69f9      	ldr	r1, [r7, #28]
 800a7d4:	6938      	ldr	r0, [r7, #16]
 800a7d6:	f7ff fe4f 	bl	800a478 <put_fat>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a7de:	7dfb      	ldrb	r3, [r7, #23]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d109      	bne.n	800a7f8 <create_chain+0xe2>
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d006      	beq.n	800a7f8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a7ea:	69fa      	ldr	r2, [r7, #28]
 800a7ec:	6839      	ldr	r1, [r7, #0]
 800a7ee:	6938      	ldr	r0, [r7, #16]
 800a7f0:	f7ff fe42 	bl	800a478 <put_fat>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a7f8:	7dfb      	ldrb	r3, [r7, #23]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d116      	bne.n	800a82c <create_chain+0x116>
		fs->last_clst = ncl;
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	69fa      	ldr	r2, [r7, #28]
 800a802:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	691a      	ldr	r2, [r3, #16]
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	695b      	ldr	r3, [r3, #20]
 800a80c:	3b02      	subs	r3, #2
 800a80e:	429a      	cmp	r2, r3
 800a810:	d804      	bhi.n	800a81c <create_chain+0x106>
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	1e5a      	subs	r2, r3, #1
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	791b      	ldrb	r3, [r3, #4]
 800a820:	f043 0301 	orr.w	r3, r3, #1
 800a824:	b2da      	uxtb	r2, r3
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	711a      	strb	r2, [r3, #4]
 800a82a:	e007      	b.n	800a83c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a82c:	7dfb      	ldrb	r3, [r7, #23]
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d102      	bne.n	800a838 <create_chain+0x122>
 800a832:	f04f 33ff 	mov.w	r3, #4294967295
 800a836:	e000      	b.n	800a83a <create_chain+0x124>
 800a838:	2301      	movs	r3, #1
 800a83a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a83c:	69fb      	ldr	r3, [r7, #28]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3720      	adds	r7, #32
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}

0800a846 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a846:	b480      	push	{r7}
 800a848:	b087      	sub	sp, #28
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
 800a84e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a85a:	3304      	adds	r3, #4
 800a85c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	0a5b      	lsrs	r3, r3, #9
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	8952      	ldrh	r2, [r2, #10]
 800a866:	fbb3 f3f2 	udiv	r3, r3, r2
 800a86a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	1d1a      	adds	r2, r3, #4
 800a870:	613a      	str	r2, [r7, #16]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d101      	bne.n	800a880 <clmt_clust+0x3a>
 800a87c:	2300      	movs	r3, #0
 800a87e:	e010      	b.n	800a8a2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a880:	697a      	ldr	r2, [r7, #20]
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	429a      	cmp	r2, r3
 800a886:	d307      	bcc.n	800a898 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a888:	697a      	ldr	r2, [r7, #20]
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	617b      	str	r3, [r7, #20]
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	3304      	adds	r3, #4
 800a894:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a896:	e7e9      	b.n	800a86c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a898:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	4413      	add	r3, r2
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	371c      	adds	r7, #28
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr

0800a8ae <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b086      	sub	sp, #24
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
 800a8b6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a8c4:	d204      	bcs.n	800a8d0 <dir_sdi+0x22>
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	f003 031f 	and.w	r3, r3, #31
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d001      	beq.n	800a8d4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	e063      	b.n	800a99c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d106      	bne.n	800a8f4 <dir_sdi+0x46>
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d902      	bls.n	800a8f4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8f2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10c      	bne.n	800a914 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	095b      	lsrs	r3, r3, #5
 800a8fe:	693a      	ldr	r2, [r7, #16]
 800a900:	8912      	ldrh	r2, [r2, #8]
 800a902:	4293      	cmp	r3, r2
 800a904:	d301      	bcc.n	800a90a <dir_sdi+0x5c>
 800a906:	2302      	movs	r3, #2
 800a908:	e048      	b.n	800a99c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	61da      	str	r2, [r3, #28]
 800a912:	e029      	b.n	800a968 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	895b      	ldrh	r3, [r3, #10]
 800a918:	025b      	lsls	r3, r3, #9
 800a91a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a91c:	e019      	b.n	800a952 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6979      	ldr	r1, [r7, #20]
 800a922:	4618      	mov	r0, r3
 800a924:	f7ff fd01 	bl	800a32a <get_fat>
 800a928:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a930:	d101      	bne.n	800a936 <dir_sdi+0x88>
 800a932:	2301      	movs	r3, #1
 800a934:	e032      	b.n	800a99c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d904      	bls.n	800a946 <dir_sdi+0x98>
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	695b      	ldr	r3, [r3, #20]
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	429a      	cmp	r2, r3
 800a944:	d301      	bcc.n	800a94a <dir_sdi+0x9c>
 800a946:	2302      	movs	r3, #2
 800a948:	e028      	b.n	800a99c <dir_sdi+0xee>
			ofs -= csz;
 800a94a:	683a      	ldr	r2, [r7, #0]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	429a      	cmp	r2, r3
 800a958:	d2e1      	bcs.n	800a91e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a95a:	6979      	ldr	r1, [r7, #20]
 800a95c:	6938      	ldr	r0, [r7, #16]
 800a95e:	f7ff fcc5 	bl	800a2ec <clust2sect>
 800a962:	4602      	mov	r2, r0
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	697a      	ldr	r2, [r7, #20]
 800a96c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	69db      	ldr	r3, [r3, #28]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d101      	bne.n	800a97a <dir_sdi+0xcc>
 800a976:	2302      	movs	r3, #2
 800a978:	e010      	b.n	800a99c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	69da      	ldr	r2, [r3, #28]
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	0a5b      	lsrs	r3, r3, #9
 800a982:	441a      	add	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a994:	441a      	add	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a99a:	2300      	movs	r3, #0
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3718      	adds	r7, #24
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b086      	sub	sp, #24
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	695b      	ldr	r3, [r3, #20]
 800a9b8:	3320      	adds	r3, #32
 800a9ba:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	69db      	ldr	r3, [r3, #28]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d003      	beq.n	800a9cc <dir_next+0x28>
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a9ca:	d301      	bcc.n	800a9d0 <dir_next+0x2c>
 800a9cc:	2304      	movs	r3, #4
 800a9ce:	e0aa      	b.n	800ab26 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f040 8098 	bne.w	800ab0c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	69db      	ldr	r3, [r3, #28]
 800a9e0:	1c5a      	adds	r2, r3, #1
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	699b      	ldr	r3, [r3, #24]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d10b      	bne.n	800aa06 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	095b      	lsrs	r3, r3, #5
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	8912      	ldrh	r2, [r2, #8]
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	f0c0 8088 	bcc.w	800ab0c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	61da      	str	r2, [r3, #28]
 800aa02:	2304      	movs	r3, #4
 800aa04:	e08f      	b.n	800ab26 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	0a5b      	lsrs	r3, r3, #9
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	8952      	ldrh	r2, [r2, #10]
 800aa0e:	3a01      	subs	r2, #1
 800aa10:	4013      	ands	r3, r2
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d17a      	bne.n	800ab0c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	699b      	ldr	r3, [r3, #24]
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	4610      	mov	r0, r2
 800aa20:	f7ff fc83 	bl	800a32a <get_fat>
 800aa24:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d801      	bhi.n	800aa30 <dir_next+0x8c>
 800aa2c:	2302      	movs	r3, #2
 800aa2e:	e07a      	b.n	800ab26 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa36:	d101      	bne.n	800aa3c <dir_next+0x98>
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e074      	b.n	800ab26 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	695b      	ldr	r3, [r3, #20]
 800aa40:	697a      	ldr	r2, [r7, #20]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d358      	bcc.n	800aaf8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d104      	bne.n	800aa56 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	61da      	str	r2, [r3, #28]
 800aa52:	2304      	movs	r3, #4
 800aa54:	e067      	b.n	800ab26 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	699b      	ldr	r3, [r3, #24]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	4610      	mov	r0, r2
 800aa60:	f7ff fe59 	bl	800a716 <create_chain>
 800aa64:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d101      	bne.n	800aa70 <dir_next+0xcc>
 800aa6c:	2307      	movs	r3, #7
 800aa6e:	e05a      	b.n	800ab26 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d101      	bne.n	800aa7a <dir_next+0xd6>
 800aa76:	2302      	movs	r3, #2
 800aa78:	e055      	b.n	800ab26 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa80:	d101      	bne.n	800aa86 <dir_next+0xe2>
 800aa82:	2301      	movs	r3, #1
 800aa84:	e04f      	b.n	800ab26 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f7ff fb50 	bl	800a12c <sync_window>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <dir_next+0xf2>
 800aa92:	2301      	movs	r3, #1
 800aa94:	e047      	b.n	800ab26 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	3330      	adds	r3, #48	@ 0x30
 800aa9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7ff f97a 	bl	8009d9a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	613b      	str	r3, [r7, #16]
 800aaaa:	6979      	ldr	r1, [r7, #20]
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f7ff fc1d 	bl	800a2ec <clust2sect>
 800aab2:	4602      	mov	r2, r0
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800aab8:	e012      	b.n	800aae0 <dir_next+0x13c>
						fs->wflag = 1;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2201      	movs	r2, #1
 800aabe:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800aac0:	68f8      	ldr	r0, [r7, #12]
 800aac2:	f7ff fb33 	bl	800a12c <sync_window>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d001      	beq.n	800aad0 <dir_next+0x12c>
 800aacc:	2301      	movs	r3, #1
 800aace:	e02a      	b.n	800ab26 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	3301      	adds	r3, #1
 800aad4:	613b      	str	r3, [r7, #16]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aada:	1c5a      	adds	r2, r3, #1
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	62da      	str	r2, [r3, #44]	@ 0x2c
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	895b      	ldrh	r3, [r3, #10]
 800aae4:	461a      	mov	r2, r3
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d3e6      	bcc.n	800aaba <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	1ad2      	subs	r2, r2, r3
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	697a      	ldr	r2, [r7, #20]
 800aafc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800aafe:	6979      	ldr	r1, [r7, #20]
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f7ff fbf3 	bl	800a2ec <clust2sect>
 800ab06:	4602      	mov	r2, r0
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	68ba      	ldr	r2, [r7, #8]
 800ab10:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab1e:	441a      	add	r2, r3
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3718      	adds	r7, #24
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b086      	sub	sp, #24
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
 800ab36:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ab3e:	2100      	movs	r1, #0
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f7ff feb4 	bl	800a8ae <dir_sdi>
 800ab46:	4603      	mov	r3, r0
 800ab48:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ab4a:	7dfb      	ldrb	r3, [r7, #23]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d12b      	bne.n	800aba8 <dir_alloc+0x7a>
		n = 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	69db      	ldr	r3, [r3, #28]
 800ab58:	4619      	mov	r1, r3
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f7ff fb2a 	bl	800a1b4 <move_window>
 800ab60:	4603      	mov	r3, r0
 800ab62:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ab64:	7dfb      	ldrb	r3, [r7, #23]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d11d      	bne.n	800aba6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a1b      	ldr	r3, [r3, #32]
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	2be5      	cmp	r3, #229	@ 0xe5
 800ab72:	d004      	beq.n	800ab7e <dir_alloc+0x50>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a1b      	ldr	r3, [r3, #32]
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d107      	bne.n	800ab8e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	3301      	adds	r3, #1
 800ab82:	613b      	str	r3, [r7, #16]
 800ab84:	693a      	ldr	r2, [r7, #16]
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d102      	bne.n	800ab92 <dir_alloc+0x64>
 800ab8c:	e00c      	b.n	800aba8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ab8e:	2300      	movs	r3, #0
 800ab90:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ab92:	2101      	movs	r1, #1
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f7ff ff05 	bl	800a9a4 <dir_next>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ab9e:	7dfb      	ldrb	r3, [r7, #23]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d0d7      	beq.n	800ab54 <dir_alloc+0x26>
 800aba4:	e000      	b.n	800aba8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800aba6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800aba8:	7dfb      	ldrb	r3, [r7, #23]
 800abaa:	2b04      	cmp	r3, #4
 800abac:	d101      	bne.n	800abb2 <dir_alloc+0x84>
 800abae:	2307      	movs	r3, #7
 800abb0:	75fb      	strb	r3, [r7, #23]
	return res;
 800abb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3718      	adds	r7, #24
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	331a      	adds	r3, #26
 800abca:	4618      	mov	r0, r3
 800abcc:	f7ff f842 	bl	8009c54 <ld_word>
 800abd0:	4603      	mov	r3, r0
 800abd2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	2b03      	cmp	r3, #3
 800abda:	d109      	bne.n	800abf0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	3314      	adds	r3, #20
 800abe0:	4618      	mov	r0, r3
 800abe2:	f7ff f837 	bl	8009c54 <ld_word>
 800abe6:	4603      	mov	r3, r0
 800abe8:	041b      	lsls	r3, r3, #16
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	4313      	orrs	r3, r2
 800abee:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800abf0:	68fb      	ldr	r3, [r7, #12]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b084      	sub	sp, #16
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	60f8      	str	r0, [r7, #12]
 800ac02:	60b9      	str	r1, [r7, #8]
 800ac04:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	331a      	adds	r3, #26
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	b292      	uxth	r2, r2
 800ac0e:	4611      	mov	r1, r2
 800ac10:	4618      	mov	r0, r3
 800ac12:	f7ff f85a 	bl	8009cca <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	2b03      	cmp	r3, #3
 800ac1c:	d109      	bne.n	800ac32 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	f103 0214 	add.w	r2, r3, #20
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	0c1b      	lsrs	r3, r3, #16
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	4610      	mov	r0, r2
 800ac2e:	f7ff f84c 	bl	8009cca <st_word>
	}
}
 800ac32:	bf00      	nop
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b086      	sub	sp, #24
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ac48:	2100      	movs	r1, #0
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7ff fe2f 	bl	800a8ae <dir_sdi>
 800ac50:	4603      	mov	r3, r0
 800ac52:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ac54:	7dfb      	ldrb	r3, [r7, #23]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d001      	beq.n	800ac5e <dir_find+0x24>
 800ac5a:	7dfb      	ldrb	r3, [r7, #23]
 800ac5c:	e03e      	b.n	800acdc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	69db      	ldr	r3, [r3, #28]
 800ac62:	4619      	mov	r1, r3
 800ac64:	6938      	ldr	r0, [r7, #16]
 800ac66:	f7ff faa5 	bl	800a1b4 <move_window>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ac6e:	7dfb      	ldrb	r3, [r7, #23]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d12f      	bne.n	800acd4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a1b      	ldr	r3, [r3, #32]
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ac7c:	7bfb      	ldrb	r3, [r7, #15]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d102      	bne.n	800ac88 <dir_find+0x4e>
 800ac82:	2304      	movs	r3, #4
 800ac84:	75fb      	strb	r3, [r7, #23]
 800ac86:	e028      	b.n	800acda <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6a1b      	ldr	r3, [r3, #32]
 800ac8c:	330b      	adds	r3, #11
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac94:	b2da      	uxtb	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a1b      	ldr	r3, [r3, #32]
 800ac9e:	330b      	adds	r3, #11
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	f003 0308 	and.w	r3, r3, #8
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d10a      	bne.n	800acc0 <dir_find+0x86>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a18      	ldr	r0, [r3, #32]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	3324      	adds	r3, #36	@ 0x24
 800acb2:	220b      	movs	r2, #11
 800acb4:	4619      	mov	r1, r3
 800acb6:	f7ff f88b 	bl	8009dd0 <mem_cmp>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00b      	beq.n	800acd8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800acc0:	2100      	movs	r1, #0
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f7ff fe6e 	bl	800a9a4 <dir_next>
 800acc8:	4603      	mov	r3, r0
 800acca:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800accc:	7dfb      	ldrb	r3, [r7, #23]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d0c5      	beq.n	800ac5e <dir_find+0x24>
 800acd2:	e002      	b.n	800acda <dir_find+0xa0>
		if (res != FR_OK) break;
 800acd4:	bf00      	nop
 800acd6:	e000      	b.n	800acda <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800acd8:	bf00      	nop

	return res;
 800acda:	7dfb      	ldrb	r3, [r7, #23]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3718      	adds	r7, #24
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800acf2:	2101      	movs	r1, #1
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f7ff ff1a 	bl	800ab2e <dir_alloc>
 800acfa:	4603      	mov	r3, r0
 800acfc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800acfe:	7bfb      	ldrb	r3, [r7, #15]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d11c      	bne.n	800ad3e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	69db      	ldr	r3, [r3, #28]
 800ad08:	4619      	mov	r1, r3
 800ad0a:	68b8      	ldr	r0, [r7, #8]
 800ad0c:	f7ff fa52 	bl	800a1b4 <move_window>
 800ad10:	4603      	mov	r3, r0
 800ad12:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ad14:	7bfb      	ldrb	r3, [r7, #15]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d111      	bne.n	800ad3e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a1b      	ldr	r3, [r3, #32]
 800ad1e:	2220      	movs	r2, #32
 800ad20:	2100      	movs	r1, #0
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7ff f839 	bl	8009d9a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a18      	ldr	r0, [r3, #32]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	3324      	adds	r3, #36	@ 0x24
 800ad30:	220b      	movs	r2, #11
 800ad32:	4619      	mov	r1, r3
 800ad34:	f7ff f810 	bl	8009d58 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b088      	sub	sp, #32
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	60fb      	str	r3, [r7, #12]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	3324      	adds	r3, #36	@ 0x24
 800ad5c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ad5e:	220b      	movs	r2, #11
 800ad60:	2120      	movs	r1, #32
 800ad62:	68b8      	ldr	r0, [r7, #8]
 800ad64:	f7ff f819 	bl	8009d9a <mem_set>
	si = i = 0; ni = 8;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	613b      	str	r3, [r7, #16]
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	61fb      	str	r3, [r7, #28]
 800ad70:	2308      	movs	r3, #8
 800ad72:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	1c5a      	adds	r2, r3, #1
 800ad78:	61fa      	str	r2, [r7, #28]
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ad82:	7efb      	ldrb	r3, [r7, #27]
 800ad84:	2b20      	cmp	r3, #32
 800ad86:	d94e      	bls.n	800ae26 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ad88:	7efb      	ldrb	r3, [r7, #27]
 800ad8a:	2b2f      	cmp	r3, #47	@ 0x2f
 800ad8c:	d006      	beq.n	800ad9c <create_name+0x54>
 800ad8e:	7efb      	ldrb	r3, [r7, #27]
 800ad90:	2b5c      	cmp	r3, #92	@ 0x5c
 800ad92:	d110      	bne.n	800adb6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ad94:	e002      	b.n	800ad9c <create_name+0x54>
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	61fb      	str	r3, [r7, #28]
 800ad9c:	68fa      	ldr	r2, [r7, #12]
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	4413      	add	r3, r2
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	2b2f      	cmp	r3, #47	@ 0x2f
 800ada6:	d0f6      	beq.n	800ad96 <create_name+0x4e>
 800ada8:	68fa      	ldr	r2, [r7, #12]
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	4413      	add	r3, r2
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	2b5c      	cmp	r3, #92	@ 0x5c
 800adb2:	d0f0      	beq.n	800ad96 <create_name+0x4e>
			break;
 800adb4:	e038      	b.n	800ae28 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800adb6:	7efb      	ldrb	r3, [r7, #27]
 800adb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800adba:	d003      	beq.n	800adc4 <create_name+0x7c>
 800adbc:	693a      	ldr	r2, [r7, #16]
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d30c      	bcc.n	800adde <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	2b0b      	cmp	r3, #11
 800adc8:	d002      	beq.n	800add0 <create_name+0x88>
 800adca:	7efb      	ldrb	r3, [r7, #27]
 800adcc:	2b2e      	cmp	r3, #46	@ 0x2e
 800adce:	d001      	beq.n	800add4 <create_name+0x8c>
 800add0:	2306      	movs	r3, #6
 800add2:	e044      	b.n	800ae5e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800add4:	2308      	movs	r3, #8
 800add6:	613b      	str	r3, [r7, #16]
 800add8:	230b      	movs	r3, #11
 800adda:	617b      	str	r3, [r7, #20]
			continue;
 800addc:	e022      	b.n	800ae24 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800adde:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	da04      	bge.n	800adf0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ade6:	7efb      	ldrb	r3, [r7, #27]
 800ade8:	3b80      	subs	r3, #128	@ 0x80
 800adea:	4a1f      	ldr	r2, [pc, #124]	@ (800ae68 <create_name+0x120>)
 800adec:	5cd3      	ldrb	r3, [r2, r3]
 800adee:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800adf0:	7efb      	ldrb	r3, [r7, #27]
 800adf2:	4619      	mov	r1, r3
 800adf4:	481d      	ldr	r0, [pc, #116]	@ (800ae6c <create_name+0x124>)
 800adf6:	f7ff f812 	bl	8009e1e <chk_chr>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d001      	beq.n	800ae04 <create_name+0xbc>
 800ae00:	2306      	movs	r3, #6
 800ae02:	e02c      	b.n	800ae5e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ae04:	7efb      	ldrb	r3, [r7, #27]
 800ae06:	2b60      	cmp	r3, #96	@ 0x60
 800ae08:	d905      	bls.n	800ae16 <create_name+0xce>
 800ae0a:	7efb      	ldrb	r3, [r7, #27]
 800ae0c:	2b7a      	cmp	r3, #122	@ 0x7a
 800ae0e:	d802      	bhi.n	800ae16 <create_name+0xce>
 800ae10:	7efb      	ldrb	r3, [r7, #27]
 800ae12:	3b20      	subs	r3, #32
 800ae14:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	1c5a      	adds	r2, r3, #1
 800ae1a:	613a      	str	r2, [r7, #16]
 800ae1c:	68ba      	ldr	r2, [r7, #8]
 800ae1e:	4413      	add	r3, r2
 800ae20:	7efa      	ldrb	r2, [r7, #27]
 800ae22:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ae24:	e7a6      	b.n	800ad74 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ae26:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	441a      	add	r2, r3
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d101      	bne.n	800ae3c <create_name+0xf4>
 800ae38:	2306      	movs	r3, #6
 800ae3a:	e010      	b.n	800ae5e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	2be5      	cmp	r3, #229	@ 0xe5
 800ae42:	d102      	bne.n	800ae4a <create_name+0x102>
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	2205      	movs	r2, #5
 800ae48:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ae4a:	7efb      	ldrb	r3, [r7, #27]
 800ae4c:	2b20      	cmp	r3, #32
 800ae4e:	d801      	bhi.n	800ae54 <create_name+0x10c>
 800ae50:	2204      	movs	r2, #4
 800ae52:	e000      	b.n	800ae56 <create_name+0x10e>
 800ae54:	2200      	movs	r2, #0
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	330b      	adds	r3, #11
 800ae5a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ae5c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3720      	adds	r7, #32
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	0800dd38 	.word	0x0800dd38
 800ae6c:	0800dc8c 	.word	0x0800dc8c

0800ae70 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ae84:	e002      	b.n	800ae8c <follow_path+0x1c>
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	603b      	str	r3, [r7, #0]
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	2b2f      	cmp	r3, #47	@ 0x2f
 800ae92:	d0f8      	beq.n	800ae86 <follow_path+0x16>
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	2b5c      	cmp	r3, #92	@ 0x5c
 800ae9a:	d0f4      	beq.n	800ae86 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	2b1f      	cmp	r3, #31
 800aea8:	d80a      	bhi.n	800aec0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2280      	movs	r2, #128	@ 0x80
 800aeae:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f7ff fcfa 	bl	800a8ae <dir_sdi>
 800aeba:	4603      	mov	r3, r0
 800aebc:	75fb      	strb	r3, [r7, #23]
 800aebe:	e043      	b.n	800af48 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aec0:	463b      	mov	r3, r7
 800aec2:	4619      	mov	r1, r3
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7ff ff3f 	bl	800ad48 <create_name>
 800aeca:	4603      	mov	r3, r0
 800aecc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aece:	7dfb      	ldrb	r3, [r7, #23]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d134      	bne.n	800af3e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f7ff feb0 	bl	800ac3a <dir_find>
 800aeda:	4603      	mov	r3, r0
 800aedc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800aee4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800aee6:	7dfb      	ldrb	r3, [r7, #23]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d00a      	beq.n	800af02 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800aeec:	7dfb      	ldrb	r3, [r7, #23]
 800aeee:	2b04      	cmp	r3, #4
 800aef0:	d127      	bne.n	800af42 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800aef2:	7afb      	ldrb	r3, [r7, #11]
 800aef4:	f003 0304 	and.w	r3, r3, #4
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d122      	bne.n	800af42 <follow_path+0xd2>
 800aefc:	2305      	movs	r3, #5
 800aefe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800af00:	e01f      	b.n	800af42 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800af02:	7afb      	ldrb	r3, [r7, #11]
 800af04:	f003 0304 	and.w	r3, r3, #4
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d11c      	bne.n	800af46 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	799b      	ldrb	r3, [r3, #6]
 800af10:	f003 0310 	and.w	r3, r3, #16
 800af14:	2b00      	cmp	r3, #0
 800af16:	d102      	bne.n	800af1e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800af18:	2305      	movs	r3, #5
 800af1a:	75fb      	strb	r3, [r7, #23]
 800af1c:	e014      	b.n	800af48 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	695b      	ldr	r3, [r3, #20]
 800af28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af2c:	4413      	add	r3, r2
 800af2e:	4619      	mov	r1, r3
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f7ff fe43 	bl	800abbc <ld_clust>
 800af36:	4602      	mov	r2, r0
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800af3c:	e7c0      	b.n	800aec0 <follow_path+0x50>
			if (res != FR_OK) break;
 800af3e:	bf00      	nop
 800af40:	e002      	b.n	800af48 <follow_path+0xd8>
				break;
 800af42:	bf00      	nop
 800af44:	e000      	b.n	800af48 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800af46:	bf00      	nop
			}
		}
	}

	return res;
 800af48:	7dfb      	ldrb	r3, [r7, #23]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3718      	adds	r7, #24
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800af52:	b480      	push	{r7}
 800af54:	b087      	sub	sp, #28
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800af5a:	f04f 33ff 	mov.w	r3, #4294967295
 800af5e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d031      	beq.n	800afcc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	617b      	str	r3, [r7, #20]
 800af6e:	e002      	b.n	800af76 <get_ldnumber+0x24>
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	3301      	adds	r3, #1
 800af74:	617b      	str	r3, [r7, #20]
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	2b20      	cmp	r3, #32
 800af7c:	d903      	bls.n	800af86 <get_ldnumber+0x34>
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	2b3a      	cmp	r3, #58	@ 0x3a
 800af84:	d1f4      	bne.n	800af70 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	2b3a      	cmp	r3, #58	@ 0x3a
 800af8c:	d11c      	bne.n	800afc8 <get_ldnumber+0x76>
			tp = *path;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	1c5a      	adds	r2, r3, #1
 800af98:	60fa      	str	r2, [r7, #12]
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	3b30      	subs	r3, #48	@ 0x30
 800af9e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	2b09      	cmp	r3, #9
 800afa4:	d80e      	bhi.n	800afc4 <get_ldnumber+0x72>
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d10a      	bne.n	800afc4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d107      	bne.n	800afc4 <get_ldnumber+0x72>
					vol = (int)i;
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	3301      	adds	r3, #1
 800afbc:	617b      	str	r3, [r7, #20]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	697a      	ldr	r2, [r7, #20]
 800afc2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	e002      	b.n	800afce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800afc8:	2300      	movs	r3, #0
 800afca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800afcc:	693b      	ldr	r3, [r7, #16]
}
 800afce:	4618      	mov	r0, r3
 800afd0:	371c      	adds	r7, #28
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
	...

0800afdc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	70da      	strb	r2, [r3, #3]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f04f 32ff 	mov.w	r2, #4294967295
 800aff2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800aff4:	6839      	ldr	r1, [r7, #0]
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f7ff f8dc 	bl	800a1b4 <move_window>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d001      	beq.n	800b006 <check_fs+0x2a>
 800b002:	2304      	movs	r3, #4
 800b004:	e038      	b.n	800b078 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	3330      	adds	r3, #48	@ 0x30
 800b00a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fe fe20 	bl	8009c54 <ld_word>
 800b014:	4603      	mov	r3, r0
 800b016:	461a      	mov	r2, r3
 800b018:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d001      	beq.n	800b024 <check_fs+0x48>
 800b020:	2303      	movs	r3, #3
 800b022:	e029      	b.n	800b078 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b02a:	2be9      	cmp	r3, #233	@ 0xe9
 800b02c:	d009      	beq.n	800b042 <check_fs+0x66>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b034:	2beb      	cmp	r3, #235	@ 0xeb
 800b036:	d11e      	bne.n	800b076 <check_fs+0x9a>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b03e:	2b90      	cmp	r3, #144	@ 0x90
 800b040:	d119      	bne.n	800b076 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	3330      	adds	r3, #48	@ 0x30
 800b046:	3336      	adds	r3, #54	@ 0x36
 800b048:	4618      	mov	r0, r3
 800b04a:	f7fe fe1b 	bl	8009c84 <ld_dword>
 800b04e:	4603      	mov	r3, r0
 800b050:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b054:	4a0a      	ldr	r2, [pc, #40]	@ (800b080 <check_fs+0xa4>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d101      	bne.n	800b05e <check_fs+0x82>
 800b05a:	2300      	movs	r3, #0
 800b05c:	e00c      	b.n	800b078 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	3330      	adds	r3, #48	@ 0x30
 800b062:	3352      	adds	r3, #82	@ 0x52
 800b064:	4618      	mov	r0, r3
 800b066:	f7fe fe0d 	bl	8009c84 <ld_dword>
 800b06a:	4603      	mov	r3, r0
 800b06c:	4a05      	ldr	r2, [pc, #20]	@ (800b084 <check_fs+0xa8>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d101      	bne.n	800b076 <check_fs+0x9a>
 800b072:	2300      	movs	r3, #0
 800b074:	e000      	b.n	800b078 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b076:	2302      	movs	r3, #2
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	00544146 	.word	0x00544146
 800b084:	33544146 	.word	0x33544146

0800b088 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b096      	sub	sp, #88	@ 0x58
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	4613      	mov	r3, r2
 800b094:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	2200      	movs	r2, #0
 800b09a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f7ff ff58 	bl	800af52 <get_ldnumber>
 800b0a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b0a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	da01      	bge.n	800b0ae <find_volume+0x26>
 800b0aa:	230b      	movs	r3, #11
 800b0ac:	e22d      	b.n	800b50a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b0ae:	4aa1      	ldr	r2, [pc, #644]	@ (800b334 <find_volume+0x2ac>)
 800b0b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0b6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d101      	bne.n	800b0c2 <find_volume+0x3a>
 800b0be:	230c      	movs	r3, #12
 800b0c0:	e223      	b.n	800b50a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b0c8:	79fb      	ldrb	r3, [r7, #7]
 800b0ca:	f023 0301 	bic.w	r3, r3, #1
 800b0ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d01a      	beq.n	800b10e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0da:	785b      	ldrb	r3, [r3, #1]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7fe fd19 	bl	8009b14 <disk_status>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b0e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b0ec:	f003 0301 	and.w	r3, r3, #1
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d10c      	bne.n	800b10e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b0f4:	79fb      	ldrb	r3, [r7, #7]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d007      	beq.n	800b10a <find_volume+0x82>
 800b0fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b0fe:	f003 0304 	and.w	r3, r3, #4
 800b102:	2b00      	cmp	r3, #0
 800b104:	d001      	beq.n	800b10a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b106:	230a      	movs	r3, #10
 800b108:	e1ff      	b.n	800b50a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b10a:	2300      	movs	r3, #0
 800b10c:	e1fd      	b.n	800b50a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b110:	2200      	movs	r2, #0
 800b112:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b116:	b2da      	uxtb	r2, r3
 800b118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b11a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b11e:	785b      	ldrb	r3, [r3, #1]
 800b120:	4618      	mov	r0, r3
 800b122:	f7fe fd11 	bl	8009b48 <disk_initialize>
 800b126:	4603      	mov	r3, r0
 800b128:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b12c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b130:	f003 0301 	and.w	r3, r3, #1
 800b134:	2b00      	cmp	r3, #0
 800b136:	d001      	beq.n	800b13c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b138:	2303      	movs	r3, #3
 800b13a:	e1e6      	b.n	800b50a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b13c:	79fb      	ldrb	r3, [r7, #7]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d007      	beq.n	800b152 <find_volume+0xca>
 800b142:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b146:	f003 0304 	and.w	r3, r3, #4
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d001      	beq.n	800b152 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b14e:	230a      	movs	r3, #10
 800b150:	e1db      	b.n	800b50a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b152:	2300      	movs	r3, #0
 800b154:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b156:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b158:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b15a:	f7ff ff3f 	bl	800afdc <check_fs>
 800b15e:	4603      	mov	r3, r0
 800b160:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b164:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b168:	2b02      	cmp	r3, #2
 800b16a:	d149      	bne.n	800b200 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b16c:	2300      	movs	r3, #0
 800b16e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b170:	e01e      	b.n	800b1b0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b174:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b17a:	011b      	lsls	r3, r3, #4
 800b17c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b180:	4413      	add	r3, r2
 800b182:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b186:	3304      	adds	r3, #4
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d006      	beq.n	800b19c <find_volume+0x114>
 800b18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b190:	3308      	adds	r3, #8
 800b192:	4618      	mov	r0, r3
 800b194:	f7fe fd76 	bl	8009c84 <ld_dword>
 800b198:	4602      	mov	r2, r0
 800b19a:	e000      	b.n	800b19e <find_volume+0x116>
 800b19c:	2200      	movs	r2, #0
 800b19e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	3358      	adds	r3, #88	@ 0x58
 800b1a4:	443b      	add	r3, r7
 800b1a6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b1aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1b2:	2b03      	cmp	r3, #3
 800b1b4:	d9dd      	bls.n	800b172 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b1ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <find_volume+0x13e>
 800b1c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b1c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	3358      	adds	r3, #88	@ 0x58
 800b1cc:	443b      	add	r3, r7
 800b1ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b1d2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b1d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d005      	beq.n	800b1e6 <find_volume+0x15e>
 800b1da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b1dc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b1de:	f7ff fefd 	bl	800afdc <check_fs>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	e000      	b.n	800b1e8 <find_volume+0x160>
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b1ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d905      	bls.n	800b200 <find_volume+0x178>
 800b1f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1fc:	2b03      	cmp	r3, #3
 800b1fe:	d9e2      	bls.n	800b1c6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b200:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b204:	2b04      	cmp	r3, #4
 800b206:	d101      	bne.n	800b20c <find_volume+0x184>
 800b208:	2301      	movs	r3, #1
 800b20a:	e17e      	b.n	800b50a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b20c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b210:	2b01      	cmp	r3, #1
 800b212:	d901      	bls.n	800b218 <find_volume+0x190>
 800b214:	230d      	movs	r3, #13
 800b216:	e178      	b.n	800b50a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b21a:	3330      	adds	r3, #48	@ 0x30
 800b21c:	330b      	adds	r3, #11
 800b21e:	4618      	mov	r0, r3
 800b220:	f7fe fd18 	bl	8009c54 <ld_word>
 800b224:	4603      	mov	r3, r0
 800b226:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b22a:	d001      	beq.n	800b230 <find_volume+0x1a8>
 800b22c:	230d      	movs	r3, #13
 800b22e:	e16c      	b.n	800b50a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b232:	3330      	adds	r3, #48	@ 0x30
 800b234:	3316      	adds	r3, #22
 800b236:	4618      	mov	r0, r3
 800b238:	f7fe fd0c 	bl	8009c54 <ld_word>
 800b23c:	4603      	mov	r3, r0
 800b23e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b240:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b242:	2b00      	cmp	r3, #0
 800b244:	d106      	bne.n	800b254 <find_volume+0x1cc>
 800b246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b248:	3330      	adds	r3, #48	@ 0x30
 800b24a:	3324      	adds	r3, #36	@ 0x24
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7fe fd19 	bl	8009c84 <ld_dword>
 800b252:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b256:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b258:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800b260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b262:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b266:	789b      	ldrb	r3, [r3, #2]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d005      	beq.n	800b278 <find_volume+0x1f0>
 800b26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b26e:	789b      	ldrb	r3, [r3, #2]
 800b270:	2b02      	cmp	r3, #2
 800b272:	d001      	beq.n	800b278 <find_volume+0x1f0>
 800b274:	230d      	movs	r3, #13
 800b276:	e148      	b.n	800b50a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27a:	789b      	ldrb	r3, [r3, #2]
 800b27c:	461a      	mov	r2, r3
 800b27e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b280:	fb02 f303 	mul.w	r3, r2, r3
 800b284:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b28c:	461a      	mov	r2, r3
 800b28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b290:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b294:	895b      	ldrh	r3, [r3, #10]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d008      	beq.n	800b2ac <find_volume+0x224>
 800b29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b29c:	895b      	ldrh	r3, [r3, #10]
 800b29e:	461a      	mov	r2, r3
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a2:	895b      	ldrh	r3, [r3, #10]
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	4013      	ands	r3, r2
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d001      	beq.n	800b2b0 <find_volume+0x228>
 800b2ac:	230d      	movs	r3, #13
 800b2ae:	e12c      	b.n	800b50a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b2:	3330      	adds	r3, #48	@ 0x30
 800b2b4:	3311      	adds	r3, #17
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7fe fccc 	bl	8009c54 <ld_word>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	461a      	mov	r2, r3
 800b2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c6:	891b      	ldrh	r3, [r3, #8]
 800b2c8:	f003 030f 	and.w	r3, r3, #15
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d001      	beq.n	800b2d6 <find_volume+0x24e>
 800b2d2:	230d      	movs	r3, #13
 800b2d4:	e119      	b.n	800b50a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d8:	3330      	adds	r3, #48	@ 0x30
 800b2da:	3313      	adds	r3, #19
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7fe fcb9 	bl	8009c54 <ld_word>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b2e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d106      	bne.n	800b2fa <find_volume+0x272>
 800b2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ee:	3330      	adds	r3, #48	@ 0x30
 800b2f0:	3320      	adds	r3, #32
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7fe fcc6 	bl	8009c84 <ld_dword>
 800b2f8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b2fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2fc:	3330      	adds	r3, #48	@ 0x30
 800b2fe:	330e      	adds	r3, #14
 800b300:	4618      	mov	r0, r3
 800b302:	f7fe fca7 	bl	8009c54 <ld_word>
 800b306:	4603      	mov	r3, r0
 800b308:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b30a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d101      	bne.n	800b314 <find_volume+0x28c>
 800b310:	230d      	movs	r3, #13
 800b312:	e0fa      	b.n	800b50a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b314:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b316:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b318:	4413      	add	r3, r2
 800b31a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b31c:	8912      	ldrh	r2, [r2, #8]
 800b31e:	0912      	lsrs	r2, r2, #4
 800b320:	b292      	uxth	r2, r2
 800b322:	4413      	add	r3, r2
 800b324:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b326:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d204      	bcs.n	800b338 <find_volume+0x2b0>
 800b32e:	230d      	movs	r3, #13
 800b330:	e0eb      	b.n	800b50a <find_volume+0x482>
 800b332:	bf00      	nop
 800b334:	200008a4 	.word	0x200008a4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b338:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b33c:	1ad3      	subs	r3, r2, r3
 800b33e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b340:	8952      	ldrh	r2, [r2, #10]
 800b342:	fbb3 f3f2 	udiv	r3, r3, r2
 800b346:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d101      	bne.n	800b352 <find_volume+0x2ca>
 800b34e:	230d      	movs	r3, #13
 800b350:	e0db      	b.n	800b50a <find_volume+0x482>
		fmt = FS_FAT32;
 800b352:	2303      	movs	r3, #3
 800b354:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b35a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b35e:	4293      	cmp	r3, r2
 800b360:	d802      	bhi.n	800b368 <find_volume+0x2e0>
 800b362:	2302      	movs	r3, #2
 800b364:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b36e:	4293      	cmp	r3, r2
 800b370:	d802      	bhi.n	800b378 <find_volume+0x2f0>
 800b372:	2301      	movs	r3, #1
 800b374:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b37a:	1c9a      	adds	r2, r3, #2
 800b37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b37e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b382:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b384:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b386:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b38a:	441a      	add	r2, r3
 800b38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b38e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b390:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b394:	441a      	add	r2, r3
 800b396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b398:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800b39a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b39e:	2b03      	cmp	r3, #3
 800b3a0:	d11e      	bne.n	800b3e0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a4:	3330      	adds	r3, #48	@ 0x30
 800b3a6:	332a      	adds	r3, #42	@ 0x2a
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7fe fc53 	bl	8009c54 <ld_word>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d001      	beq.n	800b3b8 <find_volume+0x330>
 800b3b4:	230d      	movs	r3, #13
 800b3b6:	e0a8      	b.n	800b50a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ba:	891b      	ldrh	r3, [r3, #8]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d001      	beq.n	800b3c4 <find_volume+0x33c>
 800b3c0:	230d      	movs	r3, #13
 800b3c2:	e0a2      	b.n	800b50a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3c6:	3330      	adds	r3, #48	@ 0x30
 800b3c8:	332c      	adds	r3, #44	@ 0x2c
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7fe fc5a 	bl	8009c84 <ld_dword>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d8:	695b      	ldr	r3, [r3, #20]
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3de:	e01f      	b.n	800b420 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3e2:	891b      	ldrh	r3, [r3, #8]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d101      	bne.n	800b3ec <find_volume+0x364>
 800b3e8:	230d      	movs	r3, #13
 800b3ea:	e08e      	b.n	800b50a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ee:	6a1a      	ldr	r2, [r3, #32]
 800b3f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3f2:	441a      	add	r2, r3
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b3f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b3fc:	2b02      	cmp	r3, #2
 800b3fe:	d103      	bne.n	800b408 <find_volume+0x380>
 800b400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b402:	695b      	ldr	r3, [r3, #20]
 800b404:	005b      	lsls	r3, r3, #1
 800b406:	e00a      	b.n	800b41e <find_volume+0x396>
 800b408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b40a:	695a      	ldr	r2, [r3, #20]
 800b40c:	4613      	mov	r3, r2
 800b40e:	005b      	lsls	r3, r3, #1
 800b410:	4413      	add	r3, r2
 800b412:	085a      	lsrs	r2, r3, #1
 800b414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b416:	695b      	ldr	r3, [r3, #20]
 800b418:	f003 0301 	and.w	r3, r3, #1
 800b41c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b41e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b422:	699a      	ldr	r2, [r3, #24]
 800b424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b426:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800b42a:	0a5b      	lsrs	r3, r3, #9
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d201      	bcs.n	800b434 <find_volume+0x3ac>
 800b430:	230d      	movs	r3, #13
 800b432:	e06a      	b.n	800b50a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b436:	f04f 32ff 	mov.w	r2, #4294967295
 800b43a:	611a      	str	r2, [r3, #16]
 800b43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43e:	691a      	ldr	r2, [r3, #16]
 800b440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b442:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b446:	2280      	movs	r2, #128	@ 0x80
 800b448:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b44a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b44e:	2b03      	cmp	r3, #3
 800b450:	d149      	bne.n	800b4e6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b454:	3330      	adds	r3, #48	@ 0x30
 800b456:	3330      	adds	r3, #48	@ 0x30
 800b458:	4618      	mov	r0, r3
 800b45a:	f7fe fbfb 	bl	8009c54 <ld_word>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b01      	cmp	r3, #1
 800b462:	d140      	bne.n	800b4e6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b464:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b466:	3301      	adds	r3, #1
 800b468:	4619      	mov	r1, r3
 800b46a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b46c:	f7fe fea2 	bl	800a1b4 <move_window>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d137      	bne.n	800b4e6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b478:	2200      	movs	r2, #0
 800b47a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b47e:	3330      	adds	r3, #48	@ 0x30
 800b480:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b484:	4618      	mov	r0, r3
 800b486:	f7fe fbe5 	bl	8009c54 <ld_word>
 800b48a:	4603      	mov	r3, r0
 800b48c:	461a      	mov	r2, r3
 800b48e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b492:	429a      	cmp	r2, r3
 800b494:	d127      	bne.n	800b4e6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b498:	3330      	adds	r3, #48	@ 0x30
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7fe fbf2 	bl	8009c84 <ld_dword>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	4a1c      	ldr	r2, [pc, #112]	@ (800b514 <find_volume+0x48c>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d11e      	bne.n	800b4e6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4aa:	3330      	adds	r3, #48	@ 0x30
 800b4ac:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7fe fbe7 	bl	8009c84 <ld_dword>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	4a17      	ldr	r2, [pc, #92]	@ (800b518 <find_volume+0x490>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d113      	bne.n	800b4e6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c0:	3330      	adds	r3, #48	@ 0x30
 800b4c2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fe fbdc 	bl	8009c84 <ld_dword>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d4:	3330      	adds	r3, #48	@ 0x30
 800b4d6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7fe fbd2 	bl	8009c84 <ld_dword>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b4e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b4ec:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b4ee:	4b0b      	ldr	r3, [pc, #44]	@ (800b51c <find_volume+0x494>)
 800b4f0:	881b      	ldrh	r3, [r3, #0]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	4b09      	ldr	r3, [pc, #36]	@ (800b51c <find_volume+0x494>)
 800b4f8:	801a      	strh	r2, [r3, #0]
 800b4fa:	4b08      	ldr	r3, [pc, #32]	@ (800b51c <find_volume+0x494>)
 800b4fc:	881a      	ldrh	r2, [r3, #0]
 800b4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b500:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b502:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b504:	f7fe fdee 	bl	800a0e4 <clear_lock>
#endif
	return FR_OK;
 800b508:	2300      	movs	r3, #0
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3758      	adds	r7, #88	@ 0x58
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	41615252 	.word	0x41615252
 800b518:	61417272 	.word	0x61417272
 800b51c:	200008a8 	.word	0x200008a8

0800b520 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b52a:	2309      	movs	r3, #9
 800b52c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d01c      	beq.n	800b56e <validate+0x4e>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d018      	beq.n	800b56e <validate+0x4e>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d013      	beq.n	800b56e <validate+0x4e>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	889a      	ldrh	r2, [r3, #4]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	88db      	ldrh	r3, [r3, #6]
 800b550:	429a      	cmp	r2, r3
 800b552:	d10c      	bne.n	800b56e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	785b      	ldrb	r3, [r3, #1]
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fe fada 	bl	8009b14 <disk_status>
 800b560:	4603      	mov	r3, r0
 800b562:	f003 0301 	and.w	r3, r3, #1
 800b566:	2b00      	cmp	r3, #0
 800b568:	d101      	bne.n	800b56e <validate+0x4e>
			res = FR_OK;
 800b56a:	2300      	movs	r3, #0
 800b56c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b56e:	7bfb      	ldrb	r3, [r7, #15]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d102      	bne.n	800b57a <validate+0x5a>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	e000      	b.n	800b57c <validate+0x5c>
 800b57a:	2300      	movs	r3, #0
 800b57c:	683a      	ldr	r2, [r7, #0]
 800b57e:	6013      	str	r3, [r2, #0]
	return res;
 800b580:	7bfb      	ldrb	r3, [r7, #15]
}
 800b582:	4618      	mov	r0, r3
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
	...

0800b58c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b088      	sub	sp, #32
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	4613      	mov	r3, r2
 800b598:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b59e:	f107 0310 	add.w	r3, r7, #16
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7ff fcd5 	bl	800af52 <get_ldnumber>
 800b5a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	da01      	bge.n	800b5b4 <f_mount+0x28>
 800b5b0:	230b      	movs	r3, #11
 800b5b2:	e02b      	b.n	800b60c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b5b4:	4a17      	ldr	r2, [pc, #92]	@ (800b614 <f_mount+0x88>)
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d005      	beq.n	800b5d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b5c4:	69b8      	ldr	r0, [r7, #24]
 800b5c6:	f7fe fd8d 	bl	800a0e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b5ca:	69bb      	ldr	r3, [r7, #24]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d002      	beq.n	800b5dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	490d      	ldr	r1, [pc, #52]	@ (800b614 <f_mount+0x88>)
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d002      	beq.n	800b5f2 <f_mount+0x66>
 800b5ec:	79fb      	ldrb	r3, [r7, #7]
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d001      	beq.n	800b5f6 <f_mount+0x6a>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	e00a      	b.n	800b60c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b5f6:	f107 010c 	add.w	r1, r7, #12
 800b5fa:	f107 0308 	add.w	r3, r7, #8
 800b5fe:	2200      	movs	r2, #0
 800b600:	4618      	mov	r0, r3
 800b602:	f7ff fd41 	bl	800b088 <find_volume>
 800b606:	4603      	mov	r3, r0
 800b608:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b60a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3720      	adds	r7, #32
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	200008a4 	.word	0x200008a4

0800b618 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b098      	sub	sp, #96	@ 0x60
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	4613      	mov	r3, r2
 800b624:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d101      	bne.n	800b630 <f_open+0x18>
 800b62c:	2309      	movs	r3, #9
 800b62e:	e1a9      	b.n	800b984 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b630:	79fb      	ldrb	r3, [r7, #7]
 800b632:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b636:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b638:	79fa      	ldrb	r2, [r7, #7]
 800b63a:	f107 0110 	add.w	r1, r7, #16
 800b63e:	f107 0308 	add.w	r3, r7, #8
 800b642:	4618      	mov	r0, r3
 800b644:	f7ff fd20 	bl	800b088 <find_volume>
 800b648:	4603      	mov	r3, r0
 800b64a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800b64e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b652:	2b00      	cmp	r3, #0
 800b654:	f040 818d 	bne.w	800b972 <f_open+0x35a>
		dj.obj.fs = fs;
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	f107 0314 	add.w	r3, r7, #20
 800b662:	4611      	mov	r1, r2
 800b664:	4618      	mov	r0, r3
 800b666:	f7ff fc03 	bl	800ae70 <follow_path>
 800b66a:	4603      	mov	r3, r0
 800b66c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b670:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b674:	2b00      	cmp	r3, #0
 800b676:	d118      	bne.n	800b6aa <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b678:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b67c:	b25b      	sxtb	r3, r3
 800b67e:	2b00      	cmp	r3, #0
 800b680:	da03      	bge.n	800b68a <f_open+0x72>
				res = FR_INVALID_NAME;
 800b682:	2306      	movs	r3, #6
 800b684:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b688:	e00f      	b.n	800b6aa <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b68a:	79fb      	ldrb	r3, [r7, #7]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	bf8c      	ite	hi
 800b690:	2301      	movhi	r3, #1
 800b692:	2300      	movls	r3, #0
 800b694:	b2db      	uxtb	r3, r3
 800b696:	461a      	mov	r2, r3
 800b698:	f107 0314 	add.w	r3, r7, #20
 800b69c:	4611      	mov	r1, r2
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7fe fbd8 	bl	8009e54 <chk_lock>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b6aa:	79fb      	ldrb	r3, [r7, #7]
 800b6ac:	f003 031c 	and.w	r3, r3, #28
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d07f      	beq.n	800b7b4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b6b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d017      	beq.n	800b6ec <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b6bc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b6c0:	2b04      	cmp	r3, #4
 800b6c2:	d10e      	bne.n	800b6e2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b6c4:	f7fe fc22 	bl	8009f0c <enq_lock>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d006      	beq.n	800b6dc <f_open+0xc4>
 800b6ce:	f107 0314 	add.w	r3, r7, #20
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7ff fb06 	bl	800ace4 <dir_register>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	e000      	b.n	800b6de <f_open+0xc6>
 800b6dc:	2312      	movs	r3, #18
 800b6de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b6e2:	79fb      	ldrb	r3, [r7, #7]
 800b6e4:	f043 0308 	orr.w	r3, r3, #8
 800b6e8:	71fb      	strb	r3, [r7, #7]
 800b6ea:	e010      	b.n	800b70e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b6ec:	7ebb      	ldrb	r3, [r7, #26]
 800b6ee:	f003 0311 	and.w	r3, r3, #17
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d003      	beq.n	800b6fe <f_open+0xe6>
					res = FR_DENIED;
 800b6f6:	2307      	movs	r3, #7
 800b6f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b6fc:	e007      	b.n	800b70e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b6fe:	79fb      	ldrb	r3, [r7, #7]
 800b700:	f003 0304 	and.w	r3, r3, #4
 800b704:	2b00      	cmp	r3, #0
 800b706:	d002      	beq.n	800b70e <f_open+0xf6>
 800b708:	2308      	movs	r3, #8
 800b70a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b70e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b712:	2b00      	cmp	r3, #0
 800b714:	d168      	bne.n	800b7e8 <f_open+0x1d0>
 800b716:	79fb      	ldrb	r3, [r7, #7]
 800b718:	f003 0308 	and.w	r3, r3, #8
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d063      	beq.n	800b7e8 <f_open+0x1d0>
				dw = GET_FATTIME();
 800b720:	f7fc f9c6 	bl	8007ab0 <get_fattime>
 800b724:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b728:	330e      	adds	r3, #14
 800b72a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7fe fae7 	bl	8009d00 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b734:	3316      	adds	r3, #22
 800b736:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b738:	4618      	mov	r0, r3
 800b73a:	f7fe fae1 	bl	8009d00 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b73e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b740:	330b      	adds	r3, #11
 800b742:	2220      	movs	r2, #32
 800b744:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b74a:	4611      	mov	r1, r2
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7ff fa35 	bl	800abbc <ld_clust>
 800b752:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b758:	2200      	movs	r2, #0
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7ff fa4d 	bl	800abfa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b762:	331c      	adds	r3, #28
 800b764:	2100      	movs	r1, #0
 800b766:	4618      	mov	r0, r3
 800b768:	f7fe faca 	bl	8009d00 <st_dword>
					fs->wflag = 1;
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	2201      	movs	r2, #1
 800b770:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b774:	2b00      	cmp	r3, #0
 800b776:	d037      	beq.n	800b7e8 <f_open+0x1d0>
						dw = fs->winsect;
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b77c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b77e:	f107 0314 	add.w	r3, r7, #20
 800b782:	2200      	movs	r2, #0
 800b784:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b786:	4618      	mov	r0, r3
 800b788:	f7fe ff60 	bl	800a64c <remove_chain>
 800b78c:	4603      	mov	r3, r0
 800b78e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800b792:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b796:	2b00      	cmp	r3, #0
 800b798:	d126      	bne.n	800b7e8 <f_open+0x1d0>
							res = move_window(fs, dw);
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fe fd08 	bl	800a1b4 <move_window>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b7ae:	3a01      	subs	r2, #1
 800b7b0:	60da      	str	r2, [r3, #12]
 800b7b2:	e019      	b.n	800b7e8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b7b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d115      	bne.n	800b7e8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b7bc:	7ebb      	ldrb	r3, [r7, #26]
 800b7be:	f003 0310 	and.w	r3, r3, #16
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d003      	beq.n	800b7ce <f_open+0x1b6>
					res = FR_NO_FILE;
 800b7c6:	2304      	movs	r3, #4
 800b7c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b7cc:	e00c      	b.n	800b7e8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b7ce:	79fb      	ldrb	r3, [r7, #7]
 800b7d0:	f003 0302 	and.w	r3, r3, #2
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d007      	beq.n	800b7e8 <f_open+0x1d0>
 800b7d8:	7ebb      	ldrb	r3, [r7, #26]
 800b7da:	f003 0301 	and.w	r3, r3, #1
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d002      	beq.n	800b7e8 <f_open+0x1d0>
						res = FR_DENIED;
 800b7e2:	2307      	movs	r3, #7
 800b7e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b7e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d126      	bne.n	800b83e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b7f0:	79fb      	ldrb	r3, [r7, #7]
 800b7f2:	f003 0308 	and.w	r3, r3, #8
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d003      	beq.n	800b802 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800b7fa:	79fb      	ldrb	r3, [r7, #7]
 800b7fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b800:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b80a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b810:	79fb      	ldrb	r3, [r7, #7]
 800b812:	2b01      	cmp	r3, #1
 800b814:	bf8c      	ite	hi
 800b816:	2301      	movhi	r3, #1
 800b818:	2300      	movls	r3, #0
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	461a      	mov	r2, r3
 800b81e:	f107 0314 	add.w	r3, r7, #20
 800b822:	4611      	mov	r1, r2
 800b824:	4618      	mov	r0, r3
 800b826:	f7fe fb93 	bl	8009f50 <inc_lock>
 800b82a:	4602      	mov	r2, r0
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d102      	bne.n	800b83e <f_open+0x226>
 800b838:	2302      	movs	r3, #2
 800b83a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b83e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b842:	2b00      	cmp	r3, #0
 800b844:	f040 8095 	bne.w	800b972 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b84c:	4611      	mov	r1, r2
 800b84e:	4618      	mov	r0, r3
 800b850:	f7ff f9b4 	bl	800abbc <ld_clust>
 800b854:	4602      	mov	r2, r0
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b85c:	331c      	adds	r3, #28
 800b85e:	4618      	mov	r0, r3
 800b860:	f7fe fa10 	bl	8009c84 <ld_dword>
 800b864:	4602      	mov	r2, r0
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b870:	693a      	ldr	r2, [r7, #16]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	88da      	ldrh	r2, [r3, #6]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	79fa      	ldrb	r2, [r7, #7]
 800b882:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2200      	movs	r2, #0
 800b888:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2200      	movs	r2, #0
 800b88e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2200      	movs	r2, #0
 800b894:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	3330      	adds	r3, #48	@ 0x30
 800b89a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b89e:	2100      	movs	r1, #0
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7fe fa7a 	bl	8009d9a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b8a6:	79fb      	ldrb	r3, [r7, #7]
 800b8a8:	f003 0320 	and.w	r3, r3, #32
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d060      	beq.n	800b972 <f_open+0x35a>
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	68db      	ldr	r3, [r3, #12]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d05c      	beq.n	800b972 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	68da      	ldr	r2, [r3, #12]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	895b      	ldrh	r3, [r3, #10]
 800b8c4:	025b      	lsls	r3, r3, #9
 800b8c6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	657b      	str	r3, [r7, #84]	@ 0x54
 800b8d4:	e016      	b.n	800b904 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fe fd25 	bl	800a32a <get_fat>
 800b8e0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b8e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d802      	bhi.n	800b8ee <f_open+0x2d6>
 800b8e8:	2302      	movs	r3, #2
 800b8ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b8ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f4:	d102      	bne.n	800b8fc <f_open+0x2e4>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b8fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b8fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b900:	1ad3      	subs	r3, r2, r3
 800b902:	657b      	str	r3, [r7, #84]	@ 0x54
 800b904:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d103      	bne.n	800b914 <f_open+0x2fc>
 800b90c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b90e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b910:	429a      	cmp	r2, r3
 800b912:	d8e0      	bhi.n	800b8d6 <f_open+0x2be>
				}
				fp->clust = clst;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b918:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b91a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d127      	bne.n	800b972 <f_open+0x35a>
 800b922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d022      	beq.n	800b972 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b930:	4618      	mov	r0, r3
 800b932:	f7fe fcdb 	bl	800a2ec <clust2sect>
 800b936:	6478      	str	r0, [r7, #68]	@ 0x44
 800b938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d103      	bne.n	800b946 <f_open+0x32e>
						res = FR_INT_ERR;
 800b93e:	2302      	movs	r3, #2
 800b940:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b944:	e015      	b.n	800b972 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b948:	0a5a      	lsrs	r2, r3, #9
 800b94a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b94c:	441a      	add	r2, r3
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	7858      	ldrb	r0, [r3, #1]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6a1a      	ldr	r2, [r3, #32]
 800b960:	2301      	movs	r3, #1
 800b962:	f7fe f919 	bl	8009b98 <disk_read>
 800b966:	4603      	mov	r3, r0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d002      	beq.n	800b972 <f_open+0x35a>
 800b96c:	2301      	movs	r3, #1
 800b96e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b972:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b976:	2b00      	cmp	r3, #0
 800b978:	d002      	beq.n	800b980 <f_open+0x368>
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2200      	movs	r2, #0
 800b97e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b980:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800b984:	4618      	mov	r0, r3
 800b986:	3760      	adds	r7, #96	@ 0x60
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b08c      	sub	sp, #48	@ 0x30
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]
 800b998:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f107 0210 	add.w	r2, r7, #16
 800b9aa:	4611      	mov	r1, r2
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7ff fdb7 	bl	800b520 <validate>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b9b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d107      	bne.n	800b9d0 <f_write+0x44>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	7d5b      	ldrb	r3, [r3, #21]
 800b9c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b9c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d002      	beq.n	800b9d6 <f_write+0x4a>
 800b9d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b9d4:	e14b      	b.n	800bc6e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	7d1b      	ldrb	r3, [r3, #20]
 800b9da:	f003 0302 	and.w	r3, r3, #2
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d101      	bne.n	800b9e6 <f_write+0x5a>
 800b9e2:	2307      	movs	r3, #7
 800b9e4:	e143      	b.n	800bc6e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	699a      	ldr	r2, [r3, #24]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	441a      	add	r2, r3
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	699b      	ldr	r3, [r3, #24]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	f080 812d 	bcs.w	800bc52 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	699b      	ldr	r3, [r3, #24]
 800b9fc:	43db      	mvns	r3, r3
 800b9fe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ba00:	e127      	b.n	800bc52 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	699b      	ldr	r3, [r3, #24]
 800ba06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	f040 80e3 	bne.w	800bbd6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	699b      	ldr	r3, [r3, #24]
 800ba14:	0a5b      	lsrs	r3, r3, #9
 800ba16:	693a      	ldr	r2, [r7, #16]
 800ba18:	8952      	ldrh	r2, [r2, #10]
 800ba1a:	3a01      	subs	r2, #1
 800ba1c:	4013      	ands	r3, r2
 800ba1e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d143      	bne.n	800baae <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	699b      	ldr	r3, [r3, #24]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10c      	bne.n	800ba48 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ba34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d11a      	bne.n	800ba70 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7fe fe69 	bl	800a716 <create_chain>
 800ba44:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ba46:	e013      	b.n	800ba70 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d007      	beq.n	800ba60 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	699b      	ldr	r3, [r3, #24]
 800ba54:	4619      	mov	r1, r3
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f7fe fef5 	bl	800a846 <clmt_clust>
 800ba5c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ba5e:	e007      	b.n	800ba70 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	69db      	ldr	r3, [r3, #28]
 800ba66:	4619      	mov	r1, r3
 800ba68:	4610      	mov	r0, r2
 800ba6a:	f7fe fe54 	bl	800a716 <create_chain>
 800ba6e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ba70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f000 80f2 	beq.w	800bc5c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ba78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d104      	bne.n	800ba88 <f_write+0xfc>
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2202      	movs	r2, #2
 800ba82:	755a      	strb	r2, [r3, #21]
 800ba84:	2302      	movs	r3, #2
 800ba86:	e0f2      	b.n	800bc6e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ba88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba8e:	d104      	bne.n	800ba9a <f_write+0x10e>
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2201      	movs	r2, #1
 800ba94:	755a      	strb	r2, [r3, #21]
 800ba96:	2301      	movs	r3, #1
 800ba98:	e0e9      	b.n	800bc6e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba9e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d102      	bne.n	800baae <f_write+0x122>
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800baac:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	7d1b      	ldrb	r3, [r3, #20]
 800bab2:	b25b      	sxtb	r3, r3
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	da18      	bge.n	800baea <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	7858      	ldrb	r0, [r3, #1]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6a1a      	ldr	r2, [r3, #32]
 800bac6:	2301      	movs	r3, #1
 800bac8:	f7fe f886 	bl	8009bd8 <disk_write>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d004      	beq.n	800badc <f_write+0x150>
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2201      	movs	r2, #1
 800bad6:	755a      	strb	r2, [r3, #21]
 800bad8:	2301      	movs	r3, #1
 800bada:	e0c8      	b.n	800bc6e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	7d1b      	ldrb	r3, [r3, #20]
 800bae0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bae4:	b2da      	uxtb	r2, r3
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800baea:	693a      	ldr	r2, [r7, #16]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	69db      	ldr	r3, [r3, #28]
 800baf0:	4619      	mov	r1, r3
 800baf2:	4610      	mov	r0, r2
 800baf4:	f7fe fbfa 	bl	800a2ec <clust2sect>
 800baf8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d104      	bne.n	800bb0a <f_write+0x17e>
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2202      	movs	r2, #2
 800bb04:	755a      	strb	r2, [r3, #21]
 800bb06:	2302      	movs	r3, #2
 800bb08:	e0b1      	b.n	800bc6e <f_write+0x2e2>
			sect += csect;
 800bb0a:	697a      	ldr	r2, [r7, #20]
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	4413      	add	r3, r2
 800bb10:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	0a5b      	lsrs	r3, r3, #9
 800bb16:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bb18:	6a3b      	ldr	r3, [r7, #32]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d03c      	beq.n	800bb98 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bb1e:	69ba      	ldr	r2, [r7, #24]
 800bb20:	6a3b      	ldr	r3, [r7, #32]
 800bb22:	4413      	add	r3, r2
 800bb24:	693a      	ldr	r2, [r7, #16]
 800bb26:	8952      	ldrh	r2, [r2, #10]
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d905      	bls.n	800bb38 <f_write+0x1ac>
					cc = fs->csize - csect;
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	895b      	ldrh	r3, [r3, #10]
 800bb30:	461a      	mov	r2, r3
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	1ad3      	subs	r3, r2, r3
 800bb36:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	7858      	ldrb	r0, [r3, #1]
 800bb3c:	6a3b      	ldr	r3, [r7, #32]
 800bb3e:	697a      	ldr	r2, [r7, #20]
 800bb40:	69f9      	ldr	r1, [r7, #28]
 800bb42:	f7fe f849 	bl	8009bd8 <disk_write>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d004      	beq.n	800bb56 <f_write+0x1ca>
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2201      	movs	r2, #1
 800bb50:	755a      	strb	r2, [r3, #21]
 800bb52:	2301      	movs	r3, #1
 800bb54:	e08b      	b.n	800bc6e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	6a1a      	ldr	r2, [r3, #32]
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	1ad3      	subs	r3, r2, r3
 800bb5e:	6a3a      	ldr	r2, [r7, #32]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d915      	bls.n	800bb90 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	6a1a      	ldr	r2, [r3, #32]
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	1ad3      	subs	r3, r2, r3
 800bb72:	025b      	lsls	r3, r3, #9
 800bb74:	69fa      	ldr	r2, [r7, #28]
 800bb76:	4413      	add	r3, r2
 800bb78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	f7fe f8eb 	bl	8009d58 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	7d1b      	ldrb	r3, [r3, #20]
 800bb86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb8a:	b2da      	uxtb	r2, r3
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bb90:	6a3b      	ldr	r3, [r7, #32]
 800bb92:	025b      	lsls	r3, r3, #9
 800bb94:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800bb96:	e03f      	b.n	800bc18 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6a1b      	ldr	r3, [r3, #32]
 800bb9c:	697a      	ldr	r2, [r7, #20]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d016      	beq.n	800bbd0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	699a      	ldr	r2, [r3, #24]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d210      	bcs.n	800bbd0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	7858      	ldrb	r0, [r3, #1]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bbb8:	2301      	movs	r3, #1
 800bbba:	697a      	ldr	r2, [r7, #20]
 800bbbc:	f7fd ffec 	bl	8009b98 <disk_read>
 800bbc0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d004      	beq.n	800bbd0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2201      	movs	r2, #1
 800bbca:	755a      	strb	r2, [r3, #21]
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e04e      	b.n	800bc6e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	697a      	ldr	r2, [r7, #20]
 800bbd4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	699b      	ldr	r3, [r3, #24]
 800bbda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbde:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800bbe2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bbe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d901      	bls.n	800bbf0 <f_write+0x264>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbfe:	4413      	add	r3, r2
 800bc00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc02:	69f9      	ldr	r1, [r7, #28]
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7fe f8a7 	bl	8009d58 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	7d1b      	ldrb	r3, [r3, #20]
 800bc0e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bc12:	b2da      	uxtb	r2, r3
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bc18:	69fa      	ldr	r2, [r7, #28]
 800bc1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc1c:	4413      	add	r3, r2
 800bc1e:	61fb      	str	r3, [r7, #28]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	699a      	ldr	r2, [r3, #24]
 800bc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc26:	441a      	add	r2, r3
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	619a      	str	r2, [r3, #24]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	68da      	ldr	r2, [r3, #12]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	699b      	ldr	r3, [r3, #24]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	bf38      	it	cc
 800bc38:	461a      	movcc	r2, r3
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	60da      	str	r2, [r3, #12]
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc44:	441a      	add	r2, r3
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	601a      	str	r2, [r3, #0]
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f47f aed4 	bne.w	800ba02 <f_write+0x76>
 800bc5a:	e000      	b.n	800bc5e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bc5c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	7d1b      	ldrb	r3, [r3, #20]
 800bc62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc66:	b2da      	uxtb	r2, r3
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3730      	adds	r7, #48	@ 0x30
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b086      	sub	sp, #24
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f107 0208 	add.w	r2, r7, #8
 800bc84:	4611      	mov	r1, r2
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7ff fc4a 	bl	800b520 <validate>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bc90:	7dfb      	ldrb	r3, [r7, #23]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d168      	bne.n	800bd68 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	7d1b      	ldrb	r3, [r3, #20]
 800bc9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d062      	beq.n	800bd68 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	7d1b      	ldrb	r3, [r3, #20]
 800bca6:	b25b      	sxtb	r3, r3
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	da15      	bge.n	800bcd8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	7858      	ldrb	r0, [r3, #1]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6a1a      	ldr	r2, [r3, #32]
 800bcba:	2301      	movs	r3, #1
 800bcbc:	f7fd ff8c 	bl	8009bd8 <disk_write>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d001      	beq.n	800bcca <f_sync+0x54>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e04f      	b.n	800bd6a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	7d1b      	ldrb	r3, [r3, #20]
 800bcce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcd2:	b2da      	uxtb	r2, r3
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bcd8:	f7fb feea 	bl	8007ab0 <get_fattime>
 800bcdc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bcde:	68ba      	ldr	r2, [r7, #8]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bce4:	4619      	mov	r1, r3
 800bce6:	4610      	mov	r0, r2
 800bce8:	f7fe fa64 	bl	800a1b4 <move_window>
 800bcec:	4603      	mov	r3, r0
 800bcee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bcf0:	7dfb      	ldrb	r3, [r7, #23]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d138      	bne.n	800bd68 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcfa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	330b      	adds	r3, #11
 800bd00:	781a      	ldrb	r2, [r3, #0]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	330b      	adds	r3, #11
 800bd06:	f042 0220 	orr.w	r2, r2, #32
 800bd0a:	b2d2      	uxtb	r2, r2
 800bd0c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6818      	ldr	r0, [r3, #0]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	461a      	mov	r2, r3
 800bd18:	68f9      	ldr	r1, [r7, #12]
 800bd1a:	f7fe ff6e 	bl	800abfa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f103 021c 	add.w	r2, r3, #28
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	4619      	mov	r1, r3
 800bd2a:	4610      	mov	r0, r2
 800bd2c:	f7fd ffe8 	bl	8009d00 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	3316      	adds	r3, #22
 800bd34:	6939      	ldr	r1, [r7, #16]
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fd ffe2 	bl	8009d00 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	3312      	adds	r3, #18
 800bd40:	2100      	movs	r1, #0
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7fd ffc1 	bl	8009cca <st_word>
					fs->wflag = 1;
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7fe fa5d 	bl	800a210 <sync_fs>
 800bd56:	4603      	mov	r3, r0
 800bd58:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	7d1b      	ldrb	r3, [r3, #20]
 800bd5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd62:	b2da      	uxtb	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bd68:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3718      	adds	r7, #24
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b084      	sub	sp, #16
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f7ff ff7b 	bl	800bc76 <f_sync>
 800bd80:	4603      	mov	r3, r0
 800bd82:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bd84:	7bfb      	ldrb	r3, [r7, #15]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d118      	bne.n	800bdbc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f107 0208 	add.w	r2, r7, #8
 800bd90:	4611      	mov	r1, r2
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7ff fbc4 	bl	800b520 <validate>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bd9c:	7bfb      	ldrb	r3, [r7, #15]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d10c      	bne.n	800bdbc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fe f960 	bl	800a06c <dec_lock>
 800bdac:	4603      	mov	r3, r0
 800bdae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bdb0:	7bfb      	ldrb	r3, [r7, #15]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d102      	bne.n	800bdbc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bdbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
	...

0800bdc8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b087      	sub	sp, #28
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bdda:	2300      	movs	r3, #0
 800bddc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bdde:	4b1f      	ldr	r3, [pc, #124]	@ (800be5c <FATFS_LinkDriverEx+0x94>)
 800bde0:	7a5b      	ldrb	r3, [r3, #9]
 800bde2:	b2db      	uxtb	r3, r3
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d131      	bne.n	800be4c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bde8:	4b1c      	ldr	r3, [pc, #112]	@ (800be5c <FATFS_LinkDriverEx+0x94>)
 800bdea:	7a5b      	ldrb	r3, [r3, #9]
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	461a      	mov	r2, r3
 800bdf0:	4b1a      	ldr	r3, [pc, #104]	@ (800be5c <FATFS_LinkDriverEx+0x94>)
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bdf6:	4b19      	ldr	r3, [pc, #100]	@ (800be5c <FATFS_LinkDriverEx+0x94>)
 800bdf8:	7a5b      	ldrb	r3, [r3, #9]
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	4a17      	ldr	r2, [pc, #92]	@ (800be5c <FATFS_LinkDriverEx+0x94>)
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	4413      	add	r3, r2
 800be02:	68fa      	ldr	r2, [r7, #12]
 800be04:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800be06:	4b15      	ldr	r3, [pc, #84]	@ (800be5c <FATFS_LinkDriverEx+0x94>)
 800be08:	7a5b      	ldrb	r3, [r3, #9]
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	461a      	mov	r2, r3
 800be0e:	4b13      	ldr	r3, [pc, #76]	@ (800be5c <FATFS_LinkDriverEx+0x94>)
 800be10:	4413      	add	r3, r2
 800be12:	79fa      	ldrb	r2, [r7, #7]
 800be14:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800be16:	4b11      	ldr	r3, [pc, #68]	@ (800be5c <FATFS_LinkDriverEx+0x94>)
 800be18:	7a5b      	ldrb	r3, [r3, #9]
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	1c5a      	adds	r2, r3, #1
 800be1e:	b2d1      	uxtb	r1, r2
 800be20:	4a0e      	ldr	r2, [pc, #56]	@ (800be5c <FATFS_LinkDriverEx+0x94>)
 800be22:	7251      	strb	r1, [r2, #9]
 800be24:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800be26:	7dbb      	ldrb	r3, [r7, #22]
 800be28:	3330      	adds	r3, #48	@ 0x30
 800be2a:	b2da      	uxtb	r2, r3
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	3301      	adds	r3, #1
 800be34:	223a      	movs	r2, #58	@ 0x3a
 800be36:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	3302      	adds	r3, #2
 800be3c:	222f      	movs	r2, #47	@ 0x2f
 800be3e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	3303      	adds	r3, #3
 800be44:	2200      	movs	r2, #0
 800be46:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800be48:	2300      	movs	r3, #0
 800be4a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800be4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be4e:	4618      	mov	r0, r3
 800be50:	371c      	adds	r7, #28
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr
 800be5a:	bf00      	nop
 800be5c:	200008cc 	.word	0x200008cc

0800be60 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800be6a:	2200      	movs	r2, #0
 800be6c:	6839      	ldr	r1, [r7, #0]
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f7ff ffaa 	bl	800bdc8 <FATFS_LinkDriverEx>
 800be74:	4603      	mov	r3, r0
}
 800be76:	4618      	mov	r0, r3
 800be78:	3708      	adds	r7, #8
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
	...

0800be80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800be84:	2200      	movs	r2, #0
 800be86:	4912      	ldr	r1, [pc, #72]	@ (800bed0 <MX_USB_DEVICE_Init+0x50>)
 800be88:	4812      	ldr	r0, [pc, #72]	@ (800bed4 <MX_USB_DEVICE_Init+0x54>)
 800be8a:	f7fc fb41 	bl	8008510 <USBD_Init>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d001      	beq.n	800be98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800be94:	f7f5 f99a 	bl	80011cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800be98:	490f      	ldr	r1, [pc, #60]	@ (800bed8 <MX_USB_DEVICE_Init+0x58>)
 800be9a:	480e      	ldr	r0, [pc, #56]	@ (800bed4 <MX_USB_DEVICE_Init+0x54>)
 800be9c:	f7fc fb68 	bl	8008570 <USBD_RegisterClass>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d001      	beq.n	800beaa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bea6:	f7f5 f991 	bl	80011cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800beaa:	490c      	ldr	r1, [pc, #48]	@ (800bedc <MX_USB_DEVICE_Init+0x5c>)
 800beac:	4809      	ldr	r0, [pc, #36]	@ (800bed4 <MX_USB_DEVICE_Init+0x54>)
 800beae:	f7fc fa5f 	bl	8008370 <USBD_CDC_RegisterInterface>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d001      	beq.n	800bebc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800beb8:	f7f5 f988 	bl	80011cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bebc:	4805      	ldr	r0, [pc, #20]	@ (800bed4 <MX_USB_DEVICE_Init+0x54>)
 800bebe:	f7fc fb8d 	bl	80085dc <USBD_Start>
 800bec2:	4603      	mov	r3, r0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d001      	beq.n	800becc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bec8:	f7f5 f980 	bl	80011cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800becc:	bf00      	nop
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	200000c0 	.word	0x200000c0
 800bed4:	200008d8 	.word	0x200008d8
 800bed8:	2000002c 	.word	0x2000002c
 800bedc:	200000ac 	.word	0x200000ac

0800bee0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bee4:	2200      	movs	r2, #0
 800bee6:	4905      	ldr	r1, [pc, #20]	@ (800befc <CDC_Init_FS+0x1c>)
 800bee8:	4805      	ldr	r0, [pc, #20]	@ (800bf00 <CDC_Init_FS+0x20>)
 800beea:	f7fc fa5b 	bl	80083a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800beee:	4905      	ldr	r1, [pc, #20]	@ (800bf04 <CDC_Init_FS+0x24>)
 800bef0:	4803      	ldr	r0, [pc, #12]	@ (800bf00 <CDC_Init_FS+0x20>)
 800bef2:	f7fc fa79 	bl	80083e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bef6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bef8:	4618      	mov	r0, r3
 800befa:	bd80      	pop	{r7, pc}
 800befc:	200013b4 	.word	0x200013b4
 800bf00:	200008d8 	.word	0x200008d8
 800bf04:	20000bb4 	.word	0x20000bb4

0800bf08 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bf0c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	4603      	mov	r3, r0
 800bf20:	6039      	str	r1, [r7, #0]
 800bf22:	71fb      	strb	r3, [r7, #7]
 800bf24:	4613      	mov	r3, r2
 800bf26:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bf28:	79fb      	ldrb	r3, [r7, #7]
 800bf2a:	2b23      	cmp	r3, #35	@ 0x23
 800bf2c:	d84a      	bhi.n	800bfc4 <CDC_Control_FS+0xac>
 800bf2e:	a201      	add	r2, pc, #4	@ (adr r2, 800bf34 <CDC_Control_FS+0x1c>)
 800bf30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf34:	0800bfc5 	.word	0x0800bfc5
 800bf38:	0800bfc5 	.word	0x0800bfc5
 800bf3c:	0800bfc5 	.word	0x0800bfc5
 800bf40:	0800bfc5 	.word	0x0800bfc5
 800bf44:	0800bfc5 	.word	0x0800bfc5
 800bf48:	0800bfc5 	.word	0x0800bfc5
 800bf4c:	0800bfc5 	.word	0x0800bfc5
 800bf50:	0800bfc5 	.word	0x0800bfc5
 800bf54:	0800bfc5 	.word	0x0800bfc5
 800bf58:	0800bfc5 	.word	0x0800bfc5
 800bf5c:	0800bfc5 	.word	0x0800bfc5
 800bf60:	0800bfc5 	.word	0x0800bfc5
 800bf64:	0800bfc5 	.word	0x0800bfc5
 800bf68:	0800bfc5 	.word	0x0800bfc5
 800bf6c:	0800bfc5 	.word	0x0800bfc5
 800bf70:	0800bfc5 	.word	0x0800bfc5
 800bf74:	0800bfc5 	.word	0x0800bfc5
 800bf78:	0800bfc5 	.word	0x0800bfc5
 800bf7c:	0800bfc5 	.word	0x0800bfc5
 800bf80:	0800bfc5 	.word	0x0800bfc5
 800bf84:	0800bfc5 	.word	0x0800bfc5
 800bf88:	0800bfc5 	.word	0x0800bfc5
 800bf8c:	0800bfc5 	.word	0x0800bfc5
 800bf90:	0800bfc5 	.word	0x0800bfc5
 800bf94:	0800bfc5 	.word	0x0800bfc5
 800bf98:	0800bfc5 	.word	0x0800bfc5
 800bf9c:	0800bfc5 	.word	0x0800bfc5
 800bfa0:	0800bfc5 	.word	0x0800bfc5
 800bfa4:	0800bfc5 	.word	0x0800bfc5
 800bfa8:	0800bfc5 	.word	0x0800bfc5
 800bfac:	0800bfc5 	.word	0x0800bfc5
 800bfb0:	0800bfc5 	.word	0x0800bfc5
 800bfb4:	0800bfc5 	.word	0x0800bfc5
 800bfb8:	0800bfc5 	.word	0x0800bfc5
 800bfbc:	0800bfc5 	.word	0x0800bfc5
 800bfc0:	0800bfc5 	.word	0x0800bfc5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bfc4:	bf00      	nop
  }

  return (USBD_OK);
 800bfc6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	370c      	adds	r7, #12
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bfde:	6879      	ldr	r1, [r7, #4]
 800bfe0:	4805      	ldr	r0, [pc, #20]	@ (800bff8 <CDC_Receive_FS+0x24>)
 800bfe2:	f7fc fa01 	bl	80083e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bfe6:	4804      	ldr	r0, [pc, #16]	@ (800bff8 <CDC_Receive_FS+0x24>)
 800bfe8:	f7fc fa5c 	bl	80084a4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bfec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3708      	adds	r7, #8
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	200008d8 	.word	0x200008d8

0800bffc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	460b      	mov	r3, r1
 800c006:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c008:	2300      	movs	r3, #0
 800c00a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c00c:	4b0d      	ldr	r3, [pc, #52]	@ (800c044 <CDC_Transmit_FS+0x48>)
 800c00e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c012:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d001      	beq.n	800c022 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c01e:	2301      	movs	r3, #1
 800c020:	e00b      	b.n	800c03a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c022:	887b      	ldrh	r3, [r7, #2]
 800c024:	461a      	mov	r2, r3
 800c026:	6879      	ldr	r1, [r7, #4]
 800c028:	4806      	ldr	r0, [pc, #24]	@ (800c044 <CDC_Transmit_FS+0x48>)
 800c02a:	f7fc f9bb 	bl	80083a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c02e:	4805      	ldr	r0, [pc, #20]	@ (800c044 <CDC_Transmit_FS+0x48>)
 800c030:	f7fc f9f8 	bl	8008424 <USBD_CDC_TransmitPacket>
 800c034:	4603      	mov	r3, r0
 800c036:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c038:	7bfb      	ldrb	r3, [r7, #15]
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	200008d8 	.word	0x200008d8

0800c048 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c048:	b480      	push	{r7}
 800c04a:	b087      	sub	sp, #28
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	4613      	mov	r3, r2
 800c054:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c056:	2300      	movs	r3, #0
 800c058:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c05a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	371c      	adds	r7, #28
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr
	...

0800c06c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
 800c072:	4603      	mov	r3, r0
 800c074:	6039      	str	r1, [r7, #0]
 800c076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	2212      	movs	r2, #18
 800c07c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c07e:	4b03      	ldr	r3, [pc, #12]	@ (800c08c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c080:	4618      	mov	r0, r3
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr
 800c08c:	200000dc 	.word	0x200000dc

0800c090 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	4603      	mov	r3, r0
 800c098:	6039      	str	r1, [r7, #0]
 800c09a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	2204      	movs	r2, #4
 800c0a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c0a2:	4b03      	ldr	r3, [pc, #12]	@ (800c0b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	370c      	adds	r7, #12
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr
 800c0b0:	200000f0 	.word	0x200000f0

0800c0b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	6039      	str	r1, [r7, #0]
 800c0be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c0c0:	79fb      	ldrb	r3, [r7, #7]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d105      	bne.n	800c0d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0c6:	683a      	ldr	r2, [r7, #0]
 800c0c8:	4907      	ldr	r1, [pc, #28]	@ (800c0e8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c0ca:	4808      	ldr	r0, [pc, #32]	@ (800c0ec <USBD_FS_ProductStrDescriptor+0x38>)
 800c0cc:	f7fd fc36 	bl	800993c <USBD_GetString>
 800c0d0:	e004      	b.n	800c0dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0d2:	683a      	ldr	r2, [r7, #0]
 800c0d4:	4904      	ldr	r1, [pc, #16]	@ (800c0e8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c0d6:	4805      	ldr	r0, [pc, #20]	@ (800c0ec <USBD_FS_ProductStrDescriptor+0x38>)
 800c0d8:	f7fd fc30 	bl	800993c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c0dc:	4b02      	ldr	r3, [pc, #8]	@ (800c0e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	20001bb4 	.word	0x20001bb4
 800c0ec:	0800dcd0 	.word	0x0800dcd0

0800c0f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	6039      	str	r1, [r7, #0]
 800c0fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c0fc:	683a      	ldr	r2, [r7, #0]
 800c0fe:	4904      	ldr	r1, [pc, #16]	@ (800c110 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c100:	4804      	ldr	r0, [pc, #16]	@ (800c114 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c102:	f7fd fc1b 	bl	800993c <USBD_GetString>
  return USBD_StrDesc;
 800c106:	4b02      	ldr	r3, [pc, #8]	@ (800c110 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3708      	adds	r7, #8
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	20001bb4 	.word	0x20001bb4
 800c114:	0800dce8 	.word	0x0800dce8

0800c118 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	4603      	mov	r3, r0
 800c120:	6039      	str	r1, [r7, #0]
 800c122:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	221a      	movs	r2, #26
 800c128:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c12a:	f000 f843 	bl	800c1b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c12e:	4b02      	ldr	r3, [pc, #8]	@ (800c138 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c130:	4618      	mov	r0, r3
 800c132:	3708      	adds	r7, #8
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	200000f4 	.word	0x200000f4

0800c13c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	4603      	mov	r3, r0
 800c144:	6039      	str	r1, [r7, #0]
 800c146:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c148:	79fb      	ldrb	r3, [r7, #7]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d105      	bne.n	800c15a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	4907      	ldr	r1, [pc, #28]	@ (800c170 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c152:	4808      	ldr	r0, [pc, #32]	@ (800c174 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c154:	f7fd fbf2 	bl	800993c <USBD_GetString>
 800c158:	e004      	b.n	800c164 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c15a:	683a      	ldr	r2, [r7, #0]
 800c15c:	4904      	ldr	r1, [pc, #16]	@ (800c170 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c15e:	4805      	ldr	r0, [pc, #20]	@ (800c174 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c160:	f7fd fbec 	bl	800993c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c164:	4b02      	ldr	r3, [pc, #8]	@ (800c170 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c166:	4618      	mov	r0, r3
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	20001bb4 	.word	0x20001bb4
 800c174:	0800dcfc 	.word	0x0800dcfc

0800c178 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	4603      	mov	r3, r0
 800c180:	6039      	str	r1, [r7, #0]
 800c182:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c184:	79fb      	ldrb	r3, [r7, #7]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d105      	bne.n	800c196 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c18a:	683a      	ldr	r2, [r7, #0]
 800c18c:	4907      	ldr	r1, [pc, #28]	@ (800c1ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c18e:	4808      	ldr	r0, [pc, #32]	@ (800c1b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c190:	f7fd fbd4 	bl	800993c <USBD_GetString>
 800c194:	e004      	b.n	800c1a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c196:	683a      	ldr	r2, [r7, #0]
 800c198:	4904      	ldr	r1, [pc, #16]	@ (800c1ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c19a:	4805      	ldr	r0, [pc, #20]	@ (800c1b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c19c:	f7fd fbce 	bl	800993c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1a0:	4b02      	ldr	r3, [pc, #8]	@ (800c1ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3708      	adds	r7, #8
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	20001bb4 	.word	0x20001bb4
 800c1b0:	0800dd08 	.word	0x0800dd08

0800c1b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c1ba:	4b0f      	ldr	r3, [pc, #60]	@ (800c1f8 <Get_SerialNum+0x44>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c1c0:	4b0e      	ldr	r3, [pc, #56]	@ (800c1fc <Get_SerialNum+0x48>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c1c6:	4b0e      	ldr	r3, [pc, #56]	@ (800c200 <Get_SerialNum+0x4c>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d009      	beq.n	800c1ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c1da:	2208      	movs	r2, #8
 800c1dc:	4909      	ldr	r1, [pc, #36]	@ (800c204 <Get_SerialNum+0x50>)
 800c1de:	68f8      	ldr	r0, [r7, #12]
 800c1e0:	f000 f814 	bl	800c20c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c1e4:	2204      	movs	r2, #4
 800c1e6:	4908      	ldr	r1, [pc, #32]	@ (800c208 <Get_SerialNum+0x54>)
 800c1e8:	68b8      	ldr	r0, [r7, #8]
 800c1ea:	f000 f80f 	bl	800c20c <IntToUnicode>
  }
}
 800c1ee:	bf00      	nop
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	1fff7a10 	.word	0x1fff7a10
 800c1fc:	1fff7a14 	.word	0x1fff7a14
 800c200:	1fff7a18 	.word	0x1fff7a18
 800c204:	200000f6 	.word	0x200000f6
 800c208:	20000106 	.word	0x20000106

0800c20c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b087      	sub	sp, #28
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	4613      	mov	r3, r2
 800c218:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c21a:	2300      	movs	r3, #0
 800c21c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c21e:	2300      	movs	r3, #0
 800c220:	75fb      	strb	r3, [r7, #23]
 800c222:	e027      	b.n	800c274 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	0f1b      	lsrs	r3, r3, #28
 800c228:	2b09      	cmp	r3, #9
 800c22a:	d80b      	bhi.n	800c244 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	0f1b      	lsrs	r3, r3, #28
 800c230:	b2da      	uxtb	r2, r3
 800c232:	7dfb      	ldrb	r3, [r7, #23]
 800c234:	005b      	lsls	r3, r3, #1
 800c236:	4619      	mov	r1, r3
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	440b      	add	r3, r1
 800c23c:	3230      	adds	r2, #48	@ 0x30
 800c23e:	b2d2      	uxtb	r2, r2
 800c240:	701a      	strb	r2, [r3, #0]
 800c242:	e00a      	b.n	800c25a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	0f1b      	lsrs	r3, r3, #28
 800c248:	b2da      	uxtb	r2, r3
 800c24a:	7dfb      	ldrb	r3, [r7, #23]
 800c24c:	005b      	lsls	r3, r3, #1
 800c24e:	4619      	mov	r1, r3
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	440b      	add	r3, r1
 800c254:	3237      	adds	r2, #55	@ 0x37
 800c256:	b2d2      	uxtb	r2, r2
 800c258:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	011b      	lsls	r3, r3, #4
 800c25e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c260:	7dfb      	ldrb	r3, [r7, #23]
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	3301      	adds	r3, #1
 800c266:	68ba      	ldr	r2, [r7, #8]
 800c268:	4413      	add	r3, r2
 800c26a:	2200      	movs	r2, #0
 800c26c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c26e:	7dfb      	ldrb	r3, [r7, #23]
 800c270:	3301      	adds	r3, #1
 800c272:	75fb      	strb	r3, [r7, #23]
 800c274:	7dfa      	ldrb	r2, [r7, #23]
 800c276:	79fb      	ldrb	r3, [r7, #7]
 800c278:	429a      	cmp	r2, r3
 800c27a:	d3d3      	bcc.n	800c224 <IntToUnicode+0x18>
  }
}
 800c27c:	bf00      	nop
 800c27e:	bf00      	nop
 800c280:	371c      	adds	r7, #28
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr
	...

0800c28c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b08a      	sub	sp, #40	@ 0x28
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c294:	f107 0314 	add.w	r3, r7, #20
 800c298:	2200      	movs	r2, #0
 800c29a:	601a      	str	r2, [r3, #0]
 800c29c:	605a      	str	r2, [r3, #4]
 800c29e:	609a      	str	r2, [r3, #8]
 800c2a0:	60da      	str	r2, [r3, #12]
 800c2a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c2ac:	d147      	bne.n	800c33e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	613b      	str	r3, [r7, #16]
 800c2b2:	4b25      	ldr	r3, [pc, #148]	@ (800c348 <HAL_PCD_MspInit+0xbc>)
 800c2b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2b6:	4a24      	ldr	r2, [pc, #144]	@ (800c348 <HAL_PCD_MspInit+0xbc>)
 800c2b8:	f043 0301 	orr.w	r3, r3, #1
 800c2bc:	6313      	str	r3, [r2, #48]	@ 0x30
 800c2be:	4b22      	ldr	r3, [pc, #136]	@ (800c348 <HAL_PCD_MspInit+0xbc>)
 800c2c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2c2:	f003 0301 	and.w	r3, r3, #1
 800c2c6:	613b      	str	r3, [r7, #16]
 800c2c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c2ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c2ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2d8:	f107 0314 	add.w	r3, r7, #20
 800c2dc:	4619      	mov	r1, r3
 800c2de:	481b      	ldr	r0, [pc, #108]	@ (800c34c <HAL_PCD_MspInit+0xc0>)
 800c2e0:	f7f6 fe14 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c2e4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c2e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2ea:	2302      	movs	r3, #2
 800c2ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2f2:	2303      	movs	r3, #3
 800c2f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c2f6:	230a      	movs	r3, #10
 800c2f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2fa:	f107 0314 	add.w	r3, r7, #20
 800c2fe:	4619      	mov	r1, r3
 800c300:	4812      	ldr	r0, [pc, #72]	@ (800c34c <HAL_PCD_MspInit+0xc0>)
 800c302:	f7f6 fe03 	bl	8002f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c306:	4b10      	ldr	r3, [pc, #64]	@ (800c348 <HAL_PCD_MspInit+0xbc>)
 800c308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c30a:	4a0f      	ldr	r2, [pc, #60]	@ (800c348 <HAL_PCD_MspInit+0xbc>)
 800c30c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c310:	6353      	str	r3, [r2, #52]	@ 0x34
 800c312:	2300      	movs	r3, #0
 800c314:	60fb      	str	r3, [r7, #12]
 800c316:	4b0c      	ldr	r3, [pc, #48]	@ (800c348 <HAL_PCD_MspInit+0xbc>)
 800c318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c31a:	4a0b      	ldr	r2, [pc, #44]	@ (800c348 <HAL_PCD_MspInit+0xbc>)
 800c31c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c320:	6453      	str	r3, [r2, #68]	@ 0x44
 800c322:	4b09      	ldr	r3, [pc, #36]	@ (800c348 <HAL_PCD_MspInit+0xbc>)
 800c324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c32a:	60fb      	str	r3, [r7, #12]
 800c32c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c32e:	2200      	movs	r2, #0
 800c330:	2100      	movs	r1, #0
 800c332:	2043      	movs	r0, #67	@ 0x43
 800c334:	f7f5 fff7 	bl	8002326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c338:	2043      	movs	r0, #67	@ 0x43
 800c33a:	f7f6 f810 	bl	800235e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c33e:	bf00      	nop
 800c340:	3728      	adds	r7, #40	@ 0x28
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	40023800 	.word	0x40023800
 800c34c:	40020000 	.word	0x40020000

0800c350 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c364:	4619      	mov	r1, r3
 800c366:	4610      	mov	r0, r2
 800c368:	f7fc f985 	bl	8008676 <USBD_LL_SetupStage>
}
 800c36c:	bf00      	nop
 800c36e:	3708      	adds	r7, #8
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	460b      	mov	r3, r1
 800c37e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c386:	78fa      	ldrb	r2, [r7, #3]
 800c388:	6879      	ldr	r1, [r7, #4]
 800c38a:	4613      	mov	r3, r2
 800c38c:	00db      	lsls	r3, r3, #3
 800c38e:	4413      	add	r3, r2
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	440b      	add	r3, r1
 800c394:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	78fb      	ldrb	r3, [r7, #3]
 800c39c:	4619      	mov	r1, r3
 800c39e:	f7fc f9bf 	bl	8008720 <USBD_LL_DataOutStage>
}
 800c3a2:	bf00      	nop
 800c3a4:	3708      	adds	r7, #8
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b082      	sub	sp, #8
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c3bc:	78fa      	ldrb	r2, [r7, #3]
 800c3be:	6879      	ldr	r1, [r7, #4]
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	00db      	lsls	r3, r3, #3
 800c3c4:	4413      	add	r3, r2
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	440b      	add	r3, r1
 800c3ca:	3320      	adds	r3, #32
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	78fb      	ldrb	r3, [r7, #3]
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	f7fc fa58 	bl	8008886 <USBD_LL_DataInStage>
}
 800c3d6:	bf00      	nop
 800c3d8:	3708      	adds	r7, #8
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b082      	sub	sp, #8
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7fc fb92 	bl	8008b16 <USBD_LL_SOF>
}
 800c3f2:	bf00      	nop
 800c3f4:	3708      	adds	r7, #8
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b084      	sub	sp, #16
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c402:	2301      	movs	r3, #1
 800c404:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	79db      	ldrb	r3, [r3, #7]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d102      	bne.n	800c414 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c40e:	2300      	movs	r3, #0
 800c410:	73fb      	strb	r3, [r7, #15]
 800c412:	e008      	b.n	800c426 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	79db      	ldrb	r3, [r3, #7]
 800c418:	2b02      	cmp	r3, #2
 800c41a:	d102      	bne.n	800c422 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c41c:	2301      	movs	r3, #1
 800c41e:	73fb      	strb	r3, [r7, #15]
 800c420:	e001      	b.n	800c426 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c422:	f7f4 fed3 	bl	80011cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c42c:	7bfa      	ldrb	r2, [r7, #15]
 800c42e:	4611      	mov	r1, r2
 800c430:	4618      	mov	r0, r3
 800c432:	f7fc fb2c 	bl	8008a8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7fc fad4 	bl	80089ea <USBD_LL_Reset>
}
 800c442:	bf00      	nop
 800c444:	3710      	adds	r7, #16
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
	...

0800c44c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7fc fb27 	bl	8008aae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	6812      	ldr	r2, [r2, #0]
 800c46e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c472:	f043 0301 	orr.w	r3, r3, #1
 800c476:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	7adb      	ldrb	r3, [r3, #11]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d005      	beq.n	800c48c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c480:	4b04      	ldr	r3, [pc, #16]	@ (800c494 <HAL_PCD_SuspendCallback+0x48>)
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	4a03      	ldr	r2, [pc, #12]	@ (800c494 <HAL_PCD_SuspendCallback+0x48>)
 800c486:	f043 0306 	orr.w	r3, r3, #6
 800c48a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c48c:	bf00      	nop
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	e000ed00 	.word	0xe000ed00

0800c498 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7fc fb1d 	bl	8008ae6 <USBD_LL_Resume>
}
 800c4ac:	bf00      	nop
 800c4ae:	3708      	adds	r7, #8
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b082      	sub	sp, #8
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	460b      	mov	r3, r1
 800c4be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c4c6:	78fa      	ldrb	r2, [r7, #3]
 800c4c8:	4611      	mov	r1, r2
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7fc fb75 	bl	8008bba <USBD_LL_IsoOUTIncomplete>
}
 800c4d0:	bf00      	nop
 800c4d2:	3708      	adds	r7, #8
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c4ea:	78fa      	ldrb	r2, [r7, #3]
 800c4ec:	4611      	mov	r1, r2
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7fc fb31 	bl	8008b56 <USBD_LL_IsoINIncomplete>
}
 800c4f4:	bf00      	nop
 800c4f6:	3708      	adds	r7, #8
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7fc fb87 	bl	8008c1e <USBD_LL_DevConnected>
}
 800c510:	bf00      	nop
 800c512:	3708      	adds	r7, #8
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c526:	4618      	mov	r0, r3
 800c528:	f7fc fb84 	bl	8008c34 <USBD_LL_DevDisconnected>
}
 800c52c:	bf00      	nop
 800c52e:	3708      	adds	r7, #8
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d13c      	bne.n	800c5be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c544:	4a20      	ldr	r2, [pc, #128]	@ (800c5c8 <USBD_LL_Init+0x94>)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	4a1e      	ldr	r2, [pc, #120]	@ (800c5c8 <USBD_LL_Init+0x94>)
 800c550:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c554:	4b1c      	ldr	r3, [pc, #112]	@ (800c5c8 <USBD_LL_Init+0x94>)
 800c556:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c55a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c55c:	4b1a      	ldr	r3, [pc, #104]	@ (800c5c8 <USBD_LL_Init+0x94>)
 800c55e:	2204      	movs	r2, #4
 800c560:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c562:	4b19      	ldr	r3, [pc, #100]	@ (800c5c8 <USBD_LL_Init+0x94>)
 800c564:	2202      	movs	r2, #2
 800c566:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c568:	4b17      	ldr	r3, [pc, #92]	@ (800c5c8 <USBD_LL_Init+0x94>)
 800c56a:	2200      	movs	r2, #0
 800c56c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c56e:	4b16      	ldr	r3, [pc, #88]	@ (800c5c8 <USBD_LL_Init+0x94>)
 800c570:	2202      	movs	r2, #2
 800c572:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c574:	4b14      	ldr	r3, [pc, #80]	@ (800c5c8 <USBD_LL_Init+0x94>)
 800c576:	2200      	movs	r2, #0
 800c578:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c57a:	4b13      	ldr	r3, [pc, #76]	@ (800c5c8 <USBD_LL_Init+0x94>)
 800c57c:	2200      	movs	r2, #0
 800c57e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c580:	4b11      	ldr	r3, [pc, #68]	@ (800c5c8 <USBD_LL_Init+0x94>)
 800c582:	2200      	movs	r2, #0
 800c584:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c586:	4b10      	ldr	r3, [pc, #64]	@ (800c5c8 <USBD_LL_Init+0x94>)
 800c588:	2201      	movs	r2, #1
 800c58a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c58c:	4b0e      	ldr	r3, [pc, #56]	@ (800c5c8 <USBD_LL_Init+0x94>)
 800c58e:	2200      	movs	r2, #0
 800c590:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c592:	480d      	ldr	r0, [pc, #52]	@ (800c5c8 <USBD_LL_Init+0x94>)
 800c594:	f7f6 ffcc 	bl	8003530 <HAL_PCD_Init>
 800c598:	4603      	mov	r3, r0
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d001      	beq.n	800c5a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c59e:	f7f4 fe15 	bl	80011cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c5a2:	2180      	movs	r1, #128	@ 0x80
 800c5a4:	4808      	ldr	r0, [pc, #32]	@ (800c5c8 <USBD_LL_Init+0x94>)
 800c5a6:	f7f8 f9f8 	bl	800499a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c5aa:	2240      	movs	r2, #64	@ 0x40
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	4806      	ldr	r0, [pc, #24]	@ (800c5c8 <USBD_LL_Init+0x94>)
 800c5b0:	f7f8 f9ac 	bl	800490c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c5b4:	2280      	movs	r2, #128	@ 0x80
 800c5b6:	2101      	movs	r1, #1
 800c5b8:	4803      	ldr	r0, [pc, #12]	@ (800c5c8 <USBD_LL_Init+0x94>)
 800c5ba:	f7f8 f9a7 	bl	800490c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	20001db4 	.word	0x20001db4

0800c5cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7f7 f8b3 	bl	800374e <HAL_PCD_Start>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5ec:	7bfb      	ldrb	r3, [r7, #15]
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f000 f942 	bl	800c878 <USBD_Get_USB_Status>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b084      	sub	sp, #16
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
 800c60a:	4608      	mov	r0, r1
 800c60c:	4611      	mov	r1, r2
 800c60e:	461a      	mov	r2, r3
 800c610:	4603      	mov	r3, r0
 800c612:	70fb      	strb	r3, [r7, #3]
 800c614:	460b      	mov	r3, r1
 800c616:	70bb      	strb	r3, [r7, #2]
 800c618:	4613      	mov	r3, r2
 800c61a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c61c:	2300      	movs	r3, #0
 800c61e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c620:	2300      	movs	r3, #0
 800c622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c62a:	78bb      	ldrb	r3, [r7, #2]
 800c62c:	883a      	ldrh	r2, [r7, #0]
 800c62e:	78f9      	ldrb	r1, [r7, #3]
 800c630:	f7f7 fd87 	bl	8004142 <HAL_PCD_EP_Open>
 800c634:	4603      	mov	r3, r0
 800c636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c638:	7bfb      	ldrb	r3, [r7, #15]
 800c63a:	4618      	mov	r0, r3
 800c63c:	f000 f91c 	bl	800c878 <USBD_Get_USB_Status>
 800c640:	4603      	mov	r3, r0
 800c642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c644:	7bbb      	ldrb	r3, [r7, #14]
}
 800c646:	4618      	mov	r0, r3
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b084      	sub	sp, #16
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
 800c656:	460b      	mov	r3, r1
 800c658:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c65a:	2300      	movs	r3, #0
 800c65c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c65e:	2300      	movs	r3, #0
 800c660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c668:	78fa      	ldrb	r2, [r7, #3]
 800c66a:	4611      	mov	r1, r2
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7f7 fdd2 	bl	8004216 <HAL_PCD_EP_Close>
 800c672:	4603      	mov	r3, r0
 800c674:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c676:	7bfb      	ldrb	r3, [r7, #15]
 800c678:	4618      	mov	r0, r3
 800c67a:	f000 f8fd 	bl	800c878 <USBD_Get_USB_Status>
 800c67e:	4603      	mov	r3, r0
 800c680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c682:	7bbb      	ldrb	r3, [r7, #14]
}
 800c684:	4618      	mov	r0, r3
 800c686:	3710      	adds	r7, #16
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	460b      	mov	r3, r1
 800c696:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c698:	2300      	movs	r3, #0
 800c69a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c69c:	2300      	movs	r3, #0
 800c69e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c6a6:	78fa      	ldrb	r2, [r7, #3]
 800c6a8:	4611      	mov	r1, r2
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7f7 fe8a 	bl	80043c4 <HAL_PCD_EP_SetStall>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6b4:	7bfb      	ldrb	r3, [r7, #15]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f000 f8de 	bl	800c878 <USBD_Get_USB_Status>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3710      	adds	r7, #16
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6ca:	b580      	push	{r7, lr}
 800c6cc:	b084      	sub	sp, #16
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c6e4:	78fa      	ldrb	r2, [r7, #3]
 800c6e6:	4611      	mov	r1, r2
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7f7 fece 	bl	800448a <HAL_PCD_EP_ClrStall>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6f2:	7bfb      	ldrb	r3, [r7, #15]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f000 f8bf 	bl	800c878 <USBD_Get_USB_Status>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800c700:	4618      	mov	r0, r3
 800c702:	3710      	adds	r7, #16
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c708:	b480      	push	{r7}
 800c70a:	b085      	sub	sp, #20
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	460b      	mov	r3, r1
 800c712:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c71a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c71c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c720:	2b00      	cmp	r3, #0
 800c722:	da0b      	bge.n	800c73c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c724:	78fb      	ldrb	r3, [r7, #3]
 800c726:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c72a:	68f9      	ldr	r1, [r7, #12]
 800c72c:	4613      	mov	r3, r2
 800c72e:	00db      	lsls	r3, r3, #3
 800c730:	4413      	add	r3, r2
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	440b      	add	r3, r1
 800c736:	3316      	adds	r3, #22
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	e00b      	b.n	800c754 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c73c:	78fb      	ldrb	r3, [r7, #3]
 800c73e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c742:	68f9      	ldr	r1, [r7, #12]
 800c744:	4613      	mov	r3, r2
 800c746:	00db      	lsls	r3, r3, #3
 800c748:	4413      	add	r3, r2
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	440b      	add	r3, r1
 800c74e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c752:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c754:	4618      	mov	r0, r3
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	460b      	mov	r3, r1
 800c76a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c76c:	2300      	movs	r3, #0
 800c76e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c770:	2300      	movs	r3, #0
 800c772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c77a:	78fa      	ldrb	r2, [r7, #3]
 800c77c:	4611      	mov	r1, r2
 800c77e:	4618      	mov	r0, r3
 800c780:	f7f7 fcbb 	bl	80040fa <HAL_PCD_SetAddress>
 800c784:	4603      	mov	r3, r0
 800c786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c788:	7bfb      	ldrb	r3, [r7, #15]
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 f874 	bl	800c878 <USBD_Get_USB_Status>
 800c790:	4603      	mov	r3, r0
 800c792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c794:	7bbb      	ldrb	r3, [r7, #14]
}
 800c796:	4618      	mov	r0, r3
 800c798:	3710      	adds	r7, #16
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}

0800c79e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c79e:	b580      	push	{r7, lr}
 800c7a0:	b086      	sub	sp, #24
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	60f8      	str	r0, [r7, #12]
 800c7a6:	607a      	str	r2, [r7, #4]
 800c7a8:	603b      	str	r3, [r7, #0]
 800c7aa:	460b      	mov	r3, r1
 800c7ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c7bc:	7af9      	ldrb	r1, [r7, #11]
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	f7f7 fdc5 	bl	8004350 <HAL_PCD_EP_Transmit>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7ca:	7dfb      	ldrb	r3, [r7, #23]
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f000 f853 	bl	800c878 <USBD_Get_USB_Status>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c7d6:	7dbb      	ldrb	r3, [r7, #22]
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3718      	adds	r7, #24
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b086      	sub	sp, #24
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	607a      	str	r2, [r7, #4]
 800c7ea:	603b      	str	r3, [r7, #0]
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c7fe:	7af9      	ldrb	r1, [r7, #11]
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	f7f7 fd51 	bl	80042aa <HAL_PCD_EP_Receive>
 800c808:	4603      	mov	r3, r0
 800c80a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c80c:	7dfb      	ldrb	r3, [r7, #23]
 800c80e:	4618      	mov	r0, r3
 800c810:	f000 f832 	bl	800c878 <USBD_Get_USB_Status>
 800c814:	4603      	mov	r3, r0
 800c816:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c818:	7dbb      	ldrb	r3, [r7, #22]
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3718      	adds	r7, #24
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b082      	sub	sp, #8
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
 800c82a:	460b      	mov	r3, r1
 800c82c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c834:	78fa      	ldrb	r2, [r7, #3]
 800c836:	4611      	mov	r1, r2
 800c838:	4618      	mov	r0, r3
 800c83a:	f7f7 fd71 	bl	8004320 <HAL_PCD_EP_GetRxCount>
 800c83e:	4603      	mov	r3, r0
}
 800c840:	4618      	mov	r0, r3
 800c842:	3708      	adds	r7, #8
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c850:	4b03      	ldr	r3, [pc, #12]	@ (800c860 <USBD_static_malloc+0x18>)
}
 800c852:	4618      	mov	r0, r3
 800c854:	370c      	adds	r7, #12
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop
 800c860:	20002298 	.word	0x20002298

0800c864 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]

}
 800c86c:	bf00      	nop
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr

0800c878 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c878:	b480      	push	{r7}
 800c87a:	b085      	sub	sp, #20
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	4603      	mov	r3, r0
 800c880:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c882:	2300      	movs	r3, #0
 800c884:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c886:	79fb      	ldrb	r3, [r7, #7]
 800c888:	2b03      	cmp	r3, #3
 800c88a:	d817      	bhi.n	800c8bc <USBD_Get_USB_Status+0x44>
 800c88c:	a201      	add	r2, pc, #4	@ (adr r2, 800c894 <USBD_Get_USB_Status+0x1c>)
 800c88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c892:	bf00      	nop
 800c894:	0800c8a5 	.word	0x0800c8a5
 800c898:	0800c8ab 	.word	0x0800c8ab
 800c89c:	0800c8b1 	.word	0x0800c8b1
 800c8a0:	0800c8b7 	.word	0x0800c8b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c8a8:	e00b      	b.n	800c8c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c8aa:	2303      	movs	r3, #3
 800c8ac:	73fb      	strb	r3, [r7, #15]
    break;
 800c8ae:	e008      	b.n	800c8c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c8b4:	e005      	b.n	800c8c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c8b6:	2303      	movs	r3, #3
 800c8b8:	73fb      	strb	r3, [r7, #15]
    break;
 800c8ba:	e002      	b.n	800c8c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c8bc:	2303      	movs	r3, #3
 800c8be:	73fb      	strb	r3, [r7, #15]
    break;
 800c8c0:	bf00      	nop
  }
  return usb_status;
 800c8c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3714      	adds	r7, #20
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <std>:
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	b510      	push	{r4, lr}
 800c8d4:	4604      	mov	r4, r0
 800c8d6:	e9c0 3300 	strd	r3, r3, [r0]
 800c8da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c8de:	6083      	str	r3, [r0, #8]
 800c8e0:	8181      	strh	r1, [r0, #12]
 800c8e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800c8e4:	81c2      	strh	r2, [r0, #14]
 800c8e6:	6183      	str	r3, [r0, #24]
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	2208      	movs	r2, #8
 800c8ec:	305c      	adds	r0, #92	@ 0x5c
 800c8ee:	f000 fa2d 	bl	800cd4c <memset>
 800c8f2:	4b0d      	ldr	r3, [pc, #52]	@ (800c928 <std+0x58>)
 800c8f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800c8f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c92c <std+0x5c>)
 800c8f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c8fa:	4b0d      	ldr	r3, [pc, #52]	@ (800c930 <std+0x60>)
 800c8fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c8fe:	4b0d      	ldr	r3, [pc, #52]	@ (800c934 <std+0x64>)
 800c900:	6323      	str	r3, [r4, #48]	@ 0x30
 800c902:	4b0d      	ldr	r3, [pc, #52]	@ (800c938 <std+0x68>)
 800c904:	6224      	str	r4, [r4, #32]
 800c906:	429c      	cmp	r4, r3
 800c908:	d006      	beq.n	800c918 <std+0x48>
 800c90a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c90e:	4294      	cmp	r4, r2
 800c910:	d002      	beq.n	800c918 <std+0x48>
 800c912:	33d0      	adds	r3, #208	@ 0xd0
 800c914:	429c      	cmp	r4, r3
 800c916:	d105      	bne.n	800c924 <std+0x54>
 800c918:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c91c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c920:	f000 ba8c 	b.w	800ce3c <__retarget_lock_init_recursive>
 800c924:	bd10      	pop	{r4, pc}
 800c926:	bf00      	nop
 800c928:	0800cb9d 	.word	0x0800cb9d
 800c92c:	0800cbbf 	.word	0x0800cbbf
 800c930:	0800cbf7 	.word	0x0800cbf7
 800c934:	0800cc1b 	.word	0x0800cc1b
 800c938:	200024b8 	.word	0x200024b8

0800c93c <stdio_exit_handler>:
 800c93c:	4a02      	ldr	r2, [pc, #8]	@ (800c948 <stdio_exit_handler+0xc>)
 800c93e:	4903      	ldr	r1, [pc, #12]	@ (800c94c <stdio_exit_handler+0x10>)
 800c940:	4803      	ldr	r0, [pc, #12]	@ (800c950 <stdio_exit_handler+0x14>)
 800c942:	f000 b869 	b.w	800ca18 <_fwalk_sglue>
 800c946:	bf00      	nop
 800c948:	20000110 	.word	0x20000110
 800c94c:	0800d9a9 	.word	0x0800d9a9
 800c950:	20000120 	.word	0x20000120

0800c954 <cleanup_stdio>:
 800c954:	6841      	ldr	r1, [r0, #4]
 800c956:	4b0c      	ldr	r3, [pc, #48]	@ (800c988 <cleanup_stdio+0x34>)
 800c958:	4299      	cmp	r1, r3
 800c95a:	b510      	push	{r4, lr}
 800c95c:	4604      	mov	r4, r0
 800c95e:	d001      	beq.n	800c964 <cleanup_stdio+0x10>
 800c960:	f001 f822 	bl	800d9a8 <_fflush_r>
 800c964:	68a1      	ldr	r1, [r4, #8]
 800c966:	4b09      	ldr	r3, [pc, #36]	@ (800c98c <cleanup_stdio+0x38>)
 800c968:	4299      	cmp	r1, r3
 800c96a:	d002      	beq.n	800c972 <cleanup_stdio+0x1e>
 800c96c:	4620      	mov	r0, r4
 800c96e:	f001 f81b 	bl	800d9a8 <_fflush_r>
 800c972:	68e1      	ldr	r1, [r4, #12]
 800c974:	4b06      	ldr	r3, [pc, #24]	@ (800c990 <cleanup_stdio+0x3c>)
 800c976:	4299      	cmp	r1, r3
 800c978:	d004      	beq.n	800c984 <cleanup_stdio+0x30>
 800c97a:	4620      	mov	r0, r4
 800c97c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c980:	f001 b812 	b.w	800d9a8 <_fflush_r>
 800c984:	bd10      	pop	{r4, pc}
 800c986:	bf00      	nop
 800c988:	200024b8 	.word	0x200024b8
 800c98c:	20002520 	.word	0x20002520
 800c990:	20002588 	.word	0x20002588

0800c994 <global_stdio_init.part.0>:
 800c994:	b510      	push	{r4, lr}
 800c996:	4b0b      	ldr	r3, [pc, #44]	@ (800c9c4 <global_stdio_init.part.0+0x30>)
 800c998:	4c0b      	ldr	r4, [pc, #44]	@ (800c9c8 <global_stdio_init.part.0+0x34>)
 800c99a:	4a0c      	ldr	r2, [pc, #48]	@ (800c9cc <global_stdio_init.part.0+0x38>)
 800c99c:	601a      	str	r2, [r3, #0]
 800c99e:	4620      	mov	r0, r4
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	2104      	movs	r1, #4
 800c9a4:	f7ff ff94 	bl	800c8d0 <std>
 800c9a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	2109      	movs	r1, #9
 800c9b0:	f7ff ff8e 	bl	800c8d0 <std>
 800c9b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c9b8:	2202      	movs	r2, #2
 800c9ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9be:	2112      	movs	r1, #18
 800c9c0:	f7ff bf86 	b.w	800c8d0 <std>
 800c9c4:	200025f0 	.word	0x200025f0
 800c9c8:	200024b8 	.word	0x200024b8
 800c9cc:	0800c93d 	.word	0x0800c93d

0800c9d0 <__sfp_lock_acquire>:
 800c9d0:	4801      	ldr	r0, [pc, #4]	@ (800c9d8 <__sfp_lock_acquire+0x8>)
 800c9d2:	f000 ba34 	b.w	800ce3e <__retarget_lock_acquire_recursive>
 800c9d6:	bf00      	nop
 800c9d8:	200025f9 	.word	0x200025f9

0800c9dc <__sfp_lock_release>:
 800c9dc:	4801      	ldr	r0, [pc, #4]	@ (800c9e4 <__sfp_lock_release+0x8>)
 800c9de:	f000 ba2f 	b.w	800ce40 <__retarget_lock_release_recursive>
 800c9e2:	bf00      	nop
 800c9e4:	200025f9 	.word	0x200025f9

0800c9e8 <__sinit>:
 800c9e8:	b510      	push	{r4, lr}
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	f7ff fff0 	bl	800c9d0 <__sfp_lock_acquire>
 800c9f0:	6a23      	ldr	r3, [r4, #32]
 800c9f2:	b11b      	cbz	r3, 800c9fc <__sinit+0x14>
 800c9f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9f8:	f7ff bff0 	b.w	800c9dc <__sfp_lock_release>
 800c9fc:	4b04      	ldr	r3, [pc, #16]	@ (800ca10 <__sinit+0x28>)
 800c9fe:	6223      	str	r3, [r4, #32]
 800ca00:	4b04      	ldr	r3, [pc, #16]	@ (800ca14 <__sinit+0x2c>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d1f5      	bne.n	800c9f4 <__sinit+0xc>
 800ca08:	f7ff ffc4 	bl	800c994 <global_stdio_init.part.0>
 800ca0c:	e7f2      	b.n	800c9f4 <__sinit+0xc>
 800ca0e:	bf00      	nop
 800ca10:	0800c955 	.word	0x0800c955
 800ca14:	200025f0 	.word	0x200025f0

0800ca18 <_fwalk_sglue>:
 800ca18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca1c:	4607      	mov	r7, r0
 800ca1e:	4688      	mov	r8, r1
 800ca20:	4614      	mov	r4, r2
 800ca22:	2600      	movs	r6, #0
 800ca24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca28:	f1b9 0901 	subs.w	r9, r9, #1
 800ca2c:	d505      	bpl.n	800ca3a <_fwalk_sglue+0x22>
 800ca2e:	6824      	ldr	r4, [r4, #0]
 800ca30:	2c00      	cmp	r4, #0
 800ca32:	d1f7      	bne.n	800ca24 <_fwalk_sglue+0xc>
 800ca34:	4630      	mov	r0, r6
 800ca36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca3a:	89ab      	ldrh	r3, [r5, #12]
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d907      	bls.n	800ca50 <_fwalk_sglue+0x38>
 800ca40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca44:	3301      	adds	r3, #1
 800ca46:	d003      	beq.n	800ca50 <_fwalk_sglue+0x38>
 800ca48:	4629      	mov	r1, r5
 800ca4a:	4638      	mov	r0, r7
 800ca4c:	47c0      	blx	r8
 800ca4e:	4306      	orrs	r6, r0
 800ca50:	3568      	adds	r5, #104	@ 0x68
 800ca52:	e7e9      	b.n	800ca28 <_fwalk_sglue+0x10>

0800ca54 <iprintf>:
 800ca54:	b40f      	push	{r0, r1, r2, r3}
 800ca56:	b507      	push	{r0, r1, r2, lr}
 800ca58:	4906      	ldr	r1, [pc, #24]	@ (800ca74 <iprintf+0x20>)
 800ca5a:	ab04      	add	r3, sp, #16
 800ca5c:	6808      	ldr	r0, [r1, #0]
 800ca5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca62:	6881      	ldr	r1, [r0, #8]
 800ca64:	9301      	str	r3, [sp, #4]
 800ca66:	f000 fc75 	bl	800d354 <_vfiprintf_r>
 800ca6a:	b003      	add	sp, #12
 800ca6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca70:	b004      	add	sp, #16
 800ca72:	4770      	bx	lr
 800ca74:	2000011c 	.word	0x2000011c

0800ca78 <_puts_r>:
 800ca78:	6a03      	ldr	r3, [r0, #32]
 800ca7a:	b570      	push	{r4, r5, r6, lr}
 800ca7c:	6884      	ldr	r4, [r0, #8]
 800ca7e:	4605      	mov	r5, r0
 800ca80:	460e      	mov	r6, r1
 800ca82:	b90b      	cbnz	r3, 800ca88 <_puts_r+0x10>
 800ca84:	f7ff ffb0 	bl	800c9e8 <__sinit>
 800ca88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca8a:	07db      	lsls	r3, r3, #31
 800ca8c:	d405      	bmi.n	800ca9a <_puts_r+0x22>
 800ca8e:	89a3      	ldrh	r3, [r4, #12]
 800ca90:	0598      	lsls	r0, r3, #22
 800ca92:	d402      	bmi.n	800ca9a <_puts_r+0x22>
 800ca94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca96:	f000 f9d2 	bl	800ce3e <__retarget_lock_acquire_recursive>
 800ca9a:	89a3      	ldrh	r3, [r4, #12]
 800ca9c:	0719      	lsls	r1, r3, #28
 800ca9e:	d502      	bpl.n	800caa6 <_puts_r+0x2e>
 800caa0:	6923      	ldr	r3, [r4, #16]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d135      	bne.n	800cb12 <_puts_r+0x9a>
 800caa6:	4621      	mov	r1, r4
 800caa8:	4628      	mov	r0, r5
 800caaa:	f000 f8f9 	bl	800cca0 <__swsetup_r>
 800caae:	b380      	cbz	r0, 800cb12 <_puts_r+0x9a>
 800cab0:	f04f 35ff 	mov.w	r5, #4294967295
 800cab4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cab6:	07da      	lsls	r2, r3, #31
 800cab8:	d405      	bmi.n	800cac6 <_puts_r+0x4e>
 800caba:	89a3      	ldrh	r3, [r4, #12]
 800cabc:	059b      	lsls	r3, r3, #22
 800cabe:	d402      	bmi.n	800cac6 <_puts_r+0x4e>
 800cac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cac2:	f000 f9bd 	bl	800ce40 <__retarget_lock_release_recursive>
 800cac6:	4628      	mov	r0, r5
 800cac8:	bd70      	pop	{r4, r5, r6, pc}
 800caca:	2b00      	cmp	r3, #0
 800cacc:	da04      	bge.n	800cad8 <_puts_r+0x60>
 800cace:	69a2      	ldr	r2, [r4, #24]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	dc17      	bgt.n	800cb04 <_puts_r+0x8c>
 800cad4:	290a      	cmp	r1, #10
 800cad6:	d015      	beq.n	800cb04 <_puts_r+0x8c>
 800cad8:	6823      	ldr	r3, [r4, #0]
 800cada:	1c5a      	adds	r2, r3, #1
 800cadc:	6022      	str	r2, [r4, #0]
 800cade:	7019      	strb	r1, [r3, #0]
 800cae0:	68a3      	ldr	r3, [r4, #8]
 800cae2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cae6:	3b01      	subs	r3, #1
 800cae8:	60a3      	str	r3, [r4, #8]
 800caea:	2900      	cmp	r1, #0
 800caec:	d1ed      	bne.n	800caca <_puts_r+0x52>
 800caee:	2b00      	cmp	r3, #0
 800caf0:	da11      	bge.n	800cb16 <_puts_r+0x9e>
 800caf2:	4622      	mov	r2, r4
 800caf4:	210a      	movs	r1, #10
 800caf6:	4628      	mov	r0, r5
 800caf8:	f000 f893 	bl	800cc22 <__swbuf_r>
 800cafc:	3001      	adds	r0, #1
 800cafe:	d0d7      	beq.n	800cab0 <_puts_r+0x38>
 800cb00:	250a      	movs	r5, #10
 800cb02:	e7d7      	b.n	800cab4 <_puts_r+0x3c>
 800cb04:	4622      	mov	r2, r4
 800cb06:	4628      	mov	r0, r5
 800cb08:	f000 f88b 	bl	800cc22 <__swbuf_r>
 800cb0c:	3001      	adds	r0, #1
 800cb0e:	d1e7      	bne.n	800cae0 <_puts_r+0x68>
 800cb10:	e7ce      	b.n	800cab0 <_puts_r+0x38>
 800cb12:	3e01      	subs	r6, #1
 800cb14:	e7e4      	b.n	800cae0 <_puts_r+0x68>
 800cb16:	6823      	ldr	r3, [r4, #0]
 800cb18:	1c5a      	adds	r2, r3, #1
 800cb1a:	6022      	str	r2, [r4, #0]
 800cb1c:	220a      	movs	r2, #10
 800cb1e:	701a      	strb	r2, [r3, #0]
 800cb20:	e7ee      	b.n	800cb00 <_puts_r+0x88>
	...

0800cb24 <puts>:
 800cb24:	4b02      	ldr	r3, [pc, #8]	@ (800cb30 <puts+0xc>)
 800cb26:	4601      	mov	r1, r0
 800cb28:	6818      	ldr	r0, [r3, #0]
 800cb2a:	f7ff bfa5 	b.w	800ca78 <_puts_r>
 800cb2e:	bf00      	nop
 800cb30:	2000011c 	.word	0x2000011c

0800cb34 <sniprintf>:
 800cb34:	b40c      	push	{r2, r3}
 800cb36:	b530      	push	{r4, r5, lr}
 800cb38:	4b17      	ldr	r3, [pc, #92]	@ (800cb98 <sniprintf+0x64>)
 800cb3a:	1e0c      	subs	r4, r1, #0
 800cb3c:	681d      	ldr	r5, [r3, #0]
 800cb3e:	b09d      	sub	sp, #116	@ 0x74
 800cb40:	da08      	bge.n	800cb54 <sniprintf+0x20>
 800cb42:	238b      	movs	r3, #139	@ 0x8b
 800cb44:	602b      	str	r3, [r5, #0]
 800cb46:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4a:	b01d      	add	sp, #116	@ 0x74
 800cb4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb50:	b002      	add	sp, #8
 800cb52:	4770      	bx	lr
 800cb54:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cb58:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cb5c:	bf14      	ite	ne
 800cb5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cb62:	4623      	moveq	r3, r4
 800cb64:	9304      	str	r3, [sp, #16]
 800cb66:	9307      	str	r3, [sp, #28]
 800cb68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cb6c:	9002      	str	r0, [sp, #8]
 800cb6e:	9006      	str	r0, [sp, #24]
 800cb70:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cb74:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cb76:	ab21      	add	r3, sp, #132	@ 0x84
 800cb78:	a902      	add	r1, sp, #8
 800cb7a:	4628      	mov	r0, r5
 800cb7c:	9301      	str	r3, [sp, #4]
 800cb7e:	f000 fac3 	bl	800d108 <_svfiprintf_r>
 800cb82:	1c43      	adds	r3, r0, #1
 800cb84:	bfbc      	itt	lt
 800cb86:	238b      	movlt	r3, #139	@ 0x8b
 800cb88:	602b      	strlt	r3, [r5, #0]
 800cb8a:	2c00      	cmp	r4, #0
 800cb8c:	d0dd      	beq.n	800cb4a <sniprintf+0x16>
 800cb8e:	9b02      	ldr	r3, [sp, #8]
 800cb90:	2200      	movs	r2, #0
 800cb92:	701a      	strb	r2, [r3, #0]
 800cb94:	e7d9      	b.n	800cb4a <sniprintf+0x16>
 800cb96:	bf00      	nop
 800cb98:	2000011c 	.word	0x2000011c

0800cb9c <__sread>:
 800cb9c:	b510      	push	{r4, lr}
 800cb9e:	460c      	mov	r4, r1
 800cba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cba4:	f000 f8fc 	bl	800cda0 <_read_r>
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	bfab      	itete	ge
 800cbac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cbae:	89a3      	ldrhlt	r3, [r4, #12]
 800cbb0:	181b      	addge	r3, r3, r0
 800cbb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cbb6:	bfac      	ite	ge
 800cbb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cbba:	81a3      	strhlt	r3, [r4, #12]
 800cbbc:	bd10      	pop	{r4, pc}

0800cbbe <__swrite>:
 800cbbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc2:	461f      	mov	r7, r3
 800cbc4:	898b      	ldrh	r3, [r1, #12]
 800cbc6:	05db      	lsls	r3, r3, #23
 800cbc8:	4605      	mov	r5, r0
 800cbca:	460c      	mov	r4, r1
 800cbcc:	4616      	mov	r6, r2
 800cbce:	d505      	bpl.n	800cbdc <__swrite+0x1e>
 800cbd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbd4:	2302      	movs	r3, #2
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	f000 f8d0 	bl	800cd7c <_lseek_r>
 800cbdc:	89a3      	ldrh	r3, [r4, #12]
 800cbde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbe2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cbe6:	81a3      	strh	r3, [r4, #12]
 800cbe8:	4632      	mov	r2, r6
 800cbea:	463b      	mov	r3, r7
 800cbec:	4628      	mov	r0, r5
 800cbee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbf2:	f000 b8e7 	b.w	800cdc4 <_write_r>

0800cbf6 <__sseek>:
 800cbf6:	b510      	push	{r4, lr}
 800cbf8:	460c      	mov	r4, r1
 800cbfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbfe:	f000 f8bd 	bl	800cd7c <_lseek_r>
 800cc02:	1c43      	adds	r3, r0, #1
 800cc04:	89a3      	ldrh	r3, [r4, #12]
 800cc06:	bf15      	itete	ne
 800cc08:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cc0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cc0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cc12:	81a3      	strheq	r3, [r4, #12]
 800cc14:	bf18      	it	ne
 800cc16:	81a3      	strhne	r3, [r4, #12]
 800cc18:	bd10      	pop	{r4, pc}

0800cc1a <__sclose>:
 800cc1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc1e:	f000 b89d 	b.w	800cd5c <_close_r>

0800cc22 <__swbuf_r>:
 800cc22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc24:	460e      	mov	r6, r1
 800cc26:	4614      	mov	r4, r2
 800cc28:	4605      	mov	r5, r0
 800cc2a:	b118      	cbz	r0, 800cc34 <__swbuf_r+0x12>
 800cc2c:	6a03      	ldr	r3, [r0, #32]
 800cc2e:	b90b      	cbnz	r3, 800cc34 <__swbuf_r+0x12>
 800cc30:	f7ff feda 	bl	800c9e8 <__sinit>
 800cc34:	69a3      	ldr	r3, [r4, #24]
 800cc36:	60a3      	str	r3, [r4, #8]
 800cc38:	89a3      	ldrh	r3, [r4, #12]
 800cc3a:	071a      	lsls	r2, r3, #28
 800cc3c:	d501      	bpl.n	800cc42 <__swbuf_r+0x20>
 800cc3e:	6923      	ldr	r3, [r4, #16]
 800cc40:	b943      	cbnz	r3, 800cc54 <__swbuf_r+0x32>
 800cc42:	4621      	mov	r1, r4
 800cc44:	4628      	mov	r0, r5
 800cc46:	f000 f82b 	bl	800cca0 <__swsetup_r>
 800cc4a:	b118      	cbz	r0, 800cc54 <__swbuf_r+0x32>
 800cc4c:	f04f 37ff 	mov.w	r7, #4294967295
 800cc50:	4638      	mov	r0, r7
 800cc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc54:	6823      	ldr	r3, [r4, #0]
 800cc56:	6922      	ldr	r2, [r4, #16]
 800cc58:	1a98      	subs	r0, r3, r2
 800cc5a:	6963      	ldr	r3, [r4, #20]
 800cc5c:	b2f6      	uxtb	r6, r6
 800cc5e:	4283      	cmp	r3, r0
 800cc60:	4637      	mov	r7, r6
 800cc62:	dc05      	bgt.n	800cc70 <__swbuf_r+0x4e>
 800cc64:	4621      	mov	r1, r4
 800cc66:	4628      	mov	r0, r5
 800cc68:	f000 fe9e 	bl	800d9a8 <_fflush_r>
 800cc6c:	2800      	cmp	r0, #0
 800cc6e:	d1ed      	bne.n	800cc4c <__swbuf_r+0x2a>
 800cc70:	68a3      	ldr	r3, [r4, #8]
 800cc72:	3b01      	subs	r3, #1
 800cc74:	60a3      	str	r3, [r4, #8]
 800cc76:	6823      	ldr	r3, [r4, #0]
 800cc78:	1c5a      	adds	r2, r3, #1
 800cc7a:	6022      	str	r2, [r4, #0]
 800cc7c:	701e      	strb	r6, [r3, #0]
 800cc7e:	6962      	ldr	r2, [r4, #20]
 800cc80:	1c43      	adds	r3, r0, #1
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d004      	beq.n	800cc90 <__swbuf_r+0x6e>
 800cc86:	89a3      	ldrh	r3, [r4, #12]
 800cc88:	07db      	lsls	r3, r3, #31
 800cc8a:	d5e1      	bpl.n	800cc50 <__swbuf_r+0x2e>
 800cc8c:	2e0a      	cmp	r6, #10
 800cc8e:	d1df      	bne.n	800cc50 <__swbuf_r+0x2e>
 800cc90:	4621      	mov	r1, r4
 800cc92:	4628      	mov	r0, r5
 800cc94:	f000 fe88 	bl	800d9a8 <_fflush_r>
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	d0d9      	beq.n	800cc50 <__swbuf_r+0x2e>
 800cc9c:	e7d6      	b.n	800cc4c <__swbuf_r+0x2a>
	...

0800cca0 <__swsetup_r>:
 800cca0:	b538      	push	{r3, r4, r5, lr}
 800cca2:	4b29      	ldr	r3, [pc, #164]	@ (800cd48 <__swsetup_r+0xa8>)
 800cca4:	4605      	mov	r5, r0
 800cca6:	6818      	ldr	r0, [r3, #0]
 800cca8:	460c      	mov	r4, r1
 800ccaa:	b118      	cbz	r0, 800ccb4 <__swsetup_r+0x14>
 800ccac:	6a03      	ldr	r3, [r0, #32]
 800ccae:	b90b      	cbnz	r3, 800ccb4 <__swsetup_r+0x14>
 800ccb0:	f7ff fe9a 	bl	800c9e8 <__sinit>
 800ccb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccb8:	0719      	lsls	r1, r3, #28
 800ccba:	d422      	bmi.n	800cd02 <__swsetup_r+0x62>
 800ccbc:	06da      	lsls	r2, r3, #27
 800ccbe:	d407      	bmi.n	800ccd0 <__swsetup_r+0x30>
 800ccc0:	2209      	movs	r2, #9
 800ccc2:	602a      	str	r2, [r5, #0]
 800ccc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccc8:	81a3      	strh	r3, [r4, #12]
 800ccca:	f04f 30ff 	mov.w	r0, #4294967295
 800ccce:	e033      	b.n	800cd38 <__swsetup_r+0x98>
 800ccd0:	0758      	lsls	r0, r3, #29
 800ccd2:	d512      	bpl.n	800ccfa <__swsetup_r+0x5a>
 800ccd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccd6:	b141      	cbz	r1, 800ccea <__swsetup_r+0x4a>
 800ccd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccdc:	4299      	cmp	r1, r3
 800ccde:	d002      	beq.n	800cce6 <__swsetup_r+0x46>
 800cce0:	4628      	mov	r0, r5
 800cce2:	f000 f8bd 	bl	800ce60 <_free_r>
 800cce6:	2300      	movs	r3, #0
 800cce8:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccea:	89a3      	ldrh	r3, [r4, #12]
 800ccec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ccf0:	81a3      	strh	r3, [r4, #12]
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	6063      	str	r3, [r4, #4]
 800ccf6:	6923      	ldr	r3, [r4, #16]
 800ccf8:	6023      	str	r3, [r4, #0]
 800ccfa:	89a3      	ldrh	r3, [r4, #12]
 800ccfc:	f043 0308 	orr.w	r3, r3, #8
 800cd00:	81a3      	strh	r3, [r4, #12]
 800cd02:	6923      	ldr	r3, [r4, #16]
 800cd04:	b94b      	cbnz	r3, 800cd1a <__swsetup_r+0x7a>
 800cd06:	89a3      	ldrh	r3, [r4, #12]
 800cd08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cd0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd10:	d003      	beq.n	800cd1a <__swsetup_r+0x7a>
 800cd12:	4621      	mov	r1, r4
 800cd14:	4628      	mov	r0, r5
 800cd16:	f000 fe95 	bl	800da44 <__smakebuf_r>
 800cd1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd1e:	f013 0201 	ands.w	r2, r3, #1
 800cd22:	d00a      	beq.n	800cd3a <__swsetup_r+0x9a>
 800cd24:	2200      	movs	r2, #0
 800cd26:	60a2      	str	r2, [r4, #8]
 800cd28:	6962      	ldr	r2, [r4, #20]
 800cd2a:	4252      	negs	r2, r2
 800cd2c:	61a2      	str	r2, [r4, #24]
 800cd2e:	6922      	ldr	r2, [r4, #16]
 800cd30:	b942      	cbnz	r2, 800cd44 <__swsetup_r+0xa4>
 800cd32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cd36:	d1c5      	bne.n	800ccc4 <__swsetup_r+0x24>
 800cd38:	bd38      	pop	{r3, r4, r5, pc}
 800cd3a:	0799      	lsls	r1, r3, #30
 800cd3c:	bf58      	it	pl
 800cd3e:	6962      	ldrpl	r2, [r4, #20]
 800cd40:	60a2      	str	r2, [r4, #8]
 800cd42:	e7f4      	b.n	800cd2e <__swsetup_r+0x8e>
 800cd44:	2000      	movs	r0, #0
 800cd46:	e7f7      	b.n	800cd38 <__swsetup_r+0x98>
 800cd48:	2000011c 	.word	0x2000011c

0800cd4c <memset>:
 800cd4c:	4402      	add	r2, r0
 800cd4e:	4603      	mov	r3, r0
 800cd50:	4293      	cmp	r3, r2
 800cd52:	d100      	bne.n	800cd56 <memset+0xa>
 800cd54:	4770      	bx	lr
 800cd56:	f803 1b01 	strb.w	r1, [r3], #1
 800cd5a:	e7f9      	b.n	800cd50 <memset+0x4>

0800cd5c <_close_r>:
 800cd5c:	b538      	push	{r3, r4, r5, lr}
 800cd5e:	4d06      	ldr	r5, [pc, #24]	@ (800cd78 <_close_r+0x1c>)
 800cd60:	2300      	movs	r3, #0
 800cd62:	4604      	mov	r4, r0
 800cd64:	4608      	mov	r0, r1
 800cd66:	602b      	str	r3, [r5, #0]
 800cd68:	f7f4 fcb3 	bl	80016d2 <_close>
 800cd6c:	1c43      	adds	r3, r0, #1
 800cd6e:	d102      	bne.n	800cd76 <_close_r+0x1a>
 800cd70:	682b      	ldr	r3, [r5, #0]
 800cd72:	b103      	cbz	r3, 800cd76 <_close_r+0x1a>
 800cd74:	6023      	str	r3, [r4, #0]
 800cd76:	bd38      	pop	{r3, r4, r5, pc}
 800cd78:	200025f4 	.word	0x200025f4

0800cd7c <_lseek_r>:
 800cd7c:	b538      	push	{r3, r4, r5, lr}
 800cd7e:	4d07      	ldr	r5, [pc, #28]	@ (800cd9c <_lseek_r+0x20>)
 800cd80:	4604      	mov	r4, r0
 800cd82:	4608      	mov	r0, r1
 800cd84:	4611      	mov	r1, r2
 800cd86:	2200      	movs	r2, #0
 800cd88:	602a      	str	r2, [r5, #0]
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	f7f4 fcc8 	bl	8001720 <_lseek>
 800cd90:	1c43      	adds	r3, r0, #1
 800cd92:	d102      	bne.n	800cd9a <_lseek_r+0x1e>
 800cd94:	682b      	ldr	r3, [r5, #0]
 800cd96:	b103      	cbz	r3, 800cd9a <_lseek_r+0x1e>
 800cd98:	6023      	str	r3, [r4, #0]
 800cd9a:	bd38      	pop	{r3, r4, r5, pc}
 800cd9c:	200025f4 	.word	0x200025f4

0800cda0 <_read_r>:
 800cda0:	b538      	push	{r3, r4, r5, lr}
 800cda2:	4d07      	ldr	r5, [pc, #28]	@ (800cdc0 <_read_r+0x20>)
 800cda4:	4604      	mov	r4, r0
 800cda6:	4608      	mov	r0, r1
 800cda8:	4611      	mov	r1, r2
 800cdaa:	2200      	movs	r2, #0
 800cdac:	602a      	str	r2, [r5, #0]
 800cdae:	461a      	mov	r2, r3
 800cdb0:	f7f4 fc56 	bl	8001660 <_read>
 800cdb4:	1c43      	adds	r3, r0, #1
 800cdb6:	d102      	bne.n	800cdbe <_read_r+0x1e>
 800cdb8:	682b      	ldr	r3, [r5, #0]
 800cdba:	b103      	cbz	r3, 800cdbe <_read_r+0x1e>
 800cdbc:	6023      	str	r3, [r4, #0]
 800cdbe:	bd38      	pop	{r3, r4, r5, pc}
 800cdc0:	200025f4 	.word	0x200025f4

0800cdc4 <_write_r>:
 800cdc4:	b538      	push	{r3, r4, r5, lr}
 800cdc6:	4d07      	ldr	r5, [pc, #28]	@ (800cde4 <_write_r+0x20>)
 800cdc8:	4604      	mov	r4, r0
 800cdca:	4608      	mov	r0, r1
 800cdcc:	4611      	mov	r1, r2
 800cdce:	2200      	movs	r2, #0
 800cdd0:	602a      	str	r2, [r5, #0]
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	f7f4 fc61 	bl	800169a <_write>
 800cdd8:	1c43      	adds	r3, r0, #1
 800cdda:	d102      	bne.n	800cde2 <_write_r+0x1e>
 800cddc:	682b      	ldr	r3, [r5, #0]
 800cdde:	b103      	cbz	r3, 800cde2 <_write_r+0x1e>
 800cde0:	6023      	str	r3, [r4, #0]
 800cde2:	bd38      	pop	{r3, r4, r5, pc}
 800cde4:	200025f4 	.word	0x200025f4

0800cde8 <__errno>:
 800cde8:	4b01      	ldr	r3, [pc, #4]	@ (800cdf0 <__errno+0x8>)
 800cdea:	6818      	ldr	r0, [r3, #0]
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop
 800cdf0:	2000011c 	.word	0x2000011c

0800cdf4 <__libc_init_array>:
 800cdf4:	b570      	push	{r4, r5, r6, lr}
 800cdf6:	4d0d      	ldr	r5, [pc, #52]	@ (800ce2c <__libc_init_array+0x38>)
 800cdf8:	4c0d      	ldr	r4, [pc, #52]	@ (800ce30 <__libc_init_array+0x3c>)
 800cdfa:	1b64      	subs	r4, r4, r5
 800cdfc:	10a4      	asrs	r4, r4, #2
 800cdfe:	2600      	movs	r6, #0
 800ce00:	42a6      	cmp	r6, r4
 800ce02:	d109      	bne.n	800ce18 <__libc_init_array+0x24>
 800ce04:	4d0b      	ldr	r5, [pc, #44]	@ (800ce34 <__libc_init_array+0x40>)
 800ce06:	4c0c      	ldr	r4, [pc, #48]	@ (800ce38 <__libc_init_array+0x44>)
 800ce08:	f000 feda 	bl	800dbc0 <_init>
 800ce0c:	1b64      	subs	r4, r4, r5
 800ce0e:	10a4      	asrs	r4, r4, #2
 800ce10:	2600      	movs	r6, #0
 800ce12:	42a6      	cmp	r6, r4
 800ce14:	d105      	bne.n	800ce22 <__libc_init_array+0x2e>
 800ce16:	bd70      	pop	{r4, r5, r6, pc}
 800ce18:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce1c:	4798      	blx	r3
 800ce1e:	3601      	adds	r6, #1
 800ce20:	e7ee      	b.n	800ce00 <__libc_init_array+0xc>
 800ce22:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce26:	4798      	blx	r3
 800ce28:	3601      	adds	r6, #1
 800ce2a:	e7f2      	b.n	800ce12 <__libc_init_array+0x1e>
 800ce2c:	0800ddf4 	.word	0x0800ddf4
 800ce30:	0800ddf4 	.word	0x0800ddf4
 800ce34:	0800ddf4 	.word	0x0800ddf4
 800ce38:	0800ddf8 	.word	0x0800ddf8

0800ce3c <__retarget_lock_init_recursive>:
 800ce3c:	4770      	bx	lr

0800ce3e <__retarget_lock_acquire_recursive>:
 800ce3e:	4770      	bx	lr

0800ce40 <__retarget_lock_release_recursive>:
 800ce40:	4770      	bx	lr

0800ce42 <memcpy>:
 800ce42:	440a      	add	r2, r1
 800ce44:	4291      	cmp	r1, r2
 800ce46:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce4a:	d100      	bne.n	800ce4e <memcpy+0xc>
 800ce4c:	4770      	bx	lr
 800ce4e:	b510      	push	{r4, lr}
 800ce50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce58:	4291      	cmp	r1, r2
 800ce5a:	d1f9      	bne.n	800ce50 <memcpy+0xe>
 800ce5c:	bd10      	pop	{r4, pc}
	...

0800ce60 <_free_r>:
 800ce60:	b538      	push	{r3, r4, r5, lr}
 800ce62:	4605      	mov	r5, r0
 800ce64:	2900      	cmp	r1, #0
 800ce66:	d041      	beq.n	800ceec <_free_r+0x8c>
 800ce68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce6c:	1f0c      	subs	r4, r1, #4
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	bfb8      	it	lt
 800ce72:	18e4      	addlt	r4, r4, r3
 800ce74:	f000 f8e0 	bl	800d038 <__malloc_lock>
 800ce78:	4a1d      	ldr	r2, [pc, #116]	@ (800cef0 <_free_r+0x90>)
 800ce7a:	6813      	ldr	r3, [r2, #0]
 800ce7c:	b933      	cbnz	r3, 800ce8c <_free_r+0x2c>
 800ce7e:	6063      	str	r3, [r4, #4]
 800ce80:	6014      	str	r4, [r2, #0]
 800ce82:	4628      	mov	r0, r5
 800ce84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce88:	f000 b8dc 	b.w	800d044 <__malloc_unlock>
 800ce8c:	42a3      	cmp	r3, r4
 800ce8e:	d908      	bls.n	800cea2 <_free_r+0x42>
 800ce90:	6820      	ldr	r0, [r4, #0]
 800ce92:	1821      	adds	r1, r4, r0
 800ce94:	428b      	cmp	r3, r1
 800ce96:	bf01      	itttt	eq
 800ce98:	6819      	ldreq	r1, [r3, #0]
 800ce9a:	685b      	ldreq	r3, [r3, #4]
 800ce9c:	1809      	addeq	r1, r1, r0
 800ce9e:	6021      	streq	r1, [r4, #0]
 800cea0:	e7ed      	b.n	800ce7e <_free_r+0x1e>
 800cea2:	461a      	mov	r2, r3
 800cea4:	685b      	ldr	r3, [r3, #4]
 800cea6:	b10b      	cbz	r3, 800ceac <_free_r+0x4c>
 800cea8:	42a3      	cmp	r3, r4
 800ceaa:	d9fa      	bls.n	800cea2 <_free_r+0x42>
 800ceac:	6811      	ldr	r1, [r2, #0]
 800ceae:	1850      	adds	r0, r2, r1
 800ceb0:	42a0      	cmp	r0, r4
 800ceb2:	d10b      	bne.n	800cecc <_free_r+0x6c>
 800ceb4:	6820      	ldr	r0, [r4, #0]
 800ceb6:	4401      	add	r1, r0
 800ceb8:	1850      	adds	r0, r2, r1
 800ceba:	4283      	cmp	r3, r0
 800cebc:	6011      	str	r1, [r2, #0]
 800cebe:	d1e0      	bne.n	800ce82 <_free_r+0x22>
 800cec0:	6818      	ldr	r0, [r3, #0]
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	6053      	str	r3, [r2, #4]
 800cec6:	4408      	add	r0, r1
 800cec8:	6010      	str	r0, [r2, #0]
 800ceca:	e7da      	b.n	800ce82 <_free_r+0x22>
 800cecc:	d902      	bls.n	800ced4 <_free_r+0x74>
 800cece:	230c      	movs	r3, #12
 800ced0:	602b      	str	r3, [r5, #0]
 800ced2:	e7d6      	b.n	800ce82 <_free_r+0x22>
 800ced4:	6820      	ldr	r0, [r4, #0]
 800ced6:	1821      	adds	r1, r4, r0
 800ced8:	428b      	cmp	r3, r1
 800ceda:	bf04      	itt	eq
 800cedc:	6819      	ldreq	r1, [r3, #0]
 800cede:	685b      	ldreq	r3, [r3, #4]
 800cee0:	6063      	str	r3, [r4, #4]
 800cee2:	bf04      	itt	eq
 800cee4:	1809      	addeq	r1, r1, r0
 800cee6:	6021      	streq	r1, [r4, #0]
 800cee8:	6054      	str	r4, [r2, #4]
 800ceea:	e7ca      	b.n	800ce82 <_free_r+0x22>
 800ceec:	bd38      	pop	{r3, r4, r5, pc}
 800ceee:	bf00      	nop
 800cef0:	20002600 	.word	0x20002600

0800cef4 <sbrk_aligned>:
 800cef4:	b570      	push	{r4, r5, r6, lr}
 800cef6:	4e0f      	ldr	r6, [pc, #60]	@ (800cf34 <sbrk_aligned+0x40>)
 800cef8:	460c      	mov	r4, r1
 800cefa:	6831      	ldr	r1, [r6, #0]
 800cefc:	4605      	mov	r5, r0
 800cefe:	b911      	cbnz	r1, 800cf06 <sbrk_aligned+0x12>
 800cf00:	f000 fe18 	bl	800db34 <_sbrk_r>
 800cf04:	6030      	str	r0, [r6, #0]
 800cf06:	4621      	mov	r1, r4
 800cf08:	4628      	mov	r0, r5
 800cf0a:	f000 fe13 	bl	800db34 <_sbrk_r>
 800cf0e:	1c43      	adds	r3, r0, #1
 800cf10:	d103      	bne.n	800cf1a <sbrk_aligned+0x26>
 800cf12:	f04f 34ff 	mov.w	r4, #4294967295
 800cf16:	4620      	mov	r0, r4
 800cf18:	bd70      	pop	{r4, r5, r6, pc}
 800cf1a:	1cc4      	adds	r4, r0, #3
 800cf1c:	f024 0403 	bic.w	r4, r4, #3
 800cf20:	42a0      	cmp	r0, r4
 800cf22:	d0f8      	beq.n	800cf16 <sbrk_aligned+0x22>
 800cf24:	1a21      	subs	r1, r4, r0
 800cf26:	4628      	mov	r0, r5
 800cf28:	f000 fe04 	bl	800db34 <_sbrk_r>
 800cf2c:	3001      	adds	r0, #1
 800cf2e:	d1f2      	bne.n	800cf16 <sbrk_aligned+0x22>
 800cf30:	e7ef      	b.n	800cf12 <sbrk_aligned+0x1e>
 800cf32:	bf00      	nop
 800cf34:	200025fc 	.word	0x200025fc

0800cf38 <_malloc_r>:
 800cf38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf3c:	1ccd      	adds	r5, r1, #3
 800cf3e:	f025 0503 	bic.w	r5, r5, #3
 800cf42:	3508      	adds	r5, #8
 800cf44:	2d0c      	cmp	r5, #12
 800cf46:	bf38      	it	cc
 800cf48:	250c      	movcc	r5, #12
 800cf4a:	2d00      	cmp	r5, #0
 800cf4c:	4606      	mov	r6, r0
 800cf4e:	db01      	blt.n	800cf54 <_malloc_r+0x1c>
 800cf50:	42a9      	cmp	r1, r5
 800cf52:	d904      	bls.n	800cf5e <_malloc_r+0x26>
 800cf54:	230c      	movs	r3, #12
 800cf56:	6033      	str	r3, [r6, #0]
 800cf58:	2000      	movs	r0, #0
 800cf5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d034 <_malloc_r+0xfc>
 800cf62:	f000 f869 	bl	800d038 <__malloc_lock>
 800cf66:	f8d8 3000 	ldr.w	r3, [r8]
 800cf6a:	461c      	mov	r4, r3
 800cf6c:	bb44      	cbnz	r4, 800cfc0 <_malloc_r+0x88>
 800cf6e:	4629      	mov	r1, r5
 800cf70:	4630      	mov	r0, r6
 800cf72:	f7ff ffbf 	bl	800cef4 <sbrk_aligned>
 800cf76:	1c43      	adds	r3, r0, #1
 800cf78:	4604      	mov	r4, r0
 800cf7a:	d158      	bne.n	800d02e <_malloc_r+0xf6>
 800cf7c:	f8d8 4000 	ldr.w	r4, [r8]
 800cf80:	4627      	mov	r7, r4
 800cf82:	2f00      	cmp	r7, #0
 800cf84:	d143      	bne.n	800d00e <_malloc_r+0xd6>
 800cf86:	2c00      	cmp	r4, #0
 800cf88:	d04b      	beq.n	800d022 <_malloc_r+0xea>
 800cf8a:	6823      	ldr	r3, [r4, #0]
 800cf8c:	4639      	mov	r1, r7
 800cf8e:	4630      	mov	r0, r6
 800cf90:	eb04 0903 	add.w	r9, r4, r3
 800cf94:	f000 fdce 	bl	800db34 <_sbrk_r>
 800cf98:	4581      	cmp	r9, r0
 800cf9a:	d142      	bne.n	800d022 <_malloc_r+0xea>
 800cf9c:	6821      	ldr	r1, [r4, #0]
 800cf9e:	1a6d      	subs	r5, r5, r1
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	f7ff ffa6 	bl	800cef4 <sbrk_aligned>
 800cfa8:	3001      	adds	r0, #1
 800cfaa:	d03a      	beq.n	800d022 <_malloc_r+0xea>
 800cfac:	6823      	ldr	r3, [r4, #0]
 800cfae:	442b      	add	r3, r5
 800cfb0:	6023      	str	r3, [r4, #0]
 800cfb2:	f8d8 3000 	ldr.w	r3, [r8]
 800cfb6:	685a      	ldr	r2, [r3, #4]
 800cfb8:	bb62      	cbnz	r2, 800d014 <_malloc_r+0xdc>
 800cfba:	f8c8 7000 	str.w	r7, [r8]
 800cfbe:	e00f      	b.n	800cfe0 <_malloc_r+0xa8>
 800cfc0:	6822      	ldr	r2, [r4, #0]
 800cfc2:	1b52      	subs	r2, r2, r5
 800cfc4:	d420      	bmi.n	800d008 <_malloc_r+0xd0>
 800cfc6:	2a0b      	cmp	r2, #11
 800cfc8:	d917      	bls.n	800cffa <_malloc_r+0xc2>
 800cfca:	1961      	adds	r1, r4, r5
 800cfcc:	42a3      	cmp	r3, r4
 800cfce:	6025      	str	r5, [r4, #0]
 800cfd0:	bf18      	it	ne
 800cfd2:	6059      	strne	r1, [r3, #4]
 800cfd4:	6863      	ldr	r3, [r4, #4]
 800cfd6:	bf08      	it	eq
 800cfd8:	f8c8 1000 	streq.w	r1, [r8]
 800cfdc:	5162      	str	r2, [r4, r5]
 800cfde:	604b      	str	r3, [r1, #4]
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	f000 f82f 	bl	800d044 <__malloc_unlock>
 800cfe6:	f104 000b 	add.w	r0, r4, #11
 800cfea:	1d23      	adds	r3, r4, #4
 800cfec:	f020 0007 	bic.w	r0, r0, #7
 800cff0:	1ac2      	subs	r2, r0, r3
 800cff2:	bf1c      	itt	ne
 800cff4:	1a1b      	subne	r3, r3, r0
 800cff6:	50a3      	strne	r3, [r4, r2]
 800cff8:	e7af      	b.n	800cf5a <_malloc_r+0x22>
 800cffa:	6862      	ldr	r2, [r4, #4]
 800cffc:	42a3      	cmp	r3, r4
 800cffe:	bf0c      	ite	eq
 800d000:	f8c8 2000 	streq.w	r2, [r8]
 800d004:	605a      	strne	r2, [r3, #4]
 800d006:	e7eb      	b.n	800cfe0 <_malloc_r+0xa8>
 800d008:	4623      	mov	r3, r4
 800d00a:	6864      	ldr	r4, [r4, #4]
 800d00c:	e7ae      	b.n	800cf6c <_malloc_r+0x34>
 800d00e:	463c      	mov	r4, r7
 800d010:	687f      	ldr	r7, [r7, #4]
 800d012:	e7b6      	b.n	800cf82 <_malloc_r+0x4a>
 800d014:	461a      	mov	r2, r3
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	42a3      	cmp	r3, r4
 800d01a:	d1fb      	bne.n	800d014 <_malloc_r+0xdc>
 800d01c:	2300      	movs	r3, #0
 800d01e:	6053      	str	r3, [r2, #4]
 800d020:	e7de      	b.n	800cfe0 <_malloc_r+0xa8>
 800d022:	230c      	movs	r3, #12
 800d024:	6033      	str	r3, [r6, #0]
 800d026:	4630      	mov	r0, r6
 800d028:	f000 f80c 	bl	800d044 <__malloc_unlock>
 800d02c:	e794      	b.n	800cf58 <_malloc_r+0x20>
 800d02e:	6005      	str	r5, [r0, #0]
 800d030:	e7d6      	b.n	800cfe0 <_malloc_r+0xa8>
 800d032:	bf00      	nop
 800d034:	20002600 	.word	0x20002600

0800d038 <__malloc_lock>:
 800d038:	4801      	ldr	r0, [pc, #4]	@ (800d040 <__malloc_lock+0x8>)
 800d03a:	f7ff bf00 	b.w	800ce3e <__retarget_lock_acquire_recursive>
 800d03e:	bf00      	nop
 800d040:	200025f8 	.word	0x200025f8

0800d044 <__malloc_unlock>:
 800d044:	4801      	ldr	r0, [pc, #4]	@ (800d04c <__malloc_unlock+0x8>)
 800d046:	f7ff befb 	b.w	800ce40 <__retarget_lock_release_recursive>
 800d04a:	bf00      	nop
 800d04c:	200025f8 	.word	0x200025f8

0800d050 <__ssputs_r>:
 800d050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d054:	688e      	ldr	r6, [r1, #8]
 800d056:	461f      	mov	r7, r3
 800d058:	42be      	cmp	r6, r7
 800d05a:	680b      	ldr	r3, [r1, #0]
 800d05c:	4682      	mov	sl, r0
 800d05e:	460c      	mov	r4, r1
 800d060:	4690      	mov	r8, r2
 800d062:	d82d      	bhi.n	800d0c0 <__ssputs_r+0x70>
 800d064:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d068:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d06c:	d026      	beq.n	800d0bc <__ssputs_r+0x6c>
 800d06e:	6965      	ldr	r5, [r4, #20]
 800d070:	6909      	ldr	r1, [r1, #16]
 800d072:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d076:	eba3 0901 	sub.w	r9, r3, r1
 800d07a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d07e:	1c7b      	adds	r3, r7, #1
 800d080:	444b      	add	r3, r9
 800d082:	106d      	asrs	r5, r5, #1
 800d084:	429d      	cmp	r5, r3
 800d086:	bf38      	it	cc
 800d088:	461d      	movcc	r5, r3
 800d08a:	0553      	lsls	r3, r2, #21
 800d08c:	d527      	bpl.n	800d0de <__ssputs_r+0x8e>
 800d08e:	4629      	mov	r1, r5
 800d090:	f7ff ff52 	bl	800cf38 <_malloc_r>
 800d094:	4606      	mov	r6, r0
 800d096:	b360      	cbz	r0, 800d0f2 <__ssputs_r+0xa2>
 800d098:	6921      	ldr	r1, [r4, #16]
 800d09a:	464a      	mov	r2, r9
 800d09c:	f7ff fed1 	bl	800ce42 <memcpy>
 800d0a0:	89a3      	ldrh	r3, [r4, #12]
 800d0a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d0a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0aa:	81a3      	strh	r3, [r4, #12]
 800d0ac:	6126      	str	r6, [r4, #16]
 800d0ae:	6165      	str	r5, [r4, #20]
 800d0b0:	444e      	add	r6, r9
 800d0b2:	eba5 0509 	sub.w	r5, r5, r9
 800d0b6:	6026      	str	r6, [r4, #0]
 800d0b8:	60a5      	str	r5, [r4, #8]
 800d0ba:	463e      	mov	r6, r7
 800d0bc:	42be      	cmp	r6, r7
 800d0be:	d900      	bls.n	800d0c2 <__ssputs_r+0x72>
 800d0c0:	463e      	mov	r6, r7
 800d0c2:	6820      	ldr	r0, [r4, #0]
 800d0c4:	4632      	mov	r2, r6
 800d0c6:	4641      	mov	r1, r8
 800d0c8:	f000 fcf8 	bl	800dabc <memmove>
 800d0cc:	68a3      	ldr	r3, [r4, #8]
 800d0ce:	1b9b      	subs	r3, r3, r6
 800d0d0:	60a3      	str	r3, [r4, #8]
 800d0d2:	6823      	ldr	r3, [r4, #0]
 800d0d4:	4433      	add	r3, r6
 800d0d6:	6023      	str	r3, [r4, #0]
 800d0d8:	2000      	movs	r0, #0
 800d0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0de:	462a      	mov	r2, r5
 800d0e0:	f000 fd38 	bl	800db54 <_realloc_r>
 800d0e4:	4606      	mov	r6, r0
 800d0e6:	2800      	cmp	r0, #0
 800d0e8:	d1e0      	bne.n	800d0ac <__ssputs_r+0x5c>
 800d0ea:	6921      	ldr	r1, [r4, #16]
 800d0ec:	4650      	mov	r0, sl
 800d0ee:	f7ff feb7 	bl	800ce60 <_free_r>
 800d0f2:	230c      	movs	r3, #12
 800d0f4:	f8ca 3000 	str.w	r3, [sl]
 800d0f8:	89a3      	ldrh	r3, [r4, #12]
 800d0fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0fe:	81a3      	strh	r3, [r4, #12]
 800d100:	f04f 30ff 	mov.w	r0, #4294967295
 800d104:	e7e9      	b.n	800d0da <__ssputs_r+0x8a>
	...

0800d108 <_svfiprintf_r>:
 800d108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d10c:	4698      	mov	r8, r3
 800d10e:	898b      	ldrh	r3, [r1, #12]
 800d110:	061b      	lsls	r3, r3, #24
 800d112:	b09d      	sub	sp, #116	@ 0x74
 800d114:	4607      	mov	r7, r0
 800d116:	460d      	mov	r5, r1
 800d118:	4614      	mov	r4, r2
 800d11a:	d510      	bpl.n	800d13e <_svfiprintf_r+0x36>
 800d11c:	690b      	ldr	r3, [r1, #16]
 800d11e:	b973      	cbnz	r3, 800d13e <_svfiprintf_r+0x36>
 800d120:	2140      	movs	r1, #64	@ 0x40
 800d122:	f7ff ff09 	bl	800cf38 <_malloc_r>
 800d126:	6028      	str	r0, [r5, #0]
 800d128:	6128      	str	r0, [r5, #16]
 800d12a:	b930      	cbnz	r0, 800d13a <_svfiprintf_r+0x32>
 800d12c:	230c      	movs	r3, #12
 800d12e:	603b      	str	r3, [r7, #0]
 800d130:	f04f 30ff 	mov.w	r0, #4294967295
 800d134:	b01d      	add	sp, #116	@ 0x74
 800d136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d13a:	2340      	movs	r3, #64	@ 0x40
 800d13c:	616b      	str	r3, [r5, #20]
 800d13e:	2300      	movs	r3, #0
 800d140:	9309      	str	r3, [sp, #36]	@ 0x24
 800d142:	2320      	movs	r3, #32
 800d144:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d148:	f8cd 800c 	str.w	r8, [sp, #12]
 800d14c:	2330      	movs	r3, #48	@ 0x30
 800d14e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d2ec <_svfiprintf_r+0x1e4>
 800d152:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d156:	f04f 0901 	mov.w	r9, #1
 800d15a:	4623      	mov	r3, r4
 800d15c:	469a      	mov	sl, r3
 800d15e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d162:	b10a      	cbz	r2, 800d168 <_svfiprintf_r+0x60>
 800d164:	2a25      	cmp	r2, #37	@ 0x25
 800d166:	d1f9      	bne.n	800d15c <_svfiprintf_r+0x54>
 800d168:	ebba 0b04 	subs.w	fp, sl, r4
 800d16c:	d00b      	beq.n	800d186 <_svfiprintf_r+0x7e>
 800d16e:	465b      	mov	r3, fp
 800d170:	4622      	mov	r2, r4
 800d172:	4629      	mov	r1, r5
 800d174:	4638      	mov	r0, r7
 800d176:	f7ff ff6b 	bl	800d050 <__ssputs_r>
 800d17a:	3001      	adds	r0, #1
 800d17c:	f000 80a7 	beq.w	800d2ce <_svfiprintf_r+0x1c6>
 800d180:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d182:	445a      	add	r2, fp
 800d184:	9209      	str	r2, [sp, #36]	@ 0x24
 800d186:	f89a 3000 	ldrb.w	r3, [sl]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	f000 809f 	beq.w	800d2ce <_svfiprintf_r+0x1c6>
 800d190:	2300      	movs	r3, #0
 800d192:	f04f 32ff 	mov.w	r2, #4294967295
 800d196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d19a:	f10a 0a01 	add.w	sl, sl, #1
 800d19e:	9304      	str	r3, [sp, #16]
 800d1a0:	9307      	str	r3, [sp, #28]
 800d1a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d1a6:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1a8:	4654      	mov	r4, sl
 800d1aa:	2205      	movs	r2, #5
 800d1ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1b0:	484e      	ldr	r0, [pc, #312]	@ (800d2ec <_svfiprintf_r+0x1e4>)
 800d1b2:	f7f3 f815 	bl	80001e0 <memchr>
 800d1b6:	9a04      	ldr	r2, [sp, #16]
 800d1b8:	b9d8      	cbnz	r0, 800d1f2 <_svfiprintf_r+0xea>
 800d1ba:	06d0      	lsls	r0, r2, #27
 800d1bc:	bf44      	itt	mi
 800d1be:	2320      	movmi	r3, #32
 800d1c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1c4:	0711      	lsls	r1, r2, #28
 800d1c6:	bf44      	itt	mi
 800d1c8:	232b      	movmi	r3, #43	@ 0x2b
 800d1ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1ce:	f89a 3000 	ldrb.w	r3, [sl]
 800d1d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1d4:	d015      	beq.n	800d202 <_svfiprintf_r+0xfa>
 800d1d6:	9a07      	ldr	r2, [sp, #28]
 800d1d8:	4654      	mov	r4, sl
 800d1da:	2000      	movs	r0, #0
 800d1dc:	f04f 0c0a 	mov.w	ip, #10
 800d1e0:	4621      	mov	r1, r4
 800d1e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1e6:	3b30      	subs	r3, #48	@ 0x30
 800d1e8:	2b09      	cmp	r3, #9
 800d1ea:	d94b      	bls.n	800d284 <_svfiprintf_r+0x17c>
 800d1ec:	b1b0      	cbz	r0, 800d21c <_svfiprintf_r+0x114>
 800d1ee:	9207      	str	r2, [sp, #28]
 800d1f0:	e014      	b.n	800d21c <_svfiprintf_r+0x114>
 800d1f2:	eba0 0308 	sub.w	r3, r0, r8
 800d1f6:	fa09 f303 	lsl.w	r3, r9, r3
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	9304      	str	r3, [sp, #16]
 800d1fe:	46a2      	mov	sl, r4
 800d200:	e7d2      	b.n	800d1a8 <_svfiprintf_r+0xa0>
 800d202:	9b03      	ldr	r3, [sp, #12]
 800d204:	1d19      	adds	r1, r3, #4
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	9103      	str	r1, [sp, #12]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	bfbb      	ittet	lt
 800d20e:	425b      	neglt	r3, r3
 800d210:	f042 0202 	orrlt.w	r2, r2, #2
 800d214:	9307      	strge	r3, [sp, #28]
 800d216:	9307      	strlt	r3, [sp, #28]
 800d218:	bfb8      	it	lt
 800d21a:	9204      	strlt	r2, [sp, #16]
 800d21c:	7823      	ldrb	r3, [r4, #0]
 800d21e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d220:	d10a      	bne.n	800d238 <_svfiprintf_r+0x130>
 800d222:	7863      	ldrb	r3, [r4, #1]
 800d224:	2b2a      	cmp	r3, #42	@ 0x2a
 800d226:	d132      	bne.n	800d28e <_svfiprintf_r+0x186>
 800d228:	9b03      	ldr	r3, [sp, #12]
 800d22a:	1d1a      	adds	r2, r3, #4
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	9203      	str	r2, [sp, #12]
 800d230:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d234:	3402      	adds	r4, #2
 800d236:	9305      	str	r3, [sp, #20]
 800d238:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d2fc <_svfiprintf_r+0x1f4>
 800d23c:	7821      	ldrb	r1, [r4, #0]
 800d23e:	2203      	movs	r2, #3
 800d240:	4650      	mov	r0, sl
 800d242:	f7f2 ffcd 	bl	80001e0 <memchr>
 800d246:	b138      	cbz	r0, 800d258 <_svfiprintf_r+0x150>
 800d248:	9b04      	ldr	r3, [sp, #16]
 800d24a:	eba0 000a 	sub.w	r0, r0, sl
 800d24e:	2240      	movs	r2, #64	@ 0x40
 800d250:	4082      	lsls	r2, r0
 800d252:	4313      	orrs	r3, r2
 800d254:	3401      	adds	r4, #1
 800d256:	9304      	str	r3, [sp, #16]
 800d258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d25c:	4824      	ldr	r0, [pc, #144]	@ (800d2f0 <_svfiprintf_r+0x1e8>)
 800d25e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d262:	2206      	movs	r2, #6
 800d264:	f7f2 ffbc 	bl	80001e0 <memchr>
 800d268:	2800      	cmp	r0, #0
 800d26a:	d036      	beq.n	800d2da <_svfiprintf_r+0x1d2>
 800d26c:	4b21      	ldr	r3, [pc, #132]	@ (800d2f4 <_svfiprintf_r+0x1ec>)
 800d26e:	bb1b      	cbnz	r3, 800d2b8 <_svfiprintf_r+0x1b0>
 800d270:	9b03      	ldr	r3, [sp, #12]
 800d272:	3307      	adds	r3, #7
 800d274:	f023 0307 	bic.w	r3, r3, #7
 800d278:	3308      	adds	r3, #8
 800d27a:	9303      	str	r3, [sp, #12]
 800d27c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d27e:	4433      	add	r3, r6
 800d280:	9309      	str	r3, [sp, #36]	@ 0x24
 800d282:	e76a      	b.n	800d15a <_svfiprintf_r+0x52>
 800d284:	fb0c 3202 	mla	r2, ip, r2, r3
 800d288:	460c      	mov	r4, r1
 800d28a:	2001      	movs	r0, #1
 800d28c:	e7a8      	b.n	800d1e0 <_svfiprintf_r+0xd8>
 800d28e:	2300      	movs	r3, #0
 800d290:	3401      	adds	r4, #1
 800d292:	9305      	str	r3, [sp, #20]
 800d294:	4619      	mov	r1, r3
 800d296:	f04f 0c0a 	mov.w	ip, #10
 800d29a:	4620      	mov	r0, r4
 800d29c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2a0:	3a30      	subs	r2, #48	@ 0x30
 800d2a2:	2a09      	cmp	r2, #9
 800d2a4:	d903      	bls.n	800d2ae <_svfiprintf_r+0x1a6>
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d0c6      	beq.n	800d238 <_svfiprintf_r+0x130>
 800d2aa:	9105      	str	r1, [sp, #20]
 800d2ac:	e7c4      	b.n	800d238 <_svfiprintf_r+0x130>
 800d2ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e7f0      	b.n	800d29a <_svfiprintf_r+0x192>
 800d2b8:	ab03      	add	r3, sp, #12
 800d2ba:	9300      	str	r3, [sp, #0]
 800d2bc:	462a      	mov	r2, r5
 800d2be:	4b0e      	ldr	r3, [pc, #56]	@ (800d2f8 <_svfiprintf_r+0x1f0>)
 800d2c0:	a904      	add	r1, sp, #16
 800d2c2:	4638      	mov	r0, r7
 800d2c4:	f3af 8000 	nop.w
 800d2c8:	1c42      	adds	r2, r0, #1
 800d2ca:	4606      	mov	r6, r0
 800d2cc:	d1d6      	bne.n	800d27c <_svfiprintf_r+0x174>
 800d2ce:	89ab      	ldrh	r3, [r5, #12]
 800d2d0:	065b      	lsls	r3, r3, #25
 800d2d2:	f53f af2d 	bmi.w	800d130 <_svfiprintf_r+0x28>
 800d2d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2d8:	e72c      	b.n	800d134 <_svfiprintf_r+0x2c>
 800d2da:	ab03      	add	r3, sp, #12
 800d2dc:	9300      	str	r3, [sp, #0]
 800d2de:	462a      	mov	r2, r5
 800d2e0:	4b05      	ldr	r3, [pc, #20]	@ (800d2f8 <_svfiprintf_r+0x1f0>)
 800d2e2:	a904      	add	r1, sp, #16
 800d2e4:	4638      	mov	r0, r7
 800d2e6:	f000 f9bb 	bl	800d660 <_printf_i>
 800d2ea:	e7ed      	b.n	800d2c8 <_svfiprintf_r+0x1c0>
 800d2ec:	0800ddb8 	.word	0x0800ddb8
 800d2f0:	0800ddc2 	.word	0x0800ddc2
 800d2f4:	00000000 	.word	0x00000000
 800d2f8:	0800d051 	.word	0x0800d051
 800d2fc:	0800ddbe 	.word	0x0800ddbe

0800d300 <__sfputc_r>:
 800d300:	6893      	ldr	r3, [r2, #8]
 800d302:	3b01      	subs	r3, #1
 800d304:	2b00      	cmp	r3, #0
 800d306:	b410      	push	{r4}
 800d308:	6093      	str	r3, [r2, #8]
 800d30a:	da08      	bge.n	800d31e <__sfputc_r+0x1e>
 800d30c:	6994      	ldr	r4, [r2, #24]
 800d30e:	42a3      	cmp	r3, r4
 800d310:	db01      	blt.n	800d316 <__sfputc_r+0x16>
 800d312:	290a      	cmp	r1, #10
 800d314:	d103      	bne.n	800d31e <__sfputc_r+0x1e>
 800d316:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d31a:	f7ff bc82 	b.w	800cc22 <__swbuf_r>
 800d31e:	6813      	ldr	r3, [r2, #0]
 800d320:	1c58      	adds	r0, r3, #1
 800d322:	6010      	str	r0, [r2, #0]
 800d324:	7019      	strb	r1, [r3, #0]
 800d326:	4608      	mov	r0, r1
 800d328:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d32c:	4770      	bx	lr

0800d32e <__sfputs_r>:
 800d32e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d330:	4606      	mov	r6, r0
 800d332:	460f      	mov	r7, r1
 800d334:	4614      	mov	r4, r2
 800d336:	18d5      	adds	r5, r2, r3
 800d338:	42ac      	cmp	r4, r5
 800d33a:	d101      	bne.n	800d340 <__sfputs_r+0x12>
 800d33c:	2000      	movs	r0, #0
 800d33e:	e007      	b.n	800d350 <__sfputs_r+0x22>
 800d340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d344:	463a      	mov	r2, r7
 800d346:	4630      	mov	r0, r6
 800d348:	f7ff ffda 	bl	800d300 <__sfputc_r>
 800d34c:	1c43      	adds	r3, r0, #1
 800d34e:	d1f3      	bne.n	800d338 <__sfputs_r+0xa>
 800d350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d354 <_vfiprintf_r>:
 800d354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d358:	460d      	mov	r5, r1
 800d35a:	b09d      	sub	sp, #116	@ 0x74
 800d35c:	4614      	mov	r4, r2
 800d35e:	4698      	mov	r8, r3
 800d360:	4606      	mov	r6, r0
 800d362:	b118      	cbz	r0, 800d36c <_vfiprintf_r+0x18>
 800d364:	6a03      	ldr	r3, [r0, #32]
 800d366:	b90b      	cbnz	r3, 800d36c <_vfiprintf_r+0x18>
 800d368:	f7ff fb3e 	bl	800c9e8 <__sinit>
 800d36c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d36e:	07d9      	lsls	r1, r3, #31
 800d370:	d405      	bmi.n	800d37e <_vfiprintf_r+0x2a>
 800d372:	89ab      	ldrh	r3, [r5, #12]
 800d374:	059a      	lsls	r2, r3, #22
 800d376:	d402      	bmi.n	800d37e <_vfiprintf_r+0x2a>
 800d378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d37a:	f7ff fd60 	bl	800ce3e <__retarget_lock_acquire_recursive>
 800d37e:	89ab      	ldrh	r3, [r5, #12]
 800d380:	071b      	lsls	r3, r3, #28
 800d382:	d501      	bpl.n	800d388 <_vfiprintf_r+0x34>
 800d384:	692b      	ldr	r3, [r5, #16]
 800d386:	b99b      	cbnz	r3, 800d3b0 <_vfiprintf_r+0x5c>
 800d388:	4629      	mov	r1, r5
 800d38a:	4630      	mov	r0, r6
 800d38c:	f7ff fc88 	bl	800cca0 <__swsetup_r>
 800d390:	b170      	cbz	r0, 800d3b0 <_vfiprintf_r+0x5c>
 800d392:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d394:	07dc      	lsls	r4, r3, #31
 800d396:	d504      	bpl.n	800d3a2 <_vfiprintf_r+0x4e>
 800d398:	f04f 30ff 	mov.w	r0, #4294967295
 800d39c:	b01d      	add	sp, #116	@ 0x74
 800d39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3a2:	89ab      	ldrh	r3, [r5, #12]
 800d3a4:	0598      	lsls	r0, r3, #22
 800d3a6:	d4f7      	bmi.n	800d398 <_vfiprintf_r+0x44>
 800d3a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3aa:	f7ff fd49 	bl	800ce40 <__retarget_lock_release_recursive>
 800d3ae:	e7f3      	b.n	800d398 <_vfiprintf_r+0x44>
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3b4:	2320      	movs	r3, #32
 800d3b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d3ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3be:	2330      	movs	r3, #48	@ 0x30
 800d3c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d570 <_vfiprintf_r+0x21c>
 800d3c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3c8:	f04f 0901 	mov.w	r9, #1
 800d3cc:	4623      	mov	r3, r4
 800d3ce:	469a      	mov	sl, r3
 800d3d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3d4:	b10a      	cbz	r2, 800d3da <_vfiprintf_r+0x86>
 800d3d6:	2a25      	cmp	r2, #37	@ 0x25
 800d3d8:	d1f9      	bne.n	800d3ce <_vfiprintf_r+0x7a>
 800d3da:	ebba 0b04 	subs.w	fp, sl, r4
 800d3de:	d00b      	beq.n	800d3f8 <_vfiprintf_r+0xa4>
 800d3e0:	465b      	mov	r3, fp
 800d3e2:	4622      	mov	r2, r4
 800d3e4:	4629      	mov	r1, r5
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	f7ff ffa1 	bl	800d32e <__sfputs_r>
 800d3ec:	3001      	adds	r0, #1
 800d3ee:	f000 80a7 	beq.w	800d540 <_vfiprintf_r+0x1ec>
 800d3f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3f4:	445a      	add	r2, fp
 800d3f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d3f8:	f89a 3000 	ldrb.w	r3, [sl]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	f000 809f 	beq.w	800d540 <_vfiprintf_r+0x1ec>
 800d402:	2300      	movs	r3, #0
 800d404:	f04f 32ff 	mov.w	r2, #4294967295
 800d408:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d40c:	f10a 0a01 	add.w	sl, sl, #1
 800d410:	9304      	str	r3, [sp, #16]
 800d412:	9307      	str	r3, [sp, #28]
 800d414:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d418:	931a      	str	r3, [sp, #104]	@ 0x68
 800d41a:	4654      	mov	r4, sl
 800d41c:	2205      	movs	r2, #5
 800d41e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d422:	4853      	ldr	r0, [pc, #332]	@ (800d570 <_vfiprintf_r+0x21c>)
 800d424:	f7f2 fedc 	bl	80001e0 <memchr>
 800d428:	9a04      	ldr	r2, [sp, #16]
 800d42a:	b9d8      	cbnz	r0, 800d464 <_vfiprintf_r+0x110>
 800d42c:	06d1      	lsls	r1, r2, #27
 800d42e:	bf44      	itt	mi
 800d430:	2320      	movmi	r3, #32
 800d432:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d436:	0713      	lsls	r3, r2, #28
 800d438:	bf44      	itt	mi
 800d43a:	232b      	movmi	r3, #43	@ 0x2b
 800d43c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d440:	f89a 3000 	ldrb.w	r3, [sl]
 800d444:	2b2a      	cmp	r3, #42	@ 0x2a
 800d446:	d015      	beq.n	800d474 <_vfiprintf_r+0x120>
 800d448:	9a07      	ldr	r2, [sp, #28]
 800d44a:	4654      	mov	r4, sl
 800d44c:	2000      	movs	r0, #0
 800d44e:	f04f 0c0a 	mov.w	ip, #10
 800d452:	4621      	mov	r1, r4
 800d454:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d458:	3b30      	subs	r3, #48	@ 0x30
 800d45a:	2b09      	cmp	r3, #9
 800d45c:	d94b      	bls.n	800d4f6 <_vfiprintf_r+0x1a2>
 800d45e:	b1b0      	cbz	r0, 800d48e <_vfiprintf_r+0x13a>
 800d460:	9207      	str	r2, [sp, #28]
 800d462:	e014      	b.n	800d48e <_vfiprintf_r+0x13a>
 800d464:	eba0 0308 	sub.w	r3, r0, r8
 800d468:	fa09 f303 	lsl.w	r3, r9, r3
 800d46c:	4313      	orrs	r3, r2
 800d46e:	9304      	str	r3, [sp, #16]
 800d470:	46a2      	mov	sl, r4
 800d472:	e7d2      	b.n	800d41a <_vfiprintf_r+0xc6>
 800d474:	9b03      	ldr	r3, [sp, #12]
 800d476:	1d19      	adds	r1, r3, #4
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	9103      	str	r1, [sp, #12]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	bfbb      	ittet	lt
 800d480:	425b      	neglt	r3, r3
 800d482:	f042 0202 	orrlt.w	r2, r2, #2
 800d486:	9307      	strge	r3, [sp, #28]
 800d488:	9307      	strlt	r3, [sp, #28]
 800d48a:	bfb8      	it	lt
 800d48c:	9204      	strlt	r2, [sp, #16]
 800d48e:	7823      	ldrb	r3, [r4, #0]
 800d490:	2b2e      	cmp	r3, #46	@ 0x2e
 800d492:	d10a      	bne.n	800d4aa <_vfiprintf_r+0x156>
 800d494:	7863      	ldrb	r3, [r4, #1]
 800d496:	2b2a      	cmp	r3, #42	@ 0x2a
 800d498:	d132      	bne.n	800d500 <_vfiprintf_r+0x1ac>
 800d49a:	9b03      	ldr	r3, [sp, #12]
 800d49c:	1d1a      	adds	r2, r3, #4
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	9203      	str	r2, [sp, #12]
 800d4a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4a6:	3402      	adds	r4, #2
 800d4a8:	9305      	str	r3, [sp, #20]
 800d4aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d580 <_vfiprintf_r+0x22c>
 800d4ae:	7821      	ldrb	r1, [r4, #0]
 800d4b0:	2203      	movs	r2, #3
 800d4b2:	4650      	mov	r0, sl
 800d4b4:	f7f2 fe94 	bl	80001e0 <memchr>
 800d4b8:	b138      	cbz	r0, 800d4ca <_vfiprintf_r+0x176>
 800d4ba:	9b04      	ldr	r3, [sp, #16]
 800d4bc:	eba0 000a 	sub.w	r0, r0, sl
 800d4c0:	2240      	movs	r2, #64	@ 0x40
 800d4c2:	4082      	lsls	r2, r0
 800d4c4:	4313      	orrs	r3, r2
 800d4c6:	3401      	adds	r4, #1
 800d4c8:	9304      	str	r3, [sp, #16]
 800d4ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4ce:	4829      	ldr	r0, [pc, #164]	@ (800d574 <_vfiprintf_r+0x220>)
 800d4d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4d4:	2206      	movs	r2, #6
 800d4d6:	f7f2 fe83 	bl	80001e0 <memchr>
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	d03f      	beq.n	800d55e <_vfiprintf_r+0x20a>
 800d4de:	4b26      	ldr	r3, [pc, #152]	@ (800d578 <_vfiprintf_r+0x224>)
 800d4e0:	bb1b      	cbnz	r3, 800d52a <_vfiprintf_r+0x1d6>
 800d4e2:	9b03      	ldr	r3, [sp, #12]
 800d4e4:	3307      	adds	r3, #7
 800d4e6:	f023 0307 	bic.w	r3, r3, #7
 800d4ea:	3308      	adds	r3, #8
 800d4ec:	9303      	str	r3, [sp, #12]
 800d4ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4f0:	443b      	add	r3, r7
 800d4f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4f4:	e76a      	b.n	800d3cc <_vfiprintf_r+0x78>
 800d4f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	2001      	movs	r0, #1
 800d4fe:	e7a8      	b.n	800d452 <_vfiprintf_r+0xfe>
 800d500:	2300      	movs	r3, #0
 800d502:	3401      	adds	r4, #1
 800d504:	9305      	str	r3, [sp, #20]
 800d506:	4619      	mov	r1, r3
 800d508:	f04f 0c0a 	mov.w	ip, #10
 800d50c:	4620      	mov	r0, r4
 800d50e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d512:	3a30      	subs	r2, #48	@ 0x30
 800d514:	2a09      	cmp	r2, #9
 800d516:	d903      	bls.n	800d520 <_vfiprintf_r+0x1cc>
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d0c6      	beq.n	800d4aa <_vfiprintf_r+0x156>
 800d51c:	9105      	str	r1, [sp, #20]
 800d51e:	e7c4      	b.n	800d4aa <_vfiprintf_r+0x156>
 800d520:	fb0c 2101 	mla	r1, ip, r1, r2
 800d524:	4604      	mov	r4, r0
 800d526:	2301      	movs	r3, #1
 800d528:	e7f0      	b.n	800d50c <_vfiprintf_r+0x1b8>
 800d52a:	ab03      	add	r3, sp, #12
 800d52c:	9300      	str	r3, [sp, #0]
 800d52e:	462a      	mov	r2, r5
 800d530:	4b12      	ldr	r3, [pc, #72]	@ (800d57c <_vfiprintf_r+0x228>)
 800d532:	a904      	add	r1, sp, #16
 800d534:	4630      	mov	r0, r6
 800d536:	f3af 8000 	nop.w
 800d53a:	4607      	mov	r7, r0
 800d53c:	1c78      	adds	r0, r7, #1
 800d53e:	d1d6      	bne.n	800d4ee <_vfiprintf_r+0x19a>
 800d540:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d542:	07d9      	lsls	r1, r3, #31
 800d544:	d405      	bmi.n	800d552 <_vfiprintf_r+0x1fe>
 800d546:	89ab      	ldrh	r3, [r5, #12]
 800d548:	059a      	lsls	r2, r3, #22
 800d54a:	d402      	bmi.n	800d552 <_vfiprintf_r+0x1fe>
 800d54c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d54e:	f7ff fc77 	bl	800ce40 <__retarget_lock_release_recursive>
 800d552:	89ab      	ldrh	r3, [r5, #12]
 800d554:	065b      	lsls	r3, r3, #25
 800d556:	f53f af1f 	bmi.w	800d398 <_vfiprintf_r+0x44>
 800d55a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d55c:	e71e      	b.n	800d39c <_vfiprintf_r+0x48>
 800d55e:	ab03      	add	r3, sp, #12
 800d560:	9300      	str	r3, [sp, #0]
 800d562:	462a      	mov	r2, r5
 800d564:	4b05      	ldr	r3, [pc, #20]	@ (800d57c <_vfiprintf_r+0x228>)
 800d566:	a904      	add	r1, sp, #16
 800d568:	4630      	mov	r0, r6
 800d56a:	f000 f879 	bl	800d660 <_printf_i>
 800d56e:	e7e4      	b.n	800d53a <_vfiprintf_r+0x1e6>
 800d570:	0800ddb8 	.word	0x0800ddb8
 800d574:	0800ddc2 	.word	0x0800ddc2
 800d578:	00000000 	.word	0x00000000
 800d57c:	0800d32f 	.word	0x0800d32f
 800d580:	0800ddbe 	.word	0x0800ddbe

0800d584 <_printf_common>:
 800d584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d588:	4616      	mov	r6, r2
 800d58a:	4698      	mov	r8, r3
 800d58c:	688a      	ldr	r2, [r1, #8]
 800d58e:	690b      	ldr	r3, [r1, #16]
 800d590:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d594:	4293      	cmp	r3, r2
 800d596:	bfb8      	it	lt
 800d598:	4613      	movlt	r3, r2
 800d59a:	6033      	str	r3, [r6, #0]
 800d59c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d5a0:	4607      	mov	r7, r0
 800d5a2:	460c      	mov	r4, r1
 800d5a4:	b10a      	cbz	r2, 800d5aa <_printf_common+0x26>
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	6033      	str	r3, [r6, #0]
 800d5aa:	6823      	ldr	r3, [r4, #0]
 800d5ac:	0699      	lsls	r1, r3, #26
 800d5ae:	bf42      	ittt	mi
 800d5b0:	6833      	ldrmi	r3, [r6, #0]
 800d5b2:	3302      	addmi	r3, #2
 800d5b4:	6033      	strmi	r3, [r6, #0]
 800d5b6:	6825      	ldr	r5, [r4, #0]
 800d5b8:	f015 0506 	ands.w	r5, r5, #6
 800d5bc:	d106      	bne.n	800d5cc <_printf_common+0x48>
 800d5be:	f104 0a19 	add.w	sl, r4, #25
 800d5c2:	68e3      	ldr	r3, [r4, #12]
 800d5c4:	6832      	ldr	r2, [r6, #0]
 800d5c6:	1a9b      	subs	r3, r3, r2
 800d5c8:	42ab      	cmp	r3, r5
 800d5ca:	dc26      	bgt.n	800d61a <_printf_common+0x96>
 800d5cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d5d0:	6822      	ldr	r2, [r4, #0]
 800d5d2:	3b00      	subs	r3, #0
 800d5d4:	bf18      	it	ne
 800d5d6:	2301      	movne	r3, #1
 800d5d8:	0692      	lsls	r2, r2, #26
 800d5da:	d42b      	bmi.n	800d634 <_printf_common+0xb0>
 800d5dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d5e0:	4641      	mov	r1, r8
 800d5e2:	4638      	mov	r0, r7
 800d5e4:	47c8      	blx	r9
 800d5e6:	3001      	adds	r0, #1
 800d5e8:	d01e      	beq.n	800d628 <_printf_common+0xa4>
 800d5ea:	6823      	ldr	r3, [r4, #0]
 800d5ec:	6922      	ldr	r2, [r4, #16]
 800d5ee:	f003 0306 	and.w	r3, r3, #6
 800d5f2:	2b04      	cmp	r3, #4
 800d5f4:	bf02      	ittt	eq
 800d5f6:	68e5      	ldreq	r5, [r4, #12]
 800d5f8:	6833      	ldreq	r3, [r6, #0]
 800d5fa:	1aed      	subeq	r5, r5, r3
 800d5fc:	68a3      	ldr	r3, [r4, #8]
 800d5fe:	bf0c      	ite	eq
 800d600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d604:	2500      	movne	r5, #0
 800d606:	4293      	cmp	r3, r2
 800d608:	bfc4      	itt	gt
 800d60a:	1a9b      	subgt	r3, r3, r2
 800d60c:	18ed      	addgt	r5, r5, r3
 800d60e:	2600      	movs	r6, #0
 800d610:	341a      	adds	r4, #26
 800d612:	42b5      	cmp	r5, r6
 800d614:	d11a      	bne.n	800d64c <_printf_common+0xc8>
 800d616:	2000      	movs	r0, #0
 800d618:	e008      	b.n	800d62c <_printf_common+0xa8>
 800d61a:	2301      	movs	r3, #1
 800d61c:	4652      	mov	r2, sl
 800d61e:	4641      	mov	r1, r8
 800d620:	4638      	mov	r0, r7
 800d622:	47c8      	blx	r9
 800d624:	3001      	adds	r0, #1
 800d626:	d103      	bne.n	800d630 <_printf_common+0xac>
 800d628:	f04f 30ff 	mov.w	r0, #4294967295
 800d62c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d630:	3501      	adds	r5, #1
 800d632:	e7c6      	b.n	800d5c2 <_printf_common+0x3e>
 800d634:	18e1      	adds	r1, r4, r3
 800d636:	1c5a      	adds	r2, r3, #1
 800d638:	2030      	movs	r0, #48	@ 0x30
 800d63a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d63e:	4422      	add	r2, r4
 800d640:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d644:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d648:	3302      	adds	r3, #2
 800d64a:	e7c7      	b.n	800d5dc <_printf_common+0x58>
 800d64c:	2301      	movs	r3, #1
 800d64e:	4622      	mov	r2, r4
 800d650:	4641      	mov	r1, r8
 800d652:	4638      	mov	r0, r7
 800d654:	47c8      	blx	r9
 800d656:	3001      	adds	r0, #1
 800d658:	d0e6      	beq.n	800d628 <_printf_common+0xa4>
 800d65a:	3601      	adds	r6, #1
 800d65c:	e7d9      	b.n	800d612 <_printf_common+0x8e>
	...

0800d660 <_printf_i>:
 800d660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d664:	7e0f      	ldrb	r7, [r1, #24]
 800d666:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d668:	2f78      	cmp	r7, #120	@ 0x78
 800d66a:	4691      	mov	r9, r2
 800d66c:	4680      	mov	r8, r0
 800d66e:	460c      	mov	r4, r1
 800d670:	469a      	mov	sl, r3
 800d672:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d676:	d807      	bhi.n	800d688 <_printf_i+0x28>
 800d678:	2f62      	cmp	r7, #98	@ 0x62
 800d67a:	d80a      	bhi.n	800d692 <_printf_i+0x32>
 800d67c:	2f00      	cmp	r7, #0
 800d67e:	f000 80d2 	beq.w	800d826 <_printf_i+0x1c6>
 800d682:	2f58      	cmp	r7, #88	@ 0x58
 800d684:	f000 80b9 	beq.w	800d7fa <_printf_i+0x19a>
 800d688:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d68c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d690:	e03a      	b.n	800d708 <_printf_i+0xa8>
 800d692:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d696:	2b15      	cmp	r3, #21
 800d698:	d8f6      	bhi.n	800d688 <_printf_i+0x28>
 800d69a:	a101      	add	r1, pc, #4	@ (adr r1, 800d6a0 <_printf_i+0x40>)
 800d69c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d6a0:	0800d6f9 	.word	0x0800d6f9
 800d6a4:	0800d70d 	.word	0x0800d70d
 800d6a8:	0800d689 	.word	0x0800d689
 800d6ac:	0800d689 	.word	0x0800d689
 800d6b0:	0800d689 	.word	0x0800d689
 800d6b4:	0800d689 	.word	0x0800d689
 800d6b8:	0800d70d 	.word	0x0800d70d
 800d6bc:	0800d689 	.word	0x0800d689
 800d6c0:	0800d689 	.word	0x0800d689
 800d6c4:	0800d689 	.word	0x0800d689
 800d6c8:	0800d689 	.word	0x0800d689
 800d6cc:	0800d80d 	.word	0x0800d80d
 800d6d0:	0800d737 	.word	0x0800d737
 800d6d4:	0800d7c7 	.word	0x0800d7c7
 800d6d8:	0800d689 	.word	0x0800d689
 800d6dc:	0800d689 	.word	0x0800d689
 800d6e0:	0800d82f 	.word	0x0800d82f
 800d6e4:	0800d689 	.word	0x0800d689
 800d6e8:	0800d737 	.word	0x0800d737
 800d6ec:	0800d689 	.word	0x0800d689
 800d6f0:	0800d689 	.word	0x0800d689
 800d6f4:	0800d7cf 	.word	0x0800d7cf
 800d6f8:	6833      	ldr	r3, [r6, #0]
 800d6fa:	1d1a      	adds	r2, r3, #4
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	6032      	str	r2, [r6, #0]
 800d700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d704:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d708:	2301      	movs	r3, #1
 800d70a:	e09d      	b.n	800d848 <_printf_i+0x1e8>
 800d70c:	6833      	ldr	r3, [r6, #0]
 800d70e:	6820      	ldr	r0, [r4, #0]
 800d710:	1d19      	adds	r1, r3, #4
 800d712:	6031      	str	r1, [r6, #0]
 800d714:	0606      	lsls	r6, r0, #24
 800d716:	d501      	bpl.n	800d71c <_printf_i+0xbc>
 800d718:	681d      	ldr	r5, [r3, #0]
 800d71a:	e003      	b.n	800d724 <_printf_i+0xc4>
 800d71c:	0645      	lsls	r5, r0, #25
 800d71e:	d5fb      	bpl.n	800d718 <_printf_i+0xb8>
 800d720:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d724:	2d00      	cmp	r5, #0
 800d726:	da03      	bge.n	800d730 <_printf_i+0xd0>
 800d728:	232d      	movs	r3, #45	@ 0x2d
 800d72a:	426d      	negs	r5, r5
 800d72c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d730:	4859      	ldr	r0, [pc, #356]	@ (800d898 <_printf_i+0x238>)
 800d732:	230a      	movs	r3, #10
 800d734:	e011      	b.n	800d75a <_printf_i+0xfa>
 800d736:	6821      	ldr	r1, [r4, #0]
 800d738:	6833      	ldr	r3, [r6, #0]
 800d73a:	0608      	lsls	r0, r1, #24
 800d73c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d740:	d402      	bmi.n	800d748 <_printf_i+0xe8>
 800d742:	0649      	lsls	r1, r1, #25
 800d744:	bf48      	it	mi
 800d746:	b2ad      	uxthmi	r5, r5
 800d748:	2f6f      	cmp	r7, #111	@ 0x6f
 800d74a:	4853      	ldr	r0, [pc, #332]	@ (800d898 <_printf_i+0x238>)
 800d74c:	6033      	str	r3, [r6, #0]
 800d74e:	bf14      	ite	ne
 800d750:	230a      	movne	r3, #10
 800d752:	2308      	moveq	r3, #8
 800d754:	2100      	movs	r1, #0
 800d756:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d75a:	6866      	ldr	r6, [r4, #4]
 800d75c:	60a6      	str	r6, [r4, #8]
 800d75e:	2e00      	cmp	r6, #0
 800d760:	bfa2      	ittt	ge
 800d762:	6821      	ldrge	r1, [r4, #0]
 800d764:	f021 0104 	bicge.w	r1, r1, #4
 800d768:	6021      	strge	r1, [r4, #0]
 800d76a:	b90d      	cbnz	r5, 800d770 <_printf_i+0x110>
 800d76c:	2e00      	cmp	r6, #0
 800d76e:	d04b      	beq.n	800d808 <_printf_i+0x1a8>
 800d770:	4616      	mov	r6, r2
 800d772:	fbb5 f1f3 	udiv	r1, r5, r3
 800d776:	fb03 5711 	mls	r7, r3, r1, r5
 800d77a:	5dc7      	ldrb	r7, [r0, r7]
 800d77c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d780:	462f      	mov	r7, r5
 800d782:	42bb      	cmp	r3, r7
 800d784:	460d      	mov	r5, r1
 800d786:	d9f4      	bls.n	800d772 <_printf_i+0x112>
 800d788:	2b08      	cmp	r3, #8
 800d78a:	d10b      	bne.n	800d7a4 <_printf_i+0x144>
 800d78c:	6823      	ldr	r3, [r4, #0]
 800d78e:	07df      	lsls	r7, r3, #31
 800d790:	d508      	bpl.n	800d7a4 <_printf_i+0x144>
 800d792:	6923      	ldr	r3, [r4, #16]
 800d794:	6861      	ldr	r1, [r4, #4]
 800d796:	4299      	cmp	r1, r3
 800d798:	bfde      	ittt	le
 800d79a:	2330      	movle	r3, #48	@ 0x30
 800d79c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d7a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d7a4:	1b92      	subs	r2, r2, r6
 800d7a6:	6122      	str	r2, [r4, #16]
 800d7a8:	f8cd a000 	str.w	sl, [sp]
 800d7ac:	464b      	mov	r3, r9
 800d7ae:	aa03      	add	r2, sp, #12
 800d7b0:	4621      	mov	r1, r4
 800d7b2:	4640      	mov	r0, r8
 800d7b4:	f7ff fee6 	bl	800d584 <_printf_common>
 800d7b8:	3001      	adds	r0, #1
 800d7ba:	d14a      	bne.n	800d852 <_printf_i+0x1f2>
 800d7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7c0:	b004      	add	sp, #16
 800d7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7c6:	6823      	ldr	r3, [r4, #0]
 800d7c8:	f043 0320 	orr.w	r3, r3, #32
 800d7cc:	6023      	str	r3, [r4, #0]
 800d7ce:	4833      	ldr	r0, [pc, #204]	@ (800d89c <_printf_i+0x23c>)
 800d7d0:	2778      	movs	r7, #120	@ 0x78
 800d7d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d7d6:	6823      	ldr	r3, [r4, #0]
 800d7d8:	6831      	ldr	r1, [r6, #0]
 800d7da:	061f      	lsls	r7, r3, #24
 800d7dc:	f851 5b04 	ldr.w	r5, [r1], #4
 800d7e0:	d402      	bmi.n	800d7e8 <_printf_i+0x188>
 800d7e2:	065f      	lsls	r7, r3, #25
 800d7e4:	bf48      	it	mi
 800d7e6:	b2ad      	uxthmi	r5, r5
 800d7e8:	6031      	str	r1, [r6, #0]
 800d7ea:	07d9      	lsls	r1, r3, #31
 800d7ec:	bf44      	itt	mi
 800d7ee:	f043 0320 	orrmi.w	r3, r3, #32
 800d7f2:	6023      	strmi	r3, [r4, #0]
 800d7f4:	b11d      	cbz	r5, 800d7fe <_printf_i+0x19e>
 800d7f6:	2310      	movs	r3, #16
 800d7f8:	e7ac      	b.n	800d754 <_printf_i+0xf4>
 800d7fa:	4827      	ldr	r0, [pc, #156]	@ (800d898 <_printf_i+0x238>)
 800d7fc:	e7e9      	b.n	800d7d2 <_printf_i+0x172>
 800d7fe:	6823      	ldr	r3, [r4, #0]
 800d800:	f023 0320 	bic.w	r3, r3, #32
 800d804:	6023      	str	r3, [r4, #0]
 800d806:	e7f6      	b.n	800d7f6 <_printf_i+0x196>
 800d808:	4616      	mov	r6, r2
 800d80a:	e7bd      	b.n	800d788 <_printf_i+0x128>
 800d80c:	6833      	ldr	r3, [r6, #0]
 800d80e:	6825      	ldr	r5, [r4, #0]
 800d810:	6961      	ldr	r1, [r4, #20]
 800d812:	1d18      	adds	r0, r3, #4
 800d814:	6030      	str	r0, [r6, #0]
 800d816:	062e      	lsls	r6, r5, #24
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	d501      	bpl.n	800d820 <_printf_i+0x1c0>
 800d81c:	6019      	str	r1, [r3, #0]
 800d81e:	e002      	b.n	800d826 <_printf_i+0x1c6>
 800d820:	0668      	lsls	r0, r5, #25
 800d822:	d5fb      	bpl.n	800d81c <_printf_i+0x1bc>
 800d824:	8019      	strh	r1, [r3, #0]
 800d826:	2300      	movs	r3, #0
 800d828:	6123      	str	r3, [r4, #16]
 800d82a:	4616      	mov	r6, r2
 800d82c:	e7bc      	b.n	800d7a8 <_printf_i+0x148>
 800d82e:	6833      	ldr	r3, [r6, #0]
 800d830:	1d1a      	adds	r2, r3, #4
 800d832:	6032      	str	r2, [r6, #0]
 800d834:	681e      	ldr	r6, [r3, #0]
 800d836:	6862      	ldr	r2, [r4, #4]
 800d838:	2100      	movs	r1, #0
 800d83a:	4630      	mov	r0, r6
 800d83c:	f7f2 fcd0 	bl	80001e0 <memchr>
 800d840:	b108      	cbz	r0, 800d846 <_printf_i+0x1e6>
 800d842:	1b80      	subs	r0, r0, r6
 800d844:	6060      	str	r0, [r4, #4]
 800d846:	6863      	ldr	r3, [r4, #4]
 800d848:	6123      	str	r3, [r4, #16]
 800d84a:	2300      	movs	r3, #0
 800d84c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d850:	e7aa      	b.n	800d7a8 <_printf_i+0x148>
 800d852:	6923      	ldr	r3, [r4, #16]
 800d854:	4632      	mov	r2, r6
 800d856:	4649      	mov	r1, r9
 800d858:	4640      	mov	r0, r8
 800d85a:	47d0      	blx	sl
 800d85c:	3001      	adds	r0, #1
 800d85e:	d0ad      	beq.n	800d7bc <_printf_i+0x15c>
 800d860:	6823      	ldr	r3, [r4, #0]
 800d862:	079b      	lsls	r3, r3, #30
 800d864:	d413      	bmi.n	800d88e <_printf_i+0x22e>
 800d866:	68e0      	ldr	r0, [r4, #12]
 800d868:	9b03      	ldr	r3, [sp, #12]
 800d86a:	4298      	cmp	r0, r3
 800d86c:	bfb8      	it	lt
 800d86e:	4618      	movlt	r0, r3
 800d870:	e7a6      	b.n	800d7c0 <_printf_i+0x160>
 800d872:	2301      	movs	r3, #1
 800d874:	4632      	mov	r2, r6
 800d876:	4649      	mov	r1, r9
 800d878:	4640      	mov	r0, r8
 800d87a:	47d0      	blx	sl
 800d87c:	3001      	adds	r0, #1
 800d87e:	d09d      	beq.n	800d7bc <_printf_i+0x15c>
 800d880:	3501      	adds	r5, #1
 800d882:	68e3      	ldr	r3, [r4, #12]
 800d884:	9903      	ldr	r1, [sp, #12]
 800d886:	1a5b      	subs	r3, r3, r1
 800d888:	42ab      	cmp	r3, r5
 800d88a:	dcf2      	bgt.n	800d872 <_printf_i+0x212>
 800d88c:	e7eb      	b.n	800d866 <_printf_i+0x206>
 800d88e:	2500      	movs	r5, #0
 800d890:	f104 0619 	add.w	r6, r4, #25
 800d894:	e7f5      	b.n	800d882 <_printf_i+0x222>
 800d896:	bf00      	nop
 800d898:	0800ddc9 	.word	0x0800ddc9
 800d89c:	0800ddda 	.word	0x0800ddda

0800d8a0 <__sflush_r>:
 800d8a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8a8:	0716      	lsls	r6, r2, #28
 800d8aa:	4605      	mov	r5, r0
 800d8ac:	460c      	mov	r4, r1
 800d8ae:	d454      	bmi.n	800d95a <__sflush_r+0xba>
 800d8b0:	684b      	ldr	r3, [r1, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	dc02      	bgt.n	800d8bc <__sflush_r+0x1c>
 800d8b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	dd48      	ble.n	800d94e <__sflush_r+0xae>
 800d8bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8be:	2e00      	cmp	r6, #0
 800d8c0:	d045      	beq.n	800d94e <__sflush_r+0xae>
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d8c8:	682f      	ldr	r7, [r5, #0]
 800d8ca:	6a21      	ldr	r1, [r4, #32]
 800d8cc:	602b      	str	r3, [r5, #0]
 800d8ce:	d030      	beq.n	800d932 <__sflush_r+0x92>
 800d8d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d8d2:	89a3      	ldrh	r3, [r4, #12]
 800d8d4:	0759      	lsls	r1, r3, #29
 800d8d6:	d505      	bpl.n	800d8e4 <__sflush_r+0x44>
 800d8d8:	6863      	ldr	r3, [r4, #4]
 800d8da:	1ad2      	subs	r2, r2, r3
 800d8dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d8de:	b10b      	cbz	r3, 800d8e4 <__sflush_r+0x44>
 800d8e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d8e2:	1ad2      	subs	r2, r2, r3
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8e8:	6a21      	ldr	r1, [r4, #32]
 800d8ea:	4628      	mov	r0, r5
 800d8ec:	47b0      	blx	r6
 800d8ee:	1c43      	adds	r3, r0, #1
 800d8f0:	89a3      	ldrh	r3, [r4, #12]
 800d8f2:	d106      	bne.n	800d902 <__sflush_r+0x62>
 800d8f4:	6829      	ldr	r1, [r5, #0]
 800d8f6:	291d      	cmp	r1, #29
 800d8f8:	d82b      	bhi.n	800d952 <__sflush_r+0xb2>
 800d8fa:	4a2a      	ldr	r2, [pc, #168]	@ (800d9a4 <__sflush_r+0x104>)
 800d8fc:	410a      	asrs	r2, r1
 800d8fe:	07d6      	lsls	r6, r2, #31
 800d900:	d427      	bmi.n	800d952 <__sflush_r+0xb2>
 800d902:	2200      	movs	r2, #0
 800d904:	6062      	str	r2, [r4, #4]
 800d906:	04d9      	lsls	r1, r3, #19
 800d908:	6922      	ldr	r2, [r4, #16]
 800d90a:	6022      	str	r2, [r4, #0]
 800d90c:	d504      	bpl.n	800d918 <__sflush_r+0x78>
 800d90e:	1c42      	adds	r2, r0, #1
 800d910:	d101      	bne.n	800d916 <__sflush_r+0x76>
 800d912:	682b      	ldr	r3, [r5, #0]
 800d914:	b903      	cbnz	r3, 800d918 <__sflush_r+0x78>
 800d916:	6560      	str	r0, [r4, #84]	@ 0x54
 800d918:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d91a:	602f      	str	r7, [r5, #0]
 800d91c:	b1b9      	cbz	r1, 800d94e <__sflush_r+0xae>
 800d91e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d922:	4299      	cmp	r1, r3
 800d924:	d002      	beq.n	800d92c <__sflush_r+0x8c>
 800d926:	4628      	mov	r0, r5
 800d928:	f7ff fa9a 	bl	800ce60 <_free_r>
 800d92c:	2300      	movs	r3, #0
 800d92e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d930:	e00d      	b.n	800d94e <__sflush_r+0xae>
 800d932:	2301      	movs	r3, #1
 800d934:	4628      	mov	r0, r5
 800d936:	47b0      	blx	r6
 800d938:	4602      	mov	r2, r0
 800d93a:	1c50      	adds	r0, r2, #1
 800d93c:	d1c9      	bne.n	800d8d2 <__sflush_r+0x32>
 800d93e:	682b      	ldr	r3, [r5, #0]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d0c6      	beq.n	800d8d2 <__sflush_r+0x32>
 800d944:	2b1d      	cmp	r3, #29
 800d946:	d001      	beq.n	800d94c <__sflush_r+0xac>
 800d948:	2b16      	cmp	r3, #22
 800d94a:	d11e      	bne.n	800d98a <__sflush_r+0xea>
 800d94c:	602f      	str	r7, [r5, #0]
 800d94e:	2000      	movs	r0, #0
 800d950:	e022      	b.n	800d998 <__sflush_r+0xf8>
 800d952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d956:	b21b      	sxth	r3, r3
 800d958:	e01b      	b.n	800d992 <__sflush_r+0xf2>
 800d95a:	690f      	ldr	r7, [r1, #16]
 800d95c:	2f00      	cmp	r7, #0
 800d95e:	d0f6      	beq.n	800d94e <__sflush_r+0xae>
 800d960:	0793      	lsls	r3, r2, #30
 800d962:	680e      	ldr	r6, [r1, #0]
 800d964:	bf08      	it	eq
 800d966:	694b      	ldreq	r3, [r1, #20]
 800d968:	600f      	str	r7, [r1, #0]
 800d96a:	bf18      	it	ne
 800d96c:	2300      	movne	r3, #0
 800d96e:	eba6 0807 	sub.w	r8, r6, r7
 800d972:	608b      	str	r3, [r1, #8]
 800d974:	f1b8 0f00 	cmp.w	r8, #0
 800d978:	dde9      	ble.n	800d94e <__sflush_r+0xae>
 800d97a:	6a21      	ldr	r1, [r4, #32]
 800d97c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d97e:	4643      	mov	r3, r8
 800d980:	463a      	mov	r2, r7
 800d982:	4628      	mov	r0, r5
 800d984:	47b0      	blx	r6
 800d986:	2800      	cmp	r0, #0
 800d988:	dc08      	bgt.n	800d99c <__sflush_r+0xfc>
 800d98a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d98e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d992:	81a3      	strh	r3, [r4, #12]
 800d994:	f04f 30ff 	mov.w	r0, #4294967295
 800d998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d99c:	4407      	add	r7, r0
 800d99e:	eba8 0800 	sub.w	r8, r8, r0
 800d9a2:	e7e7      	b.n	800d974 <__sflush_r+0xd4>
 800d9a4:	dfbffffe 	.word	0xdfbffffe

0800d9a8 <_fflush_r>:
 800d9a8:	b538      	push	{r3, r4, r5, lr}
 800d9aa:	690b      	ldr	r3, [r1, #16]
 800d9ac:	4605      	mov	r5, r0
 800d9ae:	460c      	mov	r4, r1
 800d9b0:	b913      	cbnz	r3, 800d9b8 <_fflush_r+0x10>
 800d9b2:	2500      	movs	r5, #0
 800d9b4:	4628      	mov	r0, r5
 800d9b6:	bd38      	pop	{r3, r4, r5, pc}
 800d9b8:	b118      	cbz	r0, 800d9c2 <_fflush_r+0x1a>
 800d9ba:	6a03      	ldr	r3, [r0, #32]
 800d9bc:	b90b      	cbnz	r3, 800d9c2 <_fflush_r+0x1a>
 800d9be:	f7ff f813 	bl	800c9e8 <__sinit>
 800d9c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d0f3      	beq.n	800d9b2 <_fflush_r+0xa>
 800d9ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d9cc:	07d0      	lsls	r0, r2, #31
 800d9ce:	d404      	bmi.n	800d9da <_fflush_r+0x32>
 800d9d0:	0599      	lsls	r1, r3, #22
 800d9d2:	d402      	bmi.n	800d9da <_fflush_r+0x32>
 800d9d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9d6:	f7ff fa32 	bl	800ce3e <__retarget_lock_acquire_recursive>
 800d9da:	4628      	mov	r0, r5
 800d9dc:	4621      	mov	r1, r4
 800d9de:	f7ff ff5f 	bl	800d8a0 <__sflush_r>
 800d9e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9e4:	07da      	lsls	r2, r3, #31
 800d9e6:	4605      	mov	r5, r0
 800d9e8:	d4e4      	bmi.n	800d9b4 <_fflush_r+0xc>
 800d9ea:	89a3      	ldrh	r3, [r4, #12]
 800d9ec:	059b      	lsls	r3, r3, #22
 800d9ee:	d4e1      	bmi.n	800d9b4 <_fflush_r+0xc>
 800d9f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9f2:	f7ff fa25 	bl	800ce40 <__retarget_lock_release_recursive>
 800d9f6:	e7dd      	b.n	800d9b4 <_fflush_r+0xc>

0800d9f8 <__swhatbuf_r>:
 800d9f8:	b570      	push	{r4, r5, r6, lr}
 800d9fa:	460c      	mov	r4, r1
 800d9fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da00:	2900      	cmp	r1, #0
 800da02:	b096      	sub	sp, #88	@ 0x58
 800da04:	4615      	mov	r5, r2
 800da06:	461e      	mov	r6, r3
 800da08:	da0d      	bge.n	800da26 <__swhatbuf_r+0x2e>
 800da0a:	89a3      	ldrh	r3, [r4, #12]
 800da0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800da10:	f04f 0100 	mov.w	r1, #0
 800da14:	bf14      	ite	ne
 800da16:	2340      	movne	r3, #64	@ 0x40
 800da18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800da1c:	2000      	movs	r0, #0
 800da1e:	6031      	str	r1, [r6, #0]
 800da20:	602b      	str	r3, [r5, #0]
 800da22:	b016      	add	sp, #88	@ 0x58
 800da24:	bd70      	pop	{r4, r5, r6, pc}
 800da26:	466a      	mov	r2, sp
 800da28:	f000 f862 	bl	800daf0 <_fstat_r>
 800da2c:	2800      	cmp	r0, #0
 800da2e:	dbec      	blt.n	800da0a <__swhatbuf_r+0x12>
 800da30:	9901      	ldr	r1, [sp, #4]
 800da32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800da36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800da3a:	4259      	negs	r1, r3
 800da3c:	4159      	adcs	r1, r3
 800da3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da42:	e7eb      	b.n	800da1c <__swhatbuf_r+0x24>

0800da44 <__smakebuf_r>:
 800da44:	898b      	ldrh	r3, [r1, #12]
 800da46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da48:	079d      	lsls	r5, r3, #30
 800da4a:	4606      	mov	r6, r0
 800da4c:	460c      	mov	r4, r1
 800da4e:	d507      	bpl.n	800da60 <__smakebuf_r+0x1c>
 800da50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800da54:	6023      	str	r3, [r4, #0]
 800da56:	6123      	str	r3, [r4, #16]
 800da58:	2301      	movs	r3, #1
 800da5a:	6163      	str	r3, [r4, #20]
 800da5c:	b003      	add	sp, #12
 800da5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da60:	ab01      	add	r3, sp, #4
 800da62:	466a      	mov	r2, sp
 800da64:	f7ff ffc8 	bl	800d9f8 <__swhatbuf_r>
 800da68:	9f00      	ldr	r7, [sp, #0]
 800da6a:	4605      	mov	r5, r0
 800da6c:	4639      	mov	r1, r7
 800da6e:	4630      	mov	r0, r6
 800da70:	f7ff fa62 	bl	800cf38 <_malloc_r>
 800da74:	b948      	cbnz	r0, 800da8a <__smakebuf_r+0x46>
 800da76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da7a:	059a      	lsls	r2, r3, #22
 800da7c:	d4ee      	bmi.n	800da5c <__smakebuf_r+0x18>
 800da7e:	f023 0303 	bic.w	r3, r3, #3
 800da82:	f043 0302 	orr.w	r3, r3, #2
 800da86:	81a3      	strh	r3, [r4, #12]
 800da88:	e7e2      	b.n	800da50 <__smakebuf_r+0xc>
 800da8a:	89a3      	ldrh	r3, [r4, #12]
 800da8c:	6020      	str	r0, [r4, #0]
 800da8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da92:	81a3      	strh	r3, [r4, #12]
 800da94:	9b01      	ldr	r3, [sp, #4]
 800da96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800da9a:	b15b      	cbz	r3, 800dab4 <__smakebuf_r+0x70>
 800da9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800daa0:	4630      	mov	r0, r6
 800daa2:	f000 f837 	bl	800db14 <_isatty_r>
 800daa6:	b128      	cbz	r0, 800dab4 <__smakebuf_r+0x70>
 800daa8:	89a3      	ldrh	r3, [r4, #12]
 800daaa:	f023 0303 	bic.w	r3, r3, #3
 800daae:	f043 0301 	orr.w	r3, r3, #1
 800dab2:	81a3      	strh	r3, [r4, #12]
 800dab4:	89a3      	ldrh	r3, [r4, #12]
 800dab6:	431d      	orrs	r5, r3
 800dab8:	81a5      	strh	r5, [r4, #12]
 800daba:	e7cf      	b.n	800da5c <__smakebuf_r+0x18>

0800dabc <memmove>:
 800dabc:	4288      	cmp	r0, r1
 800dabe:	b510      	push	{r4, lr}
 800dac0:	eb01 0402 	add.w	r4, r1, r2
 800dac4:	d902      	bls.n	800dacc <memmove+0x10>
 800dac6:	4284      	cmp	r4, r0
 800dac8:	4623      	mov	r3, r4
 800daca:	d807      	bhi.n	800dadc <memmove+0x20>
 800dacc:	1e43      	subs	r3, r0, #1
 800dace:	42a1      	cmp	r1, r4
 800dad0:	d008      	beq.n	800dae4 <memmove+0x28>
 800dad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dada:	e7f8      	b.n	800dace <memmove+0x12>
 800dadc:	4402      	add	r2, r0
 800dade:	4601      	mov	r1, r0
 800dae0:	428a      	cmp	r2, r1
 800dae2:	d100      	bne.n	800dae6 <memmove+0x2a>
 800dae4:	bd10      	pop	{r4, pc}
 800dae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800daea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800daee:	e7f7      	b.n	800dae0 <memmove+0x24>

0800daf0 <_fstat_r>:
 800daf0:	b538      	push	{r3, r4, r5, lr}
 800daf2:	4d07      	ldr	r5, [pc, #28]	@ (800db10 <_fstat_r+0x20>)
 800daf4:	2300      	movs	r3, #0
 800daf6:	4604      	mov	r4, r0
 800daf8:	4608      	mov	r0, r1
 800dafa:	4611      	mov	r1, r2
 800dafc:	602b      	str	r3, [r5, #0]
 800dafe:	f7f3 fdf4 	bl	80016ea <_fstat>
 800db02:	1c43      	adds	r3, r0, #1
 800db04:	d102      	bne.n	800db0c <_fstat_r+0x1c>
 800db06:	682b      	ldr	r3, [r5, #0]
 800db08:	b103      	cbz	r3, 800db0c <_fstat_r+0x1c>
 800db0a:	6023      	str	r3, [r4, #0]
 800db0c:	bd38      	pop	{r3, r4, r5, pc}
 800db0e:	bf00      	nop
 800db10:	200025f4 	.word	0x200025f4

0800db14 <_isatty_r>:
 800db14:	b538      	push	{r3, r4, r5, lr}
 800db16:	4d06      	ldr	r5, [pc, #24]	@ (800db30 <_isatty_r+0x1c>)
 800db18:	2300      	movs	r3, #0
 800db1a:	4604      	mov	r4, r0
 800db1c:	4608      	mov	r0, r1
 800db1e:	602b      	str	r3, [r5, #0]
 800db20:	f7f3 fdf3 	bl	800170a <_isatty>
 800db24:	1c43      	adds	r3, r0, #1
 800db26:	d102      	bne.n	800db2e <_isatty_r+0x1a>
 800db28:	682b      	ldr	r3, [r5, #0]
 800db2a:	b103      	cbz	r3, 800db2e <_isatty_r+0x1a>
 800db2c:	6023      	str	r3, [r4, #0]
 800db2e:	bd38      	pop	{r3, r4, r5, pc}
 800db30:	200025f4 	.word	0x200025f4

0800db34 <_sbrk_r>:
 800db34:	b538      	push	{r3, r4, r5, lr}
 800db36:	4d06      	ldr	r5, [pc, #24]	@ (800db50 <_sbrk_r+0x1c>)
 800db38:	2300      	movs	r3, #0
 800db3a:	4604      	mov	r4, r0
 800db3c:	4608      	mov	r0, r1
 800db3e:	602b      	str	r3, [r5, #0]
 800db40:	f7f3 fdfc 	bl	800173c <_sbrk>
 800db44:	1c43      	adds	r3, r0, #1
 800db46:	d102      	bne.n	800db4e <_sbrk_r+0x1a>
 800db48:	682b      	ldr	r3, [r5, #0]
 800db4a:	b103      	cbz	r3, 800db4e <_sbrk_r+0x1a>
 800db4c:	6023      	str	r3, [r4, #0]
 800db4e:	bd38      	pop	{r3, r4, r5, pc}
 800db50:	200025f4 	.word	0x200025f4

0800db54 <_realloc_r>:
 800db54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db58:	4680      	mov	r8, r0
 800db5a:	4615      	mov	r5, r2
 800db5c:	460c      	mov	r4, r1
 800db5e:	b921      	cbnz	r1, 800db6a <_realloc_r+0x16>
 800db60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db64:	4611      	mov	r1, r2
 800db66:	f7ff b9e7 	b.w	800cf38 <_malloc_r>
 800db6a:	b92a      	cbnz	r2, 800db78 <_realloc_r+0x24>
 800db6c:	f7ff f978 	bl	800ce60 <_free_r>
 800db70:	2400      	movs	r4, #0
 800db72:	4620      	mov	r0, r4
 800db74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db78:	f000 f81a 	bl	800dbb0 <_malloc_usable_size_r>
 800db7c:	4285      	cmp	r5, r0
 800db7e:	4606      	mov	r6, r0
 800db80:	d802      	bhi.n	800db88 <_realloc_r+0x34>
 800db82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800db86:	d8f4      	bhi.n	800db72 <_realloc_r+0x1e>
 800db88:	4629      	mov	r1, r5
 800db8a:	4640      	mov	r0, r8
 800db8c:	f7ff f9d4 	bl	800cf38 <_malloc_r>
 800db90:	4607      	mov	r7, r0
 800db92:	2800      	cmp	r0, #0
 800db94:	d0ec      	beq.n	800db70 <_realloc_r+0x1c>
 800db96:	42b5      	cmp	r5, r6
 800db98:	462a      	mov	r2, r5
 800db9a:	4621      	mov	r1, r4
 800db9c:	bf28      	it	cs
 800db9e:	4632      	movcs	r2, r6
 800dba0:	f7ff f94f 	bl	800ce42 <memcpy>
 800dba4:	4621      	mov	r1, r4
 800dba6:	4640      	mov	r0, r8
 800dba8:	f7ff f95a 	bl	800ce60 <_free_r>
 800dbac:	463c      	mov	r4, r7
 800dbae:	e7e0      	b.n	800db72 <_realloc_r+0x1e>

0800dbb0 <_malloc_usable_size_r>:
 800dbb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbb4:	1f18      	subs	r0, r3, #4
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	bfbc      	itt	lt
 800dbba:	580b      	ldrlt	r3, [r1, r0]
 800dbbc:	18c0      	addlt	r0, r0, r3
 800dbbe:	4770      	bx	lr

0800dbc0 <_init>:
 800dbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbc2:	bf00      	nop
 800dbc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbc6:	bc08      	pop	{r3}
 800dbc8:	469e      	mov	lr, r3
 800dbca:	4770      	bx	lr

0800dbcc <_fini>:
 800dbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbce:	bf00      	nop
 800dbd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbd2:	bc08      	pop	{r3}
 800dbd4:	469e      	mov	lr, r3
 800dbd6:	4770      	bx	lr
