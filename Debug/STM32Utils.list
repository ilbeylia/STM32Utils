
STM32Utils.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b98c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800bb14  0800bb14  0000cb14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb38  0800bb38  0000d07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb38  0800bb38  0000cb38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb40  0800bb40  0000d07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb40  0800bb40  0000cb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb44  0800bb44  0000cb44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800bb48  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d07c  2**0
                  CONTENTS
 10 .bss          00000b70  2000007c  2000007c  0000d07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bec  20000bec  0000d07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ef4f  00000000  00000000  0000d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050a0  00000000  00000000  0002bffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae8  00000000  00000000  000310a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014b5  00000000  00000000  00032b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006c2c  00000000  00000000  0003403d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025a0c  00000000  00000000  0003ac69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e17e2  00000000  00000000  00060675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00141e57  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000073fc  00000000  00000000  00141e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003c  00000000  00000000  00149298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bafc 	.word	0x0800bafc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800bafc 	.word	0x0800bafc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <status_led_init>:
// status led config >> for four leds
void status_led_init(Status_led_s *status_led, GPIO_TypeDef * Led1_GPIOx, uint16_t Led1_GPIO_pin,
		GPIO_TypeDef * Led2_GPIOx, uint16_t Led2_GPIO_pin,
		GPIO_TypeDef * Led3_GPIOx, uint16_t Led3_GPIO_pin,
		GPIO_TypeDef * Led4_GPIOx, uint16_t Led4_GPIO_pin)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	60b9      	str	r1, [r7, #8]
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	4613      	mov	r3, r2
 80004c6:	80fb      	strh	r3, [r7, #6]
	status_led->Led1_GPIOx = Led1_GPIOx;
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	68ba      	ldr	r2, [r7, #8]
 80004cc:	601a      	str	r2, [r3, #0]
	status_led->Led1_GPIO_pin = Led1_GPIO_pin;
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	88fa      	ldrh	r2, [r7, #6]
 80004d2:	809a      	strh	r2, [r3, #4]

	status_led->Led2_GPIOx = Led2_GPIOx;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	683a      	ldr	r2, [r7, #0]
 80004d8:	609a      	str	r2, [r3, #8]
	status_led->Led2_GPIO_pin = Led2_GPIO_pin;
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	8b3a      	ldrh	r2, [r7, #24]
 80004de:	819a      	strh	r2, [r3, #12]

	status_led->Led3_GPIOx = Led3_GPIOx;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	69fa      	ldr	r2, [r7, #28]
 80004e4:	611a      	str	r2, [r3, #16]
	status_led->Led3_GPIO_pin = Led3_GPIO_pin;
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	8c3a      	ldrh	r2, [r7, #32]
 80004ea:	829a      	strh	r2, [r3, #20]

	status_led->Led4_GPIOx = Led4_GPIOx;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80004f0:	619a      	str	r2, [r3, #24]
	status_led->Led4_GPIO_pin = Led4_GPIO_pin;
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80004f6:	839a      	strh	r2, [r3, #28]

}
 80004f8:	bf00      	nop
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <status_led_process>:

void status_led_process(Status_led_s* status_led, Status_led_mode_e Mode){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	70fb      	strb	r3, [r7, #3]
	switch (Mode) {
 8000510:	78fb      	ldrb	r3, [r7, #3]
 8000512:	2b03      	cmp	r3, #3
 8000514:	f200 80c8 	bhi.w	80006a8 <status_led_process+0x1a4>
 8000518:	a201      	add	r2, pc, #4	@ (adr r2, 8000520 <status_led_process+0x1c>)
 800051a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051e:	bf00      	nop
 8000520:	08000531 	.word	0x08000531
 8000524:	0800055f 	.word	0x0800055f
 8000528:	080005ad 	.word	0x080005ad
 800052c:	0800061b 	.word	0x0800061b
		case LED_Mode1 :
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 1);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	6818      	ldr	r0, [r3, #0]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	889b      	ldrh	r3, [r3, #4]
 8000538:	2201      	movs	r2, #1
 800053a:	4619      	mov	r1, r3
 800053c:	f002 fbe0 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000540:	20c8      	movs	r0, #200	@ 0xc8
 8000542:	f001 f867 	bl	8001614 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 0);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6818      	ldr	r0, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	889b      	ldrh	r3, [r3, #4]
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	f002 fbd5 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000556:	20c8      	movs	r0, #200	@ 0xc8
 8000558:	f001 f85c 	bl	8001614 <HAL_Delay>
			break;
 800055c:	e0bb      	b.n	80006d6 <status_led_process+0x1d2>
		case LED_Mode2 :
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 1);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6818      	ldr	r0, [r3, #0]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	889b      	ldrh	r3, [r3, #4]
 8000566:	2201      	movs	r2, #1
 8000568:	4619      	mov	r1, r3
 800056a:	f002 fbc9 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 1);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6898      	ldr	r0, [r3, #8]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	899b      	ldrh	r3, [r3, #12]
 8000576:	2201      	movs	r2, #1
 8000578:	4619      	mov	r1, r3
 800057a:	f002 fbc1 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 800057e:	20c8      	movs	r0, #200	@ 0xc8
 8000580:	f001 f848 	bl	8001614 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 0);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	889b      	ldrh	r3, [r3, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	4619      	mov	r1, r3
 8000590:	f002 fbb6 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 0);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6898      	ldr	r0, [r3, #8]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	899b      	ldrh	r3, [r3, #12]
 800059c:	2200      	movs	r2, #0
 800059e:	4619      	mov	r1, r3
 80005a0:	f002 fbae 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80005a4:	20c8      	movs	r0, #200	@ 0xc8
 80005a6:	f001 f835 	bl	8001614 <HAL_Delay>
			break;
 80005aa:	e094      	b.n	80006d6 <status_led_process+0x1d2>
		case LED_Mode3 :
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 1);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	6818      	ldr	r0, [r3, #0]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	889b      	ldrh	r3, [r3, #4]
 80005b4:	2201      	movs	r2, #1
 80005b6:	4619      	mov	r1, r3
 80005b8:	f002 fba2 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 1);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6898      	ldr	r0, [r3, #8]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	899b      	ldrh	r3, [r3, #12]
 80005c4:	2201      	movs	r2, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	f002 fb9a 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led3_GPIOx, status_led->Led3_GPIO_pin, 1);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	6918      	ldr	r0, [r3, #16]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	8a9b      	ldrh	r3, [r3, #20]
 80005d4:	2201      	movs	r2, #1
 80005d6:	4619      	mov	r1, r3
 80005d8:	f002 fb92 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80005dc:	20c8      	movs	r0, #200	@ 0xc8
 80005de:	f001 f819 	bl	8001614 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 0);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6818      	ldr	r0, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	889b      	ldrh	r3, [r3, #4]
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	f002 fb87 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 0);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6898      	ldr	r0, [r3, #8]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	899b      	ldrh	r3, [r3, #12]
 80005fa:	2200      	movs	r2, #0
 80005fc:	4619      	mov	r1, r3
 80005fe:	f002 fb7f 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led3_GPIOx, status_led->Led3_GPIO_pin, 0);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6918      	ldr	r0, [r3, #16]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	8a9b      	ldrh	r3, [r3, #20]
 800060a:	2200      	movs	r2, #0
 800060c:	4619      	mov	r1, r3
 800060e:	f002 fb77 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000612:	20c8      	movs	r0, #200	@ 0xc8
 8000614:	f000 fffe 	bl	8001614 <HAL_Delay>
			break;
 8000618:	e05d      	b.n	80006d6 <status_led_process+0x1d2>
		case LED_Mode4 :
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 1);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6818      	ldr	r0, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	889b      	ldrh	r3, [r3, #4]
 8000622:	2201      	movs	r2, #1
 8000624:	4619      	mov	r1, r3
 8000626:	f002 fb6b 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 1);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6898      	ldr	r0, [r3, #8]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	899b      	ldrh	r3, [r3, #12]
 8000632:	2201      	movs	r2, #1
 8000634:	4619      	mov	r1, r3
 8000636:	f002 fb63 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led3_GPIOx, status_led->Led3_GPIO_pin, 1);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6918      	ldr	r0, [r3, #16]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	8a9b      	ldrh	r3, [r3, #20]
 8000642:	2201      	movs	r2, #1
 8000644:	4619      	mov	r1, r3
 8000646:	f002 fb5b 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 1);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6998      	ldr	r0, [r3, #24]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	8b9b      	ldrh	r3, [r3, #28]
 8000652:	2201      	movs	r2, #1
 8000654:	4619      	mov	r1, r3
 8000656:	f002 fb53 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 800065a:	20c8      	movs	r0, #200	@ 0xc8
 800065c:	f000 ffda 	bl	8001614 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 0);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	889b      	ldrh	r3, [r3, #4]
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	f002 fb48 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 0);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6898      	ldr	r0, [r3, #8]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	899b      	ldrh	r3, [r3, #12]
 8000678:	2200      	movs	r2, #0
 800067a:	4619      	mov	r1, r3
 800067c:	f002 fb40 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led3_GPIOx, status_led->Led3_GPIO_pin, 0);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6918      	ldr	r0, [r3, #16]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	8a9b      	ldrh	r3, [r3, #20]
 8000688:	2200      	movs	r2, #0
 800068a:	4619      	mov	r1, r3
 800068c:	f002 fb38 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 0);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6998      	ldr	r0, [r3, #24]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	8b9b      	ldrh	r3, [r3, #28]
 8000698:	2200      	movs	r2, #0
 800069a:	4619      	mov	r1, r3
 800069c:	f002 fb30 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80006a0:	20c8      	movs	r0, #200	@ 0xc8
 80006a2:	f000 ffb7 	bl	8001614 <HAL_Delay>
			break;
 80006a6:	e016      	b.n	80006d6 <status_led_process+0x1d2>

		default:
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 1);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	6998      	ldr	r0, [r3, #24]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	8b9b      	ldrh	r3, [r3, #28]
 80006b0:	2201      	movs	r2, #1
 80006b2:	4619      	mov	r1, r3
 80006b4:	f002 fb24 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80006b8:	20c8      	movs	r0, #200	@ 0xc8
 80006ba:	f000 ffab 	bl	8001614 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 0);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6998      	ldr	r0, [r3, #24]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	8b9b      	ldrh	r3, [r3, #28]
 80006c6:	2200      	movs	r2, #0
 80006c8:	4619      	mov	r1, r3
 80006ca:	f002 fb19 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80006ce:	20c8      	movs	r0, #200	@ 0xc8
 80006d0:	f000 ffa0 	bl	8001614 <HAL_Delay>
			break;
 80006d4:	bf00      	nop
	}
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop

080006e0 <Flash_WR>:
 *      Author: ilbeyli
 */

#include "FLASH_PROCESS_lib.h"

void Flash_WR(uint32_t Flash_Address, uint32_t Flash_WR_Data){
 80006e0:	b5b0      	push	{r4, r5, r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 80006ea:	f001 ffc3 	bl	8002674 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);  // add sector usage
 80006ee:	2102      	movs	r1, #2
 80006f0:	200b      	movs	r0, #11
 80006f2:	f002 f921 	bl	8002938 <FLASH_Erase_Sector>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Flash_Address, Flash_WR_Data);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	2200      	movs	r2, #0
 80006fa:	461c      	mov	r4, r3
 80006fc:	4615      	mov	r5, r2
 80006fe:	4622      	mov	r2, r4
 8000700:	462b      	mov	r3, r5
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	2002      	movs	r0, #2
 8000706:	f001 ff61 	bl	80025cc <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 800070a:	f001 ffd5 	bl	80026b8 <HAL_FLASH_Lock>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bdb0      	pop	{r4, r5, r7, pc}

08000716 <Flash_RD>:

uint32_t Flash_RD(uint32_t Flash_Address){
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
	return *((uint32_t*)Flash_Address);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
}
 8000722:	4618      	mov	r0, r3
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <LIS302DL_init>:


#define CS_ENABLE()   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET)
#define CS_DISABLE()  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET)

void LIS302DL_init(LIS302DL_Mode Mode) {
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	4603      	mov	r3, r0
 8000736:	71fb      	strb	r3, [r7, #7]
    LIS302DL_WriteReg(LIS302DL_Ctrl_Reg1, Mode);
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	4619      	mov	r1, r3
 800073c:	2020      	movs	r0, #32
 800073e:	f000 f805 	bl	800074c <LIS302DL_WriteReg>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <LIS302DL_WriteReg>:

void LIS302DL_WriteReg(uint8_t reg, uint8_t data){
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
	uint8_t SendData[2] = {reg,data};
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	733b      	strb	r3, [r7, #12]
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	737b      	strb	r3, [r7, #13]
	CS_ENABLE();
 8000764:	2200      	movs	r2, #0
 8000766:	2108      	movs	r1, #8
 8000768:	4809      	ldr	r0, [pc, #36]	@ (8000790 <LIS302DL_WriteReg+0x44>)
 800076a:	f002 fac9 	bl	8002d00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SendData, 2, HAL_MAX_DELAY);
 800076e:	f107 010c 	add.w	r1, r7, #12
 8000772:	f04f 33ff 	mov.w	r3, #4294967295
 8000776:	2202      	movs	r2, #2
 8000778:	4806      	ldr	r0, [pc, #24]	@ (8000794 <LIS302DL_WriteReg+0x48>)
 800077a:	f006 f842 	bl	8006802 <HAL_SPI_Transmit>
	CS_DISABLE();
 800077e:	2201      	movs	r2, #1
 8000780:	2108      	movs	r1, #8
 8000782:	4803      	ldr	r0, [pc, #12]	@ (8000790 <LIS302DL_WriteReg+0x44>)
 8000784:	f002 fabc 	bl	8002d00 <HAL_GPIO_WritePin>
}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000
 8000794:	200001dc 	.word	0x200001dc

08000798 <step_init>:
void step_init(	step_config* step_config,
					TIM_HandleTypeDef*	Timer_handle,
					uint32_t			Timer_channel,
					GPIO_TypeDef*		dir_GPIOx,
					uint16_t			dir_GPIO_Pin)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	603b      	str	r3, [r7, #0]
		step_config->Timer_handle 	= Timer_handle;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	68ba      	ldr	r2, [r7, #8]
 80007aa:	601a      	str	r2, [r3, #0]
		step_config->Timer_channel 	= Timer_channel;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	605a      	str	r2, [r3, #4]
		step_config->dir_GPIOx		= dir_GPIOx;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	683a      	ldr	r2, [r7, #0]
 80007b6:	609a      	str	r2, [r3, #8]
		step_config->dir_GPIO_Pin	= dir_GPIO_Pin;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	8b3a      	ldrh	r2, [r7, #24]
 80007bc:	819a      	strh	r2, [r3, #12]

}
 80007be:	bf00      	nop
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <step_durdur>:
			__HAL_TIM_SET_COMPARE(step_config->Timer_handle, step_config->Timer_channel, 100);
		}
	}
}

void step_durdur(step_config* step_config){
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
	if (step_config->step_set.sayac == step_config->step_set.adim){
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	691a      	ldr	r2, [r3, #16]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d10d      	bne.n	80007fa <step_durdur+0x30>
		HAL_TIM_PWM_Stop_IT(step_config->Timer_handle, step_config->Timer_channel);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	4619      	mov	r1, r3
 80007e8:	4610      	mov	r0, r2
 80007ea:	f006 fbe5 	bl	8006fb8 <HAL_TIM_PWM_Stop_IT>
		step_config->step_set.durum = Step_DURDU;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
		step_config->step_set.sayac =0;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
	}

}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef * htim)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if (htim-> Instance == TIM1){
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a09      	ldr	r2, [pc, #36]	@ (8000838 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d10b      	bne.n	800082e <HAL_TIM_PWM_PulseFinishedCallback+0x2a>

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	7f1b      	ldrb	r3, [r3, #28]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d104      	bne.n	8000828 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
		{
			step1.step_set.sayac++;
 800081e:	4b07      	ldr	r3, [pc, #28]	@ (800083c <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000820:	691b      	ldr	r3, [r3, #16]
 8000822:	3301      	adds	r3, #1
 8000824:	4a05      	ldr	r2, [pc, #20]	@ (800083c <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000826:	6113      	str	r3, [r2, #16]
		}

		step_durdur(&step1);
 8000828:	4804      	ldr	r0, [pc, #16]	@ (800083c <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 800082a:	f7ff ffce 	bl	80007ca <step_durdur>

		}

}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40010000 	.word	0x40010000
 800083c:	2000027c 	.word	0x2000027c

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f000 fe73 	bl	8001530 <HAL_Init>

  /* USER CODE BEGIN Init */
  LIS302DL_init(Normal_Mode);
 800084a:	2047      	movs	r0, #71	@ 0x47
 800084c:	f7ff ff6f 	bl	800072e <LIS302DL_init>

  status_led_init(&statusLED, GPIOD, GPIO_PIN_12, GPIOD, GPIO_PIN_13, GPIOD, GPIO_PIN_14, GPIOD, GPIO_PIN_15);
 8000850:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000854:	9304      	str	r3, [sp, #16]
 8000856:	4b2a      	ldr	r3, [pc, #168]	@ (8000900 <main+0xc0>)
 8000858:	9303      	str	r3, [sp, #12]
 800085a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	4b27      	ldr	r3, [pc, #156]	@ (8000900 <main+0xc0>)
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	4b25      	ldr	r3, [pc, #148]	@ (8000900 <main+0xc0>)
 800086c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000870:	4923      	ldr	r1, [pc, #140]	@ (8000900 <main+0xc0>)
 8000872:	4824      	ldr	r0, [pc, #144]	@ (8000904 <main+0xc4>)
 8000874:	f7ff fe20 	bl	80004b8 <status_led_init>

  step_init(&step1, &htim1, TIM_CHANNEL_1, dir_GPIO_Port, dir_Pin);
 8000878:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	4b20      	ldr	r3, [pc, #128]	@ (8000900 <main+0xc0>)
 8000880:	2200      	movs	r2, #0
 8000882:	4921      	ldr	r1, [pc, #132]	@ (8000908 <main+0xc8>)
 8000884:	4821      	ldr	r0, [pc, #132]	@ (800090c <main+0xcc>)
 8000886:	f7ff ff87 	bl	8000798 <step_init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088a:	f000 f847 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088e:	f000 fa57 	bl	8000d40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000892:	f000 fa35 	bl	8000d00 <MX_DMA_Init>
  MX_I2C1_Init();
 8000896:	f000 f8fd 	bl	8000a94 <MX_I2C1_Init>
  MX_I2S3_Init();
 800089a:	f000 f929 	bl	8000af0 <MX_I2S3_Init>
  MX_SPI1_Init();
 800089e:	f000 f957 	bl	8000b50 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80008a2:	f00a fcd5 	bl	800b250 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80008a6:	f000 f8a3 	bl	80009f0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80008aa:	f000 f987 	bl	8000bbc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  read_data = Flash_RD(0x080E0000);
 80008ae:	4818      	ldr	r0, [pc, #96]	@ (8000910 <main+0xd0>)
 80008b0:	f7ff ff31 	bl	8000716 <Flash_RD>
 80008b4:	4603      	mov	r3, r0
 80008b6:	4a17      	ldr	r2, [pc, #92]	@ (8000914 <main+0xd4>)
 80008b8:	6013      	str	r3, [r2, #0]

  if (read_data<=10){
 80008ba:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <main+0xd4>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b0a      	cmp	r3, #10
 80008c0:	d80e      	bhi.n	80008e0 <main+0xa0>
	  read_data +=1;
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <main+0xd4>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	3301      	adds	r3, #1
 80008c8:	4a12      	ldr	r2, [pc, #72]	@ (8000914 <main+0xd4>)
 80008ca:	6013      	str	r3, [r2, #0]
//	  Flash_Erase(0x0080E0000, 4);
	  test=1;
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <main+0xd8>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	601a      	str	r2, [r3, #0]
	  Flash_WR(0x080E0000, read_data);
 80008d2:	4b10      	ldr	r3, [pc, #64]	@ (8000914 <main+0xd4>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4619      	mov	r1, r3
 80008d8:	480d      	ldr	r0, [pc, #52]	@ (8000910 <main+0xd0>)
 80008da:	f7ff ff01 	bl	80006e0 <Flash_WR>
 80008de:	e003      	b.n	80008e8 <main+0xa8>
  }
  else {
	  Flash_WR(0x080E0000, 0x00);
 80008e0:	2100      	movs	r1, #0
 80008e2:	480b      	ldr	r0, [pc, #44]	@ (8000910 <main+0xd0>)
 80008e4:	f7ff fefc 	bl	80006e0 <Flash_WR>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80008e8:	f00a fcd8 	bl	800b29c <MX_USB_HOST_Process>

//	step(&step1, 200, Step_ILERI);
//	HAL_Delay(1000);
//	step(&step1, 200, Step_GERI);
//	HAL_Delay(1000);
    if(read_data < 5){
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <main+0xd4>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	d8f9      	bhi.n	80008e8 <main+0xa8>
		status_led_process(&statusLED, LED_Mode1);
 80008f4:	2100      	movs	r1, #0
 80008f6:	4803      	ldr	r0, [pc, #12]	@ (8000904 <main+0xc4>)
 80008f8:	f7ff fe04 	bl	8000504 <status_led_process>
    MX_USB_HOST_Process();
 80008fc:	e7f4      	b.n	80008e8 <main+0xa8>
 80008fe:	bf00      	nop
 8000900:	40020c00 	.word	0x40020c00
 8000904:	20000298 	.word	0x20000298
 8000908:	20000234 	.word	0x20000234
 800090c:	2000027c 	.word	0x2000027c
 8000910:	080e0000 	.word	0x080e0000
 8000914:	200002b8 	.word	0x200002b8
 8000918:	200002bc 	.word	0x200002bc

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b094      	sub	sp, #80	@ 0x50
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	2230      	movs	r2, #48	@ 0x30
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f00b f858 	bl	800b9e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	4b28      	ldr	r3, [pc, #160]	@ (80009e8 <SystemClock_Config+0xcc>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000948:	4a27      	ldr	r2, [pc, #156]	@ (80009e8 <SystemClock_Config+0xcc>)
 800094a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000950:	4b25      	ldr	r3, [pc, #148]	@ (80009e8 <SystemClock_Config+0xcc>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	4b22      	ldr	r3, [pc, #136]	@ (80009ec <SystemClock_Config+0xd0>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a21      	ldr	r2, [pc, #132]	@ (80009ec <SystemClock_Config+0xd0>)
 8000966:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	4b1f      	ldr	r3, [pc, #124]	@ (80009ec <SystemClock_Config+0xd0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000978:	2301      	movs	r3, #1
 800097a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800097c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000982:	2302      	movs	r3, #2
 8000984:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000986:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800098a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800098c:	2308      	movs	r3, #8
 800098e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000990:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000994:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000996:	2302      	movs	r3, #2
 8000998:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800099a:	2307      	movs	r3, #7
 800099c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099e:	f107 0320 	add.w	r3, r7, #32
 80009a2:	4618      	mov	r0, r3
 80009a4:	f005 f8de 	bl	8005b64 <HAL_RCC_OscConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009ae:	f000 fac5 	bl	8000f3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b2:	230f      	movs	r3, #15
 80009b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b6:	2302      	movs	r3, #2
 80009b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	2105      	movs	r1, #5
 80009d0:	4618      	mov	r0, r3
 80009d2:	f005 fb3f 	bl	8006054 <HAL_RCC_ClockConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009dc:	f000 faae 	bl	8000f3c <Error_Handler>
  }
}
 80009e0:	bf00      	nop
 80009e2:	3750      	adds	r7, #80	@ 0x50
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40007000 	.word	0x40007000

080009f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009f6:	463b      	mov	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a02:	4b21      	ldr	r3, [pc, #132]	@ (8000a88 <MX_ADC1_Init+0x98>)
 8000a04:	4a21      	ldr	r2, [pc, #132]	@ (8000a8c <MX_ADC1_Init+0x9c>)
 8000a06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <MX_ADC1_Init+0x98>)
 8000a0a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a0e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	@ (8000a88 <MX_ADC1_Init+0x98>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <MX_ADC1_Init+0x98>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <MX_ADC1_Init+0x98>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <MX_ADC1_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <MX_ADC1_Init+0x98>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a30:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <MX_ADC1_Init+0x98>)
 8000a32:	4a17      	ldr	r2, [pc, #92]	@ (8000a90 <MX_ADC1_Init+0xa0>)
 8000a34:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_ADC1_Init+0x98>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <MX_ADC1_Init+0x98>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_ADC1_Init+0x98>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <MX_ADC1_Init+0x98>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a50:	480d      	ldr	r0, [pc, #52]	@ (8000a88 <MX_ADC1_Init+0x98>)
 8000a52:	f000 fe03 	bl	800165c <HAL_ADC_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a5c:	f000 fa6e 	bl	8000f3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a64:	2301      	movs	r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_ADC1_Init+0x98>)
 8000a72:	f000 ff65 	bl	8001940 <HAL_ADC_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a7c:	f000 fa5e 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000098 	.word	0x20000098
 8000a8c:	40012000 	.word	0x40012000
 8000a90:	0f000001 	.word	0x0f000001

08000a94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <MX_I2C1_Init+0x50>)
 8000a9a:	4a13      	ldr	r2, [pc, #76]	@ (8000ae8 <MX_I2C1_Init+0x54>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <MX_I2C1_Init+0x50>)
 8000aa0:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <MX_I2C1_Init+0x58>)
 8000aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <MX_I2C1_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <MX_I2C1_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <MX_I2C1_Init+0x50>)
 8000ab2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ab6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <MX_I2C1_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <MX_I2C1_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	@ (8000ae4 <MX_I2C1_Init+0x50>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <MX_I2C1_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	@ (8000ae4 <MX_I2C1_Init+0x50>)
 8000ad2:	f004 fa63 	bl	8004f9c <HAL_I2C_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000adc:	f000 fa2e 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000140 	.word	0x20000140
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	000186a0 	.word	0x000186a0

08000af0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000af4:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <MX_I2S3_Init+0x54>)
 8000af6:	4a14      	ldr	r2, [pc, #80]	@ (8000b48 <MX_I2S3_Init+0x58>)
 8000af8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000afa:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <MX_I2S3_Init+0x54>)
 8000afc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b00:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <MX_I2S3_Init+0x54>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b08:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <MX_I2S3_Init+0x54>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <MX_I2S3_Init+0x54>)
 8000b10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b14:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <MX_I2S3_Init+0x54>)
 8000b18:	4a0c      	ldr	r2, [pc, #48]	@ (8000b4c <MX_I2S3_Init+0x5c>)
 8000b1a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <MX_I2S3_Init+0x54>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b22:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <MX_I2S3_Init+0x54>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <MX_I2S3_Init+0x54>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <MX_I2S3_Init+0x54>)
 8000b30:	f004 fb78 	bl	8005224 <HAL_I2S_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000b3a:	f000 f9ff 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000194 	.word	0x20000194
 8000b48:	40003c00 	.word	0x40003c00
 8000b4c:	00017700 	.word	0x00017700

08000b50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b54:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b56:	4a18      	ldr	r2, [pc, #96]	@ (8000bb8 <MX_SPI1_Init+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b5a:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b62:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b82:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b88:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b94:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b9c:	220a      	movs	r2, #10
 8000b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000ba2:	f005 fda5 	bl	80066f0 <HAL_SPI_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bac:	f000 f9c6 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200001dc 	.word	0x200001dc
 8000bb8:	40013000 	.word	0x40013000

08000bbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b096      	sub	sp, #88	@ 0x58
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]
 8000bea:	615a      	str	r2, [r3, #20]
 8000bec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f00a fef3 	bl	800b9e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8000cf8 <MX_TIM1_Init+0x13c>)
 8000bfc:	4a3f      	ldr	r2, [pc, #252]	@ (8000cfc <MX_TIM1_Init+0x140>)
 8000bfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 532;
 8000c00:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf8 <MX_TIM1_Init+0x13c>)
 8000c02:	f44f 7205 	mov.w	r2, #532	@ 0x214
 8000c06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c08:	4b3b      	ldr	r3, [pc, #236]	@ (8000cf8 <MX_TIM1_Init+0x13c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000c0e:	4b3a      	ldr	r3, [pc, #232]	@ (8000cf8 <MX_TIM1_Init+0x13c>)
 8000c10:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c16:	4b38      	ldr	r3, [pc, #224]	@ (8000cf8 <MX_TIM1_Init+0x13c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c1c:	4b36      	ldr	r3, [pc, #216]	@ (8000cf8 <MX_TIM1_Init+0x13c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c22:	4b35      	ldr	r3, [pc, #212]	@ (8000cf8 <MX_TIM1_Init+0x13c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c28:	4833      	ldr	r0, [pc, #204]	@ (8000cf8 <MX_TIM1_Init+0x13c>)
 8000c2a:	f006 f91d 	bl	8006e68 <HAL_TIM_Base_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c34:	f000 f982 	bl	8000f3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c3e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c42:	4619      	mov	r1, r3
 8000c44:	482c      	ldr	r0, [pc, #176]	@ (8000cf8 <MX_TIM1_Init+0x13c>)
 8000c46:	f006 fc27 	bl	8007498 <HAL_TIM_ConfigClockSource>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c50:	f000 f974 	bl	8000f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c54:	4828      	ldr	r0, [pc, #160]	@ (8000cf8 <MX_TIM1_Init+0x13c>)
 8000c56:	f006 f956 	bl	8006f06 <HAL_TIM_PWM_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c60:	f000 f96c 	bl	8000f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c6c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c70:	4619      	mov	r1, r3
 8000c72:	4821      	ldr	r0, [pc, #132]	@ (8000cf8 <MX_TIM1_Init+0x13c>)
 8000c74:	f007 f81c 	bl	8007cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000c7e:	f000 f95d 	bl	8000f3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c82:	2360      	movs	r3, #96	@ 0x60
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4814      	ldr	r0, [pc, #80]	@ (8000cf8 <MX_TIM1_Init+0x13c>)
 8000ca8:	f006 fb34 	bl	8007314 <HAL_TIM_PWM_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000cb2:	f000 f943 	bl	8000f3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4807      	ldr	r0, [pc, #28]	@ (8000cf8 <MX_TIM1_Init+0x13c>)
 8000cda:	f007 f865 	bl	8007da8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000ce4:	f000 f92a 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ce8:	4803      	ldr	r0, [pc, #12]	@ (8000cf8 <MX_TIM1_Init+0x13c>)
 8000cea:	f000 fb13 	bl	8001314 <HAL_TIM_MspPostInit>

}
 8000cee:	bf00      	nop
 8000cf0:	3758      	adds	r7, #88	@ 0x58
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000234 	.word	0x20000234
 8000cfc:	40010000 	.word	0x40010000

08000d00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <MX_DMA_Init+0x3c>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d3c <MX_DMA_Init+0x3c>)
 8000d10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <MX_DMA_Init+0x3c>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	2038      	movs	r0, #56	@ 0x38
 8000d28:	f001 f90d 	bl	8001f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d2c:	2038      	movs	r0, #56	@ 0x38
 8000d2e:	f001 f926 	bl	8001f7e <HAL_NVIC_EnableIRQ>

}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800

08000d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08c      	sub	sp, #48	@ 0x30
 8000d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	61bb      	str	r3, [r7, #24]
 8000d5a:	4b72      	ldr	r3, [pc, #456]	@ (8000f24 <MX_GPIO_Init+0x1e4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a71      	ldr	r2, [pc, #452]	@ (8000f24 <MX_GPIO_Init+0x1e4>)
 8000d60:	f043 0310 	orr.w	r3, r3, #16
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b6f      	ldr	r3, [pc, #444]	@ (8000f24 <MX_GPIO_Init+0x1e4>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0310 	and.w	r3, r3, #16
 8000d6e:	61bb      	str	r3, [r7, #24]
 8000d70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	4b6b      	ldr	r3, [pc, #428]	@ (8000f24 <MX_GPIO_Init+0x1e4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a6a      	ldr	r2, [pc, #424]	@ (8000f24 <MX_GPIO_Init+0x1e4>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b68      	ldr	r3, [pc, #416]	@ (8000f24 <MX_GPIO_Init+0x1e4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b64      	ldr	r3, [pc, #400]	@ (8000f24 <MX_GPIO_Init+0x1e4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a63      	ldr	r2, [pc, #396]	@ (8000f24 <MX_GPIO_Init+0x1e4>)
 8000d98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b61      	ldr	r3, [pc, #388]	@ (8000f24 <MX_GPIO_Init+0x1e4>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b5d      	ldr	r3, [pc, #372]	@ (8000f24 <MX_GPIO_Init+0x1e4>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a5c      	ldr	r2, [pc, #368]	@ (8000f24 <MX_GPIO_Init+0x1e4>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	4b5a      	ldr	r3, [pc, #360]	@ (8000f24 <MX_GPIO_Init+0x1e4>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	4b56      	ldr	r3, [pc, #344]	@ (8000f24 <MX_GPIO_Init+0x1e4>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a55      	ldr	r2, [pc, #340]	@ (8000f24 <MX_GPIO_Init+0x1e4>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b53      	ldr	r3, [pc, #332]	@ (8000f24 <MX_GPIO_Init+0x1e4>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	4b4f      	ldr	r3, [pc, #316]	@ (8000f24 <MX_GPIO_Init+0x1e4>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	4a4e      	ldr	r2, [pc, #312]	@ (8000f24 <MX_GPIO_Init+0x1e4>)
 8000dec:	f043 0308 	orr.w	r3, r3, #8
 8000df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df2:	4b4c      	ldr	r3, [pc, #304]	@ (8000f24 <MX_GPIO_Init+0x1e4>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2108      	movs	r1, #8
 8000e02:	4849      	ldr	r0, [pc, #292]	@ (8000f28 <MX_GPIO_Init+0x1e8>)
 8000e04:	f001 ff7c 	bl	8002d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	4847      	ldr	r0, [pc, #284]	@ (8000f2c <MX_GPIO_Init+0x1ec>)
 8000e0e:	f001 ff77 	bl	8002d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, dir_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000e12:	2200      	movs	r2, #0
 8000e14:	f24f 1110 	movw	r1, #61712	@ 0xf110
 8000e18:	4845      	ldr	r0, [pc, #276]	@ (8000f30 <MX_GPIO_Init+0x1f0>)
 8000e1a:	f001 ff71 	bl	8002d00 <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000e1e:	2308      	movs	r3, #8
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4619      	mov	r1, r3
 8000e34:	483c      	ldr	r0, [pc, #240]	@ (8000f28 <MX_GPIO_Init+0x1e8>)
 8000e36:	f001 fdc7 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4836      	ldr	r0, [pc, #216]	@ (8000f2c <MX_GPIO_Init+0x1ec>)
 8000e52:	f001 fdb9 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e56:	2308      	movs	r3, #8
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e66:	2305      	movs	r3, #5
 8000e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	482e      	ldr	r0, [pc, #184]	@ (8000f2c <MX_GPIO_Init+0x1ec>)
 8000e72:	f001 fda9 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e7a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	482a      	ldr	r0, [pc, #168]	@ (8000f34 <MX_GPIO_Init+0x1f4>)
 8000e8c:	f001 fd9c 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e90:	2304      	movs	r3, #4
 8000e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e94:	2300      	movs	r3, #0
 8000e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4825      	ldr	r0, [pc, #148]	@ (8000f38 <MX_GPIO_Init+0x1f8>)
 8000ea4:	f001 fd90 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ea8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eba:	2305      	movs	r3, #5
 8000ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	481c      	ldr	r0, [pc, #112]	@ (8000f38 <MX_GPIO_Init+0x1f8>)
 8000ec6:	f001 fd7f 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : dir_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = dir_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000eca:	f24f 1310 	movw	r3, #61712	@ 0xf110
 8000ece:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4813      	ldr	r0, [pc, #76]	@ (8000f30 <MX_GPIO_Init+0x1f0>)
 8000ee4:	f001 fd70 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ee8:	2320      	movs	r3, #32
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480d      	ldr	r0, [pc, #52]	@ (8000f30 <MX_GPIO_Init+0x1f0>)
 8000efc:	f001 fd64 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f04:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	4619      	mov	r1, r3
 8000f14:	4804      	ldr	r0, [pc, #16]	@ (8000f28 <MX_GPIO_Init+0x1e8>)
 8000f16:	f001 fd57 	bl	80029c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f1a:	bf00      	nop
 8000f1c:	3730      	adds	r7, #48	@ 0x30
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	40020c00 	.word	0x40020c00
 8000f34:	40020000 	.word	0x40020000
 8000f38:	40020400 	.word	0x40020400

08000f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <Error_Handler+0x8>

08000f48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b10      	ldr	r3, [pc, #64]	@ (8000f94 <HAL_MspInit+0x4c>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f56:	4a0f      	ldr	r2, [pc, #60]	@ (8000f94 <HAL_MspInit+0x4c>)
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <HAL_MspInit+0x4c>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <HAL_MspInit+0x4c>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f72:	4a08      	ldr	r2, [pc, #32]	@ (8000f94 <HAL_MspInit+0x4c>)
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <HAL_MspInit+0x4c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f86:	2007      	movs	r0, #7
 8000f88:	f000 ffd2 	bl	8001f30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40023800 	.word	0x40023800

08000f98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a32      	ldr	r2, [pc, #200]	@ (8001080 <HAL_ADC_MspInit+0xe8>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d15e      	bne.n	8001078 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b31      	ldr	r3, [pc, #196]	@ (8001084 <HAL_ADC_MspInit+0xec>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	4a30      	ldr	r2, [pc, #192]	@ (8001084 <HAL_ADC_MspInit+0xec>)
 8000fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fca:	4b2e      	ldr	r3, [pc, #184]	@ (8001084 <HAL_ADC_MspInit+0xec>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b2a      	ldr	r3, [pc, #168]	@ (8001084 <HAL_ADC_MspInit+0xec>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a29      	ldr	r2, [pc, #164]	@ (8001084 <HAL_ADC_MspInit+0xec>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b27      	ldr	r3, [pc, #156]	@ (8001084 <HAL_ADC_MspInit+0xec>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4820      	ldr	r0, [pc, #128]	@ (8001088 <HAL_ADC_MspInit+0xf0>)
 8001006:	f001 fcdf 	bl	80029c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800100a:	4b20      	ldr	r3, [pc, #128]	@ (800108c <HAL_ADC_MspInit+0xf4>)
 800100c:	4a20      	ldr	r2, [pc, #128]	@ (8001090 <HAL_ADC_MspInit+0xf8>)
 800100e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001010:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <HAL_ADC_MspInit+0xf4>)
 8001012:	2200      	movs	r2, #0
 8001014:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001016:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <HAL_ADC_MspInit+0xf4>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800101c:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <HAL_ADC_MspInit+0xf4>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001022:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <HAL_ADC_MspInit+0xf4>)
 8001024:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001028:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800102a:	4b18      	ldr	r3, [pc, #96]	@ (800108c <HAL_ADC_MspInit+0xf4>)
 800102c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001030:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001032:	4b16      	ldr	r3, [pc, #88]	@ (800108c <HAL_ADC_MspInit+0xf4>)
 8001034:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001038:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800103a:	4b14      	ldr	r3, [pc, #80]	@ (800108c <HAL_ADC_MspInit+0xf4>)
 800103c:	2200      	movs	r2, #0
 800103e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <HAL_ADC_MspInit+0xf4>)
 8001042:	2200      	movs	r2, #0
 8001044:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001046:	4b11      	ldr	r3, [pc, #68]	@ (800108c <HAL_ADC_MspInit+0xf4>)
 8001048:	2200      	movs	r2, #0
 800104a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800104c:	480f      	ldr	r0, [pc, #60]	@ (800108c <HAL_ADC_MspInit+0xf4>)
 800104e:	f000 ffb1 	bl	8001fb4 <HAL_DMA_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001058:	f7ff ff70 	bl	8000f3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a0b      	ldr	r2, [pc, #44]	@ (800108c <HAL_ADC_MspInit+0xf4>)
 8001060:	639a      	str	r2, [r3, #56]	@ 0x38
 8001062:	4a0a      	ldr	r2, [pc, #40]	@ (800108c <HAL_ADC_MspInit+0xf4>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2100      	movs	r1, #0
 800106c:	2012      	movs	r0, #18
 800106e:	f000 ff6a 	bl	8001f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001072:	2012      	movs	r0, #18
 8001074:	f000 ff83 	bl	8001f7e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001078:	bf00      	nop
 800107a:	3728      	adds	r7, #40	@ 0x28
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40012000 	.word	0x40012000
 8001084:	40023800 	.word	0x40023800
 8001088:	40020000 	.word	0x40020000
 800108c:	200000e0 	.word	0x200000e0
 8001090:	40026410 	.word	0x40026410

08001094 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a19      	ldr	r2, [pc, #100]	@ (8001118 <HAL_I2C_MspInit+0x84>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d12c      	bne.n	8001110 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	4b18      	ldr	r3, [pc, #96]	@ (800111c <HAL_I2C_MspInit+0x88>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a17      	ldr	r2, [pc, #92]	@ (800111c <HAL_I2C_MspInit+0x88>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <HAL_I2C_MspInit+0x88>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80010d2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80010d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d8:	2312      	movs	r3, #18
 80010da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010dc:	2301      	movs	r3, #1
 80010de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010e4:	2304      	movs	r3, #4
 80010e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	480c      	ldr	r0, [pc, #48]	@ (8001120 <HAL_I2C_MspInit+0x8c>)
 80010f0:	f001 fc6a 	bl	80029c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	4b08      	ldr	r3, [pc, #32]	@ (800111c <HAL_I2C_MspInit+0x88>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fc:	4a07      	ldr	r2, [pc, #28]	@ (800111c <HAL_I2C_MspInit+0x88>)
 80010fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001102:	6413      	str	r3, [r2, #64]	@ 0x40
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <HAL_I2C_MspInit+0x88>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001108:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001110:	bf00      	nop
 8001112:	3728      	adds	r7, #40	@ 0x28
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40005400 	.word	0x40005400
 800111c:	40023800 	.word	0x40023800
 8001120:	40020400 	.word	0x40020400

08001124 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08e      	sub	sp, #56	@ 0x38
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a31      	ldr	r2, [pc, #196]	@ (8001214 <HAL_I2S_MspInit+0xf0>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d15a      	bne.n	800120a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001154:	2301      	movs	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001158:	23c0      	movs	r3, #192	@ 0xc0
 800115a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800115c:	2302      	movs	r3, #2
 800115e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4618      	mov	r0, r3
 8001166:	f005 f981 	bl	800646c <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001170:	f7ff fee4 	bl	8000f3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	4b27      	ldr	r3, [pc, #156]	@ (8001218 <HAL_I2S_MspInit+0xf4>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117c:	4a26      	ldr	r2, [pc, #152]	@ (8001218 <HAL_I2S_MspInit+0xf4>)
 800117e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001182:	6413      	str	r3, [r2, #64]	@ 0x40
 8001184:	4b24      	ldr	r3, [pc, #144]	@ (8001218 <HAL_I2S_MspInit+0xf4>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001188:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	4b20      	ldr	r3, [pc, #128]	@ (8001218 <HAL_I2S_MspInit+0xf4>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001198:	4a1f      	ldr	r2, [pc, #124]	@ (8001218 <HAL_I2S_MspInit+0xf4>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001218 <HAL_I2S_MspInit+0xf4>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	4b19      	ldr	r3, [pc, #100]	@ (8001218 <HAL_I2S_MspInit+0xf4>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b4:	4a18      	ldr	r2, [pc, #96]	@ (8001218 <HAL_I2S_MspInit+0xf4>)
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80011bc:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <HAL_I2S_MspInit+0xf4>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80011c8:	2310      	movs	r3, #16
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011d8:	2306      	movs	r3, #6
 80011da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e0:	4619      	mov	r1, r3
 80011e2:	480e      	ldr	r0, [pc, #56]	@ (800121c <HAL_I2S_MspInit+0xf8>)
 80011e4:	f001 fbf0 	bl	80029c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80011e8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011fa:	2306      	movs	r3, #6
 80011fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001202:	4619      	mov	r1, r3
 8001204:	4806      	ldr	r0, [pc, #24]	@ (8001220 <HAL_I2S_MspInit+0xfc>)
 8001206:	f001 fbdf 	bl	80029c8 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800120a:	bf00      	nop
 800120c:	3738      	adds	r7, #56	@ 0x38
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40003c00 	.word	0x40003c00
 8001218:	40023800 	.word	0x40023800
 800121c:	40020000 	.word	0x40020000
 8001220:	40020800 	.word	0x40020800

08001224 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	@ 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a1d      	ldr	r2, [pc, #116]	@ (80012b8 <HAL_SPI_MspInit+0x94>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d133      	bne.n	80012ae <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <HAL_SPI_MspInit+0x98>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	4a1b      	ldr	r2, [pc, #108]	@ (80012bc <HAL_SPI_MspInit+0x98>)
 8001250:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001254:	6453      	str	r3, [r2, #68]	@ 0x44
 8001256:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <HAL_SPI_MspInit+0x98>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <HAL_SPI_MspInit+0x98>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a14      	ldr	r2, [pc, #80]	@ (80012bc <HAL_SPI_MspInit+0x98>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <HAL_SPI_MspInit+0x98>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800127e:	23e0      	movs	r3, #224	@ 0xe0
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800128e:	2305      	movs	r3, #5
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4809      	ldr	r0, [pc, #36]	@ (80012c0 <HAL_SPI_MspInit+0x9c>)
 800129a:	f001 fb95 	bl	80029c8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	2023      	movs	r0, #35	@ 0x23
 80012a4:	f000 fe4f 	bl	8001f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80012a8:	2023      	movs	r0, #35	@ 0x23
 80012aa:	f000 fe68 	bl	8001f7e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80012ae:	bf00      	nop
 80012b0:	3728      	adds	r7, #40	@ 0x28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40013000 	.word	0x40013000
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020000 	.word	0x40020000

080012c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0e      	ldr	r2, [pc, #56]	@ (800130c <HAL_TIM_Base_MspInit+0x48>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d115      	bne.n	8001302 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <HAL_TIM_Base_MspInit+0x4c>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	4a0c      	ldr	r2, [pc, #48]	@ (8001310 <HAL_TIM_Base_MspInit+0x4c>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <HAL_TIM_Base_MspInit+0x4c>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	201b      	movs	r0, #27
 80012f8:	f000 fe25 	bl	8001f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80012fc:	201b      	movs	r0, #27
 80012fe:	f000 fe3e 	bl	8001f7e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40010000 	.word	0x40010000
 8001310:	40023800 	.word	0x40023800

08001314 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a12      	ldr	r2, [pc, #72]	@ (800137c <HAL_TIM_MspPostInit+0x68>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d11e      	bne.n	8001374 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <HAL_TIM_MspPostInit+0x6c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a10      	ldr	r2, [pc, #64]	@ (8001380 <HAL_TIM_MspPostInit+0x6c>)
 8001340:	f043 0310 	orr.w	r3, r3, #16
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <HAL_TIM_MspPostInit+0x6c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0310 	and.w	r3, r3, #16
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001352:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001356:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001364:	2301      	movs	r3, #1
 8001366:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4619      	mov	r1, r3
 800136e:	4805      	ldr	r0, [pc, #20]	@ (8001384 <HAL_TIM_MspPostInit+0x70>)
 8001370:	f001 fb2a 	bl	80029c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001374:	bf00      	nop
 8001376:	3720      	adds	r7, #32
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40010000 	.word	0x40010000
 8001380:	40023800 	.word	0x40023800
 8001384:	40021000 	.word	0x40021000

08001388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <NMI_Handler+0x4>

08001390 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <HardFault_Handler+0x4>

08001398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <MemManage_Handler+0x4>

080013a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <BusFault_Handler+0x4>

080013a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <UsageFault_Handler+0x4>

080013b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013de:	f000 f8f9 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013ec:	4802      	ldr	r0, [pc, #8]	@ (80013f8 <ADC_IRQHandler+0x10>)
 80013ee:	f000 f978 	bl	80016e2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000098 	.word	0x20000098

080013fc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001400:	4802      	ldr	r0, [pc, #8]	@ (800140c <TIM1_CC_IRQHandler+0x10>)
 8001402:	f005 fe97 	bl	8007134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000234 	.word	0x20000234

08001410 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001414:	4802      	ldr	r0, [pc, #8]	@ (8001420 <SPI1_IRQHandler+0x10>)
 8001416:	f005 fb39 	bl	8006a8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200001dc 	.word	0x200001dc

08001424 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <DMA2_Stream0_IRQHandler+0x10>)
 800142a:	f000 fe93 	bl	8002154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200000e0 	.word	0x200000e0

08001438 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800143c:	4802      	ldr	r0, [pc, #8]	@ (8001448 <OTG_FS_IRQHandler+0x10>)
 800143e:	f001 ff59 	bl	80032f4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200006c4 	.word	0x200006c4

0800144c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001454:	4a14      	ldr	r2, [pc, #80]	@ (80014a8 <_sbrk+0x5c>)
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <_sbrk+0x60>)
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001460:	4b13      	ldr	r3, [pc, #76]	@ (80014b0 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001468:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <_sbrk+0x64>)
 800146a:	4a12      	ldr	r2, [pc, #72]	@ (80014b4 <_sbrk+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146e:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	429a      	cmp	r2, r3
 800147a:	d207      	bcs.n	800148c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800147c:	f00a fac8 	bl	800ba10 <__errno>
 8001480:	4603      	mov	r3, r0
 8001482:	220c      	movs	r2, #12
 8001484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	e009      	b.n	80014a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800148c:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001492:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a05      	ldr	r2, [pc, #20]	@ (80014b0 <_sbrk+0x64>)
 800149c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20020000 	.word	0x20020000
 80014ac:	00000400 	.word	0x00000400
 80014b0:	200002c0 	.word	0x200002c0
 80014b4:	20000bf0 	.word	0x20000bf0

080014b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <SystemInit+0x20>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014c2:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <SystemInit+0x20>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001514 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014e0:	f7ff ffea 	bl	80014b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e4:	480c      	ldr	r0, [pc, #48]	@ (8001518 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014e6:	490d      	ldr	r1, [pc, #52]	@ (800151c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001520 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001524 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001528 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800150a:	f00a fa87 	bl	800ba1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150e:	f7ff f997 	bl	8000840 <main>
  bx  lr    
 8001512:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001520:	0800bb48 	.word	0x0800bb48
  ldr r2, =_sbss
 8001524:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001528:	20000bec 	.word	0x20000bec

0800152c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800152c:	e7fe      	b.n	800152c <CAN1_RX0_IRQHandler>
	...

08001530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001534:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <HAL_Init+0x40>)
 800153a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800153e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001540:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0a      	ldr	r2, [pc, #40]	@ (8001570 <HAL_Init+0x40>)
 8001546:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800154a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800154c:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a07      	ldr	r2, [pc, #28]	@ (8001570 <HAL_Init+0x40>)
 8001552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f000 fce9 	bl	8001f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155e:	2000      	movs	r0, #0
 8001560:	f000 f808 	bl	8001574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001564:	f7ff fcf0 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023c00 	.word	0x40023c00

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157c:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <HAL_InitTick+0x54>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <HAL_InitTick+0x58>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800158a:	fbb3 f3f1 	udiv	r3, r3, r1
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fd01 	bl	8001f9a <HAL_SYSTICK_Config>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e00e      	b.n	80015c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	d80a      	bhi.n	80015be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a8:	2200      	movs	r2, #0
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f000 fcc9 	bl	8001f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b4:	4a06      	ldr	r2, [pc, #24]	@ (80015d0 <HAL_InitTick+0x5c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000008 	.word	0x20000008
 80015d0:	20000004 	.word	0x20000004

080015d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_IncTick+0x20>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_IncTick+0x24>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a04      	ldr	r2, [pc, #16]	@ (80015f8 <HAL_IncTick+0x24>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000008 	.word	0x20000008
 80015f8:	200002c4 	.word	0x200002c4

080015fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001600:	4b03      	ldr	r3, [pc, #12]	@ (8001610 <HAL_GetTick+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	200002c4 	.word	0x200002c4

08001614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff ffee 	bl	80015fc <HAL_GetTick>
 8001620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162c:	d005      	beq.n	800163a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800162e:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <HAL_Delay+0x44>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4413      	add	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800163a:	bf00      	nop
 800163c:	f7ff ffde 	bl	80015fc <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	429a      	cmp	r2, r3
 800164a:	d8f7      	bhi.n	800163c <HAL_Delay+0x28>
  {
  }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000008 	.word	0x20000008

0800165c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e033      	b.n	80016da <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fc8c 	bl	8000f98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	2b00      	cmp	r3, #0
 8001698:	d118      	bne.n	80016cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016a2:	f023 0302 	bic.w	r3, r3, #2
 80016a6:	f043 0202 	orr.w	r2, r3, #2
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 fa68 	bl	8001b84 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	f023 0303 	bic.w	r3, r3, #3
 80016c2:	f043 0201 	orr.w	r2, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80016ca:	e001      	b.n	80016d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d049      	beq.n	80017ac <HAL_ADC_IRQHandler+0xca>
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d046      	beq.n	80017ac <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	2b00      	cmp	r3, #0
 8001728:	d105      	bne.n	8001736 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d12b      	bne.n	800179c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001748:	2b00      	cmp	r3, #0
 800174a:	d127      	bne.n	800179c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001752:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001764:	2b00      	cmp	r3, #0
 8001766:	d119      	bne.n	800179c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0220 	bic.w	r2, r2, #32
 8001776:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001788:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d105      	bne.n	800179c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001794:	f043 0201 	orr.w	r2, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f8b0 	bl	8001902 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f06f 0212 	mvn.w	r2, #18
 80017aa:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ba:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d057      	beq.n	8001872 <HAL_ADC_IRQHandler+0x190>
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d054      	beq.n	8001872 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017cc:	f003 0310 	and.w	r3, r3, #16
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d105      	bne.n	80017e0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d139      	bne.n	8001862 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017f4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001806:	2b00      	cmp	r3, #0
 8001808:	d12b      	bne.n	8001862 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001814:	2b00      	cmp	r3, #0
 8001816:	d124      	bne.n	8001862 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001822:	2b00      	cmp	r3, #0
 8001824:	d11d      	bne.n	8001862 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800182a:	2b00      	cmp	r3, #0
 800182c:	d119      	bne.n	8001862 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800183c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001852:	2b00      	cmp	r3, #0
 8001854:	d105      	bne.n	8001862 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	f043 0201 	orr.w	r2, r3, #1
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 fa8a 	bl	8001d7c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f06f 020c 	mvn.w	r2, #12
 8001870:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001880:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d017      	beq.n	80018b8 <HAL_ADC_IRQHandler+0x1d6>
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d014      	beq.n	80018b8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b01      	cmp	r3, #1
 800189a:	d10d      	bne.n	80018b8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f834 	bl	8001916 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f06f 0201 	mvn.w	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0320 	and.w	r3, r3, #32
 80018be:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018c6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d015      	beq.n	80018fa <HAL_ADC_IRQHandler+0x218>
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d012      	beq.n	80018fa <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d8:	f043 0202 	orr.w	r2, r3, #2
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f06f 0220 	mvn.w	r2, #32
 80018e8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f81d 	bl	800192a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f06f 0220 	mvn.w	r2, #32
 80018f8:	601a      	str	r2, [r3, #0]
  }
}
 80018fa:	bf00      	nop
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_ADC_ConfigChannel+0x1c>
 8001958:	2302      	movs	r3, #2
 800195a:	e105      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x228>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b09      	cmp	r3, #9
 800196a:	d925      	bls.n	80019b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68d9      	ldr	r1, [r3, #12]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	461a      	mov	r2, r3
 800197a:	4613      	mov	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	3b1e      	subs	r3, #30
 8001982:	2207      	movs	r2, #7
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43da      	mvns	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	400a      	ands	r2, r1
 8001990:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68d9      	ldr	r1, [r3, #12]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	4603      	mov	r3, r0
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4403      	add	r3, r0
 80019aa:	3b1e      	subs	r3, #30
 80019ac:	409a      	lsls	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	e022      	b.n	80019fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6919      	ldr	r1, [r3, #16]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	461a      	mov	r2, r3
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	2207      	movs	r2, #7
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	400a      	ands	r2, r1
 80019da:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6919      	ldr	r1, [r3, #16]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	4618      	mov	r0, r3
 80019ee:	4603      	mov	r3, r0
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4403      	add	r3, r0
 80019f4:	409a      	lsls	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d824      	bhi.n	8001a50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	3b05      	subs	r3, #5
 8001a18:	221f      	movs	r2, #31
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	400a      	ands	r2, r1
 8001a26:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	4618      	mov	r0, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	3b05      	subs	r3, #5
 8001a42:	fa00 f203 	lsl.w	r2, r0, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a4e:	e04c      	b.n	8001aea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b0c      	cmp	r3, #12
 8001a56:	d824      	bhi.n	8001aa2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	3b23      	subs	r3, #35	@ 0x23
 8001a6a:	221f      	movs	r2, #31
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43da      	mvns	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	400a      	ands	r2, r1
 8001a78:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	3b23      	subs	r3, #35	@ 0x23
 8001a94:	fa00 f203 	lsl.w	r2, r0, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001aa0:	e023      	b.n	8001aea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3b41      	subs	r3, #65	@ 0x41
 8001ab4:	221f      	movs	r2, #31
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	3b41      	subs	r3, #65	@ 0x41
 8001ade:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aea:	4b22      	ldr	r3, [pc, #136]	@ (8001b74 <HAL_ADC_ConfigChannel+0x234>)
 8001aec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a21      	ldr	r2, [pc, #132]	@ (8001b78 <HAL_ADC_ConfigChannel+0x238>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d109      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x1cc>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b12      	cmp	r3, #18
 8001afe:	d105      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a19      	ldr	r2, [pc, #100]	@ (8001b78 <HAL_ADC_ConfigChannel+0x238>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d123      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x21e>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b10      	cmp	r3, #16
 8001b1c:	d003      	beq.n	8001b26 <HAL_ADC_ConfigChannel+0x1e6>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b11      	cmp	r3, #17
 8001b24:	d11b      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b10      	cmp	r3, #16
 8001b38:	d111      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <HAL_ADC_ConfigChannel+0x23c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a10      	ldr	r2, [pc, #64]	@ (8001b80 <HAL_ADC_ConfigChannel+0x240>)
 8001b40:	fba2 2303 	umull	r2, r3, r2, r3
 8001b44:	0c9a      	lsrs	r2, r3, #18
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b50:	e002      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	3b01      	subs	r3, #1
 8001b56:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f9      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	40012300 	.word	0x40012300
 8001b78:	40012000 	.word	0x40012000
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	431bde83 	.word	0x431bde83

08001b84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b8c:	4b79      	ldr	r3, [pc, #484]	@ (8001d74 <ADC_Init+0x1f0>)
 8001b8e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6859      	ldr	r1, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	021a      	lsls	r2, r3, #8
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001bdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6859      	ldr	r1, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6899      	ldr	r1, [r3, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c16:	4a58      	ldr	r2, [pc, #352]	@ (8001d78 <ADC_Init+0x1f4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d022      	beq.n	8001c62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6899      	ldr	r1, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6899      	ldr	r1, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	e00f      	b.n	8001c82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c80:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0202 	bic.w	r2, r2, #2
 8001c90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6899      	ldr	r1, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7e1b      	ldrb	r3, [r3, #24]
 8001c9c:	005a      	lsls	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d01b      	beq.n	8001ce8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cbe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001cce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6859      	ldr	r1, [r3, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	035a      	lsls	r2, r3, #13
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	e007      	b.n	8001cf8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cf6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	051a      	lsls	r2, r3, #20
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6899      	ldr	r1, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d3a:	025a      	lsls	r2, r3, #9
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6899      	ldr	r1, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	029a      	lsls	r2, r3, #10
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	609a      	str	r2, [r3, #8]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40012300 	.word	0x40012300
 8001d78:	0f000001 	.word	0x0f000001

08001d7c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dac:	4013      	ands	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc2:	4a04      	ldr	r2, [pc, #16]	@ (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	60d3      	str	r3, [r2, #12]
}
 8001dc8:	bf00      	nop
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ddc:	4b04      	ldr	r3, [pc, #16]	@ (8001df0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	f003 0307 	and.w	r3, r3, #7
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	db0b      	blt.n	8001e1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	f003 021f 	and.w	r2, r3, #31
 8001e0c:	4907      	ldr	r1, [pc, #28]	@ (8001e2c <__NVIC_EnableIRQ+0x38>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	2001      	movs	r0, #1
 8001e16:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000e100 	.word	0xe000e100

08001e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	db0a      	blt.n	8001e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	490c      	ldr	r1, [pc, #48]	@ (8001e7c <__NVIC_SetPriority+0x4c>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	440b      	add	r3, r1
 8001e54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e58:	e00a      	b.n	8001e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4908      	ldr	r1, [pc, #32]	@ (8001e80 <__NVIC_SetPriority+0x50>)
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	3b04      	subs	r3, #4
 8001e68:	0112      	lsls	r2, r2, #4
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	761a      	strb	r2, [r3, #24]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000e100 	.word	0xe000e100
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	@ 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f1c3 0307 	rsb	r3, r3, #7
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	bf28      	it	cs
 8001ea2:	2304      	movcs	r3, #4
 8001ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d902      	bls.n	8001eb4 <NVIC_EncodePriority+0x30>
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3b03      	subs	r3, #3
 8001eb2:	e000      	b.n	8001eb6 <NVIC_EncodePriority+0x32>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43d9      	mvns	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	4313      	orrs	r3, r2
         );
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3724      	adds	r7, #36	@ 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001efc:	d301      	bcc.n	8001f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efe:	2301      	movs	r3, #1
 8001f00:	e00f      	b.n	8001f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f02:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <SysTick_Config+0x40>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f10:	f7ff ff8e 	bl	8001e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f14:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <SysTick_Config+0x40>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1a:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <SysTick_Config+0x40>)
 8001f1c:	2207      	movs	r2, #7
 8001f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	e000e010 	.word	0xe000e010

08001f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ff29 	bl	8001d90 <__NVIC_SetPriorityGrouping>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f58:	f7ff ff3e 	bl	8001dd8 <__NVIC_GetPriorityGrouping>
 8001f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	6978      	ldr	r0, [r7, #20]
 8001f64:	f7ff ff8e 	bl	8001e84 <NVIC_EncodePriority>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff5d 	bl	8001e30 <__NVIC_SetPriority>
}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff31 	bl	8001df4 <__NVIC_EnableIRQ>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ffa2 	bl	8001eec <SysTick_Config>
 8001fa8:	4603      	mov	r3, r0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fc0:	f7ff fb1c 	bl	80015fc <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e099      	b.n	8002104 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff0:	e00f      	b.n	8002012 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ff2:	f7ff fb03 	bl	80015fc <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b05      	cmp	r3, #5
 8001ffe:	d908      	bls.n	8002012 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2220      	movs	r2, #32
 8002004:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2203      	movs	r2, #3
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e078      	b.n	8002104 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1e8      	bne.n	8001ff2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	4b38      	ldr	r3, [pc, #224]	@ (800210c <HAL_DMA_Init+0x158>)
 800202c:	4013      	ands	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800203e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800204a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002056:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4313      	orrs	r3, r2
 8002062:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002068:	2b04      	cmp	r3, #4
 800206a:	d107      	bne.n	800207c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002074:	4313      	orrs	r3, r2
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4313      	orrs	r3, r2
 800207a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f023 0307 	bic.w	r3, r3, #7
 8002092:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	4313      	orrs	r3, r2
 800209c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d117      	bne.n	80020d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00e      	beq.n	80020d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 fa0b 	bl	80024d4 <DMA_CheckFifoParam>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2240      	movs	r2, #64	@ 0x40
 80020c8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020d2:	2301      	movs	r3, #1
 80020d4:	e016      	b.n	8002104 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f9c2 	bl	8002468 <DMA_CalcBaseAndBitshift>
 80020e4:	4603      	mov	r3, r0
 80020e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ec:	223f      	movs	r2, #63	@ 0x3f
 80020ee:	409a      	lsls	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	f010803f 	.word	0xf010803f

08002110 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d004      	beq.n	800212e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2280      	movs	r2, #128	@ 0x80
 8002128:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e00c      	b.n	8002148 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2205      	movs	r2, #5
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0201 	bic.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002160:	4b8e      	ldr	r3, [pc, #568]	@ (800239c <HAL_DMA_IRQHandler+0x248>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a8e      	ldr	r2, [pc, #568]	@ (80023a0 <HAL_DMA_IRQHandler+0x24c>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	0a9b      	lsrs	r3, r3, #10
 800216c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002172:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217e:	2208      	movs	r2, #8
 8002180:	409a      	lsls	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4013      	ands	r3, r2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d01a      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d013      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0204 	bic.w	r2, r2, #4
 80021a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ac:	2208      	movs	r2, #8
 80021ae:	409a      	lsls	r2, r3
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b8:	f043 0201 	orr.w	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c4:	2201      	movs	r2, #1
 80021c6:	409a      	lsls	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d012      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00b      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e2:	2201      	movs	r2, #1
 80021e4:	409a      	lsls	r2, r3
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ee:	f043 0202 	orr.w	r2, r3, #2
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fa:	2204      	movs	r2, #4
 80021fc:	409a      	lsls	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d012      	beq.n	800222c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00b      	beq.n	800222c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002218:	2204      	movs	r2, #4
 800221a:	409a      	lsls	r2, r3
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002224:	f043 0204 	orr.w	r2, r3, #4
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002230:	2210      	movs	r2, #16
 8002232:	409a      	lsls	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d043      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d03c      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224e:	2210      	movs	r2, #16
 8002250:	409a      	lsls	r2, r3
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d018      	beq.n	8002296 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d108      	bne.n	8002284 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	2b00      	cmp	r3, #0
 8002278:	d024      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	4798      	blx	r3
 8002282:	e01f      	b.n	80022c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002288:	2b00      	cmp	r3, #0
 800228a:	d01b      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	4798      	blx	r3
 8002294:	e016      	b.n	80022c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d107      	bne.n	80022b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0208 	bic.w	r2, r2, #8
 80022b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c8:	2220      	movs	r2, #32
 80022ca:	409a      	lsls	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 808f 	beq.w	80023f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 8087 	beq.w	80023f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ea:	2220      	movs	r2, #32
 80022ec:	409a      	lsls	r2, r3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b05      	cmp	r3, #5
 80022fc:	d136      	bne.n	800236c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0216 	bic.w	r2, r2, #22
 800230c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695a      	ldr	r2, [r3, #20]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800231c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	2b00      	cmp	r3, #0
 8002324:	d103      	bne.n	800232e <HAL_DMA_IRQHandler+0x1da>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800232a:	2b00      	cmp	r3, #0
 800232c:	d007      	beq.n	800233e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0208 	bic.w	r2, r2, #8
 800233c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002342:	223f      	movs	r2, #63	@ 0x3f
 8002344:	409a      	lsls	r2, r3
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800235e:	2b00      	cmp	r3, #0
 8002360:	d07e      	beq.n	8002460 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	4798      	blx	r3
        }
        return;
 800236a:	e079      	b.n	8002460 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d01d      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10d      	bne.n	80023a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238c:	2b00      	cmp	r3, #0
 800238e:	d031      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	4798      	blx	r3
 8002398:	e02c      	b.n	80023f4 <HAL_DMA_IRQHandler+0x2a0>
 800239a:	bf00      	nop
 800239c:	20000000 	.word	0x20000000
 80023a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d023      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	4798      	blx	r3
 80023b4:	e01e      	b.n	80023f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10f      	bne.n	80023e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0210 	bic.w	r2, r2, #16
 80023d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d032      	beq.n	8002462 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d022      	beq.n	800244e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2205      	movs	r2, #5
 800240c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0201 	bic.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	3301      	adds	r3, #1
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	429a      	cmp	r2, r3
 800242a:	d307      	bcc.n	800243c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f2      	bne.n	8002420 <HAL_DMA_IRQHandler+0x2cc>
 800243a:	e000      	b.n	800243e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800243c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002452:	2b00      	cmp	r3, #0
 8002454:	d005      	beq.n	8002462 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	4798      	blx	r3
 800245e:	e000      	b.n	8002462 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002460:	bf00      	nop
    }
  }
}
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	3b10      	subs	r3, #16
 8002478:	4a14      	ldr	r2, [pc, #80]	@ (80024cc <DMA_CalcBaseAndBitshift+0x64>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002482:	4a13      	ldr	r2, [pc, #76]	@ (80024d0 <DMA_CalcBaseAndBitshift+0x68>)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4413      	add	r3, r2
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b03      	cmp	r3, #3
 8002494:	d909      	bls.n	80024aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800249e:	f023 0303 	bic.w	r3, r3, #3
 80024a2:	1d1a      	adds	r2, r3, #4
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80024a8:	e007      	b.n	80024ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024b2:	f023 0303 	bic.w	r3, r3, #3
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	aaaaaaab 	.word	0xaaaaaaab
 80024d0:	0800bb30 	.word	0x0800bb30

080024d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d11f      	bne.n	800252e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d856      	bhi.n	80025a2 <DMA_CheckFifoParam+0xce>
 80024f4:	a201      	add	r2, pc, #4	@ (adr r2, 80024fc <DMA_CheckFifoParam+0x28>)
 80024f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fa:	bf00      	nop
 80024fc:	0800250d 	.word	0x0800250d
 8002500:	0800251f 	.word	0x0800251f
 8002504:	0800250d 	.word	0x0800250d
 8002508:	080025a3 	.word	0x080025a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002510:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d046      	beq.n	80025a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800251c:	e043      	b.n	80025a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002522:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002526:	d140      	bne.n	80025aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800252c:	e03d      	b.n	80025aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002536:	d121      	bne.n	800257c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b03      	cmp	r3, #3
 800253c:	d837      	bhi.n	80025ae <DMA_CheckFifoParam+0xda>
 800253e:	a201      	add	r2, pc, #4	@ (adr r2, 8002544 <DMA_CheckFifoParam+0x70>)
 8002540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002544:	08002555 	.word	0x08002555
 8002548:	0800255b 	.word	0x0800255b
 800254c:	08002555 	.word	0x08002555
 8002550:	0800256d 	.word	0x0800256d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
      break;
 8002558:	e030      	b.n	80025bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d025      	beq.n	80025b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800256a:	e022      	b.n	80025b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002570:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002574:	d11f      	bne.n	80025b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800257a:	e01c      	b.n	80025b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d903      	bls.n	800258a <DMA_CheckFifoParam+0xb6>
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d003      	beq.n	8002590 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002588:	e018      	b.n	80025bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
      break;
 800258e:	e015      	b.n	80025bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002594:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00e      	beq.n	80025ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
      break;
 80025a0:	e00b      	b.n	80025ba <DMA_CheckFifoParam+0xe6>
      break;
 80025a2:	bf00      	nop
 80025a4:	e00a      	b.n	80025bc <DMA_CheckFifoParam+0xe8>
      break;
 80025a6:	bf00      	nop
 80025a8:	e008      	b.n	80025bc <DMA_CheckFifoParam+0xe8>
      break;
 80025aa:	bf00      	nop
 80025ac:	e006      	b.n	80025bc <DMA_CheckFifoParam+0xe8>
      break;
 80025ae:	bf00      	nop
 80025b0:	e004      	b.n	80025bc <DMA_CheckFifoParam+0xe8>
      break;
 80025b2:	bf00      	nop
 80025b4:	e002      	b.n	80025bc <DMA_CheckFifoParam+0xe8>
      break;   
 80025b6:	bf00      	nop
 80025b8:	e000      	b.n	80025bc <DMA_CheckFifoParam+0xe8>
      break;
 80025ba:	bf00      	nop
    }
  } 
  
  return status; 
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop

080025cc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80025de:	4b23      	ldr	r3, [pc, #140]	@ (800266c <HAL_FLASH_Program+0xa0>)
 80025e0:	7e1b      	ldrb	r3, [r3, #24]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_FLASH_Program+0x1e>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e03b      	b.n	8002662 <HAL_FLASH_Program+0x96>
 80025ea:	4b20      	ldr	r3, [pc, #128]	@ (800266c <HAL_FLASH_Program+0xa0>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025f0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80025f4:	f000 f870 	bl	80026d8 <FLASH_WaitForLastOperation>
 80025f8:	4603      	mov	r3, r0
 80025fa:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80025fc:	7dfb      	ldrb	r3, [r7, #23]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d12b      	bne.n	800265a <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002608:	783b      	ldrb	r3, [r7, #0]
 800260a:	4619      	mov	r1, r3
 800260c:	68b8      	ldr	r0, [r7, #8]
 800260e:	f000 f91b 	bl	8002848 <FLASH_Program_Byte>
 8002612:	e016      	b.n	8002642 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d105      	bne.n	8002626 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800261a:	883b      	ldrh	r3, [r7, #0]
 800261c:	4619      	mov	r1, r3
 800261e:	68b8      	ldr	r0, [r7, #8]
 8002620:	f000 f8ee 	bl	8002800 <FLASH_Program_HalfWord>
 8002624:	e00d      	b.n	8002642 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d105      	bne.n	8002638 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	4619      	mov	r1, r3
 8002630:	68b8      	ldr	r0, [r7, #8]
 8002632:	f000 f8c3 	bl	80027bc <FLASH_Program_Word>
 8002636:	e004      	b.n	8002642 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800263c:	68b8      	ldr	r0, [r7, #8]
 800263e:	f000 f88b 	bl	8002758 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002642:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002646:	f000 f847 	bl	80026d8 <FLASH_WaitForLastOperation>
 800264a:	4603      	mov	r3, r0
 800264c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800264e:	4b08      	ldr	r3, [pc, #32]	@ (8002670 <HAL_FLASH_Program+0xa4>)
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	4a07      	ldr	r2, [pc, #28]	@ (8002670 <HAL_FLASH_Program+0xa4>)
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800265a:	4b04      	ldr	r3, [pc, #16]	@ (800266c <HAL_FLASH_Program+0xa0>)
 800265c:	2200      	movs	r2, #0
 800265e:	761a      	strb	r2, [r3, #24]

  return status;
 8002660:	7dfb      	ldrb	r3, [r7, #23]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	200002c8 	.word	0x200002c8
 8002670:	40023c00 	.word	0x40023c00

08002674 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800267e:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <HAL_FLASH_Unlock+0x38>)
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	2b00      	cmp	r3, #0
 8002684:	da0b      	bge.n	800269e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002686:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <HAL_FLASH_Unlock+0x38>)
 8002688:	4a09      	ldr	r2, [pc, #36]	@ (80026b0 <HAL_FLASH_Unlock+0x3c>)
 800268a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800268c:	4b07      	ldr	r3, [pc, #28]	@ (80026ac <HAL_FLASH_Unlock+0x38>)
 800268e:	4a09      	ldr	r2, [pc, #36]	@ (80026b4 <HAL_FLASH_Unlock+0x40>)
 8002690:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002692:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <HAL_FLASH_Unlock+0x38>)
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	2b00      	cmp	r3, #0
 8002698:	da01      	bge.n	800269e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800269e:	79fb      	ldrb	r3, [r7, #7]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	40023c00 	.word	0x40023c00
 80026b0:	45670123 	.word	0x45670123
 80026b4:	cdef89ab 	.word	0xcdef89ab

080026b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80026bc:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <HAL_FLASH_Lock+0x1c>)
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	4a04      	ldr	r2, [pc, #16]	@ (80026d4 <HAL_FLASH_Lock+0x1c>)
 80026c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026c6:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	40023c00 	.word	0x40023c00

080026d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80026e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <FLASH_WaitForLastOperation+0x78>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80026ea:	f7fe ff87 	bl	80015fc <HAL_GetTick>
 80026ee:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80026f0:	e010      	b.n	8002714 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d00c      	beq.n	8002714 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <FLASH_WaitForLastOperation+0x38>
 8002700:	f7fe ff7c 	bl	80015fc <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	429a      	cmp	r2, r3
 800270e:	d201      	bcs.n	8002714 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e019      	b.n	8002748 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002714:	4b0f      	ldr	r3, [pc, #60]	@ (8002754 <FLASH_WaitForLastOperation+0x7c>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1e8      	bne.n	80026f2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002720:	4b0c      	ldr	r3, [pc, #48]	@ (8002754 <FLASH_WaitForLastOperation+0x7c>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800272c:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <FLASH_WaitForLastOperation+0x7c>)
 800272e:	2201      	movs	r2, #1
 8002730:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002732:	4b08      	ldr	r3, [pc, #32]	@ (8002754 <FLASH_WaitForLastOperation+0x7c>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800273e:	f000 f8a5 	bl	800288c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002746:	2300      	movs	r3, #0

}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	200002c8 	.word	0x200002c8
 8002754:	40023c00 	.word	0x40023c00

08002758 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002764:	4b14      	ldr	r3, [pc, #80]	@ (80027b8 <FLASH_Program_DoubleWord+0x60>)
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	4a13      	ldr	r2, [pc, #76]	@ (80027b8 <FLASH_Program_DoubleWord+0x60>)
 800276a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800276e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002770:	4b11      	ldr	r3, [pc, #68]	@ (80027b8 <FLASH_Program_DoubleWord+0x60>)
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	4a10      	ldr	r2, [pc, #64]	@ (80027b8 <FLASH_Program_DoubleWord+0x60>)
 8002776:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800277a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800277c:	4b0e      	ldr	r3, [pc, #56]	@ (80027b8 <FLASH_Program_DoubleWord+0x60>)
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	4a0d      	ldr	r2, [pc, #52]	@ (80027b8 <FLASH_Program_DoubleWord+0x60>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800278e:	f3bf 8f6f 	isb	sy
}
 8002792:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8002794:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	000a      	movs	r2, r1
 80027a2:	2300      	movs	r3, #0
 80027a4:	68f9      	ldr	r1, [r7, #12]
 80027a6:	3104      	adds	r1, #4
 80027a8:	4613      	mov	r3, r2
 80027aa:	600b      	str	r3, [r1, #0]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40023c00 	.word	0x40023c00

080027bc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80027c6:	4b0d      	ldr	r3, [pc, #52]	@ (80027fc <FLASH_Program_Word+0x40>)
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	4a0c      	ldr	r2, [pc, #48]	@ (80027fc <FLASH_Program_Word+0x40>)
 80027cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80027d2:	4b0a      	ldr	r3, [pc, #40]	@ (80027fc <FLASH_Program_Word+0x40>)
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	4a09      	ldr	r2, [pc, #36]	@ (80027fc <FLASH_Program_Word+0x40>)
 80027d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80027de:	4b07      	ldr	r3, [pc, #28]	@ (80027fc <FLASH_Program_Word+0x40>)
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	4a06      	ldr	r2, [pc, #24]	@ (80027fc <FLASH_Program_Word+0x40>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	601a      	str	r2, [r3, #0]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	40023c00 	.word	0x40023c00

08002800 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800280c:	4b0d      	ldr	r3, [pc, #52]	@ (8002844 <FLASH_Program_HalfWord+0x44>)
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	4a0c      	ldr	r2, [pc, #48]	@ (8002844 <FLASH_Program_HalfWord+0x44>)
 8002812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002816:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002818:	4b0a      	ldr	r3, [pc, #40]	@ (8002844 <FLASH_Program_HalfWord+0x44>)
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	4a09      	ldr	r2, [pc, #36]	@ (8002844 <FLASH_Program_HalfWord+0x44>)
 800281e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002822:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002824:	4b07      	ldr	r3, [pc, #28]	@ (8002844 <FLASH_Program_HalfWord+0x44>)
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	4a06      	ldr	r2, [pc, #24]	@ (8002844 <FLASH_Program_HalfWord+0x44>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	887a      	ldrh	r2, [r7, #2]
 8002834:	801a      	strh	r2, [r3, #0]
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40023c00 	.word	0x40023c00

08002848 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002854:	4b0c      	ldr	r3, [pc, #48]	@ (8002888 <FLASH_Program_Byte+0x40>)
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	4a0b      	ldr	r2, [pc, #44]	@ (8002888 <FLASH_Program_Byte+0x40>)
 800285a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800285e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002860:	4b09      	ldr	r3, [pc, #36]	@ (8002888 <FLASH_Program_Byte+0x40>)
 8002862:	4a09      	ldr	r2, [pc, #36]	@ (8002888 <FLASH_Program_Byte+0x40>)
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002868:	4b07      	ldr	r3, [pc, #28]	@ (8002888 <FLASH_Program_Byte+0x40>)
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	4a06      	ldr	r2, [pc, #24]	@ (8002888 <FLASH_Program_Byte+0x40>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	701a      	strb	r2, [r3, #0]
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40023c00 	.word	0x40023c00

0800288c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002890:	4b27      	ldr	r3, [pc, #156]	@ (8002930 <FLASH_SetErrorCode+0xa4>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800289c:	4b25      	ldr	r3, [pc, #148]	@ (8002934 <FLASH_SetErrorCode+0xa8>)
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	f043 0310 	orr.w	r3, r3, #16
 80028a4:	4a23      	ldr	r2, [pc, #140]	@ (8002934 <FLASH_SetErrorCode+0xa8>)
 80028a6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80028a8:	4b21      	ldr	r3, [pc, #132]	@ (8002930 <FLASH_SetErrorCode+0xa4>)
 80028aa:	2210      	movs	r2, #16
 80028ac:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80028ae:	4b20      	ldr	r3, [pc, #128]	@ (8002930 <FLASH_SetErrorCode+0xa4>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80028ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002934 <FLASH_SetErrorCode+0xa8>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f043 0308 	orr.w	r3, r3, #8
 80028c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002934 <FLASH_SetErrorCode+0xa8>)
 80028c4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80028c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002930 <FLASH_SetErrorCode+0xa4>)
 80028c8:	2220      	movs	r2, #32
 80028ca:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80028cc:	4b18      	ldr	r3, [pc, #96]	@ (8002930 <FLASH_SetErrorCode+0xa4>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80028d8:	4b16      	ldr	r3, [pc, #88]	@ (8002934 <FLASH_SetErrorCode+0xa8>)
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	f043 0304 	orr.w	r3, r3, #4
 80028e0:	4a14      	ldr	r2, [pc, #80]	@ (8002934 <FLASH_SetErrorCode+0xa8>)
 80028e2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80028e4:	4b12      	ldr	r3, [pc, #72]	@ (8002930 <FLASH_SetErrorCode+0xa4>)
 80028e6:	2240      	movs	r2, #64	@ 0x40
 80028e8:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80028ea:	4b11      	ldr	r3, [pc, #68]	@ (8002930 <FLASH_SetErrorCode+0xa4>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80028f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002934 <FLASH_SetErrorCode+0xa8>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f043 0302 	orr.w	r3, r3, #2
 80028fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002934 <FLASH_SetErrorCode+0xa8>)
 8002900:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002902:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <FLASH_SetErrorCode+0xa4>)
 8002904:	2280      	movs	r2, #128	@ 0x80
 8002906:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002908:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <FLASH_SetErrorCode+0xa4>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002914:	4b07      	ldr	r3, [pc, #28]	@ (8002934 <FLASH_SetErrorCode+0xa8>)
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	f043 0320 	orr.w	r3, r3, #32
 800291c:	4a05      	ldr	r2, [pc, #20]	@ (8002934 <FLASH_SetErrorCode+0xa8>)
 800291e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002920:	4b03      	ldr	r3, [pc, #12]	@ (8002930 <FLASH_SetErrorCode+0xa4>)
 8002922:	2202      	movs	r2, #2
 8002924:	60da      	str	r2, [r3, #12]
  }
}
 8002926:	bf00      	nop
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	40023c00 	.word	0x40023c00
 8002934:	200002c8 	.word	0x200002c8

08002938 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d102      	bne.n	8002954 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	e010      	b.n	8002976 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d103      	bne.n	8002962 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800295a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	e009      	b.n	8002976 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d103      	bne.n	8002970 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002968:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	e002      	b.n	8002976 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002970:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002974:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002976:	4b13      	ldr	r3, [pc, #76]	@ (80029c4 <FLASH_Erase_Sector+0x8c>)
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	4a12      	ldr	r2, [pc, #72]	@ (80029c4 <FLASH_Erase_Sector+0x8c>)
 800297c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002980:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002982:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <FLASH_Erase_Sector+0x8c>)
 8002984:	691a      	ldr	r2, [r3, #16]
 8002986:	490f      	ldr	r1, [pc, #60]	@ (80029c4 <FLASH_Erase_Sector+0x8c>)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800298e:	4b0d      	ldr	r3, [pc, #52]	@ (80029c4 <FLASH_Erase_Sector+0x8c>)
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	4a0c      	ldr	r2, [pc, #48]	@ (80029c4 <FLASH_Erase_Sector+0x8c>)
 8002994:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002998:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800299a:	4b0a      	ldr	r3, [pc, #40]	@ (80029c4 <FLASH_Erase_Sector+0x8c>)
 800299c:	691a      	ldr	r2, [r3, #16]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4313      	orrs	r3, r2
 80029a4:	4a07      	ldr	r2, [pc, #28]	@ (80029c4 <FLASH_Erase_Sector+0x8c>)
 80029a6:	f043 0302 	orr.w	r3, r3, #2
 80029aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80029ac:	4b05      	ldr	r3, [pc, #20]	@ (80029c4 <FLASH_Erase_Sector+0x8c>)
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	4a04      	ldr	r2, [pc, #16]	@ (80029c4 <FLASH_Erase_Sector+0x8c>)
 80029b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b6:	6113      	str	r3, [r2, #16]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	40023c00 	.word	0x40023c00

080029c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	@ 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	e16b      	b.n	8002cbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029e4:	2201      	movs	r2, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	f040 815a 	bne.w	8002cb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d005      	beq.n	8002a1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d130      	bne.n	8002a7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	2203      	movs	r2, #3
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a50:	2201      	movs	r2, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 0201 	and.w	r2, r3, #1
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d017      	beq.n	8002ab8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	2203      	movs	r2, #3
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d123      	bne.n	8002b0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	08da      	lsrs	r2, r3, #3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3208      	adds	r2, #8
 8002acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	220f      	movs	r2, #15
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	08da      	lsrs	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3208      	adds	r2, #8
 8002b06:	69b9      	ldr	r1, [r7, #24]
 8002b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	2203      	movs	r2, #3
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0203 	and.w	r2, r3, #3
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80b4 	beq.w	8002cb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	4b60      	ldr	r3, [pc, #384]	@ (8002cd4 <HAL_GPIO_Init+0x30c>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b56:	4a5f      	ldr	r2, [pc, #380]	@ (8002cd4 <HAL_GPIO_Init+0x30c>)
 8002b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b5e:	4b5d      	ldr	r3, [pc, #372]	@ (8002cd4 <HAL_GPIO_Init+0x30c>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b6a:	4a5b      	ldr	r2, [pc, #364]	@ (8002cd8 <HAL_GPIO_Init+0x310>)
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	089b      	lsrs	r3, r3, #2
 8002b70:	3302      	adds	r3, #2
 8002b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	220f      	movs	r2, #15
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a52      	ldr	r2, [pc, #328]	@ (8002cdc <HAL_GPIO_Init+0x314>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d02b      	beq.n	8002bee <HAL_GPIO_Init+0x226>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a51      	ldr	r2, [pc, #324]	@ (8002ce0 <HAL_GPIO_Init+0x318>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d025      	beq.n	8002bea <HAL_GPIO_Init+0x222>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a50      	ldr	r2, [pc, #320]	@ (8002ce4 <HAL_GPIO_Init+0x31c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d01f      	beq.n	8002be6 <HAL_GPIO_Init+0x21e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4f      	ldr	r2, [pc, #316]	@ (8002ce8 <HAL_GPIO_Init+0x320>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d019      	beq.n	8002be2 <HAL_GPIO_Init+0x21a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4e      	ldr	r2, [pc, #312]	@ (8002cec <HAL_GPIO_Init+0x324>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d013      	beq.n	8002bde <HAL_GPIO_Init+0x216>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a4d      	ldr	r2, [pc, #308]	@ (8002cf0 <HAL_GPIO_Init+0x328>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00d      	beq.n	8002bda <HAL_GPIO_Init+0x212>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4c      	ldr	r2, [pc, #304]	@ (8002cf4 <HAL_GPIO_Init+0x32c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d007      	beq.n	8002bd6 <HAL_GPIO_Init+0x20e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4b      	ldr	r2, [pc, #300]	@ (8002cf8 <HAL_GPIO_Init+0x330>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d101      	bne.n	8002bd2 <HAL_GPIO_Init+0x20a>
 8002bce:	2307      	movs	r3, #7
 8002bd0:	e00e      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	e00c      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bd6:	2306      	movs	r3, #6
 8002bd8:	e00a      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bda:	2305      	movs	r3, #5
 8002bdc:	e008      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bde:	2304      	movs	r3, #4
 8002be0:	e006      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002be2:	2303      	movs	r3, #3
 8002be4:	e004      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e002      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	f002 0203 	and.w	r2, r2, #3
 8002bf6:	0092      	lsls	r2, r2, #2
 8002bf8:	4093      	lsls	r3, r2
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c00:	4935      	ldr	r1, [pc, #212]	@ (8002cd8 <HAL_GPIO_Init+0x310>)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	3302      	adds	r3, #2
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002cfc <HAL_GPIO_Init+0x334>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c32:	4a32      	ldr	r2, [pc, #200]	@ (8002cfc <HAL_GPIO_Init+0x334>)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c38:	4b30      	ldr	r3, [pc, #192]	@ (8002cfc <HAL_GPIO_Init+0x334>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c5c:	4a27      	ldr	r2, [pc, #156]	@ (8002cfc <HAL_GPIO_Init+0x334>)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c62:	4b26      	ldr	r3, [pc, #152]	@ (8002cfc <HAL_GPIO_Init+0x334>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c86:	4a1d      	ldr	r2, [pc, #116]	@ (8002cfc <HAL_GPIO_Init+0x334>)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cfc <HAL_GPIO_Init+0x334>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cb0:	4a12      	ldr	r2, [pc, #72]	@ (8002cfc <HAL_GPIO_Init+0x334>)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	61fb      	str	r3, [r7, #28]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b0f      	cmp	r3, #15
 8002cc0:	f67f ae90 	bls.w	80029e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	3724      	adds	r7, #36	@ 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40013800 	.word	0x40013800
 8002cdc:	40020000 	.word	0x40020000
 8002ce0:	40020400 	.word	0x40020400
 8002ce4:	40020800 	.word	0x40020800
 8002ce8:	40020c00 	.word	0x40020c00
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40021400 	.word	0x40021400
 8002cf4:	40021800 	.word	0x40021800
 8002cf8:	40021c00 	.word	0x40021c00
 8002cfc:	40013c00 	.word	0x40013c00

08002d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	807b      	strh	r3, [r7, #2]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d10:	787b      	ldrb	r3, [r7, #1]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d16:	887a      	ldrh	r2, [r7, #2]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d1c:	e003      	b.n	8002d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d1e:	887b      	ldrh	r3, [r7, #2]
 8002d20:	041a      	lsls	r2, r3, #16
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	619a      	str	r2, [r3, #24]
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b086      	sub	sp, #24
 8002d36:	af02      	add	r7, sp, #8
 8002d38:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e059      	b.n	8002df8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f008 fad4 	bl	800b30c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2203      	movs	r2, #3
 8002d68:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d72:	d102      	bne.n	8002d7a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f005 f8ed 	bl	8007f5e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	7c1a      	ldrb	r2, [r3, #16]
 8002d8c:	f88d 2000 	strb.w	r2, [sp]
 8002d90:	3304      	adds	r3, #4
 8002d92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d94:	f005 f86e 	bl	8007e74 <USB_CoreInit>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2202      	movs	r2, #2
 8002da2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e026      	b.n	8002df8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2101      	movs	r1, #1
 8002db0:	4618      	mov	r0, r3
 8002db2:	f005 f8e5 	bl	8007f80 <USB_SetCurrentMode>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e017      	b.n	8002df8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7c1a      	ldrb	r2, [r3, #16]
 8002dd0:	f88d 2000 	strb.w	r2, [sp]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dd8:	f005 fa88 	bl	80082ec <USB_HostInit>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2202      	movs	r2, #2
 8002de6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e004      	b.n	8002df8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002e00:	b590      	push	{r4, r7, lr}
 8002e02:	b08b      	sub	sp, #44	@ 0x2c
 8002e04:	af04      	add	r7, sp, #16
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	4608      	mov	r0, r1
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4603      	mov	r3, r0
 8002e10:	70fb      	strb	r3, [r7, #3]
 8002e12:	460b      	mov	r3, r1
 8002e14:	70bb      	strb	r3, [r7, #2]
 8002e16:	4613      	mov	r3, r2
 8002e18:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002e1a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002e1c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_HCD_HC_Init+0x2c>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e09d      	b.n	8002f68 <HAL_HCD_HC_Init+0x168>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002e34:	78fa      	ldrb	r2, [r7, #3]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	1a9b      	subs	r3, r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	3319      	adds	r3, #25
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	1a9b      	subs	r3, r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	3314      	adds	r3, #20
 8002e58:	787a      	ldrb	r2, [r7, #1]
 8002e5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	3315      	adds	r3, #21
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	3326      	adds	r3, #38	@ 0x26
 8002e80:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002e84:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	78bb      	ldrb	r3, [r7, #2]
 8002e8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e8e:	b2d8      	uxtb	r0, r3
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3316      	adds	r3, #22
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fbc8 	bl	800363c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002eac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	da0a      	bge.n	8002eca <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	3317      	adds	r3, #23
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	e009      	b.n	8002ede <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3317      	adds	r3, #23
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f005 fb66 	bl	80085b4 <USB_GetHostSpeed>
 8002ee8:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002eea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d10b      	bne.n	8002f0a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002ef2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d107      	bne.n	8002f0a <HAL_HCD_HC_Init+0x10a>
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d104      	bne.n	8002f0a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2bbc      	cmp	r3, #188	@ 0xbc
 8002f04:	d901      	bls.n	8002f0a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002f06:	23bc      	movs	r3, #188	@ 0xbc
 8002f08:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	3318      	adds	r3, #24
 8002f1a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002f1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	b298      	uxth	r0, r3
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	3328      	adds	r3, #40	@ 0x28
 8002f34:	4602      	mov	r2, r0
 8002f36:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	787c      	ldrb	r4, [r7, #1]
 8002f42:	78ba      	ldrb	r2, [r7, #2]
 8002f44:	78f9      	ldrb	r1, [r7, #3]
 8002f46:	9302      	str	r3, [sp, #8]
 8002f48:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	4623      	mov	r3, r4
 8002f56:	f005 fb55 	bl	8008604 <USB_HC_Init>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd90      	pop	{r4, r7, pc}

08002f70 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d101      	bne.n	8002f8e <HAL_HCD_HC_Halt+0x1e>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e00f      	b.n	8002fae <HAL_HCD_HC_Halt+0x3e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f005 fee7 	bl	8008d72 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	4608      	mov	r0, r1
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	70fb      	strb	r3, [r7, #3]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	70bb      	strb	r3, [r7, #2]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	3317      	adds	r3, #23
 8002fe2:	78ba      	ldrb	r2, [r7, #2]
 8002fe4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3326      	adds	r3, #38	@ 0x26
 8002ff6:	787a      	ldrb	r2, [r7, #1]
 8002ff8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002ffa:	7c3b      	ldrb	r3, [r7, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d114      	bne.n	800302a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	332a      	adds	r3, #42	@ 0x2a
 8003010:	2203      	movs	r2, #3
 8003012:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	3319      	adds	r3, #25
 8003024:	7f3a      	ldrb	r2, [r7, #28]
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	e009      	b.n	800303e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	332a      	adds	r3, #42	@ 0x2a
 800303a:	2202      	movs	r2, #2
 800303c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800303e:	787b      	ldrb	r3, [r7, #1]
 8003040:	2b03      	cmp	r3, #3
 8003042:	f200 8102 	bhi.w	800324a <HAL_HCD_HC_SubmitRequest+0x292>
 8003046:	a201      	add	r2, pc, #4	@ (adr r2, 800304c <HAL_HCD_HC_SubmitRequest+0x94>)
 8003048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304c:	0800305d 	.word	0x0800305d
 8003050:	08003235 	.word	0x08003235
 8003054:	08003121 	.word	0x08003121
 8003058:	080031ab 	.word	0x080031ab
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800305c:	7c3b      	ldrb	r3, [r7, #16]
 800305e:	2b01      	cmp	r3, #1
 8003060:	f040 80f5 	bne.w	800324e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003064:	78bb      	ldrb	r3, [r7, #2]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d12d      	bne.n	80030c6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800306a:	8b3b      	ldrh	r3, [r7, #24]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d109      	bne.n	8003084 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	333d      	adds	r3, #61	@ 0x3d
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	333d      	adds	r3, #61	@ 0x3d
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10a      	bne.n	80030b0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	332a      	adds	r3, #42	@ 0x2a
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80030ae:	e0ce      	b.n	800324e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	332a      	adds	r3, #42	@ 0x2a
 80030c0:	2202      	movs	r2, #2
 80030c2:	701a      	strb	r2, [r3, #0]
      break;
 80030c4:	e0c3      	b.n	800324e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	331a      	adds	r3, #26
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	f040 80b8 	bne.w	800324e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	333c      	adds	r3, #60	@ 0x3c
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10a      	bne.n	800310a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	332a      	adds	r3, #42	@ 0x2a
 8003104:	2200      	movs	r2, #0
 8003106:	701a      	strb	r2, [r3, #0]
      break;
 8003108:	e0a1      	b.n	800324e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	332a      	adds	r3, #42	@ 0x2a
 800311a:	2202      	movs	r2, #2
 800311c:	701a      	strb	r2, [r3, #0]
      break;
 800311e:	e096      	b.n	800324e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003120:	78bb      	ldrb	r3, [r7, #2]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d120      	bne.n	8003168 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	333d      	adds	r3, #61	@ 0x3d
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	332a      	adds	r3, #42	@ 0x2a
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003150:	e07e      	b.n	8003250 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003152:	78fa      	ldrb	r2, [r7, #3]
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	1a9b      	subs	r3, r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	332a      	adds	r3, #42	@ 0x2a
 8003162:	2202      	movs	r2, #2
 8003164:	701a      	strb	r2, [r3, #0]
      break;
 8003166:	e073      	b.n	8003250 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	333c      	adds	r3, #60	@ 0x3c
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10a      	bne.n	8003194 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	332a      	adds	r3, #42	@ 0x2a
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
      break;
 8003192:	e05d      	b.n	8003250 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	332a      	adds	r3, #42	@ 0x2a
 80031a4:	2202      	movs	r2, #2
 80031a6:	701a      	strb	r2, [r3, #0]
      break;
 80031a8:	e052      	b.n	8003250 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80031aa:	78bb      	ldrb	r3, [r7, #2]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d120      	bne.n	80031f2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	333d      	adds	r3, #61	@ 0x3d
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10a      	bne.n	80031dc <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	332a      	adds	r3, #42	@ 0x2a
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80031da:	e039      	b.n	8003250 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	332a      	adds	r3, #42	@ 0x2a
 80031ec:	2202      	movs	r2, #2
 80031ee:	701a      	strb	r2, [r3, #0]
      break;
 80031f0:	e02e      	b.n	8003250 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	333c      	adds	r3, #60	@ 0x3c
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10a      	bne.n	800321e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	332a      	adds	r3, #42	@ 0x2a
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
      break;
 800321c:	e018      	b.n	8003250 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	332a      	adds	r3, #42	@ 0x2a
 800322e:	2202      	movs	r2, #2
 8003230:	701a      	strb	r2, [r3, #0]
      break;
 8003232:	e00d      	b.n	8003250 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	332a      	adds	r3, #42	@ 0x2a
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
      break;
 8003248:	e002      	b.n	8003250 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800324a:	bf00      	nop
 800324c:	e000      	b.n	8003250 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800324e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	332c      	adds	r3, #44	@ 0x2c
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	8b39      	ldrh	r1, [r7, #24]
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4403      	add	r3, r0
 8003274:	3334      	adds	r3, #52	@ 0x34
 8003276:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	334c      	adds	r3, #76	@ 0x4c
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800328c:	78fa      	ldrb	r2, [r7, #3]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	3338      	adds	r3, #56	@ 0x38
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	1a9b      	subs	r3, r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	3315      	adds	r3, #21
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80032b4:	78fa      	ldrb	r2, [r7, #3]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	1a9b      	subs	r3, r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	334d      	adds	r3, #77	@ 0x4d
 80032c4:	2200      	movs	r2, #0
 80032c6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	4613      	mov	r3, r2
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	3310      	adds	r3, #16
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	4413      	add	r3, r2
 80032dc:	1d19      	adds	r1, r3, #4
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	799b      	ldrb	r3, [r3, #6]
 80032e2:	461a      	mov	r2, r3
 80032e4:	f005 faba 	bl	800885c <USB_HC_StartXfer>
 80032e8:	4603      	mov	r3, r0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop

080032f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f004 ffae 	bl	800826c <USB_GetMode>
 8003310:	4603      	mov	r3, r0
 8003312:	2b01      	cmp	r3, #1
 8003314:	f040 80fb 	bne.w	800350e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f004 ff71 	bl	8008204 <USB_ReadInterrupts>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80f1 	beq.w	800350c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f004 ff68 	bl	8008204 <USB_ReadInterrupts>
 8003334:	4603      	mov	r3, r0
 8003336:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800333a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800333e:	d104      	bne.n	800334a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003348:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f004 ff58 	bl	8008204 <USB_ReadInterrupts>
 8003354:	4603      	mov	r3, r0
 8003356:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800335a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800335e:	d104      	bne.n	800336a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003368:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f004 ff48 	bl	8008204 <USB_ReadInterrupts>
 8003374:	4603      	mov	r3, r0
 8003376:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800337a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800337e:	d104      	bne.n	800338a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003388:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f004 ff38 	bl	8008204 <USB_ReadInterrupts>
 8003394:	4603      	mov	r3, r0
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b02      	cmp	r3, #2
 800339c:	d103      	bne.n	80033a6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2202      	movs	r2, #2
 80033a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f004 ff2a 	bl	8008204 <USB_ReadInterrupts>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033ba:	d120      	bne.n	80033fe <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80033c4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d113      	bne.n	80033fe <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80033d6:	2110      	movs	r1, #16
 80033d8:	6938      	ldr	r0, [r7, #16]
 80033da:	f004 fe1d 	bl	8008018 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80033de:	6938      	ldr	r0, [r7, #16]
 80033e0:	f004 fe4c 	bl	800807c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	7a5b      	ldrb	r3, [r3, #9]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d105      	bne.n	80033f8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2101      	movs	r1, #1
 80033f2:	4618      	mov	r0, r3
 80033f4:	f005 f83e 	bl	8008474 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f008 f805 	bl	800b408 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f004 fefe 	bl	8008204 <USB_ReadInterrupts>
 8003408:	4603      	mov	r3, r0
 800340a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800340e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003412:	d102      	bne.n	800341a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f001 fd4d 	bl	8004eb4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f004 fef0 	bl	8008204 <USB_ReadInterrupts>
 8003424:	4603      	mov	r3, r0
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b08      	cmp	r3, #8
 800342c:	d106      	bne.n	800343c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f007 ffce 	bl	800b3d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2208      	movs	r2, #8
 800343a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f004 fedf 	bl	8008204 <USB_ReadInterrupts>
 8003446:	4603      	mov	r3, r0
 8003448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800344c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003450:	d139      	bne.n	80034c6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f005 fc7a 	bl	8008d50 <USB_HC_ReadInterrupt>
 800345c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	e025      	b.n	80034b0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d018      	beq.n	80034aa <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4413      	add	r3, r2
 8003480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800348a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800348e:	d106      	bne.n	800349e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	4619      	mov	r1, r3
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f905 	bl	80036a6 <HCD_HC_IN_IRQHandler>
 800349c:	e005      	b.n	80034aa <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	4619      	mov	r1, r3
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 ff67 	bl	8004378 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	3301      	adds	r3, #1
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	795b      	ldrb	r3, [r3, #5]
 80034b4:	461a      	mov	r2, r3
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d3d3      	bcc.n	8003464 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f004 fe9a 	bl	8008204 <USB_ReadInterrupts>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b10      	cmp	r3, #16
 80034d8:	d101      	bne.n	80034de <HAL_HCD_IRQHandler+0x1ea>
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <HAL_HCD_IRQHandler+0x1ec>
 80034de:	2300      	movs	r3, #0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d014      	beq.n	800350e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0210 	bic.w	r2, r2, #16
 80034f2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f001 fbfe 	bl	8004cf6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699a      	ldr	r2, [r3, #24]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0210 	orr.w	r2, r2, #16
 8003508:	619a      	str	r2, [r3, #24]
 800350a:	e000      	b.n	800350e <HAL_HCD_IRQHandler+0x21a>
      return;
 800350c:	bf00      	nop
    }
  }
}
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_HCD_Start+0x16>
 8003526:	2302      	movs	r3, #2
 8003528:	e013      	b.n	8003552 <HAL_HCD_Start+0x3e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2101      	movs	r1, #1
 8003538:	4618      	mov	r0, r3
 800353a:	f005 f802 	bl	8008542 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f004 fcfa 	bl	8007f3c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_HCD_Stop+0x16>
 800356c:	2302      	movs	r3, #2
 800356e:	e00d      	b.n	800358c <HAL_HCD_Stop+0x32>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f005 fd55 	bl	800902c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f004 ffa4 	bl	80084ee <USB_ResetPort>
 80035a6:	4603      	mov	r3, r0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80035bc:	78fa      	ldrb	r2, [r7, #3]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	334c      	adds	r3, #76	@ 0x4c
 80035cc:	781b      	ldrb	r3, [r3, #0]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	460b      	mov	r3, r1
 80035e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	3338      	adds	r3, #56	@ 0x38
 80035f6:	681b      	ldr	r3, [r3, #0]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f004 ffe6 	bl	80085e2 <USB_GetCurrentFrame>
 8003616:	4603      	mov	r3, r0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f004 ffc1 	bl	80085b4 <USB_GetHostSpeed>
 8003632:	4603      	mov	r3, r0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	331a      	adds	r3, #26
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	331b      	adds	r3, #27
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003670:	78fa      	ldrb	r2, [r7, #3]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	3325      	adds	r3, #37	@ 0x25
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003684:	78fa      	ldrb	r2, [r7, #3]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	3324      	adds	r3, #36	@ 0x24
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b086      	sub	sp, #24
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	460b      	mov	r3, r1
 80036b0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f004 fdb0 	bl	800822a <USB_ReadChInterrupts>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d11a      	bne.n	800370a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e0:	461a      	mov	r2, r3
 80036e2:	2304      	movs	r3, #4
 80036e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80036e6:	78fa      	ldrb	r2, [r7, #3]
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	1a9b      	subs	r3, r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	334d      	adds	r3, #77	@ 0x4d
 80036f6:	2207      	movs	r2, #7
 80036f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	78fa      	ldrb	r2, [r7, #3]
 8003700:	4611      	mov	r1, r2
 8003702:	4618      	mov	r0, r3
 8003704:	f005 fb35 	bl	8008d72 <USB_HC_Halt>
 8003708:	e09e      	b.n	8003848 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f004 fd89 	bl	800822a <USB_ReadChInterrupts>
 8003718:	4603      	mov	r3, r0
 800371a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003722:	d11b      	bne.n	800375c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4413      	add	r3, r2
 800372c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003730:	461a      	mov	r2, r3
 8003732:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003736:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	334d      	adds	r3, #77	@ 0x4d
 8003748:	2208      	movs	r2, #8
 800374a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	4611      	mov	r1, r2
 8003754:	4618      	mov	r0, r3
 8003756:	f005 fb0c 	bl	8008d72 <USB_HC_Halt>
 800375a:	e075      	b.n	8003848 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f004 fd60 	bl	800822a <USB_ReadChInterrupts>
 800376a:	4603      	mov	r3, r0
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b08      	cmp	r3, #8
 8003772:	d11a      	bne.n	80037aa <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4413      	add	r3, r2
 800377c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003780:	461a      	mov	r2, r3
 8003782:	2308      	movs	r3, #8
 8003784:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003786:	78fa      	ldrb	r2, [r7, #3]
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	334d      	adds	r3, #77	@ 0x4d
 8003796:	2206      	movs	r2, #6
 8003798:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	78fa      	ldrb	r2, [r7, #3]
 80037a0:	4611      	mov	r1, r2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f005 fae5 	bl	8008d72 <USB_HC_Halt>
 80037a8:	e04e      	b.n	8003848 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	78fa      	ldrb	r2, [r7, #3]
 80037b0:	4611      	mov	r1, r2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f004 fd39 	bl	800822a <USB_ReadChInterrupts>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c2:	d11b      	bne.n	80037fc <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037d0:	461a      	mov	r2, r3
 80037d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80037d8:	78fa      	ldrb	r2, [r7, #3]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	334d      	adds	r3, #77	@ 0x4d
 80037e8:	2209      	movs	r2, #9
 80037ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	4611      	mov	r1, r2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f005 fabc 	bl	8008d72 <USB_HC_Halt>
 80037fa:	e025      	b.n	8003848 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	78fa      	ldrb	r2, [r7, #3]
 8003802:	4611      	mov	r1, r2
 8003804:	4618      	mov	r0, r3
 8003806:	f004 fd10 	bl	800822a <USB_ReadChInterrupts>
 800380a:	4603      	mov	r3, r0
 800380c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003810:	2b80      	cmp	r3, #128	@ 0x80
 8003812:	d119      	bne.n	8003848 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4413      	add	r3, r2
 800381c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003820:	461a      	mov	r2, r3
 8003822:	2380      	movs	r3, #128	@ 0x80
 8003824:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	334d      	adds	r3, #77	@ 0x4d
 8003836:	2207      	movs	r2, #7
 8003838:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	4611      	mov	r1, r2
 8003842:	4618      	mov	r0, r3
 8003844:	f005 fa95 	bl	8008d72 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	78fa      	ldrb	r2, [r7, #3]
 800384e:	4611      	mov	r1, r2
 8003850:	4618      	mov	r0, r3
 8003852:	f004 fcea 	bl	800822a <USB_ReadChInterrupts>
 8003856:	4603      	mov	r3, r0
 8003858:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800385c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003860:	d112      	bne.n	8003888 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	78fa      	ldrb	r2, [r7, #3]
 8003868:	4611      	mov	r1, r2
 800386a:	4618      	mov	r0, r3
 800386c:	f005 fa81 	bl	8008d72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4413      	add	r3, r2
 8003878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800387c:	461a      	mov	r2, r3
 800387e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003882:	6093      	str	r3, [r2, #8]
 8003884:	f000 bd75 	b.w	8004372 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	78fa      	ldrb	r2, [r7, #3]
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f004 fcca 	bl	800822a <USB_ReadChInterrupts>
 8003896:	4603      	mov	r3, r0
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b01      	cmp	r3, #1
 800389e:	f040 8128 	bne.w	8003af2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80038a2:	78fb      	ldrb	r3, [r7, #3]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ae:	461a      	mov	r2, r3
 80038b0:	2320      	movs	r3, #32
 80038b2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80038b4:	78fa      	ldrb	r2, [r7, #3]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	331b      	adds	r3, #27
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d119      	bne.n	80038fe <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	331b      	adds	r3, #27
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038de:	78fb      	ldrb	r3, [r7, #3]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	78fa      	ldrb	r2, [r7, #3]
 80038ee:	0151      	lsls	r1, r2, #5
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	440a      	add	r2, r1
 80038f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038fc:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	799b      	ldrb	r3, [r3, #6]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d01b      	beq.n	800393e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003906:	78fa      	ldrb	r2, [r7, #3]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	3330      	adds	r3, #48	@ 0x30
 8003916:	6819      	ldr	r1, [r3, #0]
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4413      	add	r3, r2
 8003920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800392a:	78fa      	ldrb	r2, [r7, #3]
 800392c:	1ac9      	subs	r1, r1, r3
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4613      	mov	r3, r2
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	1a9b      	subs	r3, r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4403      	add	r3, r0
 800393a:	3338      	adds	r3, #56	@ 0x38
 800393c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800393e:	78fa      	ldrb	r2, [r7, #3]
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	1a9b      	subs	r3, r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	440b      	add	r3, r1
 800394c:	334d      	adds	r3, #77	@ 0x4d
 800394e:	2201      	movs	r2, #1
 8003950:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003952:	78fa      	ldrb	r2, [r7, #3]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	3344      	adds	r3, #68	@ 0x44
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003966:	78fb      	ldrb	r3, [r7, #3]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4413      	add	r3, r2
 800396e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003972:	461a      	mov	r2, r3
 8003974:	2301      	movs	r3, #1
 8003976:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	3326      	adds	r3, #38	@ 0x26
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800398e:	78fa      	ldrb	r2, [r7, #3]
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	3326      	adds	r3, #38	@ 0x26
 800399e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d110      	bne.n	80039c6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f005 f9e0 	bl	8008d72 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80039b2:	78fb      	ldrb	r3, [r7, #3]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039be:	461a      	mov	r2, r3
 80039c0:	2310      	movs	r3, #16
 80039c2:	6093      	str	r3, [r2, #8]
 80039c4:	e03d      	b.n	8003a42 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80039c6:	78fa      	ldrb	r2, [r7, #3]
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	4613      	mov	r3, r2
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	1a9b      	subs	r3, r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	440b      	add	r3, r1
 80039d4:	3326      	adds	r3, #38	@ 0x26
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d00a      	beq.n	80039f2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	3326      	adds	r3, #38	@ 0x26
 80039ec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d127      	bne.n	8003a42 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80039f2:	78fb      	ldrb	r3, [r7, #3]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	0151      	lsls	r1, r2, #5
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	440a      	add	r2, r1
 8003a08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a10:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003a12:	78fa      	ldrb	r2, [r7, #3]
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	4613      	mov	r3, r2
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	440b      	add	r3, r1
 8003a20:	334c      	adds	r3, #76	@ 0x4c
 8003a22:	2201      	movs	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	334c      	adds	r3, #76	@ 0x4c
 8003a36:	781a      	ldrb	r2, [r3, #0]
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f007 fcf1 	bl	800b424 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	799b      	ldrb	r3, [r3, #6]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d13b      	bne.n	8003ac2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003a4a:	78fa      	ldrb	r2, [r7, #3]
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	1a9b      	subs	r3, r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	3338      	adds	r3, #56	@ 0x38
 8003a5a:	6819      	ldr	r1, [r3, #0]
 8003a5c:	78fa      	ldrb	r2, [r7, #3]
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4403      	add	r3, r0
 8003a6a:	3328      	adds	r3, #40	@ 0x28
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	440b      	add	r3, r1
 8003a70:	1e59      	subs	r1, r3, #1
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4403      	add	r3, r0
 8003a80:	3328      	adds	r3, #40	@ 0x28
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 8470 	beq.w	8004372 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	333c      	adds	r3, #60	@ 0x3c
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	78fa      	ldrb	r2, [r7, #3]
 8003aa6:	f083 0301 	eor.w	r3, r3, #1
 8003aaa:	b2d8      	uxtb	r0, r3
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	333c      	adds	r3, #60	@ 0x3c
 8003aba:	4602      	mov	r2, r0
 8003abc:	701a      	strb	r2, [r3, #0]
 8003abe:	f000 bc58 	b.w	8004372 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	333c      	adds	r3, #60	@ 0x3c
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	f083 0301 	eor.w	r3, r3, #1
 8003ada:	b2d8      	uxtb	r0, r3
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	333c      	adds	r3, #60	@ 0x3c
 8003aea:	4602      	mov	r2, r0
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	f000 bc40 	b.w	8004372 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	78fa      	ldrb	r2, [r7, #3]
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f004 fb95 	bl	800822a <USB_ReadChInterrupts>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f003 0320 	and.w	r3, r3, #32
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	d131      	bne.n	8003b6e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b16:	461a      	mov	r2, r3
 8003b18:	2320      	movs	r3, #32
 8003b1a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	331a      	adds	r3, #26
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	f040 841f 	bne.w	8004372 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	331b      	adds	r3, #27
 8003b44:	2201      	movs	r2, #1
 8003b46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	334d      	adds	r3, #77	@ 0x4d
 8003b58:	2203      	movs	r2, #3
 8003b5a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	4611      	mov	r1, r2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f005 f904 	bl	8008d72 <USB_HC_Halt>
 8003b6a:	f000 bc02 	b.w	8004372 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	4611      	mov	r1, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f004 fb57 	bl	800822a <USB_ReadChInterrupts>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	f040 8305 	bne.w	8004192 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b94:	461a      	mov	r2, r3
 8003b96:	2302      	movs	r3, #2
 8003b98:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003b9a:	78fa      	ldrb	r2, [r7, #3]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	334d      	adds	r3, #77	@ 0x4d
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d114      	bne.n	8003bda <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bb0:	78fa      	ldrb	r2, [r7, #3]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	334d      	adds	r3, #77	@ 0x4d
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	334c      	adds	r3, #76	@ 0x4c
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	701a      	strb	r2, [r3, #0]
 8003bd8:	e2cc      	b.n	8004174 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	334d      	adds	r3, #77	@ 0x4d
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b06      	cmp	r3, #6
 8003bee:	d114      	bne.n	8003c1a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bf0:	78fa      	ldrb	r2, [r7, #3]
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	334d      	adds	r3, #77	@ 0x4d
 8003c00:	2202      	movs	r2, #2
 8003c02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003c04:	78fa      	ldrb	r2, [r7, #3]
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	334c      	adds	r3, #76	@ 0x4c
 8003c14:	2205      	movs	r2, #5
 8003c16:	701a      	strb	r2, [r3, #0]
 8003c18:	e2ac      	b.n	8004174 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c1a:	78fa      	ldrb	r2, [r7, #3]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	334d      	adds	r3, #77	@ 0x4d
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b07      	cmp	r3, #7
 8003c2e:	d00b      	beq.n	8003c48 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003c30:	78fa      	ldrb	r2, [r7, #3]
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	1a9b      	subs	r3, r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	334d      	adds	r3, #77	@ 0x4d
 8003c40:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c42:	2b09      	cmp	r3, #9
 8003c44:	f040 80a6 	bne.w	8003d94 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c48:	78fa      	ldrb	r2, [r7, #3]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	334d      	adds	r3, #77	@ 0x4d
 8003c58:	2202      	movs	r2, #2
 8003c5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003c5c:	78fa      	ldrb	r2, [r7, #3]
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	4613      	mov	r3, r2
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	1a9b      	subs	r3, r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	3344      	adds	r3, #68	@ 0x44
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	1c59      	adds	r1, r3, #1
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	1a9b      	subs	r3, r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4403      	add	r3, r0
 8003c7c:	3344      	adds	r3, #68	@ 0x44
 8003c7e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c80:	78fa      	ldrb	r2, [r7, #3]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3344      	adds	r3, #68	@ 0x44
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d943      	bls.n	8003d1e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003c96:	78fa      	ldrb	r2, [r7, #3]
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	1a9b      	subs	r3, r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	3344      	adds	r3, #68	@ 0x44
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	331a      	adds	r3, #26
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d123      	bne.n	8003d08 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	331b      	adds	r3, #27
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003cd4:	78fa      	ldrb	r2, [r7, #3]
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	1a9b      	subs	r3, r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	331c      	adds	r3, #28
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	78fa      	ldrb	r2, [r7, #3]
 8003cf8:	0151      	lsls	r1, r2, #5
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	440a      	add	r2, r1
 8003cfe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d06:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d08:	78fa      	ldrb	r2, [r7, #3]
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	334c      	adds	r3, #76	@ 0x4c
 8003d18:	2204      	movs	r2, #4
 8003d1a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d1c:	e229      	b.n	8004172 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d1e:	78fa      	ldrb	r2, [r7, #3]
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	334c      	adds	r3, #76	@ 0x4c
 8003d2e:	2202      	movs	r2, #2
 8003d30:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d32:	78fa      	ldrb	r2, [r7, #3]
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	3326      	adds	r3, #38	@ 0x26
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00b      	beq.n	8003d60 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	3326      	adds	r3, #38	@ 0x26
 8003d58:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	f040 8209 	bne.w	8004172 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d76:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d7e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d92:	e1ee      	b.n	8004172 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003d94:	78fa      	ldrb	r2, [r7, #3]
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	334d      	adds	r3, #77	@ 0x4d
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b05      	cmp	r3, #5
 8003da8:	f040 80c8 	bne.w	8003f3c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003dac:	78fa      	ldrb	r2, [r7, #3]
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	4613      	mov	r3, r2
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	1a9b      	subs	r3, r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	334d      	adds	r3, #77	@ 0x4d
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003dc0:	78fa      	ldrb	r2, [r7, #3]
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	1a9b      	subs	r3, r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	331b      	adds	r3, #27
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	f040 81ce 	bne.w	8004174 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003dd8:	78fa      	ldrb	r2, [r7, #3]
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	1a9b      	subs	r3, r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	3326      	adds	r3, #38	@ 0x26
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d16b      	bne.n	8003ec6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003dee:	78fa      	ldrb	r2, [r7, #3]
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	4613      	mov	r3, r2
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	3348      	adds	r3, #72	@ 0x48
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	1c59      	adds	r1, r3, #1
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4403      	add	r3, r0
 8003e0e:	3348      	adds	r3, #72	@ 0x48
 8003e10:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003e12:	78fa      	ldrb	r2, [r7, #3]
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	1a9b      	subs	r3, r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	3348      	adds	r3, #72	@ 0x48
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d943      	bls.n	8003eb0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	3348      	adds	r3, #72	@ 0x48
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003e3c:	78fa      	ldrb	r2, [r7, #3]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	331b      	adds	r3, #27
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003e50:	78fa      	ldrb	r2, [r7, #3]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	1a9b      	subs	r3, r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	3344      	adds	r3, #68	@ 0x44
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d809      	bhi.n	8003e7a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003e66:	78fa      	ldrb	r2, [r7, #3]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	331c      	adds	r3, #28
 8003e76:	2201      	movs	r2, #1
 8003e78:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	78fa      	ldrb	r2, [r7, #3]
 8003e8a:	0151      	lsls	r1, r2, #5
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	440a      	add	r2, r1
 8003e90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e98:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	334c      	adds	r3, #76	@ 0x4c
 8003eaa:	2204      	movs	r2, #4
 8003eac:	701a      	strb	r2, [r3, #0]
 8003eae:	e014      	b.n	8003eda <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003eb0:	78fa      	ldrb	r2, [r7, #3]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	334c      	adds	r3, #76	@ 0x4c
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	701a      	strb	r2, [r3, #0]
 8003ec4:	e009      	b.n	8003eda <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ec6:	78fa      	ldrb	r2, [r7, #3]
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	334c      	adds	r3, #76	@ 0x4c
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	3326      	adds	r3, #38	@ 0x26
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00b      	beq.n	8003f08 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ef0:	78fa      	ldrb	r2, [r7, #3]
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	1a9b      	subs	r3, r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	3326      	adds	r3, #38	@ 0x26
 8003f00:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	f040 8136 	bne.w	8004174 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f1e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f26:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f34:	461a      	mov	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e11b      	b.n	8004174 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	334d      	adds	r3, #77	@ 0x4d
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	f040 8081 	bne.w	8004056 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f54:	78fa      	ldrb	r2, [r7, #3]
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	334d      	adds	r3, #77	@ 0x4d
 8003f64:	2202      	movs	r2, #2
 8003f66:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003f68:	78fa      	ldrb	r2, [r7, #3]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	331b      	adds	r3, #27
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	f040 80fa 	bne.w	8004174 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f80:	78fa      	ldrb	r2, [r7, #3]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	1a9b      	subs	r3, r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	334c      	adds	r3, #76	@ 0x4c
 8003f90:	2202      	movs	r2, #2
 8003f92:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	78fa      	ldrb	r2, [r7, #3]
 8003fa4:	0151      	lsls	r1, r2, #5
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	440a      	add	r2, r1
 8003faa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fb2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003fb4:	78fb      	ldrb	r3, [r7, #3]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	0151      	lsls	r1, r2, #5
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	440a      	add	r2, r1
 8003fca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003fce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fd2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	78fa      	ldrb	r2, [r7, #3]
 8003fe4:	0151      	lsls	r1, r2, #5
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	440a      	add	r2, r1
 8003fea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003fee:	f023 0320 	bic.w	r3, r3, #32
 8003ff2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ff4:	78fa      	ldrb	r2, [r7, #3]
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	1a9b      	subs	r3, r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	3326      	adds	r3, #38	@ 0x26
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800400a:	78fa      	ldrb	r2, [r7, #3]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	1a9b      	subs	r3, r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	3326      	adds	r3, #38	@ 0x26
 800401a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800401c:	2b02      	cmp	r3, #2
 800401e:	f040 80a9 	bne.w	8004174 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	4413      	add	r3, r2
 800402a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004038:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004040:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004042:	78fb      	ldrb	r3, [r7, #3]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4413      	add	r3, r2
 800404a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800404e:	461a      	mov	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	e08e      	b.n	8004174 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004056:	78fa      	ldrb	r2, [r7, #3]
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	440b      	add	r3, r1
 8004064:	334d      	adds	r3, #77	@ 0x4d
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b04      	cmp	r3, #4
 800406a:	d143      	bne.n	80040f4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800406c:	78fa      	ldrb	r2, [r7, #3]
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	4613      	mov	r3, r2
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	1a9b      	subs	r3, r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	334d      	adds	r3, #77	@ 0x4d
 800407c:	2202      	movs	r2, #2
 800407e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	334c      	adds	r3, #76	@ 0x4c
 8004090:	2202      	movs	r2, #2
 8004092:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004094:	78fa      	ldrb	r2, [r7, #3]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	3326      	adds	r3, #38	@ 0x26
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80040aa:	78fa      	ldrb	r2, [r7, #3]
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	1a9b      	subs	r3, r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	3326      	adds	r3, #38	@ 0x26
 80040ba:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d159      	bne.n	8004174 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040d6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040de:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040ec:	461a      	mov	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e03f      	b.n	8004174 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80040f4:	78fa      	ldrb	r2, [r7, #3]
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	334d      	adds	r3, #77	@ 0x4d
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b08      	cmp	r3, #8
 8004108:	d126      	bne.n	8004158 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800410a:	78fa      	ldrb	r2, [r7, #3]
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	4613      	mov	r3, r2
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	1a9b      	subs	r3, r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	440b      	add	r3, r1
 8004118:	334d      	adds	r3, #77	@ 0x4d
 800411a:	2202      	movs	r2, #2
 800411c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	3344      	adds	r3, #68	@ 0x44
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	1c59      	adds	r1, r3, #1
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4403      	add	r3, r0
 800413e:	3344      	adds	r3, #68	@ 0x44
 8004140:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	334c      	adds	r3, #76	@ 0x4c
 8004152:	2204      	movs	r2, #4
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	e00d      	b.n	8004174 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004158:	78fa      	ldrb	r2, [r7, #3]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	334d      	adds	r3, #77	@ 0x4d
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b02      	cmp	r3, #2
 800416c:	f000 8100 	beq.w	8004370 <HCD_HC_IN_IRQHandler+0xcca>
 8004170:	e000      	b.n	8004174 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004172:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004174:	78fa      	ldrb	r2, [r7, #3]
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	4613      	mov	r3, r2
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	334c      	adds	r3, #76	@ 0x4c
 8004184:	781a      	ldrb	r2, [r3, #0]
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	4619      	mov	r1, r3
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f007 f94a 	bl	800b424 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004190:	e0ef      	b.n	8004372 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	78fa      	ldrb	r2, [r7, #3]
 8004198:	4611      	mov	r1, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f004 f845 	bl	800822a <USB_ReadChInterrupts>
 80041a0:	4603      	mov	r3, r0
 80041a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a6:	2b40      	cmp	r3, #64	@ 0x40
 80041a8:	d12f      	bne.n	800420a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041b6:	461a      	mov	r2, r3
 80041b8:	2340      	movs	r3, #64	@ 0x40
 80041ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80041bc:	78fa      	ldrb	r2, [r7, #3]
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	334d      	adds	r3, #77	@ 0x4d
 80041cc:	2205      	movs	r2, #5
 80041ce:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80041d0:	78fa      	ldrb	r2, [r7, #3]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	331a      	adds	r3, #26
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d109      	bne.n	80041fa <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80041e6:	78fa      	ldrb	r2, [r7, #3]
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	4613      	mov	r3, r2
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	440b      	add	r3, r1
 80041f4:	3344      	adds	r3, #68	@ 0x44
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	78fa      	ldrb	r2, [r7, #3]
 8004200:	4611      	mov	r1, r2
 8004202:	4618      	mov	r0, r3
 8004204:	f004 fdb5 	bl	8008d72 <USB_HC_Halt>
 8004208:	e0b3      	b.n	8004372 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	4611      	mov	r1, r2
 8004212:	4618      	mov	r0, r3
 8004214:	f004 f809 	bl	800822a <USB_ReadChInterrupts>
 8004218:	4603      	mov	r3, r0
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b10      	cmp	r3, #16
 8004220:	f040 80a7 	bne.w	8004372 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004224:	78fa      	ldrb	r2, [r7, #3]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	1a9b      	subs	r3, r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	3326      	adds	r3, #38	@ 0x26
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b03      	cmp	r3, #3
 8004238:	d11b      	bne.n	8004272 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800423a:	78fa      	ldrb	r2, [r7, #3]
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	440b      	add	r3, r1
 8004248:	3344      	adds	r3, #68	@ 0x44
 800424a:	2200      	movs	r2, #0
 800424c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	334d      	adds	r3, #77	@ 0x4d
 800425e:	2204      	movs	r2, #4
 8004260:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	78fa      	ldrb	r2, [r7, #3]
 8004268:	4611      	mov	r1, r2
 800426a:	4618      	mov	r0, r3
 800426c:	f004 fd81 	bl	8008d72 <USB_HC_Halt>
 8004270:	e03f      	b.n	80042f2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004272:	78fa      	ldrb	r2, [r7, #3]
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	1a9b      	subs	r3, r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	3326      	adds	r3, #38	@ 0x26
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	3326      	adds	r3, #38	@ 0x26
 8004298:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800429a:	2b02      	cmp	r3, #2
 800429c:	d129      	bne.n	80042f2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	3344      	adds	r3, #68	@ 0x44
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	799b      	ldrb	r3, [r3, #6]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <HCD_HC_IN_IRQHandler+0xc2a>
 80042ba:	78fa      	ldrb	r2, [r7, #3]
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	1a9b      	subs	r3, r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	331b      	adds	r3, #27
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d110      	bne.n	80042f2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80042d0:	78fa      	ldrb	r2, [r7, #3]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	4613      	mov	r3, r2
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	334d      	adds	r3, #77	@ 0x4d
 80042e0:	2204      	movs	r2, #4
 80042e2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	4611      	mov	r1, r2
 80042ec:	4618      	mov	r0, r3
 80042ee:	f004 fd40 	bl	8008d72 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80042f2:	78fa      	ldrb	r2, [r7, #3]
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	1a9b      	subs	r3, r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	440b      	add	r3, r1
 8004300:	331b      	adds	r3, #27
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d129      	bne.n	800435c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004308:	78fa      	ldrb	r2, [r7, #3]
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	4613      	mov	r3, r2
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	1a9b      	subs	r3, r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	331b      	adds	r3, #27
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4413      	add	r3, r2
 8004324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	78fa      	ldrb	r2, [r7, #3]
 800432c:	0151      	lsls	r1, r2, #5
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	440a      	add	r2, r1
 8004332:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800433a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	4413      	add	r3, r2
 8004344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	0151      	lsls	r1, r2, #5
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	440a      	add	r2, r1
 8004352:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004356:	f043 0320 	orr.w	r3, r3, #32
 800435a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	4413      	add	r3, r2
 8004364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004368:	461a      	mov	r2, r3
 800436a:	2310      	movs	r3, #16
 800436c:	6093      	str	r3, [r2, #8]
 800436e:	e000      	b.n	8004372 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004370:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	78fa      	ldrb	r2, [r7, #3]
 8004394:	4611      	mov	r1, r2
 8004396:	4618      	mov	r0, r3
 8004398:	f003 ff47 	bl	800822a <USB_ReadChInterrupts>
 800439c:	4603      	mov	r3, r0
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d11b      	bne.n	80043de <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80043a6:	78fb      	ldrb	r3, [r7, #3]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043b2:	461a      	mov	r2, r3
 80043b4:	2304      	movs	r3, #4
 80043b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80043b8:	78fa      	ldrb	r2, [r7, #3]
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	4613      	mov	r3, r2
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	334d      	adds	r3, #77	@ 0x4d
 80043c8:	2207      	movs	r2, #7
 80043ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	78fa      	ldrb	r2, [r7, #3]
 80043d2:	4611      	mov	r1, r2
 80043d4:	4618      	mov	r0, r3
 80043d6:	f004 fccc 	bl	8008d72 <USB_HC_Halt>
 80043da:	f000 bc89 	b.w	8004cf0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	78fa      	ldrb	r2, [r7, #3]
 80043e4:	4611      	mov	r1, r2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f003 ff1f 	bl	800822a <USB_ReadChInterrupts>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	f040 8082 	bne.w	80044fc <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004404:	461a      	mov	r2, r3
 8004406:	2320      	movs	r3, #32
 8004408:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800440a:	78fa      	ldrb	r2, [r7, #3]
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	4613      	mov	r3, r2
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	1a9b      	subs	r3, r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	3319      	adds	r3, #25
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d124      	bne.n	800446a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004420:	78fa      	ldrb	r2, [r7, #3]
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	4613      	mov	r3, r2
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	3319      	adds	r3, #25
 8004430:	2200      	movs	r2, #0
 8004432:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004434:	78fa      	ldrb	r2, [r7, #3]
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	334c      	adds	r3, #76	@ 0x4c
 8004444:	2202      	movs	r2, #2
 8004446:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004448:	78fa      	ldrb	r2, [r7, #3]
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	334d      	adds	r3, #77	@ 0x4d
 8004458:	2203      	movs	r2, #3
 800445a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	78fa      	ldrb	r2, [r7, #3]
 8004462:	4611      	mov	r1, r2
 8004464:	4618      	mov	r0, r3
 8004466:	f004 fc84 	bl	8008d72 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800446a:	78fa      	ldrb	r2, [r7, #3]
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	1a9b      	subs	r3, r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	440b      	add	r3, r1
 8004478:	331a      	adds	r3, #26
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	f040 8437 	bne.w	8004cf0 <HCD_HC_OUT_IRQHandler+0x978>
 8004482:	78fa      	ldrb	r2, [r7, #3]
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	1a9b      	subs	r3, r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	331b      	adds	r3, #27
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	f040 842b 	bne.w	8004cf0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800449a:	78fa      	ldrb	r2, [r7, #3]
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	440b      	add	r3, r1
 80044a8:	3326      	adds	r3, #38	@ 0x26
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d009      	beq.n	80044c4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80044b0:	78fa      	ldrb	r2, [r7, #3]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	331b      	adds	r3, #27
 80044c0:	2201      	movs	r2, #1
 80044c2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80044c4:	78fa      	ldrb	r2, [r7, #3]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	334d      	adds	r3, #77	@ 0x4d
 80044d4:	2203      	movs	r2, #3
 80044d6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	4611      	mov	r1, r2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f004 fc46 	bl	8008d72 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80044e6:	78fa      	ldrb	r2, [r7, #3]
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	1a9b      	subs	r3, r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	440b      	add	r3, r1
 80044f4:	3344      	adds	r3, #68	@ 0x44
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	e3f9      	b.n	8004cf0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	78fa      	ldrb	r2, [r7, #3]
 8004502:	4611      	mov	r1, r2
 8004504:	4618      	mov	r0, r3
 8004506:	f003 fe90 	bl	800822a <USB_ReadChInterrupts>
 800450a:	4603      	mov	r3, r0
 800450c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004514:	d111      	bne.n	800453a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004516:	78fb      	ldrb	r3, [r7, #3]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	4413      	add	r3, r2
 800451e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004522:	461a      	mov	r2, r3
 8004524:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004528:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	78fa      	ldrb	r2, [r7, #3]
 8004530:	4611      	mov	r1, r2
 8004532:	4618      	mov	r0, r3
 8004534:	f004 fc1d 	bl	8008d72 <USB_HC_Halt>
 8004538:	e3da      	b.n	8004cf0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	78fa      	ldrb	r2, [r7, #3]
 8004540:	4611      	mov	r1, r2
 8004542:	4618      	mov	r0, r3
 8004544:	f003 fe71 	bl	800822a <USB_ReadChInterrupts>
 8004548:	4603      	mov	r3, r0
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b01      	cmp	r3, #1
 8004550:	d168      	bne.n	8004624 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004552:	78fa      	ldrb	r2, [r7, #3]
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	4613      	mov	r3, r2
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	1a9b      	subs	r3, r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	3344      	adds	r3, #68	@ 0x44
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	78fa      	ldrb	r2, [r7, #3]
 800456c:	4611      	mov	r1, r2
 800456e:	4618      	mov	r0, r3
 8004570:	f003 fe5b 	bl	800822a <USB_ReadChInterrupts>
 8004574:	4603      	mov	r3, r0
 8004576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800457a:	2b40      	cmp	r3, #64	@ 0x40
 800457c:	d112      	bne.n	80045a4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800457e:	78fa      	ldrb	r2, [r7, #3]
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	4613      	mov	r3, r2
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	1a9b      	subs	r3, r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	440b      	add	r3, r1
 800458c:	3319      	adds	r3, #25
 800458e:	2201      	movs	r2, #1
 8004590:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004592:	78fb      	ldrb	r3, [r7, #3]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	4413      	add	r3, r2
 800459a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800459e:	461a      	mov	r2, r3
 80045a0:	2340      	movs	r3, #64	@ 0x40
 80045a2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80045a4:	78fa      	ldrb	r2, [r7, #3]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	331b      	adds	r3, #27
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d019      	beq.n	80045ee <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	331b      	adds	r3, #27
 80045ca:	2200      	movs	r2, #0
 80045cc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80045ce:	78fb      	ldrb	r3, [r7, #3]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	0151      	lsls	r1, r2, #5
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	440a      	add	r2, r1
 80045e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80045e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ec:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80045ee:	78fb      	ldrb	r3, [r7, #3]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045fa:	461a      	mov	r2, r3
 80045fc:	2301      	movs	r3, #1
 80045fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004600:	78fa      	ldrb	r2, [r7, #3]
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	4613      	mov	r3, r2
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	1a9b      	subs	r3, r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	334d      	adds	r3, #77	@ 0x4d
 8004610:	2201      	movs	r2, #1
 8004612:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	78fa      	ldrb	r2, [r7, #3]
 800461a:	4611      	mov	r1, r2
 800461c:	4618      	mov	r0, r3
 800461e:	f004 fba8 	bl	8008d72 <USB_HC_Halt>
 8004622:	e365      	b.n	8004cf0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	78fa      	ldrb	r2, [r7, #3]
 800462a:	4611      	mov	r1, r2
 800462c:	4618      	mov	r0, r3
 800462e:	f003 fdfc 	bl	800822a <USB_ReadChInterrupts>
 8004632:	4603      	mov	r3, r0
 8004634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004638:	2b40      	cmp	r3, #64	@ 0x40
 800463a:	d139      	bne.n	80046b0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800463c:	78fa      	ldrb	r2, [r7, #3]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	1a9b      	subs	r3, r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	334d      	adds	r3, #77	@ 0x4d
 800464c:	2205      	movs	r2, #5
 800464e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	331a      	adds	r3, #26
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004666:	78fa      	ldrb	r2, [r7, #3]
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	4613      	mov	r3, r2
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	1a9b      	subs	r3, r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	3319      	adds	r3, #25
 8004676:	2201      	movs	r2, #1
 8004678:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800467a:	78fa      	ldrb	r2, [r7, #3]
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	3344      	adds	r3, #68	@ 0x44
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	78fa      	ldrb	r2, [r7, #3]
 8004694:	4611      	mov	r1, r2
 8004696:	4618      	mov	r0, r3
 8004698:	f004 fb6b 	bl	8008d72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046a8:	461a      	mov	r2, r3
 80046aa:	2340      	movs	r3, #64	@ 0x40
 80046ac:	6093      	str	r3, [r2, #8]
 80046ae:	e31f      	b.n	8004cf0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	78fa      	ldrb	r2, [r7, #3]
 80046b6:	4611      	mov	r1, r2
 80046b8:	4618      	mov	r0, r3
 80046ba:	f003 fdb6 	bl	800822a <USB_ReadChInterrupts>
 80046be:	4603      	mov	r3, r0
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d11a      	bne.n	80046fe <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046d4:	461a      	mov	r2, r3
 80046d6:	2308      	movs	r3, #8
 80046d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80046da:	78fa      	ldrb	r2, [r7, #3]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	334d      	adds	r3, #77	@ 0x4d
 80046ea:	2206      	movs	r2, #6
 80046ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	78fa      	ldrb	r2, [r7, #3]
 80046f4:	4611      	mov	r1, r2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f004 fb3b 	bl	8008d72 <USB_HC_Halt>
 80046fc:	e2f8      	b.n	8004cf0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	78fa      	ldrb	r2, [r7, #3]
 8004704:	4611      	mov	r1, r2
 8004706:	4618      	mov	r0, r3
 8004708:	f003 fd8f 	bl	800822a <USB_ReadChInterrupts>
 800470c:	4603      	mov	r3, r0
 800470e:	f003 0310 	and.w	r3, r3, #16
 8004712:	2b10      	cmp	r3, #16
 8004714:	d144      	bne.n	80047a0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	3344      	adds	r3, #68	@ 0x44
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800472a:	78fa      	ldrb	r2, [r7, #3]
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	334d      	adds	r3, #77	@ 0x4d
 800473a:	2204      	movs	r2, #4
 800473c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800473e:	78fa      	ldrb	r2, [r7, #3]
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	3319      	adds	r3, #25
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d114      	bne.n	800477e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004754:	78fa      	ldrb	r2, [r7, #3]
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	1a9b      	subs	r3, r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	3318      	adds	r3, #24
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d109      	bne.n	800477e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800476a:	78fa      	ldrb	r2, [r7, #3]
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	4613      	mov	r3, r2
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	1a9b      	subs	r3, r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	440b      	add	r3, r1
 8004778:	3319      	adds	r3, #25
 800477a:	2201      	movs	r2, #1
 800477c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	78fa      	ldrb	r2, [r7, #3]
 8004784:	4611      	mov	r1, r2
 8004786:	4618      	mov	r0, r3
 8004788:	f004 faf3 	bl	8008d72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	4413      	add	r3, r2
 8004794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004798:	461a      	mov	r2, r3
 800479a:	2310      	movs	r3, #16
 800479c:	6093      	str	r3, [r2, #8]
 800479e:	e2a7      	b.n	8004cf0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	78fa      	ldrb	r2, [r7, #3]
 80047a6:	4611      	mov	r1, r2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f003 fd3e 	bl	800822a <USB_ReadChInterrupts>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b4:	2b80      	cmp	r3, #128	@ 0x80
 80047b6:	f040 8083 	bne.w	80048c0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	799b      	ldrb	r3, [r3, #6]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d111      	bne.n	80047e6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80047c2:	78fa      	ldrb	r2, [r7, #3]
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	4613      	mov	r3, r2
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	440b      	add	r3, r1
 80047d0:	334d      	adds	r3, #77	@ 0x4d
 80047d2:	2207      	movs	r2, #7
 80047d4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	78fa      	ldrb	r2, [r7, #3]
 80047dc:	4611      	mov	r1, r2
 80047de:	4618      	mov	r0, r3
 80047e0:	f004 fac7 	bl	8008d72 <USB_HC_Halt>
 80047e4:	e062      	b.n	80048ac <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80047e6:	78fa      	ldrb	r2, [r7, #3]
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	3344      	adds	r3, #68	@ 0x44
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	1c59      	adds	r1, r3, #1
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4403      	add	r3, r0
 8004806:	3344      	adds	r3, #68	@ 0x44
 8004808:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800480a:	78fa      	ldrb	r2, [r7, #3]
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	4613      	mov	r3, r2
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	3344      	adds	r3, #68	@ 0x44
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d922      	bls.n	8004866 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	3344      	adds	r3, #68	@ 0x44
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004834:	78fa      	ldrb	r2, [r7, #3]
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	334c      	adds	r3, #76	@ 0x4c
 8004844:	2204      	movs	r2, #4
 8004846:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004848:	78fa      	ldrb	r2, [r7, #3]
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	4613      	mov	r3, r2
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	1a9b      	subs	r3, r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	334c      	adds	r3, #76	@ 0x4c
 8004858:	781a      	ldrb	r2, [r3, #0]
 800485a:	78fb      	ldrb	r3, [r7, #3]
 800485c:	4619      	mov	r1, r3
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f006 fde0 	bl	800b424 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004864:	e022      	b.n	80048ac <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004866:	78fa      	ldrb	r2, [r7, #3]
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	4613      	mov	r3, r2
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	1a9b      	subs	r3, r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	334c      	adds	r3, #76	@ 0x4c
 8004876:	2202      	movs	r2, #2
 8004878:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800487a:	78fb      	ldrb	r3, [r7, #3]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	4413      	add	r3, r2
 8004882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004890:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004898:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048a6:	461a      	mov	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048b8:	461a      	mov	r2, r3
 80048ba:	2380      	movs	r3, #128	@ 0x80
 80048bc:	6093      	str	r3, [r2, #8]
 80048be:	e217      	b.n	8004cf0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	78fa      	ldrb	r2, [r7, #3]
 80048c6:	4611      	mov	r1, r2
 80048c8:	4618      	mov	r0, r3
 80048ca:	f003 fcae 	bl	800822a <USB_ReadChInterrupts>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048d8:	d11b      	bne.n	8004912 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80048da:	78fa      	ldrb	r2, [r7, #3]
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	334d      	adds	r3, #77	@ 0x4d
 80048ea:	2209      	movs	r2, #9
 80048ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	78fa      	ldrb	r2, [r7, #3]
 80048f4:	4611      	mov	r1, r2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f004 fa3b 	bl	8008d72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4413      	add	r3, r2
 8004904:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004908:	461a      	mov	r2, r3
 800490a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800490e:	6093      	str	r3, [r2, #8]
 8004910:	e1ee      	b.n	8004cf0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	78fa      	ldrb	r2, [r7, #3]
 8004918:	4611      	mov	r1, r2
 800491a:	4618      	mov	r0, r3
 800491c:	f003 fc85 	bl	800822a <USB_ReadChInterrupts>
 8004920:	4603      	mov	r3, r0
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b02      	cmp	r3, #2
 8004928:	f040 81df 	bne.w	8004cea <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	4413      	add	r3, r2
 8004934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004938:	461a      	mov	r2, r3
 800493a:	2302      	movs	r3, #2
 800493c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	334d      	adds	r3, #77	@ 0x4d
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b01      	cmp	r3, #1
 8004952:	f040 8093 	bne.w	8004a7c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004956:	78fa      	ldrb	r2, [r7, #3]
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	4613      	mov	r3, r2
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	334d      	adds	r3, #77	@ 0x4d
 8004966:	2202      	movs	r2, #2
 8004968:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800496a:	78fa      	ldrb	r2, [r7, #3]
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	1a9b      	subs	r3, r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	440b      	add	r3, r1
 8004978:	334c      	adds	r3, #76	@ 0x4c
 800497a:	2201      	movs	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800497e:	78fa      	ldrb	r2, [r7, #3]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	3326      	adds	r3, #38	@ 0x26
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2b02      	cmp	r3, #2
 8004992:	d00b      	beq.n	80049ac <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004994:	78fa      	ldrb	r2, [r7, #3]
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4613      	mov	r3, r2
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	3326      	adds	r3, #38	@ 0x26
 80049a4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	f040 8190 	bne.w	8004ccc <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	799b      	ldrb	r3, [r3, #6]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d115      	bne.n	80049e0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80049b4:	78fa      	ldrb	r2, [r7, #3]
 80049b6:	6879      	ldr	r1, [r7, #4]
 80049b8:	4613      	mov	r3, r2
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	1a9b      	subs	r3, r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	333d      	adds	r3, #61	@ 0x3d
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	78fa      	ldrb	r2, [r7, #3]
 80049c8:	f083 0301 	eor.w	r3, r3, #1
 80049cc:	b2d8      	uxtb	r0, r3
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	4613      	mov	r3, r2
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	1a9b      	subs	r3, r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	333d      	adds	r3, #61	@ 0x3d
 80049dc:	4602      	mov	r2, r0
 80049de:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	799b      	ldrb	r3, [r3, #6]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	f040 8171 	bne.w	8004ccc <HCD_HC_OUT_IRQHandler+0x954>
 80049ea:	78fa      	ldrb	r2, [r7, #3]
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	3334      	adds	r3, #52	@ 0x34
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 8165 	beq.w	8004ccc <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	3334      	adds	r3, #52	@ 0x34
 8004a12:	6819      	ldr	r1, [r3, #0]
 8004a14:	78fa      	ldrb	r2, [r7, #3]
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	1a9b      	subs	r3, r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4403      	add	r3, r0
 8004a22:	3328      	adds	r3, #40	@ 0x28
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	440b      	add	r3, r1
 8004a28:	1e59      	subs	r1, r3, #1
 8004a2a:	78fa      	ldrb	r2, [r7, #3]
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4403      	add	r3, r0
 8004a38:	3328      	adds	r3, #40	@ 0x28
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a40:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 813f 	beq.w	8004ccc <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004a4e:	78fa      	ldrb	r2, [r7, #3]
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	4613      	mov	r3, r2
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	1a9b      	subs	r3, r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	333d      	adds	r3, #61	@ 0x3d
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	78fa      	ldrb	r2, [r7, #3]
 8004a62:	f083 0301 	eor.w	r3, r3, #1
 8004a66:	b2d8      	uxtb	r0, r3
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	1a9b      	subs	r3, r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	440b      	add	r3, r1
 8004a74:	333d      	adds	r3, #61	@ 0x3d
 8004a76:	4602      	mov	r2, r0
 8004a78:	701a      	strb	r2, [r3, #0]
 8004a7a:	e127      	b.n	8004ccc <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004a7c:	78fa      	ldrb	r2, [r7, #3]
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	334d      	adds	r3, #77	@ 0x4d
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d120      	bne.n	8004ad4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a92:	78fa      	ldrb	r2, [r7, #3]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	334d      	adds	r3, #77	@ 0x4d
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004aa6:	78fa      	ldrb	r2, [r7, #3]
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	1a9b      	subs	r3, r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	331b      	adds	r3, #27
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	f040 8107 	bne.w	8004ccc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004abe:	78fa      	ldrb	r2, [r7, #3]
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	334c      	adds	r3, #76	@ 0x4c
 8004ace:	2202      	movs	r2, #2
 8004ad0:	701a      	strb	r2, [r3, #0]
 8004ad2:	e0fb      	b.n	8004ccc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004ad4:	78fa      	ldrb	r2, [r7, #3]
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	1a9b      	subs	r3, r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	334d      	adds	r3, #77	@ 0x4d
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d13a      	bne.n	8004b60 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004aea:	78fa      	ldrb	r2, [r7, #3]
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	1a9b      	subs	r3, r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	440b      	add	r3, r1
 8004af8:	334d      	adds	r3, #77	@ 0x4d
 8004afa:	2202      	movs	r2, #2
 8004afc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004afe:	78fa      	ldrb	r2, [r7, #3]
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	334c      	adds	r3, #76	@ 0x4c
 8004b0e:	2202      	movs	r2, #2
 8004b10:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004b12:	78fa      	ldrb	r2, [r7, #3]
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	1a9b      	subs	r3, r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	331b      	adds	r3, #27
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	f040 80d1 	bne.w	8004ccc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004b2a:	78fa      	ldrb	r2, [r7, #3]
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	331b      	adds	r3, #27
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004b3e:	78fb      	ldrb	r3, [r7, #3]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	78fa      	ldrb	r2, [r7, #3]
 8004b4e:	0151      	lsls	r1, r2, #5
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	440a      	add	r2, r1
 8004b54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b5c:	6053      	str	r3, [r2, #4]
 8004b5e:	e0b5      	b.n	8004ccc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004b60:	78fa      	ldrb	r2, [r7, #3]
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	1a9b      	subs	r3, r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	334d      	adds	r3, #77	@ 0x4d
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b05      	cmp	r3, #5
 8004b74:	d114      	bne.n	8004ba0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b76:	78fa      	ldrb	r2, [r7, #3]
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	1a9b      	subs	r3, r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	440b      	add	r3, r1
 8004b84:	334d      	adds	r3, #77	@ 0x4d
 8004b86:	2202      	movs	r2, #2
 8004b88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004b8a:	78fa      	ldrb	r2, [r7, #3]
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	1a9b      	subs	r3, r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	440b      	add	r3, r1
 8004b98:	334c      	adds	r3, #76	@ 0x4c
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	701a      	strb	r2, [r3, #0]
 8004b9e:	e095      	b.n	8004ccc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004ba0:	78fa      	ldrb	r2, [r7, #3]
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	1a9b      	subs	r3, r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	334d      	adds	r3, #77	@ 0x4d
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b06      	cmp	r3, #6
 8004bb4:	d114      	bne.n	8004be0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004bb6:	78fa      	ldrb	r2, [r7, #3]
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	1a9b      	subs	r3, r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	440b      	add	r3, r1
 8004bc4:	334d      	adds	r3, #77	@ 0x4d
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004bca:	78fa      	ldrb	r2, [r7, #3]
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	1a9b      	subs	r3, r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	440b      	add	r3, r1
 8004bd8:	334c      	adds	r3, #76	@ 0x4c
 8004bda:	2205      	movs	r2, #5
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	e075      	b.n	8004ccc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004be0:	78fa      	ldrb	r2, [r7, #3]
 8004be2:	6879      	ldr	r1, [r7, #4]
 8004be4:	4613      	mov	r3, r2
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	1a9b      	subs	r3, r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	440b      	add	r3, r1
 8004bee:	334d      	adds	r3, #77	@ 0x4d
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b07      	cmp	r3, #7
 8004bf4:	d00a      	beq.n	8004c0c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004bf6:	78fa      	ldrb	r2, [r7, #3]
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	011b      	lsls	r3, r3, #4
 8004bfe:	1a9b      	subs	r3, r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	440b      	add	r3, r1
 8004c04:	334d      	adds	r3, #77	@ 0x4d
 8004c06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004c08:	2b09      	cmp	r3, #9
 8004c0a:	d170      	bne.n	8004cee <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c0c:	78fa      	ldrb	r2, [r7, #3]
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	1a9b      	subs	r3, r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	334d      	adds	r3, #77	@ 0x4d
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004c20:	78fa      	ldrb	r2, [r7, #3]
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	4613      	mov	r3, r2
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	1a9b      	subs	r3, r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	3344      	adds	r3, #68	@ 0x44
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	1c59      	adds	r1, r3, #1
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	4613      	mov	r3, r2
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	1a9b      	subs	r3, r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4403      	add	r3, r0
 8004c40:	3344      	adds	r3, #68	@ 0x44
 8004c42:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004c44:	78fa      	ldrb	r2, [r7, #3]
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	1a9b      	subs	r3, r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	440b      	add	r3, r1
 8004c52:	3344      	adds	r3, #68	@ 0x44
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d914      	bls.n	8004c84 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	3344      	adds	r3, #68	@ 0x44
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c6e:	78fa      	ldrb	r2, [r7, #3]
 8004c70:	6879      	ldr	r1, [r7, #4]
 8004c72:	4613      	mov	r3, r2
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	1a9b      	subs	r3, r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	440b      	add	r3, r1
 8004c7c:	334c      	adds	r3, #76	@ 0x4c
 8004c7e:	2204      	movs	r2, #4
 8004c80:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004c82:	e022      	b.n	8004cca <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c84:	78fa      	ldrb	r2, [r7, #3]
 8004c86:	6879      	ldr	r1, [r7, #4]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	1a9b      	subs	r3, r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	334c      	adds	r3, #76	@ 0x4c
 8004c94:	2202      	movs	r2, #2
 8004c96:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c98:	78fb      	ldrb	r3, [r7, #3]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004cae:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004cb6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004cca:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004ccc:	78fa      	ldrb	r2, [r7, #3]
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	1a9b      	subs	r3, r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	334c      	adds	r3, #76	@ 0x4c
 8004cdc:	781a      	ldrb	r2, [r3, #0]
 8004cde:	78fb      	ldrb	r3, [r7, #3]
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f006 fb9e 	bl	800b424 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004ce8:	e002      	b.n	8004cf0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004cea:	bf00      	nop
 8004cec:	e000      	b.n	8004cf0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004cee:	bf00      	nop
  }
}
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b08a      	sub	sp, #40	@ 0x28
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d06:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	0c5b      	lsrs	r3, r3, #17
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d2a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d004      	beq.n	8004d3c <HCD_RXQLVL_IRQHandler+0x46>
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2b05      	cmp	r3, #5
 8004d36:	f000 80b6 	beq.w	8004ea6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004d3a:	e0b7      	b.n	8004eac <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 80b3 	beq.w	8004eaa <HCD_RXQLVL_IRQHandler+0x1b4>
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	1a9b      	subs	r3, r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	332c      	adds	r3, #44	@ 0x2c
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 80a7 	beq.w	8004eaa <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	4613      	mov	r3, r2
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	1a9b      	subs	r3, r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	440b      	add	r3, r1
 8004d6a:	3338      	adds	r3, #56	@ 0x38
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	18d1      	adds	r1, r2, r3
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	4613      	mov	r3, r2
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	1a9b      	subs	r3, r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4403      	add	r3, r0
 8004d80:	3334      	adds	r3, #52	@ 0x34
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4299      	cmp	r1, r3
 8004d86:	f200 8083 	bhi.w	8004e90 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	4613      	mov	r3, r2
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	332c      	adds	r3, #44	@ 0x2c
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	b292      	uxth	r2, r2
 8004da4:	4619      	mov	r1, r3
 8004da6:	f003 f9d5 	bl	8008154 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4613      	mov	r3, r2
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	1a9b      	subs	r3, r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	332c      	adds	r3, #44	@ 0x2c
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	18d1      	adds	r1, r2, r3
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	1a9b      	subs	r3, r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4403      	add	r3, r0
 8004dce:	332c      	adds	r3, #44	@ 0x2c
 8004dd0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	1a9b      	subs	r3, r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	440b      	add	r3, r1
 8004de0:	3338      	adds	r3, #56	@ 0x38
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	18d1      	adds	r1, r2, r3
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	4613      	mov	r3, r2
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	1a9b      	subs	r3, r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4403      	add	r3, r0
 8004df6:	3338      	adds	r3, #56	@ 0x38
 8004df8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	0cdb      	lsrs	r3, r3, #19
 8004e0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e0e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	4613      	mov	r3, r2
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	3328      	adds	r3, #40	@ 0x28
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d13f      	bne.n	8004eaa <HCD_RXQLVL_IRQHandler+0x1b4>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d03c      	beq.n	8004eaa <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004e46:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004e4e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	4613      	mov	r3, r2
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	1a9b      	subs	r3, r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	333c      	adds	r3, #60	@ 0x3c
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	f083 0301 	eor.w	r3, r3, #1
 8004e78:	b2d8      	uxtb	r0, r3
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	1a9b      	subs	r3, r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	333c      	adds	r3, #60	@ 0x3c
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	701a      	strb	r2, [r3, #0]
      break;
 8004e8e:	e00c      	b.n	8004eaa <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	4613      	mov	r3, r2
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	1a9b      	subs	r3, r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	334c      	adds	r3, #76	@ 0x4c
 8004ea0:	2204      	movs	r2, #4
 8004ea2:	701a      	strb	r2, [r3, #0]
      break;
 8004ea4:	e001      	b.n	8004eaa <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004ea6:	bf00      	nop
 8004ea8:	e000      	b.n	8004eac <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004eaa:	bf00      	nop
  }
}
 8004eac:	bf00      	nop
 8004eae:	3728      	adds	r7, #40	@ 0x28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004ee0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d10b      	bne.n	8004f04 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d102      	bne.n	8004efc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f006 fa78 	bl	800b3ec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f043 0302 	orr.w	r3, r3, #2
 8004f02:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d132      	bne.n	8004f74 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f043 0308 	orr.w	r3, r3, #8
 8004f14:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d126      	bne.n	8004f6e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	7a5b      	ldrb	r3, [r3, #9]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d113      	bne.n	8004f50 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004f2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f32:	d106      	bne.n	8004f42 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2102      	movs	r1, #2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f003 fa9a 	bl	8008474 <USB_InitFSLSPClkSel>
 8004f40:	e011      	b.n	8004f66 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2101      	movs	r1, #1
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f003 fa93 	bl	8008474 <USB_InitFSLSPClkSel>
 8004f4e:	e00a      	b.n	8004f66 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	79db      	ldrb	r3, [r3, #7]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d106      	bne.n	8004f66 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004f64:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f006 fa6a 	bl	800b440 <HAL_HCD_PortEnabled_Callback>
 8004f6c:	e002      	b.n	8004f74 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f006 fa74 	bl	800b45c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d103      	bne.n	8004f86 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f043 0320 	orr.w	r3, r3, #32
 8004f84:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	6013      	str	r3, [r2, #0]
}
 8004f92:	bf00      	nop
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
	...

08004f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e12b      	b.n	8005206 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fc f866 	bl	8001094 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2224      	movs	r2, #36	@ 0x24
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0201 	bic.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ffe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005000:	f001 fa20 	bl	8006444 <HAL_RCC_GetPCLK1Freq>
 8005004:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	4a81      	ldr	r2, [pc, #516]	@ (8005210 <HAL_I2C_Init+0x274>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d807      	bhi.n	8005020 <HAL_I2C_Init+0x84>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4a80      	ldr	r2, [pc, #512]	@ (8005214 <HAL_I2C_Init+0x278>)
 8005014:	4293      	cmp	r3, r2
 8005016:	bf94      	ite	ls
 8005018:	2301      	movls	r3, #1
 800501a:	2300      	movhi	r3, #0
 800501c:	b2db      	uxtb	r3, r3
 800501e:	e006      	b.n	800502e <HAL_I2C_Init+0x92>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4a7d      	ldr	r2, [pc, #500]	@ (8005218 <HAL_I2C_Init+0x27c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	bf94      	ite	ls
 8005028:	2301      	movls	r3, #1
 800502a:	2300      	movhi	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e0e7      	b.n	8005206 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4a78      	ldr	r2, [pc, #480]	@ (800521c <HAL_I2C_Init+0x280>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	0c9b      	lsrs	r3, r3, #18
 8005040:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	4a6a      	ldr	r2, [pc, #424]	@ (8005210 <HAL_I2C_Init+0x274>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d802      	bhi.n	8005070 <HAL_I2C_Init+0xd4>
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	3301      	adds	r3, #1
 800506e:	e009      	b.n	8005084 <HAL_I2C_Init+0xe8>
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	4a69      	ldr	r2, [pc, #420]	@ (8005220 <HAL_I2C_Init+0x284>)
 800507c:	fba2 2303 	umull	r2, r3, r2, r3
 8005080:	099b      	lsrs	r3, r3, #6
 8005082:	3301      	adds	r3, #1
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6812      	ldr	r2, [r2, #0]
 8005088:	430b      	orrs	r3, r1
 800508a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005096:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	495c      	ldr	r1, [pc, #368]	@ (8005210 <HAL_I2C_Init+0x274>)
 80050a0:	428b      	cmp	r3, r1
 80050a2:	d819      	bhi.n	80050d8 <HAL_I2C_Init+0x13c>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	1e59      	subs	r1, r3, #1
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80050b2:	1c59      	adds	r1, r3, #1
 80050b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80050b8:	400b      	ands	r3, r1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <HAL_I2C_Init+0x138>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	1e59      	subs	r1, r3, #1
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80050cc:	3301      	adds	r3, #1
 80050ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050d2:	e051      	b.n	8005178 <HAL_I2C_Init+0x1dc>
 80050d4:	2304      	movs	r3, #4
 80050d6:	e04f      	b.n	8005178 <HAL_I2C_Init+0x1dc>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d111      	bne.n	8005104 <HAL_I2C_Init+0x168>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	1e58      	subs	r0, r3, #1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6859      	ldr	r1, [r3, #4]
 80050e8:	460b      	mov	r3, r1
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	440b      	add	r3, r1
 80050ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80050f2:	3301      	adds	r3, #1
 80050f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	bf0c      	ite	eq
 80050fc:	2301      	moveq	r3, #1
 80050fe:	2300      	movne	r3, #0
 8005100:	b2db      	uxtb	r3, r3
 8005102:	e012      	b.n	800512a <HAL_I2C_Init+0x18e>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	1e58      	subs	r0, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6859      	ldr	r1, [r3, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	0099      	lsls	r1, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	fbb0 f3f3 	udiv	r3, r0, r3
 800511a:	3301      	adds	r3, #1
 800511c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005120:	2b00      	cmp	r3, #0
 8005122:	bf0c      	ite	eq
 8005124:	2301      	moveq	r3, #1
 8005126:	2300      	movne	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <HAL_I2C_Init+0x196>
 800512e:	2301      	movs	r3, #1
 8005130:	e022      	b.n	8005178 <HAL_I2C_Init+0x1dc>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10e      	bne.n	8005158 <HAL_I2C_Init+0x1bc>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	1e58      	subs	r0, r3, #1
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6859      	ldr	r1, [r3, #4]
 8005142:	460b      	mov	r3, r1
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	440b      	add	r3, r1
 8005148:	fbb0 f3f3 	udiv	r3, r0, r3
 800514c:	3301      	adds	r3, #1
 800514e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005152:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005156:	e00f      	b.n	8005178 <HAL_I2C_Init+0x1dc>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1e58      	subs	r0, r3, #1
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6859      	ldr	r1, [r3, #4]
 8005160:	460b      	mov	r3, r1
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	0099      	lsls	r1, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	fbb0 f3f3 	udiv	r3, r0, r3
 800516e:	3301      	adds	r3, #1
 8005170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005174:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	6809      	ldr	r1, [r1, #0]
 800517c:	4313      	orrs	r3, r2
 800517e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69da      	ldr	r2, [r3, #28]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80051a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6911      	ldr	r1, [r2, #16]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	68d2      	ldr	r2, [r2, #12]
 80051b2:	4311      	orrs	r1, r2
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6812      	ldr	r2, [r2, #0]
 80051b8:	430b      	orrs	r3, r1
 80051ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695a      	ldr	r2, [r3, #20]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	000186a0 	.word	0x000186a0
 8005214:	001e847f 	.word	0x001e847f
 8005218:	003d08ff 	.word	0x003d08ff
 800521c:	431bde83 	.word	0x431bde83
 8005220:	10624dd3 	.word	0x10624dd3

08005224 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e128      	b.n	8005488 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d109      	bne.n	8005256 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a90      	ldr	r2, [pc, #576]	@ (8005490 <HAL_I2S_Init+0x26c>)
 800524e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7fb ff67 	bl	8001124 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2202      	movs	r2, #2
 800525a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800526c:	f023 030f 	bic.w	r3, r3, #15
 8005270:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2202      	movs	r2, #2
 8005278:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	2b02      	cmp	r3, #2
 8005280:	d060      	beq.n	8005344 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d102      	bne.n	8005290 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800528a:	2310      	movs	r3, #16
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	e001      	b.n	8005294 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005290:	2320      	movs	r3, #32
 8005292:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b20      	cmp	r3, #32
 800529a:	d802      	bhi.n	80052a2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80052a2:	2001      	movs	r0, #1
 80052a4:	f001 f9c4 	bl	8006630 <HAL_RCCEx_GetPeriphCLKFreq>
 80052a8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052b2:	d125      	bne.n	8005300 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d010      	beq.n	80052de <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80052c6:	4613      	mov	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	461a      	mov	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d8:	3305      	adds	r3, #5
 80052da:	613b      	str	r3, [r7, #16]
 80052dc:	e01f      	b.n	800531e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80052e8:	4613      	mov	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	461a      	mov	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fa:	3305      	adds	r3, #5
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	e00e      	b.n	800531e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	fbb2 f2f3 	udiv	r2, r2, r3
 8005308:	4613      	mov	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	461a      	mov	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	fbb2 f3f3 	udiv	r3, r2, r3
 800531a:	3305      	adds	r3, #5
 800531c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	4a5c      	ldr	r2, [pc, #368]	@ (8005494 <HAL_I2S_Init+0x270>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	08db      	lsrs	r3, r3, #3
 8005328:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	085b      	lsrs	r3, r3, #1
 800533a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	021b      	lsls	r3, r3, #8
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	e003      	b.n	800534c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005344:	2302      	movs	r3, #2
 8005346:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d902      	bls.n	8005358 <HAL_I2S_Init+0x134>
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	2bff      	cmp	r3, #255	@ 0xff
 8005356:	d907      	bls.n	8005368 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535c:	f043 0210 	orr.w	r2, r3, #16
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e08f      	b.n	8005488 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	ea42 0103 	orr.w	r1, r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	430a      	orrs	r2, r1
 800537a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005386:	f023 030f 	bic.w	r3, r3, #15
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6851      	ldr	r1, [r2, #4]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6892      	ldr	r2, [r2, #8]
 8005392:	4311      	orrs	r1, r2
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	68d2      	ldr	r2, [r2, #12]
 8005398:	4311      	orrs	r1, r2
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6992      	ldr	r2, [r2, #24]
 800539e:	430a      	orrs	r2, r1
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053aa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d161      	bne.n	8005478 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a38      	ldr	r2, [pc, #224]	@ (8005498 <HAL_I2S_Init+0x274>)
 80053b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a37      	ldr	r2, [pc, #220]	@ (800549c <HAL_I2S_Init+0x278>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d101      	bne.n	80053c8 <HAL_I2S_Init+0x1a4>
 80053c4:	4b36      	ldr	r3, [pc, #216]	@ (80054a0 <HAL_I2S_Init+0x27c>)
 80053c6:	e001      	b.n	80053cc <HAL_I2S_Init+0x1a8>
 80053c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	4932      	ldr	r1, [pc, #200]	@ (800549c <HAL_I2S_Init+0x278>)
 80053d4:	428a      	cmp	r2, r1
 80053d6:	d101      	bne.n	80053dc <HAL_I2S_Init+0x1b8>
 80053d8:	4a31      	ldr	r2, [pc, #196]	@ (80054a0 <HAL_I2S_Init+0x27c>)
 80053da:	e001      	b.n	80053e0 <HAL_I2S_Init+0x1bc>
 80053dc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80053e0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80053e4:	f023 030f 	bic.w	r3, r3, #15
 80053e8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a2b      	ldr	r2, [pc, #172]	@ (800549c <HAL_I2S_Init+0x278>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d101      	bne.n	80053f8 <HAL_I2S_Init+0x1d4>
 80053f4:	4b2a      	ldr	r3, [pc, #168]	@ (80054a0 <HAL_I2S_Init+0x27c>)
 80053f6:	e001      	b.n	80053fc <HAL_I2S_Init+0x1d8>
 80053f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053fc:	2202      	movs	r2, #2
 80053fe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a25      	ldr	r2, [pc, #148]	@ (800549c <HAL_I2S_Init+0x278>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d101      	bne.n	800540e <HAL_I2S_Init+0x1ea>
 800540a:	4b25      	ldr	r3, [pc, #148]	@ (80054a0 <HAL_I2S_Init+0x27c>)
 800540c:	e001      	b.n	8005412 <HAL_I2S_Init+0x1ee>
 800540e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800541e:	d003      	beq.n	8005428 <HAL_I2S_Init+0x204>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d103      	bne.n	8005430 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005428:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800542c:	613b      	str	r3, [r7, #16]
 800542e:	e001      	b.n	8005434 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005430:	2300      	movs	r3, #0
 8005432:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800543e:	4313      	orrs	r3, r2
 8005440:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005448:	4313      	orrs	r3, r2
 800544a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005452:	4313      	orrs	r3, r2
 8005454:	b29a      	uxth	r2, r3
 8005456:	897b      	ldrh	r3, [r7, #10]
 8005458:	4313      	orrs	r3, r2
 800545a:	b29b      	uxth	r3, r3
 800545c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005460:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a0d      	ldr	r2, [pc, #52]	@ (800549c <HAL_I2S_Init+0x278>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d101      	bne.n	8005470 <HAL_I2S_Init+0x24c>
 800546c:	4b0c      	ldr	r3, [pc, #48]	@ (80054a0 <HAL_I2S_Init+0x27c>)
 800546e:	e001      	b.n	8005474 <HAL_I2S_Init+0x250>
 8005470:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005474:	897a      	ldrh	r2, [r7, #10]
 8005476:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3720      	adds	r7, #32
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	0800559b 	.word	0x0800559b
 8005494:	cccccccd 	.word	0xcccccccd
 8005498:	080056b1 	.word	0x080056b1
 800549c:	40003800 	.word	0x40003800
 80054a0:	40003400 	.word	0x40003400

080054a4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ec:	881a      	ldrh	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f8:	1c9a      	adds	r2, r3, #2
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005510:	b29b      	uxth	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10e      	bne.n	8005534 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005524:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7ff ffb8 	bl	80054a4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005534:	bf00      	nop
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554e:	b292      	uxth	r2, r2
 8005550:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005556:	1c9a      	adds	r2, r3, #2
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005560:	b29b      	uxth	r3, r3
 8005562:	3b01      	subs	r3, #1
 8005564:	b29a      	uxth	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800556e:	b29b      	uxth	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10e      	bne.n	8005592 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005582:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff ff93 	bl	80054b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b086      	sub	sp, #24
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d13a      	bne.n	800562c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d109      	bne.n	80055d4 <I2S_IRQHandler+0x3a>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ca:	2b40      	cmp	r3, #64	@ 0x40
 80055cc:	d102      	bne.n	80055d4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff ffb4 	bl	800553c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055da:	2b40      	cmp	r3, #64	@ 0x40
 80055dc:	d126      	bne.n	800562c <I2S_IRQHandler+0x92>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f003 0320 	and.w	r3, r3, #32
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	d11f      	bne.n	800562c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80055fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80055fc:	2300      	movs	r3, #0
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	613b      	str	r3, [r7, #16]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	613b      	str	r3, [r7, #16]
 8005610:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561e:	f043 0202 	orr.w	r2, r3, #2
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff ff50 	bl	80054cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b03      	cmp	r3, #3
 8005636:	d136      	bne.n	80056a6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b02      	cmp	r3, #2
 8005640:	d109      	bne.n	8005656 <I2S_IRQHandler+0xbc>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800564c:	2b80      	cmp	r3, #128	@ 0x80
 800564e:	d102      	bne.n	8005656 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff ff45 	bl	80054e0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f003 0308 	and.w	r3, r3, #8
 800565c:	2b08      	cmp	r3, #8
 800565e:	d122      	bne.n	80056a6 <I2S_IRQHandler+0x10c>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b20      	cmp	r3, #32
 800566c:	d11b      	bne.n	80056a6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800567c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005698:	f043 0204 	orr.w	r2, r3, #4
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff ff13 	bl	80054cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80056a6:	bf00      	nop
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a92      	ldr	r2, [pc, #584]	@ (8005910 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d101      	bne.n	80056ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80056ca:	4b92      	ldr	r3, [pc, #584]	@ (8005914 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056cc:	e001      	b.n	80056d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80056ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a8b      	ldr	r2, [pc, #556]	@ (8005910 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d101      	bne.n	80056ec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80056e8:	4b8a      	ldr	r3, [pc, #552]	@ (8005914 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056ea:	e001      	b.n	80056f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80056ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056fc:	d004      	beq.n	8005708 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	f040 8099 	bne.w	800583a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b02      	cmp	r3, #2
 8005710:	d107      	bne.n	8005722 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f925 	bl	800596c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b01      	cmp	r3, #1
 800572a:	d107      	bne.n	800573c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f9c8 	bl	8005acc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005742:	2b40      	cmp	r3, #64	@ 0x40
 8005744:	d13a      	bne.n	80057bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b00      	cmp	r3, #0
 800574e:	d035      	beq.n	80057bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a6e      	ldr	r2, [pc, #440]	@ (8005910 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d101      	bne.n	800575e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800575a:	4b6e      	ldr	r3, [pc, #440]	@ (8005914 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800575c:	e001      	b.n	8005762 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800575e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4969      	ldr	r1, [pc, #420]	@ (8005910 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800576a:	428b      	cmp	r3, r1
 800576c:	d101      	bne.n	8005772 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800576e:	4b69      	ldr	r3, [pc, #420]	@ (8005914 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005770:	e001      	b.n	8005776 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005772:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005776:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800577a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800578a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800578c:	2300      	movs	r3, #0
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ae:	f043 0202 	orr.w	r2, r3, #2
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff fe88 	bl	80054cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	f003 0308 	and.w	r3, r3, #8
 80057c2:	2b08      	cmp	r3, #8
 80057c4:	f040 80c3 	bne.w	800594e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f003 0320 	and.w	r3, r3, #32
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 80bd 	beq.w	800594e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80057e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a49      	ldr	r2, [pc, #292]	@ (8005910 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d101      	bne.n	80057f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80057ee:	4b49      	ldr	r3, [pc, #292]	@ (8005914 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057f0:	e001      	b.n	80057f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80057f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4944      	ldr	r1, [pc, #272]	@ (8005910 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057fe:	428b      	cmp	r3, r1
 8005800:	d101      	bne.n	8005806 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005802:	4b44      	ldr	r3, [pc, #272]	@ (8005914 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005804:	e001      	b.n	800580a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005806:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800580a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800580e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005810:	2300      	movs	r3, #0
 8005812:	60bb      	str	r3, [r7, #8]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	60bb      	str	r3, [r7, #8]
 800581c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582a:	f043 0204 	orr.w	r2, r3, #4
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7ff fe4a 	bl	80054cc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005838:	e089      	b.n	800594e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b02      	cmp	r3, #2
 8005842:	d107      	bne.n	8005854 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f8be 	bl	80059d0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b01      	cmp	r3, #1
 800585c:	d107      	bne.n	800586e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f8fd 	bl	8005a68 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005874:	2b40      	cmp	r3, #64	@ 0x40
 8005876:	d12f      	bne.n	80058d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b00      	cmp	r3, #0
 8005880:	d02a      	beq.n	80058d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005890:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a1e      	ldr	r2, [pc, #120]	@ (8005910 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d101      	bne.n	80058a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800589c:	4b1d      	ldr	r3, [pc, #116]	@ (8005914 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800589e:	e001      	b.n	80058a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80058a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4919      	ldr	r1, [pc, #100]	@ (8005910 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058ac:	428b      	cmp	r3, r1
 80058ae:	d101      	bne.n	80058b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80058b0:	4b18      	ldr	r3, [pc, #96]	@ (8005914 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058b2:	e001      	b.n	80058b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80058b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058b8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80058bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ca:	f043 0202 	orr.w	r2, r3, #2
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff fdfa 	bl	80054cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	f003 0308 	and.w	r3, r3, #8
 80058de:	2b08      	cmp	r3, #8
 80058e0:	d136      	bne.n	8005950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f003 0320 	and.w	r3, r3, #32
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d031      	beq.n	8005950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a07      	ldr	r2, [pc, #28]	@ (8005910 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d101      	bne.n	80058fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80058f6:	4b07      	ldr	r3, [pc, #28]	@ (8005914 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058f8:	e001      	b.n	80058fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80058fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4902      	ldr	r1, [pc, #8]	@ (8005910 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005906:	428b      	cmp	r3, r1
 8005908:	d106      	bne.n	8005918 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800590a:	4b02      	ldr	r3, [pc, #8]	@ (8005914 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800590c:	e006      	b.n	800591c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800590e:	bf00      	nop
 8005910:	40003800 	.word	0x40003800
 8005914:	40003400 	.word	0x40003400
 8005918:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800591c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005920:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005930:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800593e:	f043 0204 	orr.w	r2, r3, #4
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7ff fdc0 	bl	80054cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800594c:	e000      	b.n	8005950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800594e:	bf00      	nop
}
 8005950:	bf00      	nop
 8005952:	3720      	adds	r7, #32
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005978:	1c99      	adds	r1, r3, #2
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6251      	str	r1, [r2, #36]	@ 0x24
 800597e:	881a      	ldrh	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800598a:	b29b      	uxth	r3, r3
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005998:	b29b      	uxth	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d113      	bne.n	80059c6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80059ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d106      	bne.n	80059c6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7ff ffc9 	bl	8005958 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059dc:	1c99      	adds	r1, r3, #2
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6251      	str	r1, [r2, #36]	@ 0x24
 80059e2:	8819      	ldrh	r1, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a60 <I2SEx_TxISR_I2SExt+0x90>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d101      	bne.n	80059f2 <I2SEx_TxISR_I2SExt+0x22>
 80059ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005a64 <I2SEx_TxISR_I2SExt+0x94>)
 80059f0:	e001      	b.n	80059f6 <I2SEx_TxISR_I2SExt+0x26>
 80059f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059f6:	460a      	mov	r2, r1
 80059f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d121      	bne.n	8005a56 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a12      	ldr	r2, [pc, #72]	@ (8005a60 <I2SEx_TxISR_I2SExt+0x90>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d101      	bne.n	8005a20 <I2SEx_TxISR_I2SExt+0x50>
 8005a1c:	4b11      	ldr	r3, [pc, #68]	@ (8005a64 <I2SEx_TxISR_I2SExt+0x94>)
 8005a1e:	e001      	b.n	8005a24 <I2SEx_TxISR_I2SExt+0x54>
 8005a20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	490d      	ldr	r1, [pc, #52]	@ (8005a60 <I2SEx_TxISR_I2SExt+0x90>)
 8005a2c:	428b      	cmp	r3, r1
 8005a2e:	d101      	bne.n	8005a34 <I2SEx_TxISR_I2SExt+0x64>
 8005a30:	4b0c      	ldr	r3, [pc, #48]	@ (8005a64 <I2SEx_TxISR_I2SExt+0x94>)
 8005a32:	e001      	b.n	8005a38 <I2SEx_TxISR_I2SExt+0x68>
 8005a34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a38:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a3c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d106      	bne.n	8005a56 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7ff ff81 	bl	8005958 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	40003800 	.word	0x40003800
 8005a64:	40003400 	.word	0x40003400

08005a68 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68d8      	ldr	r0, [r3, #12]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7a:	1c99      	adds	r1, r3, #2
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005a80:	b282      	uxth	r2, r0
 8005a82:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d113      	bne.n	8005ac4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005aaa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d106      	bne.n	8005ac4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff ff4a 	bl	8005958 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ac4:	bf00      	nop
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a20      	ldr	r2, [pc, #128]	@ (8005b5c <I2SEx_RxISR_I2SExt+0x90>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d101      	bne.n	8005ae2 <I2SEx_RxISR_I2SExt+0x16>
 8005ade:	4b20      	ldr	r3, [pc, #128]	@ (8005b60 <I2SEx_RxISR_I2SExt+0x94>)
 8005ae0:	e001      	b.n	8005ae6 <I2SEx_RxISR_I2SExt+0x1a>
 8005ae2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ae6:	68d8      	ldr	r0, [r3, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aec:	1c99      	adds	r1, r3, #2
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005af2:	b282      	uxth	r2, r0
 8005af4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d121      	bne.n	8005b52 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a12      	ldr	r2, [pc, #72]	@ (8005b5c <I2SEx_RxISR_I2SExt+0x90>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d101      	bne.n	8005b1c <I2SEx_RxISR_I2SExt+0x50>
 8005b18:	4b11      	ldr	r3, [pc, #68]	@ (8005b60 <I2SEx_RxISR_I2SExt+0x94>)
 8005b1a:	e001      	b.n	8005b20 <I2SEx_RxISR_I2SExt+0x54>
 8005b1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	490d      	ldr	r1, [pc, #52]	@ (8005b5c <I2SEx_RxISR_I2SExt+0x90>)
 8005b28:	428b      	cmp	r3, r1
 8005b2a:	d101      	bne.n	8005b30 <I2SEx_RxISR_I2SExt+0x64>
 8005b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b60 <I2SEx_RxISR_I2SExt+0x94>)
 8005b2e:	e001      	b.n	8005b34 <I2SEx_RxISR_I2SExt+0x68>
 8005b30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b34:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b38:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d106      	bne.n	8005b52 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7ff ff03 	bl	8005958 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	40003800 	.word	0x40003800
 8005b60:	40003400 	.word	0x40003400

08005b64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e267      	b.n	8006046 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d075      	beq.n	8005c6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005b82:	4b88      	ldr	r3, [pc, #544]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 030c 	and.w	r3, r3, #12
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d00c      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b8e:	4b85      	ldr	r3, [pc, #532]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005b96:	2b08      	cmp	r3, #8
 8005b98:	d112      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b9a:	4b82      	ldr	r3, [pc, #520]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ba2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ba6:	d10b      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ba8:	4b7e      	ldr	r3, [pc, #504]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d05b      	beq.n	8005c6c <HAL_RCC_OscConfig+0x108>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d157      	bne.n	8005c6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e242      	b.n	8006046 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bc8:	d106      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x74>
 8005bca:	4b76      	ldr	r3, [pc, #472]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a75      	ldr	r2, [pc, #468]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	e01d      	b.n	8005c14 <HAL_RCC_OscConfig+0xb0>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005be0:	d10c      	bne.n	8005bfc <HAL_RCC_OscConfig+0x98>
 8005be2:	4b70      	ldr	r3, [pc, #448]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a6f      	ldr	r2, [pc, #444]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005be8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	4b6d      	ldr	r3, [pc, #436]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a6c      	ldr	r2, [pc, #432]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	e00b      	b.n	8005c14 <HAL_RCC_OscConfig+0xb0>
 8005bfc:	4b69      	ldr	r3, [pc, #420]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a68      	ldr	r2, [pc, #416]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	4b66      	ldr	r3, [pc, #408]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a65      	ldr	r2, [pc, #404]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d013      	beq.n	8005c44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c1c:	f7fb fcee 	bl	80015fc <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c24:	f7fb fcea 	bl	80015fc <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b64      	cmp	r3, #100	@ 0x64
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e207      	b.n	8006046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c36:	4b5b      	ldr	r3, [pc, #364]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0f0      	beq.n	8005c24 <HAL_RCC_OscConfig+0xc0>
 8005c42:	e014      	b.n	8005c6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c44:	f7fb fcda 	bl	80015fc <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c4c:	f7fb fcd6 	bl	80015fc <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b64      	cmp	r3, #100	@ 0x64
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e1f3      	b.n	8006046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c5e:	4b51      	ldr	r3, [pc, #324]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1f0      	bne.n	8005c4c <HAL_RCC_OscConfig+0xe8>
 8005c6a:	e000      	b.n	8005c6e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d063      	beq.n	8005d42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 030c 	and.w	r3, r3, #12
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00b      	beq.n	8005c9e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c86:	4b47      	ldr	r3, [pc, #284]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005c8e:	2b08      	cmp	r3, #8
 8005c90:	d11c      	bne.n	8005ccc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c92:	4b44      	ldr	r3, [pc, #272]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d116      	bne.n	8005ccc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c9e:	4b41      	ldr	r3, [pc, #260]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d005      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x152>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d001      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e1c7      	b.n	8006046 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	4937      	ldr	r1, [pc, #220]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cca:	e03a      	b.n	8005d42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d020      	beq.n	8005d16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cd4:	4b34      	ldr	r3, [pc, #208]	@ (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cda:	f7fb fc8f 	bl	80015fc <HAL_GetTick>
 8005cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ce0:	e008      	b.n	8005cf4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ce2:	f7fb fc8b 	bl	80015fc <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e1a8      	b.n	8006046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0f0      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d00:	4b28      	ldr	r3, [pc, #160]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	4925      	ldr	r1, [pc, #148]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	600b      	str	r3, [r1, #0]
 8005d14:	e015      	b.n	8005d42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d16:	4b24      	ldr	r3, [pc, #144]	@ (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1c:	f7fb fc6e 	bl	80015fc <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d24:	f7fb fc6a 	bl	80015fc <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e187      	b.n	8006046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d36:	4b1b      	ldr	r3, [pc, #108]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1f0      	bne.n	8005d24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d036      	beq.n	8005dbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d016      	beq.n	8005d84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d56:	4b15      	ldr	r3, [pc, #84]	@ (8005dac <HAL_RCC_OscConfig+0x248>)
 8005d58:	2201      	movs	r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5c:	f7fb fc4e 	bl	80015fc <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d64:	f7fb fc4a 	bl	80015fc <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e167      	b.n	8006046 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d76:	4b0b      	ldr	r3, [pc, #44]	@ (8005da4 <HAL_RCC_OscConfig+0x240>)
 8005d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0f0      	beq.n	8005d64 <HAL_RCC_OscConfig+0x200>
 8005d82:	e01b      	b.n	8005dbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d84:	4b09      	ldr	r3, [pc, #36]	@ (8005dac <HAL_RCC_OscConfig+0x248>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d8a:	f7fb fc37 	bl	80015fc <HAL_GetTick>
 8005d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d90:	e00e      	b.n	8005db0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d92:	f7fb fc33 	bl	80015fc <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d907      	bls.n	8005db0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e150      	b.n	8006046 <HAL_RCC_OscConfig+0x4e2>
 8005da4:	40023800 	.word	0x40023800
 8005da8:	42470000 	.word	0x42470000
 8005dac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005db0:	4b88      	ldr	r3, [pc, #544]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005db2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1ea      	bne.n	8005d92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 8097 	beq.w	8005ef8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dce:	4b81      	ldr	r3, [pc, #516]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10f      	bne.n	8005dfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60bb      	str	r3, [r7, #8]
 8005dde:	4b7d      	ldr	r3, [pc, #500]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de2:	4a7c      	ldr	r2, [pc, #496]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005dea:	4b7a      	ldr	r3, [pc, #488]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005df2:	60bb      	str	r3, [r7, #8]
 8005df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005df6:	2301      	movs	r3, #1
 8005df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dfa:	4b77      	ldr	r3, [pc, #476]	@ (8005fd8 <HAL_RCC_OscConfig+0x474>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d118      	bne.n	8005e38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e06:	4b74      	ldr	r3, [pc, #464]	@ (8005fd8 <HAL_RCC_OscConfig+0x474>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a73      	ldr	r2, [pc, #460]	@ (8005fd8 <HAL_RCC_OscConfig+0x474>)
 8005e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e12:	f7fb fbf3 	bl	80015fc <HAL_GetTick>
 8005e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e18:	e008      	b.n	8005e2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e1a:	f7fb fbef 	bl	80015fc <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d901      	bls.n	8005e2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e10c      	b.n	8006046 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e2c:	4b6a      	ldr	r3, [pc, #424]	@ (8005fd8 <HAL_RCC_OscConfig+0x474>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d0f0      	beq.n	8005e1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d106      	bne.n	8005e4e <HAL_RCC_OscConfig+0x2ea>
 8005e40:	4b64      	ldr	r3, [pc, #400]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e44:	4a63      	ldr	r2, [pc, #396]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005e46:	f043 0301 	orr.w	r3, r3, #1
 8005e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e4c:	e01c      	b.n	8005e88 <HAL_RCC_OscConfig+0x324>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	2b05      	cmp	r3, #5
 8005e54:	d10c      	bne.n	8005e70 <HAL_RCC_OscConfig+0x30c>
 8005e56:	4b5f      	ldr	r3, [pc, #380]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e5a:	4a5e      	ldr	r2, [pc, #376]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005e5c:	f043 0304 	orr.w	r3, r3, #4
 8005e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e62:	4b5c      	ldr	r3, [pc, #368]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e66:	4a5b      	ldr	r2, [pc, #364]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005e68:	f043 0301 	orr.w	r3, r3, #1
 8005e6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e6e:	e00b      	b.n	8005e88 <HAL_RCC_OscConfig+0x324>
 8005e70:	4b58      	ldr	r3, [pc, #352]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e74:	4a57      	ldr	r2, [pc, #348]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005e76:	f023 0301 	bic.w	r3, r3, #1
 8005e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e7c:	4b55      	ldr	r3, [pc, #340]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e80:	4a54      	ldr	r2, [pc, #336]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005e82:	f023 0304 	bic.w	r3, r3, #4
 8005e86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d015      	beq.n	8005ebc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e90:	f7fb fbb4 	bl	80015fc <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e96:	e00a      	b.n	8005eae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e98:	f7fb fbb0 	bl	80015fc <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e0cb      	b.n	8006046 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eae:	4b49      	ldr	r3, [pc, #292]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0ee      	beq.n	8005e98 <HAL_RCC_OscConfig+0x334>
 8005eba:	e014      	b.n	8005ee6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ebc:	f7fb fb9e 	bl	80015fc <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ec2:	e00a      	b.n	8005eda <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ec4:	f7fb fb9a 	bl	80015fc <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e0b5      	b.n	8006046 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eda:	4b3e      	ldr	r3, [pc, #248]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1ee      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ee6:	7dfb      	ldrb	r3, [r7, #23]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d105      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eec:	4b39      	ldr	r3, [pc, #228]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef0:	4a38      	ldr	r2, [pc, #224]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005ef2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ef6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 80a1 	beq.w	8006044 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f02:	4b34      	ldr	r3, [pc, #208]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 030c 	and.w	r3, r3, #12
 8005f0a:	2b08      	cmp	r3, #8
 8005f0c:	d05c      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d141      	bne.n	8005f9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f16:	4b31      	ldr	r3, [pc, #196]	@ (8005fdc <HAL_RCC_OscConfig+0x478>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f1c:	f7fb fb6e 	bl	80015fc <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f24:	f7fb fb6a 	bl	80015fc <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e087      	b.n	8006046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f36:	4b27      	ldr	r3, [pc, #156]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1f0      	bne.n	8005f24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	69da      	ldr	r2, [r3, #28]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f50:	019b      	lsls	r3, r3, #6
 8005f52:	431a      	orrs	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f58:	085b      	lsrs	r3, r3, #1
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	041b      	lsls	r3, r3, #16
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f64:	061b      	lsls	r3, r3, #24
 8005f66:	491b      	ldr	r1, [pc, #108]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fdc <HAL_RCC_OscConfig+0x478>)
 8005f6e:	2201      	movs	r2, #1
 8005f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f72:	f7fb fb43 	bl	80015fc <HAL_GetTick>
 8005f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f78:	e008      	b.n	8005f8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f7a:	f7fb fb3f 	bl	80015fc <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d901      	bls.n	8005f8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e05c      	b.n	8006046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f8c:	4b11      	ldr	r3, [pc, #68]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d0f0      	beq.n	8005f7a <HAL_RCC_OscConfig+0x416>
 8005f98:	e054      	b.n	8006044 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f9a:	4b10      	ldr	r3, [pc, #64]	@ (8005fdc <HAL_RCC_OscConfig+0x478>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa0:	f7fb fb2c 	bl	80015fc <HAL_GetTick>
 8005fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fa8:	f7fb fb28 	bl	80015fc <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e045      	b.n	8006046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fba:	4b06      	ldr	r3, [pc, #24]	@ (8005fd4 <HAL_RCC_OscConfig+0x470>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1f0      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x444>
 8005fc6:	e03d      	b.n	8006044 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d107      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e038      	b.n	8006046 <HAL_RCC_OscConfig+0x4e2>
 8005fd4:	40023800 	.word	0x40023800
 8005fd8:	40007000 	.word	0x40007000
 8005fdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8006050 <HAL_RCC_OscConfig+0x4ec>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d028      	beq.n	8006040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d121      	bne.n	8006040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006006:	429a      	cmp	r2, r3
 8006008:	d11a      	bne.n	8006040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006010:	4013      	ands	r3, r2
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006016:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006018:	4293      	cmp	r3, r2
 800601a:	d111      	bne.n	8006040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006026:	085b      	lsrs	r3, r3, #1
 8006028:	3b01      	subs	r3, #1
 800602a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800602c:	429a      	cmp	r2, r3
 800602e:	d107      	bne.n	8006040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800603c:	429a      	cmp	r2, r3
 800603e:	d001      	beq.n	8006044 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e000      	b.n	8006046 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	40023800 	.word	0x40023800

08006054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e0cc      	b.n	8006202 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006068:	4b68      	ldr	r3, [pc, #416]	@ (800620c <HAL_RCC_ClockConfig+0x1b8>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	429a      	cmp	r2, r3
 8006074:	d90c      	bls.n	8006090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006076:	4b65      	ldr	r3, [pc, #404]	@ (800620c <HAL_RCC_ClockConfig+0x1b8>)
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800607e:	4b63      	ldr	r3, [pc, #396]	@ (800620c <HAL_RCC_ClockConfig+0x1b8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d001      	beq.n	8006090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e0b8      	b.n	8006202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d020      	beq.n	80060de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d005      	beq.n	80060b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060a8:	4b59      	ldr	r3, [pc, #356]	@ (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	4a58      	ldr	r2, [pc, #352]	@ (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80060ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80060b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d005      	beq.n	80060cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060c0:	4b53      	ldr	r3, [pc, #332]	@ (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	4a52      	ldr	r2, [pc, #328]	@ (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80060c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80060ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060cc:	4b50      	ldr	r3, [pc, #320]	@ (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	494d      	ldr	r1, [pc, #308]	@ (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d044      	beq.n	8006174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d107      	bne.n	8006102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060f2:	4b47      	ldr	r3, [pc, #284]	@ (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d119      	bne.n	8006132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e07f      	b.n	8006202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	2b02      	cmp	r3, #2
 8006108:	d003      	beq.n	8006112 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800610e:	2b03      	cmp	r3, #3
 8006110:	d107      	bne.n	8006122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006112:	4b3f      	ldr	r3, [pc, #252]	@ (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d109      	bne.n	8006132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e06f      	b.n	8006202 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006122:	4b3b      	ldr	r3, [pc, #236]	@ (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e067      	b.n	8006202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006132:	4b37      	ldr	r3, [pc, #220]	@ (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f023 0203 	bic.w	r2, r3, #3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	4934      	ldr	r1, [pc, #208]	@ (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 8006140:	4313      	orrs	r3, r2
 8006142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006144:	f7fb fa5a 	bl	80015fc <HAL_GetTick>
 8006148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800614a:	e00a      	b.n	8006162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800614c:	f7fb fa56 	bl	80015fc <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800615a:	4293      	cmp	r3, r2
 800615c:	d901      	bls.n	8006162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e04f      	b.n	8006202 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006162:	4b2b      	ldr	r3, [pc, #172]	@ (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f003 020c 	and.w	r2, r3, #12
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	429a      	cmp	r2, r3
 8006172:	d1eb      	bne.n	800614c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006174:	4b25      	ldr	r3, [pc, #148]	@ (800620c <HAL_RCC_ClockConfig+0x1b8>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d20c      	bcs.n	800619c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006182:	4b22      	ldr	r3, [pc, #136]	@ (800620c <HAL_RCC_ClockConfig+0x1b8>)
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	b2d2      	uxtb	r2, r2
 8006188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800618a:	4b20      	ldr	r3, [pc, #128]	@ (800620c <HAL_RCC_ClockConfig+0x1b8>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	429a      	cmp	r2, r3
 8006196:	d001      	beq.n	800619c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e032      	b.n	8006202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d008      	beq.n	80061ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061a8:	4b19      	ldr	r3, [pc, #100]	@ (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	4916      	ldr	r1, [pc, #88]	@ (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0308 	and.w	r3, r3, #8
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d009      	beq.n	80061da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061c6:	4b12      	ldr	r3, [pc, #72]	@ (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	490e      	ldr	r1, [pc, #56]	@ (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061da:	f000 f821 	bl	8006220 <HAL_RCC_GetSysClockFreq>
 80061de:	4602      	mov	r2, r0
 80061e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006210 <HAL_RCC_ClockConfig+0x1bc>)
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	091b      	lsrs	r3, r3, #4
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	490a      	ldr	r1, [pc, #40]	@ (8006214 <HAL_RCC_ClockConfig+0x1c0>)
 80061ec:	5ccb      	ldrb	r3, [r1, r3]
 80061ee:	fa22 f303 	lsr.w	r3, r2, r3
 80061f2:	4a09      	ldr	r2, [pc, #36]	@ (8006218 <HAL_RCC_ClockConfig+0x1c4>)
 80061f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80061f6:	4b09      	ldr	r3, [pc, #36]	@ (800621c <HAL_RCC_ClockConfig+0x1c8>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fb f9ba 	bl	8001574 <HAL_InitTick>

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	40023c00 	.word	0x40023c00
 8006210:	40023800 	.word	0x40023800
 8006214:	0800bb18 	.word	0x0800bb18
 8006218:	20000000 	.word	0x20000000
 800621c:	20000004 	.word	0x20000004

08006220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006224:	b094      	sub	sp, #80	@ 0x50
 8006226:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800622c:	2300      	movs	r3, #0
 800622e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006238:	4b79      	ldr	r3, [pc, #484]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x200>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f003 030c 	and.w	r3, r3, #12
 8006240:	2b08      	cmp	r3, #8
 8006242:	d00d      	beq.n	8006260 <HAL_RCC_GetSysClockFreq+0x40>
 8006244:	2b08      	cmp	r3, #8
 8006246:	f200 80e1 	bhi.w	800640c <HAL_RCC_GetSysClockFreq+0x1ec>
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <HAL_RCC_GetSysClockFreq+0x34>
 800624e:	2b04      	cmp	r3, #4
 8006250:	d003      	beq.n	800625a <HAL_RCC_GetSysClockFreq+0x3a>
 8006252:	e0db      	b.n	800640c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006254:	4b73      	ldr	r3, [pc, #460]	@ (8006424 <HAL_RCC_GetSysClockFreq+0x204>)
 8006256:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006258:	e0db      	b.n	8006412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800625a:	4b73      	ldr	r3, [pc, #460]	@ (8006428 <HAL_RCC_GetSysClockFreq+0x208>)
 800625c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800625e:	e0d8      	b.n	8006412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006260:	4b6f      	ldr	r3, [pc, #444]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x200>)
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006268:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800626a:	4b6d      	ldr	r3, [pc, #436]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x200>)
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d063      	beq.n	800633e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006276:	4b6a      	ldr	r3, [pc, #424]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x200>)
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	099b      	lsrs	r3, r3, #6
 800627c:	2200      	movs	r2, #0
 800627e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006280:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006288:	633b      	str	r3, [r7, #48]	@ 0x30
 800628a:	2300      	movs	r3, #0
 800628c:	637b      	str	r3, [r7, #52]	@ 0x34
 800628e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006292:	4622      	mov	r2, r4
 8006294:	462b      	mov	r3, r5
 8006296:	f04f 0000 	mov.w	r0, #0
 800629a:	f04f 0100 	mov.w	r1, #0
 800629e:	0159      	lsls	r1, r3, #5
 80062a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062a4:	0150      	lsls	r0, r2, #5
 80062a6:	4602      	mov	r2, r0
 80062a8:	460b      	mov	r3, r1
 80062aa:	4621      	mov	r1, r4
 80062ac:	1a51      	subs	r1, r2, r1
 80062ae:	6139      	str	r1, [r7, #16]
 80062b0:	4629      	mov	r1, r5
 80062b2:	eb63 0301 	sbc.w	r3, r3, r1
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	f04f 0200 	mov.w	r2, #0
 80062bc:	f04f 0300 	mov.w	r3, #0
 80062c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062c4:	4659      	mov	r1, fp
 80062c6:	018b      	lsls	r3, r1, #6
 80062c8:	4651      	mov	r1, sl
 80062ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062ce:	4651      	mov	r1, sl
 80062d0:	018a      	lsls	r2, r1, #6
 80062d2:	4651      	mov	r1, sl
 80062d4:	ebb2 0801 	subs.w	r8, r2, r1
 80062d8:	4659      	mov	r1, fp
 80062da:	eb63 0901 	sbc.w	r9, r3, r1
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062f2:	4690      	mov	r8, r2
 80062f4:	4699      	mov	r9, r3
 80062f6:	4623      	mov	r3, r4
 80062f8:	eb18 0303 	adds.w	r3, r8, r3
 80062fc:	60bb      	str	r3, [r7, #8]
 80062fe:	462b      	mov	r3, r5
 8006300:	eb49 0303 	adc.w	r3, r9, r3
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	f04f 0200 	mov.w	r2, #0
 800630a:	f04f 0300 	mov.w	r3, #0
 800630e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006312:	4629      	mov	r1, r5
 8006314:	024b      	lsls	r3, r1, #9
 8006316:	4621      	mov	r1, r4
 8006318:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800631c:	4621      	mov	r1, r4
 800631e:	024a      	lsls	r2, r1, #9
 8006320:	4610      	mov	r0, r2
 8006322:	4619      	mov	r1, r3
 8006324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006326:	2200      	movs	r2, #0
 8006328:	62bb      	str	r3, [r7, #40]	@ 0x28
 800632a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800632c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006330:	f7f9 ff4a 	bl	80001c8 <__aeabi_uldivmod>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	4613      	mov	r3, r2
 800633a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800633c:	e058      	b.n	80063f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800633e:	4b38      	ldr	r3, [pc, #224]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x200>)
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	099b      	lsrs	r3, r3, #6
 8006344:	2200      	movs	r2, #0
 8006346:	4618      	mov	r0, r3
 8006348:	4611      	mov	r1, r2
 800634a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800634e:	623b      	str	r3, [r7, #32]
 8006350:	2300      	movs	r3, #0
 8006352:	627b      	str	r3, [r7, #36]	@ 0x24
 8006354:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006358:	4642      	mov	r2, r8
 800635a:	464b      	mov	r3, r9
 800635c:	f04f 0000 	mov.w	r0, #0
 8006360:	f04f 0100 	mov.w	r1, #0
 8006364:	0159      	lsls	r1, r3, #5
 8006366:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800636a:	0150      	lsls	r0, r2, #5
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	4641      	mov	r1, r8
 8006372:	ebb2 0a01 	subs.w	sl, r2, r1
 8006376:	4649      	mov	r1, r9
 8006378:	eb63 0b01 	sbc.w	fp, r3, r1
 800637c:	f04f 0200 	mov.w	r2, #0
 8006380:	f04f 0300 	mov.w	r3, #0
 8006384:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006388:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800638c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006390:	ebb2 040a 	subs.w	r4, r2, sl
 8006394:	eb63 050b 	sbc.w	r5, r3, fp
 8006398:	f04f 0200 	mov.w	r2, #0
 800639c:	f04f 0300 	mov.w	r3, #0
 80063a0:	00eb      	lsls	r3, r5, #3
 80063a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063a6:	00e2      	lsls	r2, r4, #3
 80063a8:	4614      	mov	r4, r2
 80063aa:	461d      	mov	r5, r3
 80063ac:	4643      	mov	r3, r8
 80063ae:	18e3      	adds	r3, r4, r3
 80063b0:	603b      	str	r3, [r7, #0]
 80063b2:	464b      	mov	r3, r9
 80063b4:	eb45 0303 	adc.w	r3, r5, r3
 80063b8:	607b      	str	r3, [r7, #4]
 80063ba:	f04f 0200 	mov.w	r2, #0
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063c6:	4629      	mov	r1, r5
 80063c8:	028b      	lsls	r3, r1, #10
 80063ca:	4621      	mov	r1, r4
 80063cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063d0:	4621      	mov	r1, r4
 80063d2:	028a      	lsls	r2, r1, #10
 80063d4:	4610      	mov	r0, r2
 80063d6:	4619      	mov	r1, r3
 80063d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063da:	2200      	movs	r2, #0
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	61fa      	str	r2, [r7, #28]
 80063e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063e4:	f7f9 fef0 	bl	80001c8 <__aeabi_uldivmod>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	4613      	mov	r3, r2
 80063ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80063f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x200>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	0c1b      	lsrs	r3, r3, #16
 80063f6:	f003 0303 	and.w	r3, r3, #3
 80063fa:	3301      	adds	r3, #1
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006400:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006404:	fbb2 f3f3 	udiv	r3, r2, r3
 8006408:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800640a:	e002      	b.n	8006412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800640c:	4b05      	ldr	r3, [pc, #20]	@ (8006424 <HAL_RCC_GetSysClockFreq+0x204>)
 800640e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006412:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006414:	4618      	mov	r0, r3
 8006416:	3750      	adds	r7, #80	@ 0x50
 8006418:	46bd      	mov	sp, r7
 800641a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800641e:	bf00      	nop
 8006420:	40023800 	.word	0x40023800
 8006424:	00f42400 	.word	0x00f42400
 8006428:	007a1200 	.word	0x007a1200

0800642c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006430:	4b03      	ldr	r3, [pc, #12]	@ (8006440 <HAL_RCC_GetHCLKFreq+0x14>)
 8006432:	681b      	ldr	r3, [r3, #0]
}
 8006434:	4618      	mov	r0, r3
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	20000000 	.word	0x20000000

08006444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006448:	f7ff fff0 	bl	800642c <HAL_RCC_GetHCLKFreq>
 800644c:	4602      	mov	r2, r0
 800644e:	4b05      	ldr	r3, [pc, #20]	@ (8006464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	0a9b      	lsrs	r3, r3, #10
 8006454:	f003 0307 	and.w	r3, r3, #7
 8006458:	4903      	ldr	r1, [pc, #12]	@ (8006468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800645a:	5ccb      	ldrb	r3, [r1, r3]
 800645c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006460:	4618      	mov	r0, r3
 8006462:	bd80      	pop	{r7, pc}
 8006464:	40023800 	.word	0x40023800
 8006468:	0800bb28 	.word	0x0800bb28

0800646c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b00      	cmp	r3, #0
 8006486:	d105      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006490:	2b00      	cmp	r3, #0
 8006492:	d035      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006494:	4b62      	ldr	r3, [pc, #392]	@ (8006620 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006496:	2200      	movs	r2, #0
 8006498:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800649a:	f7fb f8af 	bl	80015fc <HAL_GetTick>
 800649e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064a0:	e008      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80064a2:	f7fb f8ab 	bl	80015fc <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d901      	bls.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e0b0      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064b4:	4b5b      	ldr	r3, [pc, #364]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1f0      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	019a      	lsls	r2, r3, #6
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	071b      	lsls	r3, r3, #28
 80064cc:	4955      	ldr	r1, [pc, #340]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80064d4:	4b52      	ldr	r3, [pc, #328]	@ (8006620 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80064d6:	2201      	movs	r2, #1
 80064d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064da:	f7fb f88f 	bl	80015fc <HAL_GetTick>
 80064de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064e0:	e008      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80064e2:	f7fb f88b 	bl	80015fc <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d901      	bls.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e090      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064f4:	4b4b      	ldr	r3, [pc, #300]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d0f0      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 8083 	beq.w	8006614 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800650e:	2300      	movs	r3, #0
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	4b44      	ldr	r3, [pc, #272]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006516:	4a43      	ldr	r2, [pc, #268]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800651c:	6413      	str	r3, [r2, #64]	@ 0x40
 800651e:	4b41      	ldr	r3, [pc, #260]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800652a:	4b3f      	ldr	r3, [pc, #252]	@ (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a3e      	ldr	r2, [pc, #248]	@ (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006534:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006536:	f7fb f861 	bl	80015fc <HAL_GetTick>
 800653a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800653c:	e008      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800653e:	f7fb f85d 	bl	80015fc <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	2b02      	cmp	r3, #2
 800654a:	d901      	bls.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e062      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006550:	4b35      	ldr	r3, [pc, #212]	@ (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006558:	2b00      	cmp	r3, #0
 800655a:	d0f0      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800655c:	4b31      	ldr	r3, [pc, #196]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800655e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006560:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006564:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d02f      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	429a      	cmp	r2, r3
 8006578:	d028      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800657a:	4b2a      	ldr	r3, [pc, #168]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800657c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800657e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006582:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006584:	4b29      	ldr	r3, [pc, #164]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006586:	2201      	movs	r2, #1
 8006588:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800658a:	4b28      	ldr	r3, [pc, #160]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006590:	4a24      	ldr	r2, [pc, #144]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006596:	4b23      	ldr	r3, [pc, #140]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d114      	bne.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80065a2:	f7fb f82b 	bl	80015fc <HAL_GetTick>
 80065a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065a8:	e00a      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065aa:	f7fb f827 	bl	80015fc <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d901      	bls.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e02a      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c0:	4b18      	ldr	r3, [pc, #96]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d0ee      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065d8:	d10d      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80065da:	4b12      	ldr	r3, [pc, #72]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80065ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065ee:	490d      	ldr	r1, [pc, #52]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	608b      	str	r3, [r1, #8]
 80065f4:	e005      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80065f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065fc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006600:	6093      	str	r3, [r2, #8]
 8006602:	4b08      	ldr	r3, [pc, #32]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006604:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800660e:	4905      	ldr	r1, [pc, #20]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006610:	4313      	orrs	r3, r2
 8006612:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	42470068 	.word	0x42470068
 8006624:	40023800 	.word	0x40023800
 8006628:	40007000 	.word	0x40007000
 800662c:	42470e40 	.word	0x42470e40

08006630 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800663c:	2300      	movs	r3, #0
 800663e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d13f      	bne.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800664e:	4b24      	ldr	r3, [pc, #144]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d006      	beq.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006664:	d12f      	bne.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006666:	4b1f      	ldr	r3, [pc, #124]	@ (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006668:	617b      	str	r3, [r7, #20]
          break;
 800666a:	e02f      	b.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800666c:	4b1c      	ldr	r3, [pc, #112]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006674:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006678:	d108      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800667a:	4b19      	ldr	r3, [pc, #100]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006682:	4a19      	ldr	r2, [pc, #100]	@ (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006684:	fbb2 f3f3 	udiv	r3, r2, r3
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	e007      	b.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800668c:	4b14      	ldr	r3, [pc, #80]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006694:	4a15      	ldr	r2, [pc, #84]	@ (80066ec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006696:	fbb2 f3f3 	udiv	r3, r2, r3
 800669a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800669c:	4b10      	ldr	r3, [pc, #64]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800669e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066a2:	099b      	lsrs	r3, r3, #6
 80066a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	fb02 f303 	mul.w	r3, r2, r3
 80066ae:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80066b0:	4b0b      	ldr	r3, [pc, #44]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80066b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066b6:	0f1b      	lsrs	r3, r3, #28
 80066b8:	f003 0307 	and.w	r3, r3, #7
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c2:	617b      	str	r3, [r7, #20]
          break;
 80066c4:	e002      	b.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	617b      	str	r3, [r7, #20]
          break;
 80066ca:	bf00      	nop
        }
      }
      break;
 80066cc:	e000      	b.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80066ce:	bf00      	nop
    }
  }
  return frequency;
 80066d0:	697b      	ldr	r3, [r7, #20]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40023800 	.word	0x40023800
 80066e4:	00bb8000 	.word	0x00bb8000
 80066e8:	007a1200 	.word	0x007a1200
 80066ec:	00f42400 	.word	0x00f42400

080066f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e07b      	b.n	80067fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	d108      	bne.n	800671c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006712:	d009      	beq.n	8006728 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	61da      	str	r2, [r3, #28]
 800671a:	e005      	b.n	8006728 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d106      	bne.n	8006748 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7fa fd6e 	bl	8001224 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800675e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006770:	431a      	orrs	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	431a      	orrs	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	431a      	orrs	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006798:	431a      	orrs	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ac:	ea42 0103 	orr.w	r1, r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	0c1b      	lsrs	r3, r3, #16
 80067c6:	f003 0104 	and.w	r1, r3, #4
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ce:	f003 0210 	and.w	r2, r3, #16
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69da      	ldr	r2, [r3, #28]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b088      	sub	sp, #32
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	603b      	str	r3, [r7, #0]
 800680e:	4613      	mov	r3, r2
 8006810:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006812:	f7fa fef3 	bl	80015fc <HAL_GetTick>
 8006816:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006818:	88fb      	ldrh	r3, [r7, #6]
 800681a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b01      	cmp	r3, #1
 8006826:	d001      	beq.n	800682c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006828:	2302      	movs	r3, #2
 800682a:	e12a      	b.n	8006a82 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <HAL_SPI_Transmit+0x36>
 8006832:	88fb      	ldrh	r3, [r7, #6]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e122      	b.n	8006a82 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_SPI_Transmit+0x48>
 8006846:	2302      	movs	r3, #2
 8006848:	e11b      	b.n	8006a82 <HAL_SPI_Transmit+0x280>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2203      	movs	r2, #3
 8006856:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	88fa      	ldrh	r2, [r7, #6]
 800686a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	88fa      	ldrh	r2, [r7, #6]
 8006870:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006898:	d10f      	bne.n	80068ba <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c4:	2b40      	cmp	r3, #64	@ 0x40
 80068c6:	d007      	beq.n	80068d8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068e0:	d152      	bne.n	8006988 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <HAL_SPI_Transmit+0xee>
 80068ea:	8b7b      	ldrh	r3, [r7, #26]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d145      	bne.n	800697c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f4:	881a      	ldrh	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006900:	1c9a      	adds	r2, r3, #2
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800690a:	b29b      	uxth	r3, r3
 800690c:	3b01      	subs	r3, #1
 800690e:	b29a      	uxth	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006914:	e032      	b.n	800697c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b02      	cmp	r3, #2
 8006922:	d112      	bne.n	800694a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006928:	881a      	ldrh	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006934:	1c9a      	adds	r2, r3, #2
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800693e:	b29b      	uxth	r3, r3
 8006940:	3b01      	subs	r3, #1
 8006942:	b29a      	uxth	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006948:	e018      	b.n	800697c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800694a:	f7fa fe57 	bl	80015fc <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d803      	bhi.n	8006962 <HAL_SPI_Transmit+0x160>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006960:	d102      	bne.n	8006968 <HAL_SPI_Transmit+0x166>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d109      	bne.n	800697c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e082      	b.n	8006a82 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006980:	b29b      	uxth	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1c7      	bne.n	8006916 <HAL_SPI_Transmit+0x114>
 8006986:	e053      	b.n	8006a30 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <HAL_SPI_Transmit+0x194>
 8006990:	8b7b      	ldrh	r3, [r7, #26]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d147      	bne.n	8006a26 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	330c      	adds	r3, #12
 80069a0:	7812      	ldrb	r2, [r2, #0]
 80069a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80069bc:	e033      	b.n	8006a26 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d113      	bne.n	80069f4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	330c      	adds	r3, #12
 80069d6:	7812      	ldrb	r2, [r2, #0]
 80069d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80069f2:	e018      	b.n	8006a26 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069f4:	f7fa fe02 	bl	80015fc <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d803      	bhi.n	8006a0c <HAL_SPI_Transmit+0x20a>
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0a:	d102      	bne.n	8006a12 <HAL_SPI_Transmit+0x210>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d109      	bne.n	8006a26 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e02d      	b.n	8006a82 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1c6      	bne.n	80069be <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a30:	69fa      	ldr	r2, [r7, #28]
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 f9c3 	bl	8006dc0 <SPI_EndRxTxTransaction>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2220      	movs	r2, #32
 8006a44:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10a      	bne.n	8006a64 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a4e:	2300      	movs	r3, #0
 8006a50:	617b      	str	r3, [r7, #20]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e000      	b.n	8006a82 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006a80:	2300      	movs	r3, #0
  }
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3720      	adds	r7, #32
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
	...

08006a8c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b088      	sub	sp, #32
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10e      	bne.n	8006acc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d009      	beq.n	8006acc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d004      	beq.n	8006acc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	4798      	blx	r3
    return;
 8006aca:	e0ce      	b.n	8006c6a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d009      	beq.n	8006aea <HAL_SPI_IRQHandler+0x5e>
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d004      	beq.n	8006aea <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	4798      	blx	r3
    return;
 8006ae8:	e0bf      	b.n	8006c6a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	f003 0320 	and.w	r3, r3, #32
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10a      	bne.n	8006b0a <HAL_SPI_IRQHandler+0x7e>
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d105      	bne.n	8006b0a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 80b0 	beq.w	8006c6a <HAL_SPI_IRQHandler+0x1de>
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	f003 0320 	and.w	r3, r3, #32
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 80aa 	beq.w	8006c6a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d023      	beq.n	8006b68 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d011      	beq.n	8006b50 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b30:	f043 0204 	orr.w	r2, r3, #4
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b38:	2300      	movs	r3, #0
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	e00b      	b.n	8006b68 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b50:	2300      	movs	r3, #0
 8006b52:	613b      	str	r3, [r7, #16]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	613b      	str	r3, [r7, #16]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	693b      	ldr	r3, [r7, #16]
        return;
 8006b66:	e080      	b.n	8006c6a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	f003 0320 	and.w	r3, r3, #32
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d014      	beq.n	8006b9c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b76:	f043 0201 	orr.w	r2, r3, #1
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	60fb      	str	r3, [r7, #12]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00c      	beq.n	8006bc0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006baa:	f043 0208 	orr.w	r2, r3, #8
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60bb      	str	r3, [r7, #8]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	60bb      	str	r3, [r7, #8]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d04f      	beq.n	8006c68 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006bd6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d104      	bne.n	8006bf4 <HAL_SPI_IRQHandler+0x168>
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d034      	beq.n	8006c5e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0203 	bic.w	r2, r2, #3
 8006c02:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d011      	beq.n	8006c30 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c10:	4a17      	ldr	r2, [pc, #92]	@ (8006c70 <HAL_SPI_IRQHandler+0x1e4>)
 8006c12:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fb fa79 	bl	8002110 <HAL_DMA_Abort_IT>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d016      	beq.n	8006c66 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8006c70 <HAL_SPI_IRQHandler+0x1e4>)
 8006c3e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fb fa63 	bl	8002110 <HAL_DMA_Abort_IT>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00a      	beq.n	8006c66 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c54:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006c5c:	e003      	b.n	8006c66 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f808 	bl	8006c74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006c64:	e000      	b.n	8006c68 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006c66:	bf00      	nop
    return;
 8006c68:	bf00      	nop
  }
}
 8006c6a:	3720      	adds	r7, #32
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	08006c89 	.word	0x08006c89

08006c74 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c94:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f7ff ffe6 	bl	8006c74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ca8:	bf00      	nop
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b088      	sub	sp, #32
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	603b      	str	r3, [r7, #0]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006cc0:	f7fa fc9c 	bl	80015fc <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc8:	1a9b      	subs	r3, r3, r2
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	4413      	add	r3, r2
 8006cce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006cd0:	f7fa fc94 	bl	80015fc <HAL_GetTick>
 8006cd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006cd6:	4b39      	ldr	r3, [pc, #228]	@ (8006dbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	015b      	lsls	r3, r3, #5
 8006cdc:	0d1b      	lsrs	r3, r3, #20
 8006cde:	69fa      	ldr	r2, [r7, #28]
 8006ce0:	fb02 f303 	mul.w	r3, r2, r3
 8006ce4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ce6:	e054      	b.n	8006d92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cee:	d050      	beq.n	8006d92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006cf0:	f7fa fc84 	bl	80015fc <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	69fa      	ldr	r2, [r7, #28]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d902      	bls.n	8006d06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d13d      	bne.n	8006d82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006d14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d1e:	d111      	bne.n	8006d44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d28:	d004      	beq.n	8006d34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d32:	d107      	bne.n	8006d44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d4c:	d10f      	bne.n	8006d6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e017      	b.n	8006db2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	bf0c      	ite	eq
 8006da2:	2301      	moveq	r3, #1
 8006da4:	2300      	movne	r3, #0
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	461a      	mov	r2, r3
 8006daa:	79fb      	ldrb	r3, [r7, #7]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d19b      	bne.n	8006ce8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3720      	adds	r7, #32
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20000000 	.word	0x20000000

08006dc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af02      	add	r7, sp, #8
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	2102      	movs	r1, #2
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f7ff ff6a 	bl	8006cb0 <SPI_WaitFlagStateUntilTimeout>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d007      	beq.n	8006df2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006de6:	f043 0220 	orr.w	r2, r3, #32
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e032      	b.n	8006e58 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006df2:	4b1b      	ldr	r3, [pc, #108]	@ (8006e60 <SPI_EndRxTxTransaction+0xa0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a1b      	ldr	r2, [pc, #108]	@ (8006e64 <SPI_EndRxTxTransaction+0xa4>)
 8006df8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfc:	0d5b      	lsrs	r3, r3, #21
 8006dfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006e02:	fb02 f303 	mul.w	r3, r2, r3
 8006e06:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e10:	d112      	bne.n	8006e38 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2180      	movs	r1, #128	@ 0x80
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f7ff ff47 	bl	8006cb0 <SPI_WaitFlagStateUntilTimeout>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d016      	beq.n	8006e56 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e2c:	f043 0220 	orr.w	r2, r3, #32
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e00f      	b.n	8006e58 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00a      	beq.n	8006e54 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	3b01      	subs	r3, #1
 8006e42:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e4e:	2b80      	cmp	r3, #128	@ 0x80
 8006e50:	d0f2      	beq.n	8006e38 <SPI_EndRxTxTransaction+0x78>
 8006e52:	e000      	b.n	8006e56 <SPI_EndRxTxTransaction+0x96>
        break;
 8006e54:	bf00      	nop
  }

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3718      	adds	r7, #24
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20000000 	.word	0x20000000
 8006e64:	165e9f81 	.word	0x165e9f81

08006e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d101      	bne.n	8006e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e041      	b.n	8006efe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d106      	bne.n	8006e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7fa fa18 	bl	80012c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2202      	movs	r2, #2
 8006e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	3304      	adds	r3, #4
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	4610      	mov	r0, r2
 8006ea8:	f000 fbe6 	bl	8007678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b082      	sub	sp, #8
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e041      	b.n	8006f9c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d106      	bne.n	8006f32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f839 	bl	8006fa4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2202      	movs	r2, #2
 8006f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3304      	adds	r3, #4
 8006f42:	4619      	mov	r1, r3
 8006f44:	4610      	mov	r0, r2
 8006f46:	f000 fb97 	bl	8007678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b0c      	cmp	r3, #12
 8006fca:	d841      	bhi.n	8007050 <HAL_TIM_PWM_Stop_IT+0x98>
 8006fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8006fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd2:	bf00      	nop
 8006fd4:	08007009 	.word	0x08007009
 8006fd8:	08007051 	.word	0x08007051
 8006fdc:	08007051 	.word	0x08007051
 8006fe0:	08007051 	.word	0x08007051
 8006fe4:	0800701b 	.word	0x0800701b
 8006fe8:	08007051 	.word	0x08007051
 8006fec:	08007051 	.word	0x08007051
 8006ff0:	08007051 	.word	0x08007051
 8006ff4:	0800702d 	.word	0x0800702d
 8006ff8:	08007051 	.word	0x08007051
 8006ffc:	08007051 	.word	0x08007051
 8007000:	08007051 	.word	0x08007051
 8007004:	0800703f 	.word	0x0800703f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68da      	ldr	r2, [r3, #12]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 0202 	bic.w	r2, r2, #2
 8007016:	60da      	str	r2, [r3, #12]
      break;
 8007018:	e01d      	b.n	8007056 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f022 0204 	bic.w	r2, r2, #4
 8007028:	60da      	str	r2, [r3, #12]
      break;
 800702a:	e014      	b.n	8007056 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68da      	ldr	r2, [r3, #12]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 0208 	bic.w	r2, r2, #8
 800703a:	60da      	str	r2, [r3, #12]
      break;
 800703c:	e00b      	b.n	8007056 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 0210 	bic.w	r2, r2, #16
 800704c:	60da      	str	r2, [r3, #12]
      break;
 800704e:	e002      	b.n	8007056 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	73fb      	strb	r3, [r7, #15]
      break;
 8007054:	bf00      	nop
  }

  if (status == HAL_OK)
 8007056:	7bfb      	ldrb	r3, [r7, #15]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d161      	bne.n	8007120 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2200      	movs	r2, #0
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fdfd 	bl	8007c64 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a2f      	ldr	r2, [pc, #188]	@ (800712c <HAL_TIM_PWM_Stop_IT+0x174>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d004      	beq.n	800707e <HAL_TIM_PWM_Stop_IT+0xc6>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a2d      	ldr	r2, [pc, #180]	@ (8007130 <HAL_TIM_PWM_Stop_IT+0x178>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d101      	bne.n	8007082 <HAL_TIM_PWM_Stop_IT+0xca>
 800707e:	2301      	movs	r3, #1
 8007080:	e000      	b.n	8007084 <HAL_TIM_PWM_Stop_IT+0xcc>
 8007082:	2300      	movs	r3, #0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d017      	beq.n	80070b8 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6a1a      	ldr	r2, [r3, #32]
 800708e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007092:	4013      	ands	r3, r2
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10f      	bne.n	80070b8 <HAL_TIM_PWM_Stop_IT+0x100>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6a1a      	ldr	r2, [r3, #32]
 800709e:	f240 4344 	movw	r3, #1092	@ 0x444
 80070a2:	4013      	ands	r3, r2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d107      	bne.n	80070b8 <HAL_TIM_PWM_Stop_IT+0x100>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80070b6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6a1a      	ldr	r2, [r3, #32]
 80070be:	f241 1311 	movw	r3, #4369	@ 0x1111
 80070c2:	4013      	ands	r3, r2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10f      	bne.n	80070e8 <HAL_TIM_PWM_Stop_IT+0x130>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6a1a      	ldr	r2, [r3, #32]
 80070ce:	f240 4344 	movw	r3, #1092	@ 0x444
 80070d2:	4013      	ands	r3, r2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d107      	bne.n	80070e8 <HAL_TIM_PWM_Stop_IT+0x130>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 0201 	bic.w	r2, r2, #1
 80070e6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d104      	bne.n	80070f8 <HAL_TIM_PWM_Stop_IT+0x140>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070f6:	e013      	b.n	8007120 <HAL_TIM_PWM_Stop_IT+0x168>
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	2b04      	cmp	r3, #4
 80070fc:	d104      	bne.n	8007108 <HAL_TIM_PWM_Stop_IT+0x150>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007106:	e00b      	b.n	8007120 <HAL_TIM_PWM_Stop_IT+0x168>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2b08      	cmp	r3, #8
 800710c:	d104      	bne.n	8007118 <HAL_TIM_PWM_Stop_IT+0x160>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007116:	e003      	b.n	8007120 <HAL_TIM_PWM_Stop_IT+0x168>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8007120:	7bfb      	ldrb	r3, [r7, #15]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	40010000 	.word	0x40010000
 8007130:	40010400 	.word	0x40010400

08007134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d020      	beq.n	8007198 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b00      	cmp	r3, #0
 800715e:	d01b      	beq.n	8007198 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f06f 0202 	mvn.w	r2, #2
 8007168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fa65 	bl	800764e <HAL_TIM_IC_CaptureCallback>
 8007184:	e005      	b.n	8007192 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fa57 	bl	800763a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7f9 fb39 	bl	8000804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f003 0304 	and.w	r3, r3, #4
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d020      	beq.n	80071e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d01b      	beq.n	80071e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f06f 0204 	mvn.w	r2, #4
 80071b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2202      	movs	r2, #2
 80071ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fa3f 	bl	800764e <HAL_TIM_IC_CaptureCallback>
 80071d0:	e005      	b.n	80071de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fa31 	bl	800763a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7f9 fb13 	bl	8000804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f003 0308 	and.w	r3, r3, #8
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d020      	beq.n	8007230 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f003 0308 	and.w	r3, r3, #8
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d01b      	beq.n	8007230 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f06f 0208 	mvn.w	r2, #8
 8007200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2204      	movs	r2, #4
 8007206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	69db      	ldr	r3, [r3, #28]
 800720e:	f003 0303 	and.w	r3, r3, #3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fa19 	bl	800764e <HAL_TIM_IC_CaptureCallback>
 800721c:	e005      	b.n	800722a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fa0b 	bl	800763a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7f9 faed 	bl	8000804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	f003 0310 	and.w	r3, r3, #16
 8007236:	2b00      	cmp	r3, #0
 8007238:	d020      	beq.n	800727c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f003 0310 	and.w	r3, r3, #16
 8007240:	2b00      	cmp	r3, #0
 8007242:	d01b      	beq.n	800727c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f06f 0210 	mvn.w	r2, #16
 800724c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2208      	movs	r2, #8
 8007252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f9f3 	bl	800764e <HAL_TIM_IC_CaptureCallback>
 8007268:	e005      	b.n	8007276 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f9e5 	bl	800763a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7f9 fac7 	bl	8000804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00c      	beq.n	80072a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	2b00      	cmp	r3, #0
 800728e:	d007      	beq.n	80072a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f06f 0201 	mvn.w	r2, #1
 8007298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f9c3 	bl	8007626 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00c      	beq.n	80072c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d007      	beq.n	80072c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80072bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fdce 	bl	8007e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00c      	beq.n	80072e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d007      	beq.n	80072e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80072e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f9bd 	bl	8007662 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f003 0320 	and.w	r3, r3, #32
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00c      	beq.n	800730c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f003 0320 	and.w	r3, r3, #32
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d007      	beq.n	800730c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f06f 0220 	mvn.w	r2, #32
 8007304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fda0 	bl	8007e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800730c:	bf00      	nop
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800732a:	2b01      	cmp	r3, #1
 800732c:	d101      	bne.n	8007332 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800732e:	2302      	movs	r3, #2
 8007330:	e0ae      	b.n	8007490 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b0c      	cmp	r3, #12
 800733e:	f200 809f 	bhi.w	8007480 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007342:	a201      	add	r2, pc, #4	@ (adr r2, 8007348 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007348:	0800737d 	.word	0x0800737d
 800734c:	08007481 	.word	0x08007481
 8007350:	08007481 	.word	0x08007481
 8007354:	08007481 	.word	0x08007481
 8007358:	080073bd 	.word	0x080073bd
 800735c:	08007481 	.word	0x08007481
 8007360:	08007481 	.word	0x08007481
 8007364:	08007481 	.word	0x08007481
 8007368:	080073ff 	.word	0x080073ff
 800736c:	08007481 	.word	0x08007481
 8007370:	08007481 	.word	0x08007481
 8007374:	08007481 	.word	0x08007481
 8007378:	0800743f 	.word	0x0800743f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68b9      	ldr	r1, [r7, #8]
 8007382:	4618      	mov	r0, r3
 8007384:	f000 fa24 	bl	80077d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	699a      	ldr	r2, [r3, #24]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f042 0208 	orr.w	r2, r2, #8
 8007396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699a      	ldr	r2, [r3, #24]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0204 	bic.w	r2, r2, #4
 80073a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6999      	ldr	r1, [r3, #24]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	691a      	ldr	r2, [r3, #16]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	619a      	str	r2, [r3, #24]
      break;
 80073ba:	e064      	b.n	8007486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68b9      	ldr	r1, [r7, #8]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fa74 	bl	80078b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699a      	ldr	r2, [r3, #24]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699a      	ldr	r2, [r3, #24]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6999      	ldr	r1, [r3, #24]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	021a      	lsls	r2, r3, #8
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	430a      	orrs	r2, r1
 80073fa:	619a      	str	r2, [r3, #24]
      break;
 80073fc:	e043      	b.n	8007486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68b9      	ldr	r1, [r7, #8]
 8007404:	4618      	mov	r0, r3
 8007406:	f000 fac9 	bl	800799c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	69da      	ldr	r2, [r3, #28]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f042 0208 	orr.w	r2, r2, #8
 8007418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	69da      	ldr	r2, [r3, #28]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 0204 	bic.w	r2, r2, #4
 8007428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69d9      	ldr	r1, [r3, #28]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	691a      	ldr	r2, [r3, #16]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	61da      	str	r2, [r3, #28]
      break;
 800743c:	e023      	b.n	8007486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68b9      	ldr	r1, [r7, #8]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fb1d 	bl	8007a84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	69da      	ldr	r2, [r3, #28]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69da      	ldr	r2, [r3, #28]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	69d9      	ldr	r1, [r3, #28]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	021a      	lsls	r2, r3, #8
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	61da      	str	r2, [r3, #28]
      break;
 800747e:	e002      	b.n	8007486 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	75fb      	strb	r3, [r7, #23]
      break;
 8007484:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800748e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d101      	bne.n	80074b4 <HAL_TIM_ConfigClockSource+0x1c>
 80074b0:	2302      	movs	r3, #2
 80074b2:	e0b4      	b.n	800761e <HAL_TIM_ConfigClockSource+0x186>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2202      	movs	r2, #2
 80074c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80074d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074ec:	d03e      	beq.n	800756c <HAL_TIM_ConfigClockSource+0xd4>
 80074ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074f2:	f200 8087 	bhi.w	8007604 <HAL_TIM_ConfigClockSource+0x16c>
 80074f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074fa:	f000 8086 	beq.w	800760a <HAL_TIM_ConfigClockSource+0x172>
 80074fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007502:	d87f      	bhi.n	8007604 <HAL_TIM_ConfigClockSource+0x16c>
 8007504:	2b70      	cmp	r3, #112	@ 0x70
 8007506:	d01a      	beq.n	800753e <HAL_TIM_ConfigClockSource+0xa6>
 8007508:	2b70      	cmp	r3, #112	@ 0x70
 800750a:	d87b      	bhi.n	8007604 <HAL_TIM_ConfigClockSource+0x16c>
 800750c:	2b60      	cmp	r3, #96	@ 0x60
 800750e:	d050      	beq.n	80075b2 <HAL_TIM_ConfigClockSource+0x11a>
 8007510:	2b60      	cmp	r3, #96	@ 0x60
 8007512:	d877      	bhi.n	8007604 <HAL_TIM_ConfigClockSource+0x16c>
 8007514:	2b50      	cmp	r3, #80	@ 0x50
 8007516:	d03c      	beq.n	8007592 <HAL_TIM_ConfigClockSource+0xfa>
 8007518:	2b50      	cmp	r3, #80	@ 0x50
 800751a:	d873      	bhi.n	8007604 <HAL_TIM_ConfigClockSource+0x16c>
 800751c:	2b40      	cmp	r3, #64	@ 0x40
 800751e:	d058      	beq.n	80075d2 <HAL_TIM_ConfigClockSource+0x13a>
 8007520:	2b40      	cmp	r3, #64	@ 0x40
 8007522:	d86f      	bhi.n	8007604 <HAL_TIM_ConfigClockSource+0x16c>
 8007524:	2b30      	cmp	r3, #48	@ 0x30
 8007526:	d064      	beq.n	80075f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007528:	2b30      	cmp	r3, #48	@ 0x30
 800752a:	d86b      	bhi.n	8007604 <HAL_TIM_ConfigClockSource+0x16c>
 800752c:	2b20      	cmp	r3, #32
 800752e:	d060      	beq.n	80075f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007530:	2b20      	cmp	r3, #32
 8007532:	d867      	bhi.n	8007604 <HAL_TIM_ConfigClockSource+0x16c>
 8007534:	2b00      	cmp	r3, #0
 8007536:	d05c      	beq.n	80075f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007538:	2b10      	cmp	r3, #16
 800753a:	d05a      	beq.n	80075f2 <HAL_TIM_ConfigClockSource+0x15a>
 800753c:	e062      	b.n	8007604 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800754e:	f000 fb69 	bl	8007c24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007560:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	609a      	str	r2, [r3, #8]
      break;
 800756a:	e04f      	b.n	800760c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800757c:	f000 fb52 	bl	8007c24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689a      	ldr	r2, [r3, #8]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800758e:	609a      	str	r2, [r3, #8]
      break;
 8007590:	e03c      	b.n	800760c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800759e:	461a      	mov	r2, r3
 80075a0:	f000 fac6 	bl	8007b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2150      	movs	r1, #80	@ 0x50
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 fb1f 	bl	8007bee <TIM_ITRx_SetConfig>
      break;
 80075b0:	e02c      	b.n	800760c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075be:	461a      	mov	r2, r3
 80075c0:	f000 fae5 	bl	8007b8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2160      	movs	r1, #96	@ 0x60
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 fb0f 	bl	8007bee <TIM_ITRx_SetConfig>
      break;
 80075d0:	e01c      	b.n	800760c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075de:	461a      	mov	r2, r3
 80075e0:	f000 faa6 	bl	8007b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2140      	movs	r1, #64	@ 0x40
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 faff 	bl	8007bee <TIM_ITRx_SetConfig>
      break;
 80075f0:	e00c      	b.n	800760c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4619      	mov	r1, r3
 80075fc:	4610      	mov	r0, r2
 80075fe:	f000 faf6 	bl	8007bee <TIM_ITRx_SetConfig>
      break;
 8007602:	e003      	b.n	800760c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	73fb      	strb	r3, [r7, #15]
      break;
 8007608:	e000      	b.n	800760c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800760a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800761c:	7bfb      	ldrb	r3, [r7, #15]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800762e:	bf00      	nop
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800763a:	b480      	push	{r7}
 800763c:	b083      	sub	sp, #12
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007642:	bf00      	nop
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007656:	bf00      	nop
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
	...

08007678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a46      	ldr	r2, [pc, #280]	@ (80077a4 <TIM_Base_SetConfig+0x12c>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d013      	beq.n	80076b8 <TIM_Base_SetConfig+0x40>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007696:	d00f      	beq.n	80076b8 <TIM_Base_SetConfig+0x40>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a43      	ldr	r2, [pc, #268]	@ (80077a8 <TIM_Base_SetConfig+0x130>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d00b      	beq.n	80076b8 <TIM_Base_SetConfig+0x40>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a42      	ldr	r2, [pc, #264]	@ (80077ac <TIM_Base_SetConfig+0x134>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d007      	beq.n	80076b8 <TIM_Base_SetConfig+0x40>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a41      	ldr	r2, [pc, #260]	@ (80077b0 <TIM_Base_SetConfig+0x138>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d003      	beq.n	80076b8 <TIM_Base_SetConfig+0x40>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a40      	ldr	r2, [pc, #256]	@ (80077b4 <TIM_Base_SetConfig+0x13c>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d108      	bne.n	80076ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a35      	ldr	r2, [pc, #212]	@ (80077a4 <TIM_Base_SetConfig+0x12c>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d02b      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076d8:	d027      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a32      	ldr	r2, [pc, #200]	@ (80077a8 <TIM_Base_SetConfig+0x130>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d023      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a31      	ldr	r2, [pc, #196]	@ (80077ac <TIM_Base_SetConfig+0x134>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d01f      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a30      	ldr	r2, [pc, #192]	@ (80077b0 <TIM_Base_SetConfig+0x138>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d01b      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a2f      	ldr	r2, [pc, #188]	@ (80077b4 <TIM_Base_SetConfig+0x13c>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d017      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a2e      	ldr	r2, [pc, #184]	@ (80077b8 <TIM_Base_SetConfig+0x140>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d013      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a2d      	ldr	r2, [pc, #180]	@ (80077bc <TIM_Base_SetConfig+0x144>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d00f      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a2c      	ldr	r2, [pc, #176]	@ (80077c0 <TIM_Base_SetConfig+0x148>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d00b      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a2b      	ldr	r2, [pc, #172]	@ (80077c4 <TIM_Base_SetConfig+0x14c>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d007      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a2a      	ldr	r2, [pc, #168]	@ (80077c8 <TIM_Base_SetConfig+0x150>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d003      	beq.n	800772a <TIM_Base_SetConfig+0xb2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a29      	ldr	r2, [pc, #164]	@ (80077cc <TIM_Base_SetConfig+0x154>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d108      	bne.n	800773c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	4313      	orrs	r3, r2
 800773a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	4313      	orrs	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a10      	ldr	r2, [pc, #64]	@ (80077a4 <TIM_Base_SetConfig+0x12c>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d003      	beq.n	8007770 <TIM_Base_SetConfig+0xf8>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a12      	ldr	r2, [pc, #72]	@ (80077b4 <TIM_Base_SetConfig+0x13c>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d103      	bne.n	8007778 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	691a      	ldr	r2, [r3, #16]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b01      	cmp	r3, #1
 8007788:	d105      	bne.n	8007796 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	f023 0201 	bic.w	r2, r3, #1
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	611a      	str	r2, [r3, #16]
  }
}
 8007796:	bf00      	nop
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	40010000 	.word	0x40010000
 80077a8:	40000400 	.word	0x40000400
 80077ac:	40000800 	.word	0x40000800
 80077b0:	40000c00 	.word	0x40000c00
 80077b4:	40010400 	.word	0x40010400
 80077b8:	40014000 	.word	0x40014000
 80077bc:	40014400 	.word	0x40014400
 80077c0:	40014800 	.word	0x40014800
 80077c4:	40001800 	.word	0x40001800
 80077c8:	40001c00 	.word	0x40001c00
 80077cc:	40002000 	.word	0x40002000

080077d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	f023 0201 	bic.w	r2, r3, #1
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f023 0303 	bic.w	r3, r3, #3
 8007806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	4313      	orrs	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f023 0302 	bic.w	r3, r3, #2
 8007818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	4313      	orrs	r3, r2
 8007822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a20      	ldr	r2, [pc, #128]	@ (80078a8 <TIM_OC1_SetConfig+0xd8>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d003      	beq.n	8007834 <TIM_OC1_SetConfig+0x64>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a1f      	ldr	r2, [pc, #124]	@ (80078ac <TIM_OC1_SetConfig+0xdc>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d10c      	bne.n	800784e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	f023 0308 	bic.w	r3, r3, #8
 800783a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	4313      	orrs	r3, r2
 8007844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f023 0304 	bic.w	r3, r3, #4
 800784c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a15      	ldr	r2, [pc, #84]	@ (80078a8 <TIM_OC1_SetConfig+0xd8>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d003      	beq.n	800785e <TIM_OC1_SetConfig+0x8e>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a14      	ldr	r2, [pc, #80]	@ (80078ac <TIM_OC1_SetConfig+0xdc>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d111      	bne.n	8007882 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800786c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	4313      	orrs	r3, r2
 8007876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	4313      	orrs	r3, r2
 8007880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	621a      	str	r2, [r3, #32]
}
 800789c:	bf00      	nop
 800789e:	371c      	adds	r7, #28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	40010000 	.word	0x40010000
 80078ac:	40010400 	.word	0x40010400

080078b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b087      	sub	sp, #28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a1b      	ldr	r3, [r3, #32]
 80078c4:	f023 0210 	bic.w	r2, r3, #16
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	021b      	lsls	r3, r3, #8
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	f023 0320 	bic.w	r3, r3, #32
 80078fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	011b      	lsls	r3, r3, #4
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	4313      	orrs	r3, r2
 8007906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a22      	ldr	r2, [pc, #136]	@ (8007994 <TIM_OC2_SetConfig+0xe4>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d003      	beq.n	8007918 <TIM_OC2_SetConfig+0x68>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a21      	ldr	r2, [pc, #132]	@ (8007998 <TIM_OC2_SetConfig+0xe8>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d10d      	bne.n	8007934 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800791e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	011b      	lsls	r3, r3, #4
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	4313      	orrs	r3, r2
 800792a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007932:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a17      	ldr	r2, [pc, #92]	@ (8007994 <TIM_OC2_SetConfig+0xe4>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d003      	beq.n	8007944 <TIM_OC2_SetConfig+0x94>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a16      	ldr	r2, [pc, #88]	@ (8007998 <TIM_OC2_SetConfig+0xe8>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d113      	bne.n	800796c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800794a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007952:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	4313      	orrs	r3, r2
 800795e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	4313      	orrs	r3, r2
 800796a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	621a      	str	r2, [r3, #32]
}
 8007986:	bf00      	nop
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	40010000 	.word	0x40010000
 8007998:	40010400 	.word	0x40010400

0800799c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800799c:	b480      	push	{r7}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	69db      	ldr	r3, [r3, #28]
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 0303 	bic.w	r3, r3, #3
 80079d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	4313      	orrs	r3, r2
 80079dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80079e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	021b      	lsls	r3, r3, #8
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a21      	ldr	r2, [pc, #132]	@ (8007a7c <TIM_OC3_SetConfig+0xe0>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d003      	beq.n	8007a02 <TIM_OC3_SetConfig+0x66>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a20      	ldr	r2, [pc, #128]	@ (8007a80 <TIM_OC3_SetConfig+0xe4>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d10d      	bne.n	8007a1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a16      	ldr	r2, [pc, #88]	@ (8007a7c <TIM_OC3_SetConfig+0xe0>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d003      	beq.n	8007a2e <TIM_OC3_SetConfig+0x92>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a15      	ldr	r2, [pc, #84]	@ (8007a80 <TIM_OC3_SetConfig+0xe4>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d113      	bne.n	8007a56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	011b      	lsls	r3, r3, #4
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	011b      	lsls	r3, r3, #4
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	621a      	str	r2, [r3, #32]
}
 8007a70:	bf00      	nop
 8007a72:	371c      	adds	r7, #28
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	40010000 	.word	0x40010000
 8007a80:	40010400 	.word	0x40010400

08007a84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b087      	sub	sp, #28
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a1b      	ldr	r3, [r3, #32]
 8007a98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	021b      	lsls	r3, r3, #8
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	031b      	lsls	r3, r3, #12
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a12      	ldr	r2, [pc, #72]	@ (8007b28 <TIM_OC4_SetConfig+0xa4>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d003      	beq.n	8007aec <TIM_OC4_SetConfig+0x68>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a11      	ldr	r2, [pc, #68]	@ (8007b2c <TIM_OC4_SetConfig+0xa8>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d109      	bne.n	8007b00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007af2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	019b      	lsls	r3, r3, #6
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	621a      	str	r2, [r3, #32]
}
 8007b1a:	bf00      	nop
 8007b1c:	371c      	adds	r7, #28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	40010000 	.word	0x40010000
 8007b2c:	40010400 	.word	0x40010400

08007b30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b087      	sub	sp, #28
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6a1b      	ldr	r3, [r3, #32]
 8007b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	f023 0201 	bic.w	r2, r3, #1
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	011b      	lsls	r3, r3, #4
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f023 030a 	bic.w	r3, r3, #10
 8007b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	621a      	str	r2, [r3, #32]
}
 8007b82:	bf00      	nop
 8007b84:	371c      	adds	r7, #28
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b087      	sub	sp, #28
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	60f8      	str	r0, [r7, #12]
 8007b96:	60b9      	str	r1, [r7, #8]
 8007b98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
 8007ba4:	f023 0210 	bic.w	r2, r3, #16
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007bb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	031b      	lsls	r3, r3, #12
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007bca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	011b      	lsls	r3, r3, #4
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	621a      	str	r2, [r3, #32]
}
 8007be2:	bf00      	nop
 8007be4:	371c      	adds	r7, #28
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b085      	sub	sp, #20
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	f043 0307 	orr.w	r3, r3, #7
 8007c10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	609a      	str	r2, [r3, #8]
}
 8007c18:	bf00      	nop
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b087      	sub	sp, #28
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
 8007c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	021a      	lsls	r2, r3, #8
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	431a      	orrs	r2, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	609a      	str	r2, [r3, #8]
}
 8007c58:	bf00      	nop
 8007c5a:	371c      	adds	r7, #28
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	f003 031f 	and.w	r3, r3, #31
 8007c76:	2201      	movs	r2, #1
 8007c78:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a1a      	ldr	r2, [r3, #32]
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	43db      	mvns	r3, r3
 8007c86:	401a      	ands	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6a1a      	ldr	r2, [r3, #32]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	f003 031f 	and.w	r3, r3, #31
 8007c96:	6879      	ldr	r1, [r7, #4]
 8007c98:	fa01 f303 	lsl.w	r3, r1, r3
 8007c9c:	431a      	orrs	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	621a      	str	r2, [r3, #32]
}
 8007ca2:	bf00      	nop
 8007ca4:	371c      	adds	r7, #28
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
	...

08007cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d101      	bne.n	8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	e05a      	b.n	8007d7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a21      	ldr	r2, [pc, #132]	@ (8007d8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d022      	beq.n	8007d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d14:	d01d      	beq.n	8007d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8007d90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d018      	beq.n	8007d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a1b      	ldr	r2, [pc, #108]	@ (8007d94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d013      	beq.n	8007d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8007d98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d00e      	beq.n	8007d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a18      	ldr	r2, [pc, #96]	@ (8007d9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d009      	beq.n	8007d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a17      	ldr	r2, [pc, #92]	@ (8007da0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d004      	beq.n	8007d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a15      	ldr	r2, [pc, #84]	@ (8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d10c      	bne.n	8007d6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	40010000 	.word	0x40010000
 8007d90:	40000400 	.word	0x40000400
 8007d94:	40000800 	.word	0x40000800
 8007d98:	40000c00 	.word	0x40000c00
 8007d9c:	40010400 	.word	0x40010400
 8007da0:	40014000 	.word	0x40014000
 8007da4:	40001800 	.word	0x40001800

08007da8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d101      	bne.n	8007dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	e03d      	b.n	8007e40 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e74:	b084      	sub	sp, #16
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b084      	sub	sp, #16
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	f107 001c 	add.w	r0, r7, #28
 8007e82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e86:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d123      	bne.n	8007ed6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e92:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007ea2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007eb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d105      	bne.n	8007eca <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f9dc 	bl	8008288 <USB_CoreReset>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	73fb      	strb	r3, [r7, #15]
 8007ed4:	e01b      	b.n	8007f0e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f9d0 	bl	8008288 <USB_CoreReset>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007eec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d106      	bne.n	8007f02 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	639a      	str	r2, [r3, #56]	@ 0x38
 8007f00:	e005      	b.n	8007f0e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f06:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007f0e:	7fbb      	ldrb	r3, [r7, #30]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d10b      	bne.n	8007f2c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f043 0206 	orr.w	r2, r3, #6
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	f043 0220 	orr.w	r2, r3, #32
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f38:	b004      	add	sp, #16
 8007f3a:	4770      	bx	lr

08007f3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f043 0201 	orr.w	r2, r3, #1
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f023 0201 	bic.w	r2, r3, #1
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f9c:	78fb      	ldrb	r3, [r7, #3]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d115      	bne.n	8007fce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007fae:	200a      	movs	r0, #10
 8007fb0:	f7f9 fb30 	bl	8001614 <HAL_Delay>
      ms += 10U;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	330a      	adds	r3, #10
 8007fb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f956 	bl	800826c <USB_GetMode>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d01e      	beq.n	8008004 <USB_SetCurrentMode+0x84>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2bc7      	cmp	r3, #199	@ 0xc7
 8007fca:	d9f0      	bls.n	8007fae <USB_SetCurrentMode+0x2e>
 8007fcc:	e01a      	b.n	8008004 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007fce:	78fb      	ldrb	r3, [r7, #3]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d115      	bne.n	8008000 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007fe0:	200a      	movs	r0, #10
 8007fe2:	f7f9 fb17 	bl	8001614 <HAL_Delay>
      ms += 10U;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	330a      	adds	r3, #10
 8007fea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f93d 	bl	800826c <USB_GetMode>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d005      	beq.n	8008004 <USB_SetCurrentMode+0x84>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2bc7      	cmp	r3, #199	@ 0xc7
 8007ffc:	d9f0      	bls.n	8007fe0 <USB_SetCurrentMode+0x60>
 8007ffe:	e001      	b.n	8008004 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e005      	b.n	8008010 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2bc8      	cmp	r3, #200	@ 0xc8
 8008008:	d101      	bne.n	800800e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e000      	b.n	8008010 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008022:	2300      	movs	r3, #0
 8008024:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3301      	adds	r3, #1
 800802a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008032:	d901      	bls.n	8008038 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e01b      	b.n	8008070 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	daf2      	bge.n	8008026 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008040:	2300      	movs	r3, #0
 8008042:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	019b      	lsls	r3, r3, #6
 8008048:	f043 0220 	orr.w	r2, r3, #32
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	3301      	adds	r3, #1
 8008054:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800805c:	d901      	bls.n	8008062 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e006      	b.n	8008070 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	f003 0320 	and.w	r3, r3, #32
 800806a:	2b20      	cmp	r3, #32
 800806c:	d0f0      	beq.n	8008050 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	3301      	adds	r3, #1
 800808c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008094:	d901      	bls.n	800809a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e018      	b.n	80080cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	daf2      	bge.n	8008088 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80080a2:	2300      	movs	r3, #0
 80080a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2210      	movs	r2, #16
 80080aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	3301      	adds	r3, #1
 80080b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080b8:	d901      	bls.n	80080be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e006      	b.n	80080cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	f003 0310 	and.w	r3, r3, #16
 80080c6:	2b10      	cmp	r3, #16
 80080c8:	d0f0      	beq.n	80080ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80080d8:	b480      	push	{r7}
 80080da:	b089      	sub	sp, #36	@ 0x24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	4611      	mov	r1, r2
 80080e4:	461a      	mov	r2, r3
 80080e6:	460b      	mov	r3, r1
 80080e8:	71fb      	strb	r3, [r7, #7]
 80080ea:	4613      	mov	r3, r2
 80080ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80080f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d123      	bne.n	8008146 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80080fe:	88bb      	ldrh	r3, [r7, #4]
 8008100:	3303      	adds	r3, #3
 8008102:	089b      	lsrs	r3, r3, #2
 8008104:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008106:	2300      	movs	r3, #0
 8008108:	61bb      	str	r3, [r7, #24]
 800810a:	e018      	b.n	800813e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800810c:	79fb      	ldrb	r3, [r7, #7]
 800810e:	031a      	lsls	r2, r3, #12
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	4413      	add	r3, r2
 8008114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008118:	461a      	mov	r2, r3
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	3301      	adds	r3, #1
 8008124:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	3301      	adds	r3, #1
 800812a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	3301      	adds	r3, #1
 8008130:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	3301      	adds	r3, #1
 8008136:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	3301      	adds	r3, #1
 800813c:	61bb      	str	r3, [r7, #24]
 800813e:	69ba      	ldr	r2, [r7, #24]
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	429a      	cmp	r2, r3
 8008144:	d3e2      	bcc.n	800810c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3724      	adds	r7, #36	@ 0x24
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008154:	b480      	push	{r7}
 8008156:	b08b      	sub	sp, #44	@ 0x2c
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	4613      	mov	r3, r2
 8008160:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800816a:	88fb      	ldrh	r3, [r7, #6]
 800816c:	089b      	lsrs	r3, r3, #2
 800816e:	b29b      	uxth	r3, r3
 8008170:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008172:	88fb      	ldrh	r3, [r7, #6]
 8008174:	f003 0303 	and.w	r3, r3, #3
 8008178:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800817a:	2300      	movs	r3, #0
 800817c:	623b      	str	r3, [r7, #32]
 800817e:	e014      	b.n	80081aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818a:	601a      	str	r2, [r3, #0]
    pDest++;
 800818c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818e:	3301      	adds	r3, #1
 8008190:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008194:	3301      	adds	r3, #1
 8008196:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819a:	3301      	adds	r3, #1
 800819c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800819e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a0:	3301      	adds	r3, #1
 80081a2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80081a4:	6a3b      	ldr	r3, [r7, #32]
 80081a6:	3301      	adds	r3, #1
 80081a8:	623b      	str	r3, [r7, #32]
 80081aa:	6a3a      	ldr	r2, [r7, #32]
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d3e6      	bcc.n	8008180 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80081b2:	8bfb      	ldrh	r3, [r7, #30]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d01e      	beq.n	80081f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80081b8:	2300      	movs	r3, #0
 80081ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081c2:	461a      	mov	r2, r3
 80081c4:	f107 0310 	add.w	r3, r7, #16
 80081c8:	6812      	ldr	r2, [r2, #0]
 80081ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	6a3b      	ldr	r3, [r7, #32]
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	00db      	lsls	r3, r3, #3
 80081d4:	fa22 f303 	lsr.w	r3, r2, r3
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081dc:	701a      	strb	r2, [r3, #0]
      i++;
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	3301      	adds	r3, #1
 80081e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80081e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e6:	3301      	adds	r3, #1
 80081e8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80081ea:	8bfb      	ldrh	r3, [r7, #30]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80081f0:	8bfb      	ldrh	r3, [r7, #30]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1ea      	bne.n	80081cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80081f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	372c      	adds	r7, #44	@ 0x2c
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	695b      	ldr	r3, [r3, #20]
 8008210:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	4013      	ands	r3, r2
 800821a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800821c:	68fb      	ldr	r3, [r7, #12]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800822a:	b480      	push	{r7}
 800822c:	b085      	sub	sp, #20
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	460b      	mov	r3, r1
 8008234:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800823a:	78fb      	ldrb	r3, [r7, #3]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4413      	add	r3, r2
 8008242:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800824a:	78fb      	ldrb	r3, [r7, #3]
 800824c:	015a      	lsls	r2, r3, #5
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	4413      	add	r3, r2
 8008252:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	4013      	ands	r3, r2
 800825c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800825e:	68bb      	ldr	r3, [r7, #8]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	695b      	ldr	r3, [r3, #20]
 8008278:	f003 0301 	and.w	r3, r3, #1
}
 800827c:	4618      	mov	r0, r3
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008290:	2300      	movs	r3, #0
 8008292:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	3301      	adds	r3, #1
 8008298:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082a0:	d901      	bls.n	80082a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e01b      	b.n	80082de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	daf2      	bge.n	8008294 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	f043 0201 	orr.w	r2, r3, #1
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	3301      	adds	r3, #1
 80082c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082ca:	d901      	bls.n	80082d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e006      	b.n	80082de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	f003 0301 	and.w	r3, r3, #1
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d0f0      	beq.n	80082be <USB_CoreReset+0x36>

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
	...

080082ec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082ec:	b084      	sub	sp, #16
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b086      	sub	sp, #24
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80082fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800830c:	461a      	mov	r2, r3
 800830e:	2300      	movs	r3, #0
 8008310:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008316:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008322:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800833e:	2b00      	cmp	r3, #0
 8008340:	d119      	bne.n	8008376 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008342:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008346:	2b01      	cmp	r3, #1
 8008348:	d10a      	bne.n	8008360 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008358:	f043 0304 	orr.w	r3, r3, #4
 800835c:	6013      	str	r3, [r2, #0]
 800835e:	e014      	b.n	800838a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800836e:	f023 0304 	bic.w	r3, r3, #4
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	e009      	b.n	800838a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008384:	f023 0304 	bic.w	r3, r3, #4
 8008388:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800838a:	2110      	movs	r1, #16
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f7ff fe43 	bl	8008018 <USB_FlushTxFifo>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7ff fe6d 	bl	800807c <USB_FlushRxFifo>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80083ac:	2300      	movs	r3, #0
 80083ae:	613b      	str	r3, [r7, #16]
 80083b0:	e015      	b.n	80083de <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083be:	461a      	mov	r2, r3
 80083c0:	f04f 33ff 	mov.w	r3, #4294967295
 80083c4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083d2:	461a      	mov	r2, r3
 80083d4:	2300      	movs	r3, #0
 80083d6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	3301      	adds	r3, #1
 80083dc:	613b      	str	r3, [r7, #16]
 80083de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80083e2:	461a      	mov	r2, r3
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d3e3      	bcc.n	80083b2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f04f 32ff 	mov.w	r2, #4294967295
 80083f6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a18      	ldr	r2, [pc, #96]	@ (800845c <USB_HostInit+0x170>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d10b      	bne.n	8008418 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008406:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a15      	ldr	r2, [pc, #84]	@ (8008460 <USB_HostInit+0x174>)
 800840c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a14      	ldr	r2, [pc, #80]	@ (8008464 <USB_HostInit+0x178>)
 8008412:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008416:	e009      	b.n	800842c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2280      	movs	r2, #128	@ 0x80
 800841c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a11      	ldr	r2, [pc, #68]	@ (8008468 <USB_HostInit+0x17c>)
 8008422:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a11      	ldr	r2, [pc, #68]	@ (800846c <USB_HostInit+0x180>)
 8008428:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800842c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008430:	2b00      	cmp	r3, #0
 8008432:	d105      	bne.n	8008440 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	f043 0210 	orr.w	r2, r3, #16
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	699a      	ldr	r2, [r3, #24]
 8008444:	4b0a      	ldr	r3, [pc, #40]	@ (8008470 <USB_HostInit+0x184>)
 8008446:	4313      	orrs	r3, r2
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800844c:	7dfb      	ldrb	r3, [r7, #23]
}
 800844e:	4618      	mov	r0, r3
 8008450:	3718      	adds	r7, #24
 8008452:	46bd      	mov	sp, r7
 8008454:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008458:	b004      	add	sp, #16
 800845a:	4770      	bx	lr
 800845c:	40040000 	.word	0x40040000
 8008460:	01000200 	.word	0x01000200
 8008464:	00e00300 	.word	0x00e00300
 8008468:	00600080 	.word	0x00600080
 800846c:	004000e0 	.word	0x004000e0
 8008470:	a3200008 	.word	0xa3200008

08008474 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	460b      	mov	r3, r1
 800847e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008492:	f023 0303 	bic.w	r3, r3, #3
 8008496:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	78fb      	ldrb	r3, [r7, #3]
 80084a2:	f003 0303 	and.w	r3, r3, #3
 80084a6:	68f9      	ldr	r1, [r7, #12]
 80084a8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80084ac:	4313      	orrs	r3, r2
 80084ae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80084b0:	78fb      	ldrb	r3, [r7, #3]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d107      	bne.n	80084c6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084bc:	461a      	mov	r2, r3
 80084be:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80084c2:	6053      	str	r3, [r2, #4]
 80084c4:	e00c      	b.n	80084e0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80084c6:	78fb      	ldrb	r3, [r7, #3]
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d107      	bne.n	80084dc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084d2:	461a      	mov	r2, r3
 80084d4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80084d8:	6053      	str	r3, [r2, #4]
 80084da:	e001      	b.n	80084e0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e000      	b.n	80084e2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3714      	adds	r7, #20
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b084      	sub	sp, #16
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800850e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800851c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800851e:	2064      	movs	r0, #100	@ 0x64
 8008520:	f7f9 f878 	bl	8001614 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800852c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008530:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008532:	200a      	movs	r0, #10
 8008534:	f7f9 f86e 	bl	8001614 <HAL_Delay>

  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008542:	b480      	push	{r7}
 8008544:	b085      	sub	sp, #20
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	460b      	mov	r3, r1
 800854c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008566:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800856e:	2b00      	cmp	r3, #0
 8008570:	d109      	bne.n	8008586 <USB_DriveVbus+0x44>
 8008572:	78fb      	ldrb	r3, [r7, #3]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d106      	bne.n	8008586 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008580:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008584:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800858c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008590:	d109      	bne.n	80085a6 <USB_DriveVbus+0x64>
 8008592:	78fb      	ldrb	r3, [r7, #3]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d106      	bne.n	80085a6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80085a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085a4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80085c0:	2300      	movs	r3, #0
 80085c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	0c5b      	lsrs	r3, r3, #17
 80085d2:	f003 0303 	and.w	r3, r3, #3
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b085      	sub	sp, #20
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	b29b      	uxth	r3, r3
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b088      	sub	sp, #32
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	4608      	mov	r0, r1
 800860e:	4611      	mov	r1, r2
 8008610:	461a      	mov	r2, r3
 8008612:	4603      	mov	r3, r0
 8008614:	70fb      	strb	r3, [r7, #3]
 8008616:	460b      	mov	r3, r1
 8008618:	70bb      	strb	r3, [r7, #2]
 800861a:	4613      	mov	r3, r2
 800861c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008626:	78fb      	ldrb	r3, [r7, #3]
 8008628:	015a      	lsls	r2, r3, #5
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	4413      	add	r3, r2
 800862e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008632:	461a      	mov	r2, r3
 8008634:	f04f 33ff 	mov.w	r3, #4294967295
 8008638:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800863a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800863e:	2b03      	cmp	r3, #3
 8008640:	d87c      	bhi.n	800873c <USB_HC_Init+0x138>
 8008642:	a201      	add	r2, pc, #4	@ (adr r2, 8008648 <USB_HC_Init+0x44>)
 8008644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008648:	08008659 	.word	0x08008659
 800864c:	080086ff 	.word	0x080086ff
 8008650:	08008659 	.word	0x08008659
 8008654:	080086c1 	.word	0x080086c1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008658:	78fb      	ldrb	r3, [r7, #3]
 800865a:	015a      	lsls	r2, r3, #5
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	4413      	add	r3, r2
 8008660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008664:	461a      	mov	r2, r3
 8008666:	f240 439d 	movw	r3, #1181	@ 0x49d
 800866a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800866c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008670:	2b00      	cmp	r3, #0
 8008672:	da10      	bge.n	8008696 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	4413      	add	r3, r2
 800867c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	78fa      	ldrb	r2, [r7, #3]
 8008684:	0151      	lsls	r1, r2, #5
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	440a      	add	r2, r1
 800868a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800868e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008692:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008694:	e055      	b.n	8008742 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a6f      	ldr	r2, [pc, #444]	@ (8008858 <USB_HC_Init+0x254>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d151      	bne.n	8008742 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800869e:	78fb      	ldrb	r3, [r7, #3]
 80086a0:	015a      	lsls	r2, r3, #5
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	4413      	add	r3, r2
 80086a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	78fa      	ldrb	r2, [r7, #3]
 80086ae:	0151      	lsls	r1, r2, #5
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	440a      	add	r2, r1
 80086b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086b8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80086bc:	60d3      	str	r3, [r2, #12]
      break;
 80086be:	e040      	b.n	8008742 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80086c0:	78fb      	ldrb	r3, [r7, #3]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086cc:	461a      	mov	r2, r3
 80086ce:	f240 639d 	movw	r3, #1693	@ 0x69d
 80086d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80086d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	da34      	bge.n	8008746 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80086dc:	78fb      	ldrb	r3, [r7, #3]
 80086de:	015a      	lsls	r2, r3, #5
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	78fa      	ldrb	r2, [r7, #3]
 80086ec:	0151      	lsls	r1, r2, #5
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	440a      	add	r2, r1
 80086f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086fa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80086fc:	e023      	b.n	8008746 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80086fe:	78fb      	ldrb	r3, [r7, #3]
 8008700:	015a      	lsls	r2, r3, #5
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	4413      	add	r3, r2
 8008706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800870a:	461a      	mov	r2, r3
 800870c:	f240 2325 	movw	r3, #549	@ 0x225
 8008710:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008712:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008716:	2b00      	cmp	r3, #0
 8008718:	da17      	bge.n	800874a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800871a:	78fb      	ldrb	r3, [r7, #3]
 800871c:	015a      	lsls	r2, r3, #5
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	4413      	add	r3, r2
 8008722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	78fa      	ldrb	r2, [r7, #3]
 800872a:	0151      	lsls	r1, r2, #5
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	440a      	add	r2, r1
 8008730:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008734:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008738:	60d3      	str	r3, [r2, #12]
      }
      break;
 800873a:	e006      	b.n	800874a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	77fb      	strb	r3, [r7, #31]
      break;
 8008740:	e004      	b.n	800874c <USB_HC_Init+0x148>
      break;
 8008742:	bf00      	nop
 8008744:	e002      	b.n	800874c <USB_HC_Init+0x148>
      break;
 8008746:	bf00      	nop
 8008748:	e000      	b.n	800874c <USB_HC_Init+0x148>
      break;
 800874a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800874c:	78fb      	ldrb	r3, [r7, #3]
 800874e:	015a      	lsls	r2, r3, #5
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	4413      	add	r3, r2
 8008754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008758:	461a      	mov	r2, r3
 800875a:	2300      	movs	r3, #0
 800875c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800875e:	78fb      	ldrb	r3, [r7, #3]
 8008760:	015a      	lsls	r2, r3, #5
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	4413      	add	r3, r2
 8008766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	78fa      	ldrb	r2, [r7, #3]
 800876e:	0151      	lsls	r1, r2, #5
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	440a      	add	r2, r1
 8008774:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008778:	f043 0302 	orr.w	r3, r3, #2
 800877c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008784:	699a      	ldr	r2, [r3, #24]
 8008786:	78fb      	ldrb	r3, [r7, #3]
 8008788:	f003 030f 	and.w	r3, r3, #15
 800878c:	2101      	movs	r1, #1
 800878e:	fa01 f303 	lsl.w	r3, r1, r3
 8008792:	6939      	ldr	r1, [r7, #16]
 8008794:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008798:	4313      	orrs	r3, r2
 800879a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80087a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	da03      	bge.n	80087b8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80087b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087b4:	61bb      	str	r3, [r7, #24]
 80087b6:	e001      	b.n	80087bc <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80087b8:	2300      	movs	r3, #0
 80087ba:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7ff fef9 	bl	80085b4 <USB_GetHostSpeed>
 80087c2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80087c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d106      	bne.n	80087da <USB_HC_Init+0x1d6>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d003      	beq.n	80087da <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80087d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80087d6:	617b      	str	r3, [r7, #20]
 80087d8:	e001      	b.n	80087de <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80087da:	2300      	movs	r3, #0
 80087dc:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80087de:	787b      	ldrb	r3, [r7, #1]
 80087e0:	059b      	lsls	r3, r3, #22
 80087e2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80087e6:	78bb      	ldrb	r3, [r7, #2]
 80087e8:	02db      	lsls	r3, r3, #11
 80087ea:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80087ee:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80087f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80087f4:	049b      	lsls	r3, r3, #18
 80087f6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80087fa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80087fc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80087fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008802:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	431a      	orrs	r2, r3
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800880c:	78fa      	ldrb	r2, [r7, #3]
 800880e:	0151      	lsls	r1, r2, #5
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	440a      	add	r2, r1
 8008814:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008818:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800881c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800881e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008822:	2b03      	cmp	r3, #3
 8008824:	d003      	beq.n	800882e <USB_HC_Init+0x22a>
 8008826:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800882a:	2b01      	cmp	r3, #1
 800882c:	d10f      	bne.n	800884e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800882e:	78fb      	ldrb	r3, [r7, #3]
 8008830:	015a      	lsls	r2, r3, #5
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	4413      	add	r3, r2
 8008836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	78fa      	ldrb	r2, [r7, #3]
 800883e:	0151      	lsls	r1, r2, #5
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	440a      	add	r2, r1
 8008844:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008848:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800884c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800884e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3720      	adds	r7, #32
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	40040000 	.word	0x40040000

0800885c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b08c      	sub	sp, #48	@ 0x30
 8008860:	af02      	add	r7, sp, #8
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	4613      	mov	r3, r2
 8008868:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	785b      	ldrb	r3, [r3, #1]
 8008872:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008874:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008878:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	4a5d      	ldr	r2, [pc, #372]	@ (80089f4 <USB_HC_StartXfer+0x198>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d12f      	bne.n	80088e2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008882:	79fb      	ldrb	r3, [r7, #7]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d11c      	bne.n	80088c2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	7c9b      	ldrb	r3, [r3, #18]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d003      	beq.n	8008898 <USB_HC_StartXfer+0x3c>
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	7c9b      	ldrb	r3, [r3, #18]
 8008894:	2b02      	cmp	r3, #2
 8008896:	d124      	bne.n	80088e2 <USB_HC_StartXfer+0x86>
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	799b      	ldrb	r3, [r3, #6]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d120      	bne.n	80088e2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	015a      	lsls	r2, r3, #5
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	4413      	add	r3, r2
 80088a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	69fa      	ldr	r2, [r7, #28]
 80088b0:	0151      	lsls	r1, r2, #5
 80088b2:	6a3a      	ldr	r2, [r7, #32]
 80088b4:	440a      	add	r2, r1
 80088b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088be:	60d3      	str	r3, [r2, #12]
 80088c0:	e00f      	b.n	80088e2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	791b      	ldrb	r3, [r3, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10b      	bne.n	80088e2 <USB_HC_StartXfer+0x86>
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	795b      	ldrb	r3, [r3, #5]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d107      	bne.n	80088e2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	785b      	ldrb	r3, [r3, #1]
 80088d6:	4619      	mov	r1, r3
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 fb6b 	bl	8008fb4 <USB_DoPing>
        return HAL_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	e232      	b.n	8008d48 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	799b      	ldrb	r3, [r3, #6]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d158      	bne.n	800899c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80088ea:	2301      	movs	r3, #1
 80088ec:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	78db      	ldrb	r3, [r3, #3]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d007      	beq.n	8008906 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80088f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	8a92      	ldrh	r2, [r2, #20]
 80088fc:	fb03 f202 	mul.w	r2, r3, r2
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	61da      	str	r2, [r3, #28]
 8008904:	e07c      	b.n	8008a00 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	7c9b      	ldrb	r3, [r3, #18]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d130      	bne.n	8008970 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	2bbc      	cmp	r3, #188	@ 0xbc
 8008914:	d918      	bls.n	8008948 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	8a9b      	ldrh	r3, [r3, #20]
 800891a:	461a      	mov	r2, r3
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	69da      	ldr	r2, [r3, #28]
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d003      	beq.n	8008938 <USB_HC_StartXfer+0xdc>
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	2b02      	cmp	r3, #2
 8008936:	d103      	bne.n	8008940 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	2202      	movs	r2, #2
 800893c:	60da      	str	r2, [r3, #12]
 800893e:	e05f      	b.n	8008a00 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2201      	movs	r2, #1
 8008944:	60da      	str	r2, [r3, #12]
 8008946:	e05b      	b.n	8008a00 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	6a1a      	ldr	r2, [r3, #32]
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d007      	beq.n	8008968 <USB_HC_StartXfer+0x10c>
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	2b02      	cmp	r3, #2
 800895e:	d003      	beq.n	8008968 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	2204      	movs	r2, #4
 8008964:	60da      	str	r2, [r3, #12]
 8008966:	e04b      	b.n	8008a00 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	2203      	movs	r2, #3
 800896c:	60da      	str	r2, [r3, #12]
 800896e:	e047      	b.n	8008a00 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008970:	79fb      	ldrb	r3, [r7, #7]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d10d      	bne.n	8008992 <USB_HC_StartXfer+0x136>
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	8a92      	ldrh	r2, [r2, #20]
 800897e:	4293      	cmp	r3, r2
 8008980:	d907      	bls.n	8008992 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008982:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	8a92      	ldrh	r2, [r2, #20]
 8008988:	fb03 f202 	mul.w	r2, r3, r2
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	61da      	str	r2, [r3, #28]
 8008990:	e036      	b.n	8008a00 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	6a1a      	ldr	r2, [r3, #32]
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	61da      	str	r2, [r3, #28]
 800899a:	e031      	b.n	8008a00 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	6a1b      	ldr	r3, [r3, #32]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d018      	beq.n	80089d6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	6a1b      	ldr	r3, [r3, #32]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	8a92      	ldrh	r2, [r2, #20]
 80089ac:	4413      	add	r3, r2
 80089ae:	3b01      	subs	r3, #1
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	8a92      	ldrh	r2, [r2, #20]
 80089b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80089b8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80089ba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80089bc:	8b7b      	ldrh	r3, [r7, #26]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d90b      	bls.n	80089da <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80089c2:	8b7b      	ldrh	r3, [r7, #26]
 80089c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80089c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	8a92      	ldrh	r2, [r2, #20]
 80089cc:	fb03 f202 	mul.w	r2, r3, r2
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	61da      	str	r2, [r3, #28]
 80089d4:	e001      	b.n	80089da <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80089d6:	2301      	movs	r3, #1
 80089d8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	78db      	ldrb	r3, [r3, #3]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00a      	beq.n	80089f8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80089e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	8a92      	ldrh	r2, [r2, #20]
 80089e8:	fb03 f202 	mul.w	r2, r3, r2
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	61da      	str	r2, [r3, #28]
 80089f0:	e006      	b.n	8008a00 <USB_HC_StartXfer+0x1a4>
 80089f2:	bf00      	nop
 80089f4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	6a1a      	ldr	r2, [r3, #32]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	69db      	ldr	r3, [r3, #28]
 8008a04:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008a08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008a0a:	04d9      	lsls	r1, r3, #19
 8008a0c:	4ba3      	ldr	r3, [pc, #652]	@ (8008c9c <USB_HC_StartXfer+0x440>)
 8008a0e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a10:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	7d9b      	ldrb	r3, [r3, #22]
 8008a16:	075b      	lsls	r3, r3, #29
 8008a18:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a1c:	69f9      	ldr	r1, [r7, #28]
 8008a1e:	0148      	lsls	r0, r1, #5
 8008a20:	6a39      	ldr	r1, [r7, #32]
 8008a22:	4401      	add	r1, r0
 8008a24:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008a28:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a2a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008a2c:	79fb      	ldrb	r3, [r7, #7]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d009      	beq.n	8008a46 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	6999      	ldr	r1, [r3, #24]
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	015a      	lsls	r2, r3, #5
 8008a3a:	6a3b      	ldr	r3, [r7, #32]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a42:	460a      	mov	r2, r1
 8008a44:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008a46:	6a3b      	ldr	r3, [r7, #32]
 8008a48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	bf0c      	ite	eq
 8008a56:	2301      	moveq	r3, #1
 8008a58:	2300      	movne	r3, #0
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	6a3b      	ldr	r3, [r7, #32]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	69fa      	ldr	r2, [r7, #28]
 8008a6e:	0151      	lsls	r1, r2, #5
 8008a70:	6a3a      	ldr	r2, [r7, #32]
 8008a72:	440a      	add	r2, r1
 8008a74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a78:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008a7c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	7e7b      	ldrb	r3, [r7, #25]
 8008a8e:	075b      	lsls	r3, r3, #29
 8008a90:	69f9      	ldr	r1, [r7, #28]
 8008a92:	0148      	lsls	r0, r1, #5
 8008a94:	6a39      	ldr	r1, [r7, #32]
 8008a96:	4401      	add	r1, r0
 8008a98:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	799b      	ldrb	r3, [r3, #6]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	f040 80c3 	bne.w	8008c30 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	7c5b      	ldrb	r3, [r3, #17]
 8008aae:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	69fa      	ldr	r2, [r7, #28]
 8008ab8:	0151      	lsls	r1, r2, #5
 8008aba:	6a3a      	ldr	r2, [r7, #32]
 8008abc:	440a      	add	r2, r1
 8008abe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008ac2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008ac6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	015a      	lsls	r2, r3, #5
 8008acc:	6a3b      	ldr	r3, [r7, #32]
 8008ace:	4413      	add	r3, r2
 8008ad0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	69fa      	ldr	r2, [r7, #28]
 8008ad8:	0151      	lsls	r1, r2, #5
 8008ada:	6a3a      	ldr	r2, [r7, #32]
 8008adc:	440a      	add	r2, r1
 8008ade:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ae2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008ae6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	79db      	ldrb	r3, [r3, #7]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d123      	bne.n	8008b38 <USB_HC_StartXfer+0x2dc>
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	78db      	ldrb	r3, [r3, #3]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d11f      	bne.n	8008b38 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	69fa      	ldr	r2, [r7, #28]
 8008b08:	0151      	lsls	r1, r2, #5
 8008b0a:	6a3a      	ldr	r2, [r7, #32]
 8008b0c:	440a      	add	r2, r1
 8008b0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b16:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	69fa      	ldr	r2, [r7, #28]
 8008b28:	0151      	lsls	r1, r2, #5
 8008b2a:	6a3a      	ldr	r2, [r7, #32]
 8008b2c:	440a      	add	r2, r1
 8008b2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b36:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	7c9b      	ldrb	r3, [r3, #18]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d003      	beq.n	8008b48 <USB_HC_StartXfer+0x2ec>
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	7c9b      	ldrb	r3, [r3, #18]
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	d117      	bne.n	8008b78 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d113      	bne.n	8008b78 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	78db      	ldrb	r3, [r3, #3]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d10f      	bne.n	8008b78 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	6a3b      	ldr	r3, [r7, #32]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	69fa      	ldr	r2, [r7, #28]
 8008b68:	0151      	lsls	r1, r2, #5
 8008b6a:	6a3a      	ldr	r2, [r7, #32]
 8008b6c:	440a      	add	r2, r1
 8008b6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b76:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	7c9b      	ldrb	r3, [r3, #18]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d162      	bne.n	8008c46 <USB_HC_StartXfer+0x3ea>
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	78db      	ldrb	r3, [r3, #3]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d15e      	bne.n	8008c46 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	d858      	bhi.n	8008c44 <USB_HC_StartXfer+0x3e8>
 8008b92:	a201      	add	r2, pc, #4	@ (adr r2, 8008b98 <USB_HC_StartXfer+0x33c>)
 8008b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b98:	08008ba9 	.word	0x08008ba9
 8008b9c:	08008bcb 	.word	0x08008bcb
 8008ba0:	08008bed 	.word	0x08008bed
 8008ba4:	08008c0f 	.word	0x08008c0f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	015a      	lsls	r2, r3, #5
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	69fa      	ldr	r2, [r7, #28]
 8008bb8:	0151      	lsls	r1, r2, #5
 8008bba:	6a3a      	ldr	r2, [r7, #32]
 8008bbc:	440a      	add	r2, r1
 8008bbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bc6:	6053      	str	r3, [r2, #4]
          break;
 8008bc8:	e03d      	b.n	8008c46 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	6a3b      	ldr	r3, [r7, #32]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	69fa      	ldr	r2, [r7, #28]
 8008bda:	0151      	lsls	r1, r2, #5
 8008bdc:	6a3a      	ldr	r2, [r7, #32]
 8008bde:	440a      	add	r2, r1
 8008be0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008be4:	f043 030e 	orr.w	r3, r3, #14
 8008be8:	6053      	str	r3, [r2, #4]
          break;
 8008bea:	e02c      	b.n	8008c46 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	015a      	lsls	r2, r3, #5
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	69fa      	ldr	r2, [r7, #28]
 8008bfc:	0151      	lsls	r1, r2, #5
 8008bfe:	6a3a      	ldr	r2, [r7, #32]
 8008c00:	440a      	add	r2, r1
 8008c02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008c0a:	6053      	str	r3, [r2, #4]
          break;
 8008c0c:	e01b      	b.n	8008c46 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	015a      	lsls	r2, r3, #5
 8008c12:	6a3b      	ldr	r3, [r7, #32]
 8008c14:	4413      	add	r3, r2
 8008c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	69fa      	ldr	r2, [r7, #28]
 8008c1e:	0151      	lsls	r1, r2, #5
 8008c20:	6a3a      	ldr	r2, [r7, #32]
 8008c22:	440a      	add	r2, r1
 8008c24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c2c:	6053      	str	r3, [r2, #4]
          break;
 8008c2e:	e00a      	b.n	8008c46 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	6a3b      	ldr	r3, [r7, #32]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	2300      	movs	r3, #0
 8008c40:	6053      	str	r3, [r2, #4]
 8008c42:	e000      	b.n	8008c46 <USB_HC_StartXfer+0x3ea>
          break;
 8008c44:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	015a      	lsls	r2, r3, #5
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008c5c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	78db      	ldrb	r3, [r3, #3]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d004      	beq.n	8008c70 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c6c:	613b      	str	r3, [r7, #16]
 8008c6e:	e003      	b.n	8008c78 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008c76:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c7e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	015a      	lsls	r2, r3, #5
 8008c84:	6a3b      	ldr	r3, [r7, #32]
 8008c86:	4413      	add	r3, r2
 8008c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008c92:	79fb      	ldrb	r3, [r7, #7]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d003      	beq.n	8008ca0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	e055      	b.n	8008d48 <USB_HC_StartXfer+0x4ec>
 8008c9c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	78db      	ldrb	r3, [r3, #3]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d14e      	bne.n	8008d46 <USB_HC_StartXfer+0x4ea>
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	6a1b      	ldr	r3, [r3, #32]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d04a      	beq.n	8008d46 <USB_HC_StartXfer+0x4ea>
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	79db      	ldrb	r3, [r3, #7]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d146      	bne.n	8008d46 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	7c9b      	ldrb	r3, [r3, #18]
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	d831      	bhi.n	8008d24 <USB_HC_StartXfer+0x4c8>
 8008cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8008cc8 <USB_HC_StartXfer+0x46c>)
 8008cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc6:	bf00      	nop
 8008cc8:	08008cd9 	.word	0x08008cd9
 8008ccc:	08008cfd 	.word	0x08008cfd
 8008cd0:	08008cd9 	.word	0x08008cd9
 8008cd4:	08008cfd 	.word	0x08008cfd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	6a1b      	ldr	r3, [r3, #32]
 8008cdc:	3303      	adds	r3, #3
 8008cde:	089b      	lsrs	r3, r3, #2
 8008ce0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008ce2:	8afa      	ldrh	r2, [r7, #22]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d91c      	bls.n	8008d28 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	f043 0220 	orr.w	r2, r3, #32
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	619a      	str	r2, [r3, #24]
        }
        break;
 8008cfa:	e015      	b.n	8008d28 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	6a1b      	ldr	r3, [r3, #32]
 8008d00:	3303      	adds	r3, #3
 8008d02:	089b      	lsrs	r3, r3, #2
 8008d04:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008d06:	8afa      	ldrh	r2, [r7, #22]
 8008d08:	6a3b      	ldr	r3, [r7, #32]
 8008d0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d90a      	bls.n	8008d2c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	699b      	ldr	r3, [r3, #24]
 8008d1a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	619a      	str	r2, [r3, #24]
        }
        break;
 8008d22:	e003      	b.n	8008d2c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008d24:	bf00      	nop
 8008d26:	e002      	b.n	8008d2e <USB_HC_StartXfer+0x4d2>
        break;
 8008d28:	bf00      	nop
 8008d2a:	e000      	b.n	8008d2e <USB_HC_StartXfer+0x4d2>
        break;
 8008d2c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	6999      	ldr	r1, [r3, #24]
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	785a      	ldrb	r2, [r3, #1]
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	9000      	str	r0, [sp, #0]
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f7ff f9c9 	bl	80080d8 <USB_WritePacket>
  }

  return HAL_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3728      	adds	r7, #40	@ 0x28
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d62:	695b      	ldr	r3, [r3, #20]
 8008d64:	b29b      	uxth	r3, r3
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b089      	sub	sp, #36	@ 0x24
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008d82:	78fb      	ldrb	r3, [r7, #3]
 8008d84:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008d86:	2300      	movs	r3, #0
 8008d88:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	015a      	lsls	r2, r3, #5
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	4413      	add	r3, r2
 8008d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	0c9b      	lsrs	r3, r3, #18
 8008d9a:	f003 0303 	and.w	r3, r3, #3
 8008d9e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	015a      	lsls	r2, r3, #5
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	4413      	add	r3, r2
 8008da8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	0fdb      	lsrs	r3, r3, #31
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	015a      	lsls	r2, r3, #5
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	0fdb      	lsrs	r3, r3, #31
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	f003 0320 	and.w	r3, r3, #32
 8008dd4:	2b20      	cmp	r3, #32
 8008dd6:	d10d      	bne.n	8008df4 <USB_HC_Halt+0x82>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10a      	bne.n	8008df4 <USB_HC_Halt+0x82>
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d005      	beq.n	8008df0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d002      	beq.n	8008df0 <USB_HC_Halt+0x7e>
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d101      	bne.n	8008df4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	e0d8      	b.n	8008fa6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d002      	beq.n	8008e00 <USB_HC_Halt+0x8e>
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d173      	bne.n	8008ee8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	015a      	lsls	r2, r3, #5
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	69ba      	ldr	r2, [r7, #24]
 8008e10:	0151      	lsls	r1, r2, #5
 8008e12:	69fa      	ldr	r2, [r7, #28]
 8008e14:	440a      	add	r2, r1
 8008e16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e1e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	f003 0320 	and.w	r3, r3, #32
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d14a      	bne.n	8008ec2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e30:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d133      	bne.n	8008ea0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	015a      	lsls	r2, r3, #5
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	4413      	add	r3, r2
 8008e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	69ba      	ldr	r2, [r7, #24]
 8008e48:	0151      	lsls	r1, r2, #5
 8008e4a:	69fa      	ldr	r2, [r7, #28]
 8008e4c:	440a      	add	r2, r1
 8008e4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e56:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	015a      	lsls	r2, r3, #5
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	69ba      	ldr	r2, [r7, #24]
 8008e68:	0151      	lsls	r1, r2, #5
 8008e6a:	69fa      	ldr	r2, [r7, #28]
 8008e6c:	440a      	add	r2, r1
 8008e6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e76:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e84:	d82e      	bhi.n	8008ee4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e9c:	d0ec      	beq.n	8008e78 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e9e:	e081      	b.n	8008fa4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	015a      	lsls	r2, r3, #5
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	69ba      	ldr	r2, [r7, #24]
 8008eb0:	0151      	lsls	r1, r2, #5
 8008eb2:	69fa      	ldr	r2, [r7, #28]
 8008eb4:	440a      	add	r2, r1
 8008eb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008eba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ebe:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ec0:	e070      	b.n	8008fa4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	69ba      	ldr	r2, [r7, #24]
 8008ed2:	0151      	lsls	r1, r2, #5
 8008ed4:	69fa      	ldr	r2, [r7, #28]
 8008ed6:	440a      	add	r2, r1
 8008ed8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008edc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ee0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ee2:	e05f      	b.n	8008fa4 <USB_HC_Halt+0x232>
            break;
 8008ee4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ee6:	e05d      	b.n	8008fa4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	69ba      	ldr	r2, [r7, #24]
 8008ef8:	0151      	lsls	r1, r2, #5
 8008efa:	69fa      	ldr	r2, [r7, #28]
 8008efc:	440a      	add	r2, r1
 8008efe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f06:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d133      	bne.n	8008f80 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	69ba      	ldr	r2, [r7, #24]
 8008f28:	0151      	lsls	r1, r2, #5
 8008f2a:	69fa      	ldr	r2, [r7, #28]
 8008f2c:	440a      	add	r2, r1
 8008f2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f36:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	69ba      	ldr	r2, [r7, #24]
 8008f48:	0151      	lsls	r1, r2, #5
 8008f4a:	69fa      	ldr	r2, [r7, #28]
 8008f4c:	440a      	add	r2, r1
 8008f4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f56:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f64:	d81d      	bhi.n	8008fa2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	015a      	lsls	r2, r3, #5
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f7c:	d0ec      	beq.n	8008f58 <USB_HC_Halt+0x1e6>
 8008f7e:	e011      	b.n	8008fa4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	015a      	lsls	r2, r3, #5
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	4413      	add	r3, r2
 8008f88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	0151      	lsls	r1, r2, #5
 8008f92:	69fa      	ldr	r2, [r7, #28]
 8008f94:	440a      	add	r2, r1
 8008f96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f9e:	6013      	str	r3, [r2, #0]
 8008fa0:	e000      	b.n	8008fa4 <USB_HC_Halt+0x232>
          break;
 8008fa2:	bf00      	nop
    }
  }

  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3724      	adds	r7, #36	@ 0x24
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
	...

08008fb4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b087      	sub	sp, #28
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008fc4:	78fb      	ldrb	r3, [r7, #3]
 8008fc6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	04da      	lsls	r2, r3, #19
 8008fd0:	4b15      	ldr	r3, [pc, #84]	@ (8009028 <USB_DoPing+0x74>)
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	0151      	lsls	r1, r2, #5
 8008fd8:	697a      	ldr	r2, [r7, #20]
 8008fda:	440a      	add	r2, r1
 8008fdc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008fe0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008fe4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008ffc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009004:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	4413      	add	r3, r2
 800900e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009012:	461a      	mov	r2, r3
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	371c      	adds	r7, #28
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	1ff80000 	.word	0x1ff80000

0800902c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b088      	sub	sp, #32
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800903c:	2300      	movs	r3, #0
 800903e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7fe ff8c 	bl	8007f5e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009046:	2110      	movs	r1, #16
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f7fe ffe5 	bl	8008018 <USB_FlushTxFifo>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d001      	beq.n	8009058 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f7ff f80f 	bl	800807c <USB_FlushRxFifo>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009068:	2300      	movs	r3, #0
 800906a:	61bb      	str	r3, [r7, #24]
 800906c:	e01f      	b.n	80090ae <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	015a      	lsls	r2, r3, #5
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	4413      	add	r3, r2
 8009076:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009084:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800908c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009094:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	015a      	lsls	r2, r3, #5
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	4413      	add	r3, r2
 800909e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090a2:	461a      	mov	r2, r3
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	3301      	adds	r3, #1
 80090ac:	61bb      	str	r3, [r7, #24]
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	2b0f      	cmp	r3, #15
 80090b2:	d9dc      	bls.n	800906e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80090b4:	2300      	movs	r3, #0
 80090b6:	61bb      	str	r3, [r7, #24]
 80090b8:	e034      	b.n	8009124 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	015a      	lsls	r2, r3, #5
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	4413      	add	r3, r2
 80090c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80090d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80090d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80090e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	015a      	lsls	r2, r3, #5
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	4413      	add	r3, r2
 80090ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090ee:	461a      	mov	r2, r3
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	3301      	adds	r3, #1
 80090f8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009100:	d80c      	bhi.n	800911c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	015a      	lsls	r2, r3, #5
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	4413      	add	r3, r2
 800910a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009114:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009118:	d0ec      	beq.n	80090f4 <USB_StopHost+0xc8>
 800911a:	e000      	b.n	800911e <USB_StopHost+0xf2>
        break;
 800911c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	3301      	adds	r3, #1
 8009122:	61bb      	str	r3, [r7, #24]
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	2b0f      	cmp	r3, #15
 8009128:	d9c7      	bls.n	80090ba <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009130:	461a      	mov	r2, r3
 8009132:	f04f 33ff 	mov.w	r3, #4294967295
 8009136:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f04f 32ff 	mov.w	r2, #4294967295
 800913e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7fe fefb 	bl	8007f3c <USB_EnableGlobalInt>

  return ret;
 8009146:	7ffb      	ldrb	r3, [r7, #31]
}
 8009148:	4618      	mov	r0, r3
 800914a:	3720      	adds	r7, #32
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009150:	b590      	push	{r4, r7, lr}
 8009152:	b089      	sub	sp, #36	@ 0x24
 8009154:	af04      	add	r7, sp, #16
 8009156:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009158:	2301      	movs	r3, #1
 800915a:	2202      	movs	r2, #2
 800915c:	2102      	movs	r1, #2
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fc85 	bl	8009a6e <USBH_FindInterface>
 8009164:	4603      	mov	r3, r0
 8009166:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009168:	7bfb      	ldrb	r3, [r7, #15]
 800916a:	2bff      	cmp	r3, #255	@ 0xff
 800916c:	d002      	beq.n	8009174 <USBH_CDC_InterfaceInit+0x24>
 800916e:	7bfb      	ldrb	r3, [r7, #15]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d901      	bls.n	8009178 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009174:	2302      	movs	r3, #2
 8009176:	e13d      	b.n	80093f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009178:	7bfb      	ldrb	r3, [r7, #15]
 800917a:	4619      	mov	r1, r3
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fc5a 	bl	8009a36 <USBH_SelectInterface>
 8009182:	4603      	mov	r3, r0
 8009184:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009186:	7bbb      	ldrb	r3, [r7, #14]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800918c:	2302      	movs	r3, #2
 800918e:	e131      	b.n	80093f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009196:	2050      	movs	r0, #80	@ 0x50
 8009198:	f002 fb64 	bl	800b864 <malloc>
 800919c:	4603      	mov	r3, r0
 800919e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091a6:	69db      	ldr	r3, [r3, #28]
 80091a8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80091b0:	2302      	movs	r3, #2
 80091b2:	e11f      	b.n	80093f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80091b4:	2250      	movs	r2, #80	@ 0x50
 80091b6:	2100      	movs	r1, #0
 80091b8:	68b8      	ldr	r0, [r7, #8]
 80091ba:	f002 fc11 	bl	800b9e0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80091be:	7bfb      	ldrb	r3, [r7, #15]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	211a      	movs	r1, #26
 80091c4:	fb01 f303 	mul.w	r3, r1, r3
 80091c8:	4413      	add	r3, r2
 80091ca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	b25b      	sxtb	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	da15      	bge.n	8009202 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80091d6:	7bfb      	ldrb	r3, [r7, #15]
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	211a      	movs	r1, #26
 80091dc:	fb01 f303 	mul.w	r3, r1, r3
 80091e0:	4413      	add	r3, r2
 80091e2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80091e6:	781a      	ldrb	r2, [r3, #0]
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	211a      	movs	r1, #26
 80091f2:	fb01 f303 	mul.w	r3, r1, r3
 80091f6:	4413      	add	r3, r2
 80091f8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80091fc:	881a      	ldrh	r2, [r3, #0]
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	785b      	ldrb	r3, [r3, #1]
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f001 ffbe 	bl	800b18a <USBH_AllocPipe>
 800920e:	4603      	mov	r3, r0
 8009210:	461a      	mov	r2, r3
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	7819      	ldrb	r1, [r3, #0]
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	7858      	ldrb	r0, [r3, #1]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	8952      	ldrh	r2, [r2, #10]
 800922e:	9202      	str	r2, [sp, #8]
 8009230:	2203      	movs	r2, #3
 8009232:	9201      	str	r2, [sp, #4]
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	4623      	mov	r3, r4
 8009238:	4602      	mov	r2, r0
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f001 ff76 	bl	800b12c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	2200      	movs	r2, #0
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f002 fa85 	bl	800b758 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800924e:	2300      	movs	r3, #0
 8009250:	2200      	movs	r2, #0
 8009252:	210a      	movs	r1, #10
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fc0a 	bl	8009a6e <USBH_FindInterface>
 800925a:	4603      	mov	r3, r0
 800925c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800925e:	7bfb      	ldrb	r3, [r7, #15]
 8009260:	2bff      	cmp	r3, #255	@ 0xff
 8009262:	d002      	beq.n	800926a <USBH_CDC_InterfaceInit+0x11a>
 8009264:	7bfb      	ldrb	r3, [r7, #15]
 8009266:	2b01      	cmp	r3, #1
 8009268:	d901      	bls.n	800926e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800926a:	2302      	movs	r3, #2
 800926c:	e0c2      	b.n	80093f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800926e:	7bfb      	ldrb	r3, [r7, #15]
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	211a      	movs	r1, #26
 8009274:	fb01 f303 	mul.w	r3, r1, r3
 8009278:	4413      	add	r3, r2
 800927a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	b25b      	sxtb	r3, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	da16      	bge.n	80092b4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009286:	7bfb      	ldrb	r3, [r7, #15]
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	211a      	movs	r1, #26
 800928c:	fb01 f303 	mul.w	r3, r1, r3
 8009290:	4413      	add	r3, r2
 8009292:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009296:	781a      	ldrb	r2, [r3, #0]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	211a      	movs	r1, #26
 80092a2:	fb01 f303 	mul.w	r3, r1, r3
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80092ac:	881a      	ldrh	r2, [r3, #0]
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	835a      	strh	r2, [r3, #26]
 80092b2:	e015      	b.n	80092e0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	211a      	movs	r1, #26
 80092ba:	fb01 f303 	mul.w	r3, r1, r3
 80092be:	4413      	add	r3, r2
 80092c0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80092c4:	781a      	ldrb	r2, [r3, #0]
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	211a      	movs	r1, #26
 80092d0:	fb01 f303 	mul.w	r3, r1, r3
 80092d4:	4413      	add	r3, r2
 80092d6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80092da:	881a      	ldrh	r2, [r3, #0]
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	211a      	movs	r1, #26
 80092e6:	fb01 f303 	mul.w	r3, r1, r3
 80092ea:	4413      	add	r3, r2
 80092ec:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	b25b      	sxtb	r3, r3
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	da16      	bge.n	8009326 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	211a      	movs	r1, #26
 80092fe:	fb01 f303 	mul.w	r3, r1, r3
 8009302:	4413      	add	r3, r2
 8009304:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009308:	781a      	ldrb	r2, [r3, #0]
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800930e:	7bfb      	ldrb	r3, [r7, #15]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	211a      	movs	r1, #26
 8009314:	fb01 f303 	mul.w	r3, r1, r3
 8009318:	4413      	add	r3, r2
 800931a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800931e:	881a      	ldrh	r2, [r3, #0]
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	835a      	strh	r2, [r3, #26]
 8009324:	e015      	b.n	8009352 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009326:	7bfb      	ldrb	r3, [r7, #15]
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	211a      	movs	r1, #26
 800932c:	fb01 f303 	mul.w	r3, r1, r3
 8009330:	4413      	add	r3, r2
 8009332:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009336:	781a      	ldrb	r2, [r3, #0]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800933c:	7bfb      	ldrb	r3, [r7, #15]
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	211a      	movs	r1, #26
 8009342:	fb01 f303 	mul.w	r3, r1, r3
 8009346:	4413      	add	r3, r2
 8009348:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800934c:	881a      	ldrh	r2, [r3, #0]
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	7b9b      	ldrb	r3, [r3, #14]
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f001 ff16 	bl	800b18a <USBH_AllocPipe>
 800935e:	4603      	mov	r3, r0
 8009360:	461a      	mov	r2, r3
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	7bdb      	ldrb	r3, [r3, #15]
 800936a:	4619      	mov	r1, r3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f001 ff0c 	bl	800b18a <USBH_AllocPipe>
 8009372:	4603      	mov	r3, r0
 8009374:	461a      	mov	r2, r3
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	7b59      	ldrb	r1, [r3, #13]
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	7b98      	ldrb	r0, [r3, #14]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	8b12      	ldrh	r2, [r2, #24]
 8009392:	9202      	str	r2, [sp, #8]
 8009394:	2202      	movs	r2, #2
 8009396:	9201      	str	r2, [sp, #4]
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	4623      	mov	r3, r4
 800939c:	4602      	mov	r2, r0
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f001 fec4 	bl	800b12c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	7b19      	ldrb	r1, [r3, #12]
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	7bd8      	ldrb	r0, [r3, #15]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	8b52      	ldrh	r2, [r2, #26]
 80093bc:	9202      	str	r2, [sp, #8]
 80093be:	2202      	movs	r2, #2
 80093c0:	9201      	str	r2, [sp, #4]
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	4623      	mov	r3, r4
 80093c6:	4602      	mov	r2, r0
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f001 feaf 	bl	800b12c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	7b5b      	ldrb	r3, [r3, #13]
 80093da:	2200      	movs	r2, #0
 80093dc:	4619      	mov	r1, r3
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f002 f9ba 	bl	800b758 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	7b1b      	ldrb	r3, [r3, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	4619      	mov	r1, r3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f002 f9b3 	bl	800b758 <USBH_LL_SetToggle>

  return USBH_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd90      	pop	{r4, r7, pc}

080093fc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800940a:	69db      	ldr	r3, [r3, #28]
 800940c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00e      	beq.n	8009434 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f001 fea4 	bl	800b16a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	4619      	mov	r1, r3
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f001 fecf 	bl	800b1cc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	7b1b      	ldrb	r3, [r3, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00e      	beq.n	800945a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	7b1b      	ldrb	r3, [r3, #12]
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f001 fe91 	bl	800b16a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	7b1b      	ldrb	r3, [r3, #12]
 800944c:	4619      	mov	r1, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f001 febc 	bl	800b1cc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2200      	movs	r2, #0
 8009458:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	7b5b      	ldrb	r3, [r3, #13]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00e      	beq.n	8009480 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	7b5b      	ldrb	r3, [r3, #13]
 8009466:	4619      	mov	r1, r3
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f001 fe7e 	bl	800b16a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	7b5b      	ldrb	r3, [r3, #13]
 8009472:	4619      	mov	r1, r3
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f001 fea9 	bl	800b1cc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009486:	69db      	ldr	r3, [r3, #28]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00b      	beq.n	80094a4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009492:	69db      	ldr	r3, [r3, #28]
 8009494:	4618      	mov	r0, r3
 8009496:	f002 f9ed 	bl	800b874 <free>
    phost->pActiveClass->pData = 0U;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80094a0:	2200      	movs	r2, #0
 80094a2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80094bc:	69db      	ldr	r3, [r3, #28]
 80094be:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	3340      	adds	r3, #64	@ 0x40
 80094c4:	4619      	mov	r1, r3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f8b1 	bl	800962e <GetLineCoding>
 80094cc:	4603      	mov	r3, r0
 80094ce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80094d0:	7afb      	ldrb	r3, [r7, #11]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d105      	bne.n	80094e2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80094dc:	2102      	movs	r1, #2
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80094e2:	7afb      	ldrb	r3, [r7, #11]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80094f4:	2301      	movs	r3, #1
 80094f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009502:	69db      	ldr	r3, [r3, #28]
 8009504:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800950c:	2b04      	cmp	r3, #4
 800950e:	d877      	bhi.n	8009600 <USBH_CDC_Process+0x114>
 8009510:	a201      	add	r2, pc, #4	@ (adr r2, 8009518 <USBH_CDC_Process+0x2c>)
 8009512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009516:	bf00      	nop
 8009518:	0800952d 	.word	0x0800952d
 800951c:	08009533 	.word	0x08009533
 8009520:	08009563 	.word	0x08009563
 8009524:	080095d7 	.word	0x080095d7
 8009528:	080095e5 	.word	0x080095e5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	73fb      	strb	r3, [r7, #15]
      break;
 8009530:	e06d      	b.n	800960e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009536:	4619      	mov	r1, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f897 	bl	800966c <SetLineCoding>
 800953e:	4603      	mov	r3, r0
 8009540:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009542:	7bbb      	ldrb	r3, [r7, #14]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d104      	bne.n	8009552 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	2202      	movs	r2, #2
 800954c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009550:	e058      	b.n	8009604 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009552:	7bbb      	ldrb	r3, [r7, #14]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d055      	beq.n	8009604 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	2204      	movs	r2, #4
 800955c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009560:	e050      	b.n	8009604 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	3340      	adds	r3, #64	@ 0x40
 8009566:	4619      	mov	r1, r3
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f860 	bl	800962e <GetLineCoding>
 800956e:	4603      	mov	r3, r0
 8009570:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009572:	7bbb      	ldrb	r3, [r7, #14]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d126      	bne.n	80095c6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800958a:	791b      	ldrb	r3, [r3, #4]
 800958c:	429a      	cmp	r2, r3
 800958e:	d13b      	bne.n	8009608 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800959a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800959c:	429a      	cmp	r2, r3
 800959e:	d133      	bne.n	8009608 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095aa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d12b      	bne.n	8009608 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095b8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d124      	bne.n	8009608 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f958 	bl	8009874 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80095c4:	e020      	b.n	8009608 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80095c6:	7bbb      	ldrb	r3, [r7, #14]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d01d      	beq.n	8009608 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	2204      	movs	r2, #4
 80095d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80095d4:	e018      	b.n	8009608 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f867 	bl	80096aa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 f8da 	bl	8009796 <CDC_ProcessReception>
      break;
 80095e2:	e014      	b.n	800960e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80095e4:	2100      	movs	r1, #0
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f001 f81a 	bl	800a620 <USBH_ClrFeature>
 80095ec:	4603      	mov	r3, r0
 80095ee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10a      	bne.n	800960c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80095fe:	e005      	b.n	800960c <USBH_CDC_Process+0x120>

    default:
      break;
 8009600:	bf00      	nop
 8009602:	e004      	b.n	800960e <USBH_CDC_Process+0x122>
      break;
 8009604:	bf00      	nop
 8009606:	e002      	b.n	800960e <USBH_CDC_Process+0x122>
      break;
 8009608:	bf00      	nop
 800960a:	e000      	b.n	800960e <USBH_CDC_Process+0x122>
      break;
 800960c:	bf00      	nop

  }

  return status;
 800960e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	370c      	adds	r7, #12
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr

0800962e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b082      	sub	sp, #8
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
 8009636:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	22a1      	movs	r2, #161	@ 0xa1
 800963c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2221      	movs	r2, #33	@ 0x21
 8009642:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2207      	movs	r2, #7
 8009654:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	2207      	movs	r2, #7
 800965a:	4619      	mov	r1, r3
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f001 fb14 	bl	800ac8a <USBH_CtlReq>
 8009662:	4603      	mov	r3, r0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2221      	movs	r2, #33	@ 0x21
 800967a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2220      	movs	r2, #32
 8009680:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2207      	movs	r2, #7
 8009692:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	2207      	movs	r2, #7
 8009698:	4619      	mov	r1, r3
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f001 faf5 	bl	800ac8a <USBH_CtlReq>
 80096a0:	4603      	mov	r3, r0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b086      	sub	sp, #24
 80096ae:	af02      	add	r7, sp, #8
 80096b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80096b8:	69db      	ldr	r3, [r3, #28]
 80096ba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80096bc:	2300      	movs	r3, #0
 80096be:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d002      	beq.n	80096d0 <CDC_ProcessTransmission+0x26>
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	d023      	beq.n	8009716 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80096ce:	e05e      	b.n	800978e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	8b12      	ldrh	r2, [r2, #24]
 80096d8:	4293      	cmp	r3, r2
 80096da:	d90b      	bls.n	80096f4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	69d9      	ldr	r1, [r3, #28]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	8b1a      	ldrh	r2, [r3, #24]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	7b5b      	ldrb	r3, [r3, #13]
 80096e8:	2001      	movs	r0, #1
 80096ea:	9000      	str	r0, [sp, #0]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f001 fcda 	bl	800b0a6 <USBH_BulkSendData>
 80096f2:	e00b      	b.n	800970c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	7b5b      	ldrb	r3, [r3, #13]
 8009702:	2001      	movs	r0, #1
 8009704:	9000      	str	r0, [sp, #0]
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f001 fccd 	bl	800b0a6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2202      	movs	r2, #2
 8009710:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009714:	e03b      	b.n	800978e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	7b5b      	ldrb	r3, [r3, #13]
 800971a:	4619      	mov	r1, r3
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f001 fff1 	bl	800b704 <USBH_LL_GetURBState>
 8009722:	4603      	mov	r3, r0
 8009724:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009726:	7afb      	ldrb	r3, [r7, #11]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d128      	bne.n	800977e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	8b12      	ldrh	r2, [r2, #24]
 8009734:	4293      	cmp	r3, r2
 8009736:	d90e      	bls.n	8009756 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	8b12      	ldrh	r2, [r2, #24]
 8009740:	1a9a      	subs	r2, r3, r2
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	69db      	ldr	r3, [r3, #28]
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	8b12      	ldrh	r2, [r2, #24]
 800974e:	441a      	add	r2, r3
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	61da      	str	r2, [r3, #28]
 8009754:	e002      	b.n	800975c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009760:	2b00      	cmp	r3, #0
 8009762:	d004      	beq.n	800976e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800976c:	e00e      	b.n	800978c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f868 	bl	800984c <USBH_CDC_TransmitCallback>
      break;
 800977c:	e006      	b.n	800978c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800977e:	7afb      	ldrb	r3, [r7, #11]
 8009780:	2b02      	cmp	r3, #2
 8009782:	d103      	bne.n	800978c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800978c:	bf00      	nop
  }
}
 800978e:	bf00      	nop
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b086      	sub	sp, #24
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097a4:	69db      	ldr	r3, [r3, #28]
 80097a6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80097a8:	2300      	movs	r3, #0
 80097aa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80097b2:	2b03      	cmp	r3, #3
 80097b4:	d002      	beq.n	80097bc <CDC_ProcessReception+0x26>
 80097b6:	2b04      	cmp	r3, #4
 80097b8:	d00e      	beq.n	80097d8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80097ba:	e043      	b.n	8009844 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	6a19      	ldr	r1, [r3, #32]
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	8b5a      	ldrh	r2, [r3, #26]
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	7b1b      	ldrb	r3, [r3, #12]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f001 fc91 	bl	800b0f0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	2204      	movs	r2, #4
 80097d2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80097d6:	e035      	b.n	8009844 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	7b1b      	ldrb	r3, [r3, #12]
 80097dc:	4619      	mov	r1, r3
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f001 ff90 	bl	800b704 <USBH_LL_GetURBState>
 80097e4:	4603      	mov	r3, r0
 80097e6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80097e8:	7cfb      	ldrb	r3, [r7, #19]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d129      	bne.n	8009842 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	7b1b      	ldrb	r3, [r3, #12]
 80097f2:	4619      	mov	r1, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f001 fef3 	bl	800b5e0 <USBH_LL_GetLastXferSize>
 80097fa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	429a      	cmp	r2, r3
 8009804:	d016      	beq.n	8009834 <CDC_ProcessReception+0x9e>
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	8b5b      	ldrh	r3, [r3, #26]
 800980a:	461a      	mov	r2, r3
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4293      	cmp	r3, r2
 8009810:	d110      	bne.n	8009834 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	1ad2      	subs	r2, r2, r3
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	6a1a      	ldr	r2, [r3, #32]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	441a      	add	r2, r3
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	2203      	movs	r2, #3
 800982e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009832:	e006      	b.n	8009842 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f80f 	bl	8009860 <USBH_CDC_ReceiveCallback>
      break;
 8009842:	bf00      	nop
  }
}
 8009844:	bf00      	nop
 8009846:	3718      	adds	r7, #24
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009868:	bf00      	nop
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800987c:	bf00      	nop
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	4613      	mov	r3, r2
 8009894:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d101      	bne.n	80098a0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800989c:	2302      	movs	r3, #2
 800989e:	e029      	b.n	80098f4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	79fa      	ldrb	r2, [r7, #7]
 80098a4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f000 f81f 	bl	80098fc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d003      	beq.n	80098ec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f001 fdc3 	bl	800b478 <USBH_LL_Init>

  return USBH_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009904:	2300      	movs	r3, #0
 8009906:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009908:	2300      	movs	r3, #0
 800990a:	60fb      	str	r3, [r7, #12]
 800990c:	e009      	b.n	8009922 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	33e0      	adds	r3, #224	@ 0xe0
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	2200      	movs	r2, #0
 800991a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	3301      	adds	r3, #1
 8009920:	60fb      	str	r3, [r7, #12]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2b0f      	cmp	r3, #15
 8009926:	d9f2      	bls.n	800990e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009928:	2300      	movs	r3, #0
 800992a:	60fb      	str	r3, [r7, #12]
 800992c:	e009      	b.n	8009942 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	4413      	add	r3, r2
 8009934:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009938:	2200      	movs	r2, #0
 800993a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	3301      	adds	r3, #1
 8009940:	60fb      	str	r3, [r7, #12]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009948:	d3f1      	bcc.n	800992e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2201      	movs	r2, #1
 8009968:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2240      	movs	r2, #64	@ 0x40
 800996e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	331c      	adds	r3, #28
 800999a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800999e:	2100      	movs	r1, #0
 80099a0:	4618      	mov	r0, r3
 80099a2:	f002 f81d 	bl	800b9e0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80099ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80099b0:	2100      	movs	r1, #0
 80099b2:	4618      	mov	r0, r3
 80099b4:	f002 f814 	bl	800b9e0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80099be:	2212      	movs	r2, #18
 80099c0:	2100      	movs	r1, #0
 80099c2:	4618      	mov	r0, r3
 80099c4:	f002 f80c 	bl	800b9e0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80099ce:	223e      	movs	r2, #62	@ 0x3e
 80099d0:	2100      	movs	r1, #0
 80099d2:	4618      	mov	r0, r3
 80099d4:	f002 f804 	bl	800b9e0 <memset>

  return USBH_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80099e2:	b480      	push	{r7}
 80099e4:	b085      	sub	sp, #20
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80099ec:	2300      	movs	r3, #0
 80099ee:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d016      	beq.n	8009a24 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10e      	bne.n	8009a1e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009a06:	1c59      	adds	r1, r3, #1
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	33de      	adds	r3, #222	@ 0xde
 8009a12:	6839      	ldr	r1, [r7, #0]
 8009a14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	73fb      	strb	r3, [r7, #15]
 8009a1c:	e004      	b.n	8009a28 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009a1e:	2302      	movs	r3, #2
 8009a20:	73fb      	strb	r3, [r7, #15]
 8009a22:	e001      	b.n	8009a28 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009a24:	2302      	movs	r3, #2
 8009a26:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3714      	adds	r7, #20
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009a36:	b480      	push	{r7}
 8009a38:	b085      	sub	sp, #20
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	460b      	mov	r3, r1
 8009a40:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009a4c:	78fa      	ldrb	r2, [r7, #3]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d204      	bcs.n	8009a5c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	78fa      	ldrb	r2, [r7, #3]
 8009a56:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009a5a:	e001      	b.n	8009a60 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b087      	sub	sp, #28
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	4608      	mov	r0, r1
 8009a78:	4611      	mov	r1, r2
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	70fb      	strb	r3, [r7, #3]
 8009a80:	460b      	mov	r3, r1
 8009a82:	70bb      	strb	r3, [r7, #2]
 8009a84:	4613      	mov	r3, r2
 8009a86:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009a96:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009a98:	e025      	b.n	8009ae6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
 8009a9c:	221a      	movs	r2, #26
 8009a9e:	fb02 f303 	mul.w	r3, r2, r3
 8009aa2:	3308      	adds	r3, #8
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	3302      	adds	r3, #2
 8009aaa:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	795b      	ldrb	r3, [r3, #5]
 8009ab0:	78fa      	ldrb	r2, [r7, #3]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d002      	beq.n	8009abc <USBH_FindInterface+0x4e>
 8009ab6:	78fb      	ldrb	r3, [r7, #3]
 8009ab8:	2bff      	cmp	r3, #255	@ 0xff
 8009aba:	d111      	bne.n	8009ae0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009ac0:	78ba      	ldrb	r2, [r7, #2]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d002      	beq.n	8009acc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009ac6:	78bb      	ldrb	r3, [r7, #2]
 8009ac8:	2bff      	cmp	r3, #255	@ 0xff
 8009aca:	d109      	bne.n	8009ae0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009ad0:	787a      	ldrb	r2, [r7, #1]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d002      	beq.n	8009adc <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009ad6:	787b      	ldrb	r3, [r7, #1]
 8009ad8:	2bff      	cmp	r3, #255	@ 0xff
 8009ada:	d101      	bne.n	8009ae0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009adc:	7dfb      	ldrb	r3, [r7, #23]
 8009ade:	e006      	b.n	8009aee <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009ae0:	7dfb      	ldrb	r3, [r7, #23]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009ae6:	7dfb      	ldrb	r3, [r7, #23]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d9d6      	bls.n	8009a9a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009aec:	23ff      	movs	r3, #255	@ 0xff
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	371c      	adds	r7, #28
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b082      	sub	sp, #8
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f001 fcf4 	bl	800b4f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009b08:	2101      	movs	r1, #1
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f001 fe0d 	bl	800b72a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
	...

08009b1c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b088      	sub	sp, #32
 8009b20:	af04      	add	r7, sp, #16
 8009b22:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009b24:	2302      	movs	r3, #2
 8009b26:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d102      	bne.n	8009b3e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2203      	movs	r2, #3
 8009b3c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	2b0b      	cmp	r3, #11
 8009b46:	f200 81bb 	bhi.w	8009ec0 <USBH_Process+0x3a4>
 8009b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b50 <USBH_Process+0x34>)
 8009b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b50:	08009b81 	.word	0x08009b81
 8009b54:	08009bb3 	.word	0x08009bb3
 8009b58:	08009c1b 	.word	0x08009c1b
 8009b5c:	08009e5b 	.word	0x08009e5b
 8009b60:	08009ec1 	.word	0x08009ec1
 8009b64:	08009cbb 	.word	0x08009cbb
 8009b68:	08009e01 	.word	0x08009e01
 8009b6c:	08009cf1 	.word	0x08009cf1
 8009b70:	08009d11 	.word	0x08009d11
 8009b74:	08009d2f 	.word	0x08009d2f
 8009b78:	08009d73 	.word	0x08009d73
 8009b7c:	08009e43 	.word	0x08009e43
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f000 819b 	beq.w	8009ec4 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2201      	movs	r2, #1
 8009b92:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009b94:	20c8      	movs	r0, #200	@ 0xc8
 8009b96:	f001 fe12 	bl	800b7be <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f001 fd05 	bl	800b5aa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009bb0:	e188      	b.n	8009ec4 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d107      	bne.n	8009bcc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2202      	movs	r2, #2
 8009bc8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009bca:	e18a      	b.n	8009ee2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009bd2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009bd6:	d914      	bls.n	8009c02 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009bde:	3301      	adds	r3, #1
 8009be0:	b2da      	uxtb	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009bee:	2b03      	cmp	r3, #3
 8009bf0:	d903      	bls.n	8009bfa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	220d      	movs	r2, #13
 8009bf6:	701a      	strb	r2, [r3, #0]
      break;
 8009bf8:	e173      	b.n	8009ee2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	701a      	strb	r2, [r3, #0]
      break;
 8009c00:	e16f      	b.n	8009ee2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009c08:	f103 020a 	add.w	r2, r3, #10
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009c12:	200a      	movs	r0, #10
 8009c14:	f001 fdd3 	bl	800b7be <USBH_Delay>
      break;
 8009c18:	e163      	b.n	8009ee2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d005      	beq.n	8009c30 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c2a:	2104      	movs	r1, #4
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009c30:	2064      	movs	r0, #100	@ 0x64
 8009c32:	f001 fdc4 	bl	800b7be <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f001 fc90 	bl	800b55c <USBH_LL_GetSpeed>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	461a      	mov	r2, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2205      	movs	r2, #5
 8009c4a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009c4c:	2100      	movs	r1, #0
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f001 fa9b 	bl	800b18a <USBH_AllocPipe>
 8009c54:	4603      	mov	r3, r0
 8009c56:	461a      	mov	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009c5c:	2180      	movs	r1, #128	@ 0x80
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f001 fa93 	bl	800b18a <USBH_AllocPipe>
 8009c64:	4603      	mov	r3, r0
 8009c66:	461a      	mov	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	7919      	ldrb	r1, [r3, #4]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009c80:	9202      	str	r2, [sp, #8]
 8009c82:	2200      	movs	r2, #0
 8009c84:	9201      	str	r2, [sp, #4]
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2280      	movs	r2, #128	@ 0x80
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f001 fa4d 	bl	800b12c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	7959      	ldrb	r1, [r3, #5]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009ca6:	9202      	str	r2, [sp, #8]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	9201      	str	r2, [sp, #4]
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f001 fa3a 	bl	800b12c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009cb8:	e113      	b.n	8009ee2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f916 	bl	8009eec <USBH_HandleEnum>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009cc4:	7bbb      	ldrb	r3, [r7, #14]
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f040 80fd 	bne.w	8009ec8 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d103      	bne.n	8009ce8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2208      	movs	r2, #8
 8009ce4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009ce6:	e0ef      	b.n	8009ec8 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2207      	movs	r2, #7
 8009cec:	701a      	strb	r2, [r3, #0]
      break;
 8009cee:	e0eb      	b.n	8009ec8 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f000 80e8 	beq.w	8009ecc <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d02:	2101      	movs	r1, #1
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2208      	movs	r2, #8
 8009d0c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009d0e:	e0dd      	b.n	8009ecc <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fc3a 	bl	800a592 <USBH_SetCfg>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f040 80d5 	bne.w	8009ed0 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2209      	movs	r2, #9
 8009d2a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009d2c:	e0d0      	b.n	8009ed0 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009d34:	f003 0320 	and.w	r3, r3, #32
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d016      	beq.n	8009d6a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009d3c:	2101      	movs	r1, #1
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fc4a 	bl	800a5d8 <USBH_SetFeature>
 8009d44:	4603      	mov	r3, r0
 8009d46:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009d48:	7bbb      	ldrb	r3, [r7, #14]
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d103      	bne.n	8009d58 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	220a      	movs	r2, #10
 8009d54:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009d56:	e0bd      	b.n	8009ed4 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009d58:	7bbb      	ldrb	r3, [r7, #14]
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	2b03      	cmp	r3, #3
 8009d5e:	f040 80b9 	bne.w	8009ed4 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	220a      	movs	r2, #10
 8009d66:	701a      	strb	r2, [r3, #0]
      break;
 8009d68:	e0b4      	b.n	8009ed4 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	220a      	movs	r2, #10
 8009d6e:	701a      	strb	r2, [r3, #0]
      break;
 8009d70:	e0b0      	b.n	8009ed4 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f000 80ad 	beq.w	8009ed8 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009d86:	2300      	movs	r3, #0
 8009d88:	73fb      	strb	r3, [r7, #15]
 8009d8a:	e016      	b.n	8009dba <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009d8c:	7bfa      	ldrb	r2, [r7, #15]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	32de      	adds	r2, #222	@ 0xde
 8009d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d96:	791a      	ldrb	r2, [r3, #4]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d108      	bne.n	8009db4 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009da2:	7bfa      	ldrb	r2, [r7, #15]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	32de      	adds	r2, #222	@ 0xde
 8009da8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009db2:	e005      	b.n	8009dc0 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009db4:	7bfb      	ldrb	r3, [r7, #15]
 8009db6:	3301      	adds	r3, #1
 8009db8:	73fb      	strb	r3, [r7, #15]
 8009dba:	7bfb      	ldrb	r3, [r7, #15]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d0e5      	beq.n	8009d8c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d016      	beq.n	8009df8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	4798      	blx	r3
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d109      	bne.n	8009df0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2206      	movs	r2, #6
 8009de0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009de8:	2103      	movs	r1, #3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009dee:	e073      	b.n	8009ed8 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	220d      	movs	r2, #13
 8009df4:	701a      	strb	r2, [r3, #0]
      break;
 8009df6:	e06f      	b.n	8009ed8 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	220d      	movs	r2, #13
 8009dfc:	701a      	strb	r2, [r3, #0]
      break;
 8009dfe:	e06b      	b.n	8009ed8 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d017      	beq.n	8009e3a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	4798      	blx	r3
 8009e16:	4603      	mov	r3, r0
 8009e18:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009e1a:	7bbb      	ldrb	r3, [r7, #14]
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d103      	bne.n	8009e2a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	220b      	movs	r2, #11
 8009e26:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009e28:	e058      	b.n	8009edc <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009e2a:	7bbb      	ldrb	r3, [r7, #14]
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	d154      	bne.n	8009edc <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	220d      	movs	r2, #13
 8009e36:	701a      	strb	r2, [r3, #0]
      break;
 8009e38:	e050      	b.n	8009edc <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	220d      	movs	r2, #13
 8009e3e:	701a      	strb	r2, [r3, #0]
      break;
 8009e40:	e04c      	b.n	8009edc <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d049      	beq.n	8009ee0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e52:	695b      	ldr	r3, [r3, #20]
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	4798      	blx	r3
      }
      break;
 8009e58:	e042      	b.n	8009ee0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7ff fd4a 	bl	80098fc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d009      	beq.n	8009e86 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d005      	beq.n	8009e9c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009e96:	2105      	movs	r1, #5
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d107      	bne.n	8009eb8 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f7ff fe22 	bl	8009afa <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009eb6:	e014      	b.n	8009ee2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f001 fb19 	bl	800b4f0 <USBH_LL_Start>
      break;
 8009ebe:	e010      	b.n	8009ee2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009ec0:	bf00      	nop
 8009ec2:	e00e      	b.n	8009ee2 <USBH_Process+0x3c6>
      break;
 8009ec4:	bf00      	nop
 8009ec6:	e00c      	b.n	8009ee2 <USBH_Process+0x3c6>
      break;
 8009ec8:	bf00      	nop
 8009eca:	e00a      	b.n	8009ee2 <USBH_Process+0x3c6>
    break;
 8009ecc:	bf00      	nop
 8009ece:	e008      	b.n	8009ee2 <USBH_Process+0x3c6>
      break;
 8009ed0:	bf00      	nop
 8009ed2:	e006      	b.n	8009ee2 <USBH_Process+0x3c6>
      break;
 8009ed4:	bf00      	nop
 8009ed6:	e004      	b.n	8009ee2 <USBH_Process+0x3c6>
      break;
 8009ed8:	bf00      	nop
 8009eda:	e002      	b.n	8009ee2 <USBH_Process+0x3c6>
      break;
 8009edc:	bf00      	nop
 8009ede:	e000      	b.n	8009ee2 <USBH_Process+0x3c6>
      break;
 8009ee0:	bf00      	nop
  }
  return USBH_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b088      	sub	sp, #32
 8009ef0:	af04      	add	r7, sp, #16
 8009ef2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	785b      	ldrb	r3, [r3, #1]
 8009f00:	2b07      	cmp	r3, #7
 8009f02:	f200 81bd 	bhi.w	800a280 <USBH_HandleEnum+0x394>
 8009f06:	a201      	add	r2, pc, #4	@ (adr r2, 8009f0c <USBH_HandleEnum+0x20>)
 8009f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0c:	08009f2d 	.word	0x08009f2d
 8009f10:	08009fe7 	.word	0x08009fe7
 8009f14:	0800a051 	.word	0x0800a051
 8009f18:	0800a0db 	.word	0x0800a0db
 8009f1c:	0800a145 	.word	0x0800a145
 8009f20:	0800a1b5 	.word	0x0800a1b5
 8009f24:	0800a1fb 	.word	0x0800a1fb
 8009f28:	0800a241 	.word	0x0800a241
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009f2c:	2108      	movs	r1, #8
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fa4c 	bl	800a3cc <USBH_Get_DevDesc>
 8009f34:	4603      	mov	r3, r0
 8009f36:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f38:	7bbb      	ldrb	r3, [r7, #14]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d12e      	bne.n	8009f9c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	7919      	ldrb	r1, [r3, #4]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009f62:	9202      	str	r2, [sp, #8]
 8009f64:	2200      	movs	r2, #0
 8009f66:	9201      	str	r2, [sp, #4]
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2280      	movs	r2, #128	@ 0x80
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f001 f8dc 	bl	800b12c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	7959      	ldrb	r1, [r3, #5]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f88:	9202      	str	r2, [sp, #8]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	9201      	str	r2, [sp, #4]
 8009f8e:	9300      	str	r3, [sp, #0]
 8009f90:	4603      	mov	r3, r0
 8009f92:	2200      	movs	r2, #0
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f001 f8c9 	bl	800b12c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009f9a:	e173      	b.n	800a284 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f9c:	7bbb      	ldrb	r3, [r7, #14]
 8009f9e:	2b03      	cmp	r3, #3
 8009fa0:	f040 8170 	bne.w	800a284 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009faa:	3301      	adds	r3, #1
 8009fac:	b2da      	uxtb	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009fba:	2b03      	cmp	r3, #3
 8009fbc:	d903      	bls.n	8009fc6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	220d      	movs	r2, #13
 8009fc2:	701a      	strb	r2, [r3, #0]
      break;
 8009fc4:	e15e      	b.n	800a284 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	795b      	ldrb	r3, [r3, #5]
 8009fca:	4619      	mov	r1, r3
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f001 f8fd 	bl	800b1cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	791b      	ldrb	r3, [r3, #4]
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f001 f8f7 	bl	800b1cc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	701a      	strb	r2, [r3, #0]
      break;
 8009fe4:	e14e      	b.n	800a284 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009fe6:	2112      	movs	r1, #18
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 f9ef 	bl	800a3cc <USBH_Get_DevDesc>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ff2:	7bbb      	ldrb	r3, [r7, #14]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d103      	bne.n	800a000 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2202      	movs	r2, #2
 8009ffc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009ffe:	e143      	b.n	800a288 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a000:	7bbb      	ldrb	r3, [r7, #14]
 800a002:	2b03      	cmp	r3, #3
 800a004:	f040 8140 	bne.w	800a288 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a00e:	3301      	adds	r3, #1
 800a010:	b2da      	uxtb	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a01e:	2b03      	cmp	r3, #3
 800a020:	d903      	bls.n	800a02a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	220d      	movs	r2, #13
 800a026:	701a      	strb	r2, [r3, #0]
      break;
 800a028:	e12e      	b.n	800a288 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	795b      	ldrb	r3, [r3, #5]
 800a02e:	4619      	mov	r1, r3
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f001 f8cb 	bl	800b1cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	791b      	ldrb	r3, [r3, #4]
 800a03a:	4619      	mov	r1, r3
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f001 f8c5 	bl	800b1cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	701a      	strb	r2, [r3, #0]
      break;
 800a04e:	e11b      	b.n	800a288 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a050:	2101      	movs	r1, #1
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 fa79 	bl	800a54a <USBH_SetAddress>
 800a058:	4603      	mov	r3, r0
 800a05a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a05c:	7bbb      	ldrb	r3, [r7, #14]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d130      	bne.n	800a0c4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a062:	2002      	movs	r0, #2
 800a064:	f001 fbab 	bl	800b7be <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2203      	movs	r2, #3
 800a074:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	7919      	ldrb	r1, [r3, #4]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a08a:	9202      	str	r2, [sp, #8]
 800a08c:	2200      	movs	r2, #0
 800a08e:	9201      	str	r2, [sp, #4]
 800a090:	9300      	str	r3, [sp, #0]
 800a092:	4603      	mov	r3, r0
 800a094:	2280      	movs	r2, #128	@ 0x80
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f001 f848 	bl	800b12c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	7959      	ldrb	r1, [r3, #5]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a0b0:	9202      	str	r2, [sp, #8]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	9201      	str	r2, [sp, #4]
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f001 f835 	bl	800b12c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a0c2:	e0e3      	b.n	800a28c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0c4:	7bbb      	ldrb	r3, [r7, #14]
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	f040 80e0 	bne.w	800a28c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	220d      	movs	r2, #13
 800a0d0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	705a      	strb	r2, [r3, #1]
      break;
 800a0d8:	e0d8      	b.n	800a28c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a0da:	2109      	movs	r1, #9
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 f9a1 	bl	800a424 <USBH_Get_CfgDesc>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a0e6:	7bbb      	ldrb	r3, [r7, #14]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d103      	bne.n	800a0f4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2204      	movs	r2, #4
 800a0f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a0f2:	e0cd      	b.n	800a290 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0f4:	7bbb      	ldrb	r3, [r7, #14]
 800a0f6:	2b03      	cmp	r3, #3
 800a0f8:	f040 80ca 	bne.w	800a290 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a102:	3301      	adds	r3, #1
 800a104:	b2da      	uxtb	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a112:	2b03      	cmp	r3, #3
 800a114:	d903      	bls.n	800a11e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	220d      	movs	r2, #13
 800a11a:	701a      	strb	r2, [r3, #0]
      break;
 800a11c:	e0b8      	b.n	800a290 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	795b      	ldrb	r3, [r3, #5]
 800a122:	4619      	mov	r1, r3
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f001 f851 	bl	800b1cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	791b      	ldrb	r3, [r3, #4]
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f001 f84b 	bl	800b1cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	701a      	strb	r2, [r3, #0]
      break;
 800a142:	e0a5      	b.n	800a290 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a14a:	4619      	mov	r1, r3
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 f969 	bl	800a424 <USBH_Get_CfgDesc>
 800a152:	4603      	mov	r3, r0
 800a154:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a156:	7bbb      	ldrb	r3, [r7, #14]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d103      	bne.n	800a164 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2205      	movs	r2, #5
 800a160:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a162:	e097      	b.n	800a294 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a164:	7bbb      	ldrb	r3, [r7, #14]
 800a166:	2b03      	cmp	r3, #3
 800a168:	f040 8094 	bne.w	800a294 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a172:	3301      	adds	r3, #1
 800a174:	b2da      	uxtb	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a182:	2b03      	cmp	r3, #3
 800a184:	d903      	bls.n	800a18e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	220d      	movs	r2, #13
 800a18a:	701a      	strb	r2, [r3, #0]
      break;
 800a18c:	e082      	b.n	800a294 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	795b      	ldrb	r3, [r3, #5]
 800a192:	4619      	mov	r1, r3
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f001 f819 	bl	800b1cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	791b      	ldrb	r3, [r3, #4]
 800a19e:	4619      	mov	r1, r3
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f001 f813 	bl	800b1cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	701a      	strb	r2, [r3, #0]
      break;
 800a1b2:	e06f      	b.n	800a294 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d019      	beq.n	800a1f2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a1ca:	23ff      	movs	r3, #255	@ 0xff
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 f953 	bl	800a478 <USBH_Get_StringDesc>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a1d6:	7bbb      	ldrb	r3, [r7, #14]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d103      	bne.n	800a1e4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2206      	movs	r2, #6
 800a1e0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a1e2:	e059      	b.n	800a298 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1e4:	7bbb      	ldrb	r3, [r7, #14]
 800a1e6:	2b03      	cmp	r3, #3
 800a1e8:	d156      	bne.n	800a298 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2206      	movs	r2, #6
 800a1ee:	705a      	strb	r2, [r3, #1]
      break;
 800a1f0:	e052      	b.n	800a298 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2206      	movs	r2, #6
 800a1f6:	705a      	strb	r2, [r3, #1]
      break;
 800a1f8:	e04e      	b.n	800a298 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a200:	2b00      	cmp	r3, #0
 800a202:	d019      	beq.n	800a238 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a210:	23ff      	movs	r3, #255	@ 0xff
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f930 	bl	800a478 <USBH_Get_StringDesc>
 800a218:	4603      	mov	r3, r0
 800a21a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a21c:	7bbb      	ldrb	r3, [r7, #14]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d103      	bne.n	800a22a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2207      	movs	r2, #7
 800a226:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a228:	e038      	b.n	800a29c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a22a:	7bbb      	ldrb	r3, [r7, #14]
 800a22c:	2b03      	cmp	r3, #3
 800a22e:	d135      	bne.n	800a29c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2207      	movs	r2, #7
 800a234:	705a      	strb	r2, [r3, #1]
      break;
 800a236:	e031      	b.n	800a29c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2207      	movs	r2, #7
 800a23c:	705a      	strb	r2, [r3, #1]
      break;
 800a23e:	e02d      	b.n	800a29c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a246:	2b00      	cmp	r3, #0
 800a248:	d017      	beq.n	800a27a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a256:	23ff      	movs	r3, #255	@ 0xff
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 f90d 	bl	800a478 <USBH_Get_StringDesc>
 800a25e:	4603      	mov	r3, r0
 800a260:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a262:	7bbb      	ldrb	r3, [r7, #14]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d102      	bne.n	800a26e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a268:	2300      	movs	r3, #0
 800a26a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a26c:	e018      	b.n	800a2a0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a26e:	7bbb      	ldrb	r3, [r7, #14]
 800a270:	2b03      	cmp	r3, #3
 800a272:	d115      	bne.n	800a2a0 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	73fb      	strb	r3, [r7, #15]
      break;
 800a278:	e012      	b.n	800a2a0 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	73fb      	strb	r3, [r7, #15]
      break;
 800a27e:	e00f      	b.n	800a2a0 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a280:	bf00      	nop
 800a282:	e00e      	b.n	800a2a2 <USBH_HandleEnum+0x3b6>
      break;
 800a284:	bf00      	nop
 800a286:	e00c      	b.n	800a2a2 <USBH_HandleEnum+0x3b6>
      break;
 800a288:	bf00      	nop
 800a28a:	e00a      	b.n	800a2a2 <USBH_HandleEnum+0x3b6>
      break;
 800a28c:	bf00      	nop
 800a28e:	e008      	b.n	800a2a2 <USBH_HandleEnum+0x3b6>
      break;
 800a290:	bf00      	nop
 800a292:	e006      	b.n	800a2a2 <USBH_HandleEnum+0x3b6>
      break;
 800a294:	bf00      	nop
 800a296:	e004      	b.n	800a2a2 <USBH_HandleEnum+0x3b6>
      break;
 800a298:	bf00      	nop
 800a29a:	e002      	b.n	800a2a2 <USBH_HandleEnum+0x3b6>
      break;
 800a29c:	bf00      	nop
 800a29e:	e000      	b.n	800a2a2 <USBH_HandleEnum+0x3b6>
      break;
 800a2a0:	bf00      	nop
  }
  return Status;
 800a2a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a2be:	bf00      	nop
 800a2c0:	370c      	adds	r7, #12
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr

0800a2ca <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b082      	sub	sp, #8
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a2d8:	1c5a      	adds	r2, r3, #1
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 f804 	bl	800a2ee <USBH_HandleSof>
}
 800a2e6:	bf00      	nop
 800a2e8:	3708      	adds	r7, #8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b082      	sub	sp, #8
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	2b0b      	cmp	r3, #11
 800a2fe:	d10a      	bne.n	800a316 <USBH_HandleSof+0x28>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a306:	2b00      	cmp	r3, #0
 800a308:	d005      	beq.n	800a316 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a310:	699b      	ldr	r3, [r3, #24]
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	4798      	blx	r3
  }
}
 800a316:	bf00      	nop
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a31e:	b480      	push	{r7}
 800a320:	b083      	sub	sp, #12
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2201      	movs	r2, #1
 800a32a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a32e:	bf00      	nop
}
 800a330:	370c      	adds	r7, #12
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a33a:	b480      	push	{r7}
 800a33c:	b083      	sub	sp, #12
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800a34a:	bf00      	nop
}
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a356:	b480      	push	{r7}
 800a358:	b083      	sub	sp, #12
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2201      	movs	r2, #1
 800a362:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f001 f8be 	bl	800b526 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	791b      	ldrb	r3, [r3, #4]
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 ff0b 	bl	800b1cc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	795b      	ldrb	r3, [r3, #5]
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 ff05 	bl	800b1cc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af02      	add	r7, sp, #8
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a3d8:	887b      	ldrh	r3, [r7, #2]
 800a3da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3de:	d901      	bls.n	800a3e4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	e01b      	b.n	800a41c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a3ea:	887b      	ldrh	r3, [r7, #2]
 800a3ec:	9300      	str	r3, [sp, #0]
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f872 	bl	800a4e0 <USBH_GetDescriptor>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a400:	7bfb      	ldrb	r3, [r7, #15]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d109      	bne.n	800a41a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a40c:	887a      	ldrh	r2, [r7, #2]
 800a40e:	4619      	mov	r1, r3
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 f929 	bl	800a668 <USBH_ParseDevDesc>
 800a416:	4603      	mov	r3, r0
 800a418:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af02      	add	r7, sp, #8
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	460b      	mov	r3, r1
 800a42e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	331c      	adds	r3, #28
 800a434:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a436:	887b      	ldrh	r3, [r7, #2]
 800a438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a43c:	d901      	bls.n	800a442 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a43e:	2303      	movs	r3, #3
 800a440:	e016      	b.n	800a470 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a442:	887b      	ldrh	r3, [r7, #2]
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a44c:	2100      	movs	r1, #0
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 f846 	bl	800a4e0 <USBH_GetDescriptor>
 800a454:	4603      	mov	r3, r0
 800a456:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a458:	7bfb      	ldrb	r3, [r7, #15]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d107      	bne.n	800a46e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a45e:	887b      	ldrh	r3, [r7, #2]
 800a460:	461a      	mov	r2, r3
 800a462:	68b9      	ldr	r1, [r7, #8]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 f9af 	bl	800a7c8 <USBH_ParseCfgDesc>
 800a46a:	4603      	mov	r3, r0
 800a46c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b088      	sub	sp, #32
 800a47c:	af02      	add	r7, sp, #8
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	607a      	str	r2, [r7, #4]
 800a482:	461a      	mov	r2, r3
 800a484:	460b      	mov	r3, r1
 800a486:	72fb      	strb	r3, [r7, #11]
 800a488:	4613      	mov	r3, r2
 800a48a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a48c:	893b      	ldrh	r3, [r7, #8]
 800a48e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a492:	d802      	bhi.n	800a49a <USBH_Get_StringDesc+0x22>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d101      	bne.n	800a49e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e01c      	b.n	800a4d8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a49e:	7afb      	ldrb	r3, [r7, #11]
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a4a6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a4ae:	893b      	ldrh	r3, [r7, #8]
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	2100      	movs	r1, #0
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f000 f812 	bl	800a4e0 <USBH_GetDescriptor>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a4c0:	7dfb      	ldrb	r3, [r7, #23]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d107      	bne.n	800a4d6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a4cc:	893a      	ldrh	r2, [r7, #8]
 800a4ce:	6879      	ldr	r1, [r7, #4]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f000 fb8d 	bl	800abf0 <USBH_ParseStringDesc>
  }

  return status;
 800a4d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3718      	adds	r7, #24
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	607b      	str	r3, [r7, #4]
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	72fb      	strb	r3, [r7, #11]
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	789b      	ldrb	r3, [r3, #2]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d11c      	bne.n	800a534 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a4fa:	7afb      	ldrb	r3, [r7, #11]
 800a4fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a500:	b2da      	uxtb	r2, r3
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2206      	movs	r2, #6
 800a50a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	893a      	ldrh	r2, [r7, #8]
 800a510:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a512:	893b      	ldrh	r3, [r7, #8]
 800a514:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a518:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a51c:	d104      	bne.n	800a528 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f240 4209 	movw	r2, #1033	@ 0x409
 800a524:	829a      	strh	r2, [r3, #20]
 800a526:	e002      	b.n	800a52e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	8b3a      	ldrh	r2, [r7, #24]
 800a532:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a534:	8b3b      	ldrh	r3, [r7, #24]
 800a536:	461a      	mov	r2, r3
 800a538:	6879      	ldr	r1, [r7, #4]
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f000 fba5 	bl	800ac8a <USBH_CtlReq>
 800a540:	4603      	mov	r3, r0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b082      	sub	sp, #8
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
 800a552:	460b      	mov	r3, r1
 800a554:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	789b      	ldrb	r3, [r3, #2]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d10f      	bne.n	800a57e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2205      	movs	r2, #5
 800a568:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a56a:	78fb      	ldrb	r3, [r7, #3]
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a57e:	2200      	movs	r2, #0
 800a580:	2100      	movs	r1, #0
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 fb81 	bl	800ac8a <USBH_CtlReq>
 800a588:	4603      	mov	r3, r0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3708      	adds	r7, #8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b082      	sub	sp, #8
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	460b      	mov	r3, r1
 800a59c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	789b      	ldrb	r3, [r3, #2]
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d10e      	bne.n	800a5c4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2209      	movs	r2, #9
 800a5b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	887a      	ldrh	r2, [r7, #2]
 800a5b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 fb5e 	bl	800ac8a <USBH_CtlReq>
 800a5ce:	4603      	mov	r3, r0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3708      	adds	r7, #8
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	789b      	ldrb	r3, [r3, #2]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d10f      	bne.n	800a60c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2203      	movs	r2, #3
 800a5f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a5f8:	78fb      	ldrb	r3, [r7, #3]
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a60c:	2200      	movs	r2, #0
 800a60e:	2100      	movs	r1, #0
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fb3a 	bl	800ac8a <USBH_CtlReq>
 800a616:	4603      	mov	r3, r0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	460b      	mov	r3, r1
 800a62a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	789b      	ldrb	r3, [r3, #2]
 800a630:	2b01      	cmp	r3, #1
 800a632:	d10f      	bne.n	800a654 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2202      	movs	r2, #2
 800a638:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2201      	movs	r2, #1
 800a63e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a646:	78fb      	ldrb	r3, [r7, #3]
 800a648:	b29a      	uxth	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a654:	2200      	movs	r2, #0
 800a656:	2100      	movs	r1, #0
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 fb16 	bl	800ac8a <USBH_CtlReq>
 800a65e:	4603      	mov	r3, r0
}
 800a660:	4618      	mov	r0, r3
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a668:	b480      	push	{r7}
 800a66a:	b087      	sub	sp, #28
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	4613      	mov	r3, r2
 800a674:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a67c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a67e:	2300      	movs	r3, #0
 800a680:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d101      	bne.n	800a68c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a688:	2302      	movs	r3, #2
 800a68a:	e094      	b.n	800a7b6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	781a      	ldrb	r2, [r3, #0]
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	785a      	ldrb	r2, [r3, #1]
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	3302      	adds	r3, #2
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	3303      	adds	r3, #3
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	021b      	lsls	r3, r3, #8
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	791a      	ldrb	r2, [r3, #4]
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	795a      	ldrb	r2, [r3, #5]
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	799a      	ldrb	r2, [r3, #6]
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	79da      	ldrb	r2, [r3, #7]
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d004      	beq.n	800a6ea <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d11b      	bne.n	800a722 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	79db      	ldrb	r3, [r3, #7]
 800a6ee:	2b20      	cmp	r3, #32
 800a6f0:	dc0f      	bgt.n	800a712 <USBH_ParseDevDesc+0xaa>
 800a6f2:	2b08      	cmp	r3, #8
 800a6f4:	db0f      	blt.n	800a716 <USBH_ParseDevDesc+0xae>
 800a6f6:	3b08      	subs	r3, #8
 800a6f8:	4a32      	ldr	r2, [pc, #200]	@ (800a7c4 <USBH_ParseDevDesc+0x15c>)
 800a6fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a6fe:	f003 0301 	and.w	r3, r3, #1
 800a702:	2b00      	cmp	r3, #0
 800a704:	bf14      	ite	ne
 800a706:	2301      	movne	r3, #1
 800a708:	2300      	moveq	r3, #0
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d106      	bne.n	800a71e <USBH_ParseDevDesc+0xb6>
 800a710:	e001      	b.n	800a716 <USBH_ParseDevDesc+0xae>
 800a712:	2b40      	cmp	r3, #64	@ 0x40
 800a714:	d003      	beq.n	800a71e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	2208      	movs	r2, #8
 800a71a:	71da      	strb	r2, [r3, #7]
        break;
 800a71c:	e000      	b.n	800a720 <USBH_ParseDevDesc+0xb8>
        break;
 800a71e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a720:	e00e      	b.n	800a740 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d107      	bne.n	800a73c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	79db      	ldrb	r3, [r3, #7]
 800a730:	2b08      	cmp	r3, #8
 800a732:	d005      	beq.n	800a740 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	2208      	movs	r2, #8
 800a738:	71da      	strb	r2, [r3, #7]
 800a73a:	e001      	b.n	800a740 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a73c:	2303      	movs	r3, #3
 800a73e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a740:	88fb      	ldrh	r3, [r7, #6]
 800a742:	2b08      	cmp	r3, #8
 800a744:	d936      	bls.n	800a7b4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	3308      	adds	r3, #8
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	461a      	mov	r2, r3
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	3309      	adds	r3, #9
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	021b      	lsls	r3, r3, #8
 800a756:	b29b      	uxth	r3, r3
 800a758:	4313      	orrs	r3, r2
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	330a      	adds	r3, #10
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	461a      	mov	r2, r3
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	330b      	adds	r3, #11
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	021b      	lsls	r3, r3, #8
 800a770:	b29b      	uxth	r3, r3
 800a772:	4313      	orrs	r3, r2
 800a774:	b29a      	uxth	r2, r3
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	330c      	adds	r3, #12
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	461a      	mov	r2, r3
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	330d      	adds	r3, #13
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	021b      	lsls	r3, r3, #8
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	4313      	orrs	r3, r2
 800a78e:	b29a      	uxth	r2, r3
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	7b9a      	ldrb	r2, [r3, #14]
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	7bda      	ldrb	r2, [r3, #15]
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	7c1a      	ldrb	r2, [r3, #16]
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	7c5a      	ldrb	r2, [r3, #17]
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a7b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	371c      	adds	r7, #28
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	01000101 	.word	0x01000101

0800a7c8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b08c      	sub	sp, #48	@ 0x30
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a7dc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d101      	bne.n	800a7fa <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	e0da      	b.n	800a9b0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	2b09      	cmp	r3, #9
 800a804:	d002      	beq.n	800a80c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a808:	2209      	movs	r2, #9
 800a80a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	781a      	ldrb	r2, [r3, #0]
 800a810:	6a3b      	ldr	r3, [r7, #32]
 800a812:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	785a      	ldrb	r2, [r3, #1]
 800a818:	6a3b      	ldr	r3, [r7, #32]
 800a81a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	3302      	adds	r3, #2
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	461a      	mov	r2, r3
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	3303      	adds	r3, #3
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	021b      	lsls	r3, r3, #8
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	4313      	orrs	r3, r2
 800a830:	b29b      	uxth	r3, r3
 800a832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a836:	bf28      	it	cs
 800a838:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	6a3b      	ldr	r3, [r7, #32]
 800a840:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	791a      	ldrb	r2, [r3, #4]
 800a846:	6a3b      	ldr	r3, [r7, #32]
 800a848:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	795a      	ldrb	r2, [r3, #5]
 800a84e:	6a3b      	ldr	r3, [r7, #32]
 800a850:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	799a      	ldrb	r2, [r3, #6]
 800a856:	6a3b      	ldr	r3, [r7, #32]
 800a858:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	79da      	ldrb	r2, [r3, #7]
 800a85e:	6a3b      	ldr	r3, [r7, #32]
 800a860:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	7a1a      	ldrb	r2, [r3, #8]
 800a866:	6a3b      	ldr	r3, [r7, #32]
 800a868:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a86a:	88fb      	ldrh	r3, [r7, #6]
 800a86c:	2b09      	cmp	r3, #9
 800a86e:	f240 809d 	bls.w	800a9ac <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a872:	2309      	movs	r3, #9
 800a874:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a876:	2300      	movs	r3, #0
 800a878:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a87a:	e081      	b.n	800a980 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a87c:	f107 0316 	add.w	r3, r7, #22
 800a880:	4619      	mov	r1, r3
 800a882:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a884:	f000 f9e7 	bl	800ac56 <USBH_GetNextDesc>
 800a888:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a88c:	785b      	ldrb	r3, [r3, #1]
 800a88e:	2b04      	cmp	r3, #4
 800a890:	d176      	bne.n	800a980 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	2b09      	cmp	r3, #9
 800a898:	d002      	beq.n	800a8a0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a89c:	2209      	movs	r2, #9
 800a89e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a8a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a8a4:	221a      	movs	r2, #26
 800a8a6:	fb02 f303 	mul.w	r3, r2, r3
 800a8aa:	3308      	adds	r3, #8
 800a8ac:	6a3a      	ldr	r2, [r7, #32]
 800a8ae:	4413      	add	r3, r2
 800a8b0:	3302      	adds	r3, #2
 800a8b2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a8b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8b6:	69f8      	ldr	r0, [r7, #28]
 800a8b8:	f000 f87e 	bl	800a9b8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a8c6:	e043      	b.n	800a950 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a8c8:	f107 0316 	add.w	r3, r7, #22
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8d0:	f000 f9c1 	bl	800ac56 <USBH_GetNextDesc>
 800a8d4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a8d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d8:	785b      	ldrb	r3, [r3, #1]
 800a8da:	2b05      	cmp	r3, #5
 800a8dc:	d138      	bne.n	800a950 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	795b      	ldrb	r3, [r3, #5]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d113      	bne.n	800a90e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d003      	beq.n	800a8f6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	799b      	ldrb	r3, [r3, #6]
 800a8f2:	2b03      	cmp	r3, #3
 800a8f4:	d10b      	bne.n	800a90e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a8f6:	69fb      	ldr	r3, [r7, #28]
 800a8f8:	79db      	ldrb	r3, [r3, #7]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d10b      	bne.n	800a916 <USBH_ParseCfgDesc+0x14e>
 800a8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	2b09      	cmp	r3, #9
 800a904:	d007      	beq.n	800a916 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a908:	2209      	movs	r2, #9
 800a90a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a90c:	e003      	b.n	800a916 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a90e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a910:	2207      	movs	r2, #7
 800a912:	701a      	strb	r2, [r3, #0]
 800a914:	e000      	b.n	800a918 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a916:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a918:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a91c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a920:	3201      	adds	r2, #1
 800a922:	00d2      	lsls	r2, r2, #3
 800a924:	211a      	movs	r1, #26
 800a926:	fb01 f303 	mul.w	r3, r1, r3
 800a92a:	4413      	add	r3, r2
 800a92c:	3308      	adds	r3, #8
 800a92e:	6a3a      	ldr	r2, [r7, #32]
 800a930:	4413      	add	r3, r2
 800a932:	3304      	adds	r3, #4
 800a934:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a936:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a938:	69b9      	ldr	r1, [r7, #24]
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f000 f870 	bl	800aa20 <USBH_ParseEPDesc>
 800a940:	4603      	mov	r3, r0
 800a942:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a946:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a94a:	3301      	adds	r3, #1
 800a94c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	791b      	ldrb	r3, [r3, #4]
 800a954:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a958:	429a      	cmp	r2, r3
 800a95a:	d204      	bcs.n	800a966 <USBH_ParseCfgDesc+0x19e>
 800a95c:	6a3b      	ldr	r3, [r7, #32]
 800a95e:	885a      	ldrh	r2, [r3, #2]
 800a960:	8afb      	ldrh	r3, [r7, #22]
 800a962:	429a      	cmp	r2, r3
 800a964:	d8b0      	bhi.n	800a8c8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	791b      	ldrb	r3, [r3, #4]
 800a96a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a96e:	429a      	cmp	r2, r3
 800a970:	d201      	bcs.n	800a976 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a972:	2303      	movs	r3, #3
 800a974:	e01c      	b.n	800a9b0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a976:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a97a:	3301      	adds	r3, #1
 800a97c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a980:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a984:	2b01      	cmp	r3, #1
 800a986:	d805      	bhi.n	800a994 <USBH_ParseCfgDesc+0x1cc>
 800a988:	6a3b      	ldr	r3, [r7, #32]
 800a98a:	885a      	ldrh	r2, [r3, #2]
 800a98c:	8afb      	ldrh	r3, [r7, #22]
 800a98e:	429a      	cmp	r2, r3
 800a990:	f63f af74 	bhi.w	800a87c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	791b      	ldrb	r3, [r3, #4]
 800a998:	2b02      	cmp	r3, #2
 800a99a:	bf28      	it	cs
 800a99c:	2302      	movcs	r3, #2
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d201      	bcs.n	800a9ac <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	e001      	b.n	800a9b0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a9ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3730      	adds	r7, #48	@ 0x30
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	781a      	ldrb	r2, [r3, #0]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	785a      	ldrb	r2, [r3, #1]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	789a      	ldrb	r2, [r3, #2]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	78da      	ldrb	r2, [r3, #3]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	3304      	adds	r3, #4
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	2b02      	cmp	r3, #2
 800a9ea:	bf28      	it	cs
 800a9ec:	2302      	movcs	r3, #2
 800a9ee:	b2da      	uxtb	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	795a      	ldrb	r2, [r3, #5]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	799a      	ldrb	r2, [r3, #6]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	79da      	ldrb	r2, [r3, #7]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	7a1a      	ldrb	r2, [r3, #8]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	721a      	strb	r2, [r3, #8]
}
 800aa14:	bf00      	nop
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b087      	sub	sp, #28
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	781a      	ldrb	r2, [r3, #0]
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	785a      	ldrb	r2, [r3, #1]
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	789a      	ldrb	r2, [r3, #2]
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	78da      	ldrb	r2, [r3, #3]
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	3304      	adds	r3, #4
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	461a      	mov	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	3305      	adds	r3, #5
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	021b      	lsls	r3, r3, #8
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	4313      	orrs	r3, r2
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	799a      	ldrb	r2, [r3, #6]
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	889b      	ldrh	r3, [r3, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d009      	beq.n	800aa8e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800aa7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa82:	d804      	bhi.n	800aa8e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800aa88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa8c:	d901      	bls.n	800aa92 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d136      	bne.n	800ab0a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	78db      	ldrb	r3, [r3, #3]
 800aaa0:	f003 0303 	and.w	r3, r3, #3
 800aaa4:	2b02      	cmp	r3, #2
 800aaa6:	d108      	bne.n	800aaba <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	889b      	ldrh	r3, [r3, #4]
 800aaac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aab0:	f240 8097 	bls.w	800abe2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aab4:	2303      	movs	r3, #3
 800aab6:	75fb      	strb	r3, [r7, #23]
 800aab8:	e093      	b.n	800abe2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	78db      	ldrb	r3, [r3, #3]
 800aabe:	f003 0303 	and.w	r3, r3, #3
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d107      	bne.n	800aad6 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	889b      	ldrh	r3, [r3, #4]
 800aaca:	2b40      	cmp	r3, #64	@ 0x40
 800aacc:	f240 8089 	bls.w	800abe2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aad0:	2303      	movs	r3, #3
 800aad2:	75fb      	strb	r3, [r7, #23]
 800aad4:	e085      	b.n	800abe2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	78db      	ldrb	r3, [r3, #3]
 800aada:	f003 0303 	and.w	r3, r3, #3
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d005      	beq.n	800aaee <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	78db      	ldrb	r3, [r3, #3]
 800aae6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800aaea:	2b03      	cmp	r3, #3
 800aaec:	d10a      	bne.n	800ab04 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	799b      	ldrb	r3, [r3, #6]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d003      	beq.n	800aafe <USBH_ParseEPDesc+0xde>
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	799b      	ldrb	r3, [r3, #6]
 800aafa:	2b10      	cmp	r3, #16
 800aafc:	d970      	bls.n	800abe0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800aafe:	2303      	movs	r3, #3
 800ab00:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ab02:	e06d      	b.n	800abe0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ab04:	2303      	movs	r3, #3
 800ab06:	75fb      	strb	r3, [r7, #23]
 800ab08:	e06b      	b.n	800abe2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d13c      	bne.n	800ab8e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	78db      	ldrb	r3, [r3, #3]
 800ab18:	f003 0303 	and.w	r3, r3, #3
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d005      	beq.n	800ab2c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	78db      	ldrb	r3, [r3, #3]
 800ab24:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d106      	bne.n	800ab3a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	889b      	ldrh	r3, [r3, #4]
 800ab30:	2b40      	cmp	r3, #64	@ 0x40
 800ab32:	d956      	bls.n	800abe2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ab34:	2303      	movs	r3, #3
 800ab36:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ab38:	e053      	b.n	800abe2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	78db      	ldrb	r3, [r3, #3]
 800ab3e:	f003 0303 	and.w	r3, r3, #3
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d10e      	bne.n	800ab64 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	799b      	ldrb	r3, [r3, #6]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d007      	beq.n	800ab5e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800ab52:	2b10      	cmp	r3, #16
 800ab54:	d803      	bhi.n	800ab5e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800ab5a:	2b40      	cmp	r3, #64	@ 0x40
 800ab5c:	d941      	bls.n	800abe2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ab5e:	2303      	movs	r3, #3
 800ab60:	75fb      	strb	r3, [r7, #23]
 800ab62:	e03e      	b.n	800abe2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	78db      	ldrb	r3, [r3, #3]
 800ab68:	f003 0303 	and.w	r3, r3, #3
 800ab6c:	2b03      	cmp	r3, #3
 800ab6e:	d10b      	bne.n	800ab88 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	799b      	ldrb	r3, [r3, #6]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d004      	beq.n	800ab82 <USBH_ParseEPDesc+0x162>
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	889b      	ldrh	r3, [r3, #4]
 800ab7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab80:	d32f      	bcc.n	800abe2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ab82:	2303      	movs	r3, #3
 800ab84:	75fb      	strb	r3, [r7, #23]
 800ab86:	e02c      	b.n	800abe2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ab88:	2303      	movs	r3, #3
 800ab8a:	75fb      	strb	r3, [r7, #23]
 800ab8c:	e029      	b.n	800abe2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d120      	bne.n	800abda <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	78db      	ldrb	r3, [r3, #3]
 800ab9c:	f003 0303 	and.w	r3, r3, #3
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d106      	bne.n	800abb2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	889b      	ldrh	r3, [r3, #4]
 800aba8:	2b08      	cmp	r3, #8
 800abaa:	d01a      	beq.n	800abe2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800abac:	2303      	movs	r3, #3
 800abae:	75fb      	strb	r3, [r7, #23]
 800abb0:	e017      	b.n	800abe2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	78db      	ldrb	r3, [r3, #3]
 800abb6:	f003 0303 	and.w	r3, r3, #3
 800abba:	2b03      	cmp	r3, #3
 800abbc:	d10a      	bne.n	800abd4 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	799b      	ldrb	r3, [r3, #6]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d003      	beq.n	800abce <USBH_ParseEPDesc+0x1ae>
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	889b      	ldrh	r3, [r3, #4]
 800abca:	2b08      	cmp	r3, #8
 800abcc:	d909      	bls.n	800abe2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800abce:	2303      	movs	r3, #3
 800abd0:	75fb      	strb	r3, [r7, #23]
 800abd2:	e006      	b.n	800abe2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800abd4:	2303      	movs	r3, #3
 800abd6:	75fb      	strb	r3, [r7, #23]
 800abd8:	e003      	b.n	800abe2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800abda:	2303      	movs	r3, #3
 800abdc:	75fb      	strb	r3, [r7, #23]
 800abde:	e000      	b.n	800abe2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800abe0:	bf00      	nop
  }

  return status;
 800abe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	371c      	adds	r7, #28
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b087      	sub	sp, #28
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	4613      	mov	r3, r2
 800abfc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	3301      	adds	r3, #1
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	2b03      	cmp	r3, #3
 800ac06:	d120      	bne.n	800ac4a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	1e9a      	subs	r2, r3, #2
 800ac0e:	88fb      	ldrh	r3, [r7, #6]
 800ac10:	4293      	cmp	r3, r2
 800ac12:	bf28      	it	cs
 800ac14:	4613      	movcs	r3, r2
 800ac16:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	3302      	adds	r3, #2
 800ac1c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ac1e:	2300      	movs	r3, #0
 800ac20:	82fb      	strh	r3, [r7, #22]
 800ac22:	e00b      	b.n	800ac3c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ac24:	8afb      	ldrh	r3, [r7, #22]
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	4413      	add	r3, r2
 800ac2a:	781a      	ldrb	r2, [r3, #0]
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	3301      	adds	r3, #1
 800ac34:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ac36:	8afb      	ldrh	r3, [r7, #22]
 800ac38:	3302      	adds	r3, #2
 800ac3a:	82fb      	strh	r3, [r7, #22]
 800ac3c:	8afa      	ldrh	r2, [r7, #22]
 800ac3e:	8abb      	ldrh	r3, [r7, #20]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d3ef      	bcc.n	800ac24 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	2200      	movs	r2, #0
 800ac48:	701a      	strb	r2, [r3, #0]
  }
}
 800ac4a:	bf00      	nop
 800ac4c:	371c      	adds	r7, #28
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ac56:	b480      	push	{r7}
 800ac58:	b085      	sub	sp, #20
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
 800ac5e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	881b      	ldrh	r3, [r3, #0]
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	7812      	ldrb	r2, [r2, #0]
 800ac68:	4413      	add	r3, r2
 800ac6a:	b29a      	uxth	r2, r3
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4413      	add	r3, r2
 800ac7a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3714      	adds	r7, #20
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr

0800ac8a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b086      	sub	sp, #24
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	60f8      	str	r0, [r7, #12]
 800ac92:	60b9      	str	r1, [r7, #8]
 800ac94:	4613      	mov	r3, r2
 800ac96:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	789b      	ldrb	r3, [r3, #2]
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d002      	beq.n	800acaa <USBH_CtlReq+0x20>
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d00f      	beq.n	800acc8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800aca8:	e027      	b.n	800acfa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	88fa      	ldrh	r2, [r7, #6]
 800acb4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2201      	movs	r2, #1
 800acba:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2202      	movs	r2, #2
 800acc0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800acc2:	2301      	movs	r3, #1
 800acc4:	75fb      	strb	r3, [r7, #23]
      break;
 800acc6:	e018      	b.n	800acfa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f000 f81b 	bl	800ad04 <USBH_HandleControl>
 800acce:	4603      	mov	r3, r0
 800acd0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800acd2:	7dfb      	ldrb	r3, [r7, #23]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d002      	beq.n	800acde <USBH_CtlReq+0x54>
 800acd8:	7dfb      	ldrb	r3, [r7, #23]
 800acda:	2b03      	cmp	r3, #3
 800acdc:	d106      	bne.n	800acec <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2201      	movs	r2, #1
 800ace2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2200      	movs	r2, #0
 800ace8:	761a      	strb	r2, [r3, #24]
      break;
 800acea:	e005      	b.n	800acf8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800acec:	7dfb      	ldrb	r3, [r7, #23]
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d102      	bne.n	800acf8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2201      	movs	r2, #1
 800acf6:	709a      	strb	r2, [r3, #2]
      break;
 800acf8:	bf00      	nop
  }
  return status;
 800acfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3718      	adds	r7, #24
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af02      	add	r7, sp, #8
 800ad0a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ad10:	2300      	movs	r3, #0
 800ad12:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	7e1b      	ldrb	r3, [r3, #24]
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	2b0a      	cmp	r3, #10
 800ad1c:	f200 8156 	bhi.w	800afcc <USBH_HandleControl+0x2c8>
 800ad20:	a201      	add	r2, pc, #4	@ (adr r2, 800ad28 <USBH_HandleControl+0x24>)
 800ad22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad26:	bf00      	nop
 800ad28:	0800ad55 	.word	0x0800ad55
 800ad2c:	0800ad6f 	.word	0x0800ad6f
 800ad30:	0800add9 	.word	0x0800add9
 800ad34:	0800adff 	.word	0x0800adff
 800ad38:	0800ae37 	.word	0x0800ae37
 800ad3c:	0800ae61 	.word	0x0800ae61
 800ad40:	0800aeb3 	.word	0x0800aeb3
 800ad44:	0800aed5 	.word	0x0800aed5
 800ad48:	0800af11 	.word	0x0800af11
 800ad4c:	0800af37 	.word	0x0800af37
 800ad50:	0800af75 	.word	0x0800af75
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f103 0110 	add.w	r1, r3, #16
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	795b      	ldrb	r3, [r3, #5]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 f943 	bl	800afec <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2202      	movs	r2, #2
 800ad6a:	761a      	strb	r2, [r3, #24]
      break;
 800ad6c:	e139      	b.n	800afe2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	795b      	ldrb	r3, [r3, #5]
 800ad72:	4619      	mov	r1, r3
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 fcc5 	bl	800b704 <USBH_LL_GetURBState>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ad7e:	7bbb      	ldrb	r3, [r7, #14]
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d11e      	bne.n	800adc2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	7c1b      	ldrb	r3, [r3, #16]
 800ad88:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ad8c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	8adb      	ldrh	r3, [r3, #22]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00a      	beq.n	800adac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ad96:	7b7b      	ldrb	r3, [r7, #13]
 800ad98:	2b80      	cmp	r3, #128	@ 0x80
 800ad9a:	d103      	bne.n	800ada4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2203      	movs	r2, #3
 800ada0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ada2:	e115      	b.n	800afd0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2205      	movs	r2, #5
 800ada8:	761a      	strb	r2, [r3, #24]
      break;
 800adaa:	e111      	b.n	800afd0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800adac:	7b7b      	ldrb	r3, [r7, #13]
 800adae:	2b80      	cmp	r3, #128	@ 0x80
 800adb0:	d103      	bne.n	800adba <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2209      	movs	r2, #9
 800adb6:	761a      	strb	r2, [r3, #24]
      break;
 800adb8:	e10a      	b.n	800afd0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2207      	movs	r2, #7
 800adbe:	761a      	strb	r2, [r3, #24]
      break;
 800adc0:	e106      	b.n	800afd0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800adc2:	7bbb      	ldrb	r3, [r7, #14]
 800adc4:	2b04      	cmp	r3, #4
 800adc6:	d003      	beq.n	800add0 <USBH_HandleControl+0xcc>
 800adc8:	7bbb      	ldrb	r3, [r7, #14]
 800adca:	2b02      	cmp	r3, #2
 800adcc:	f040 8100 	bne.w	800afd0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	220b      	movs	r2, #11
 800add4:	761a      	strb	r2, [r3, #24]
      break;
 800add6:	e0fb      	b.n	800afd0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800adde:	b29a      	uxth	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6899      	ldr	r1, [r3, #8]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	899a      	ldrh	r2, [r3, #12]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	791b      	ldrb	r3, [r3, #4]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 f93a 	bl	800b06a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2204      	movs	r2, #4
 800adfa:	761a      	strb	r2, [r3, #24]
      break;
 800adfc:	e0f1      	b.n	800afe2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	791b      	ldrb	r3, [r3, #4]
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 fc7d 	bl	800b704 <USBH_LL_GetURBState>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ae0e:	7bbb      	ldrb	r3, [r7, #14]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d102      	bne.n	800ae1a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2209      	movs	r2, #9
 800ae18:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ae1a:	7bbb      	ldrb	r3, [r7, #14]
 800ae1c:	2b05      	cmp	r3, #5
 800ae1e:	d102      	bne.n	800ae26 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ae20:	2303      	movs	r3, #3
 800ae22:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ae24:	e0d6      	b.n	800afd4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ae26:	7bbb      	ldrb	r3, [r7, #14]
 800ae28:	2b04      	cmp	r3, #4
 800ae2a:	f040 80d3 	bne.w	800afd4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	220b      	movs	r2, #11
 800ae32:	761a      	strb	r2, [r3, #24]
      break;
 800ae34:	e0ce      	b.n	800afd4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6899      	ldr	r1, [r3, #8]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	899a      	ldrh	r2, [r3, #12]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	795b      	ldrb	r3, [r3, #5]
 800ae42:	2001      	movs	r0, #1
 800ae44:	9000      	str	r0, [sp, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 f8ea 	bl	800b020 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2206      	movs	r2, #6
 800ae5c:	761a      	strb	r2, [r3, #24]
      break;
 800ae5e:	e0c0      	b.n	800afe2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	795b      	ldrb	r3, [r3, #5]
 800ae64:	4619      	mov	r1, r3
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 fc4c 	bl	800b704 <USBH_LL_GetURBState>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ae70:	7bbb      	ldrb	r3, [r7, #14]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d103      	bne.n	800ae7e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2207      	movs	r2, #7
 800ae7a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ae7c:	e0ac      	b.n	800afd8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ae7e:	7bbb      	ldrb	r3, [r7, #14]
 800ae80:	2b05      	cmp	r3, #5
 800ae82:	d105      	bne.n	800ae90 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	220c      	movs	r2, #12
 800ae88:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ae8e:	e0a3      	b.n	800afd8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ae90:	7bbb      	ldrb	r3, [r7, #14]
 800ae92:	2b02      	cmp	r3, #2
 800ae94:	d103      	bne.n	800ae9e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2205      	movs	r2, #5
 800ae9a:	761a      	strb	r2, [r3, #24]
      break;
 800ae9c:	e09c      	b.n	800afd8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ae9e:	7bbb      	ldrb	r3, [r7, #14]
 800aea0:	2b04      	cmp	r3, #4
 800aea2:	f040 8099 	bne.w	800afd8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	220b      	movs	r2, #11
 800aeaa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800aeac:	2302      	movs	r3, #2
 800aeae:	73fb      	strb	r3, [r7, #15]
      break;
 800aeb0:	e092      	b.n	800afd8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	791b      	ldrb	r3, [r3, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	2100      	movs	r1, #0
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 f8d5 	bl	800b06a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800aec6:	b29a      	uxth	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2208      	movs	r2, #8
 800aed0:	761a      	strb	r2, [r3, #24]

      break;
 800aed2:	e086      	b.n	800afe2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	791b      	ldrb	r3, [r3, #4]
 800aed8:	4619      	mov	r1, r3
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 fc12 	bl	800b704 <USBH_LL_GetURBState>
 800aee0:	4603      	mov	r3, r0
 800aee2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800aee4:	7bbb      	ldrb	r3, [r7, #14]
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d105      	bne.n	800aef6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	220d      	movs	r2, #13
 800aeee:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800aef0:	2300      	movs	r3, #0
 800aef2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aef4:	e072      	b.n	800afdc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800aef6:	7bbb      	ldrb	r3, [r7, #14]
 800aef8:	2b04      	cmp	r3, #4
 800aefa:	d103      	bne.n	800af04 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	220b      	movs	r2, #11
 800af00:	761a      	strb	r2, [r3, #24]
      break;
 800af02:	e06b      	b.n	800afdc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800af04:	7bbb      	ldrb	r3, [r7, #14]
 800af06:	2b05      	cmp	r3, #5
 800af08:	d168      	bne.n	800afdc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800af0a:	2303      	movs	r3, #3
 800af0c:	73fb      	strb	r3, [r7, #15]
      break;
 800af0e:	e065      	b.n	800afdc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	795b      	ldrb	r3, [r3, #5]
 800af14:	2201      	movs	r2, #1
 800af16:	9200      	str	r2, [sp, #0]
 800af18:	2200      	movs	r2, #0
 800af1a:	2100      	movs	r1, #0
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 f87f 	bl	800b020 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800af28:	b29a      	uxth	r2, r3
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	220a      	movs	r2, #10
 800af32:	761a      	strb	r2, [r3, #24]
      break;
 800af34:	e055      	b.n	800afe2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	795b      	ldrb	r3, [r3, #5]
 800af3a:	4619      	mov	r1, r3
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 fbe1 	bl	800b704 <USBH_LL_GetURBState>
 800af42:	4603      	mov	r3, r0
 800af44:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800af46:	7bbb      	ldrb	r3, [r7, #14]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d105      	bne.n	800af58 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800af4c:	2300      	movs	r3, #0
 800af4e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	220d      	movs	r2, #13
 800af54:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800af56:	e043      	b.n	800afe0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800af58:	7bbb      	ldrb	r3, [r7, #14]
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	d103      	bne.n	800af66 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2209      	movs	r2, #9
 800af62:	761a      	strb	r2, [r3, #24]
      break;
 800af64:	e03c      	b.n	800afe0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800af66:	7bbb      	ldrb	r3, [r7, #14]
 800af68:	2b04      	cmp	r3, #4
 800af6a:	d139      	bne.n	800afe0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	220b      	movs	r2, #11
 800af70:	761a      	strb	r2, [r3, #24]
      break;
 800af72:	e035      	b.n	800afe0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	7e5b      	ldrb	r3, [r3, #25]
 800af78:	3301      	adds	r3, #1
 800af7a:	b2da      	uxtb	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	765a      	strb	r2, [r3, #25]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	7e5b      	ldrb	r3, [r3, #25]
 800af84:	2b02      	cmp	r3, #2
 800af86:	d806      	bhi.n	800af96 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2201      	movs	r2, #1
 800af92:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800af94:	e025      	b.n	800afe2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800af9c:	2106      	movs	r1, #6
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	795b      	ldrb	r3, [r3, #5]
 800afac:	4619      	mov	r1, r3
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 f90c 	bl	800b1cc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	791b      	ldrb	r3, [r3, #4]
 800afb8:	4619      	mov	r1, r3
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 f906 	bl	800b1cc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800afc6:	2302      	movs	r3, #2
 800afc8:	73fb      	strb	r3, [r7, #15]
      break;
 800afca:	e00a      	b.n	800afe2 <USBH_HandleControl+0x2de>

    default:
      break;
 800afcc:	bf00      	nop
 800afce:	e008      	b.n	800afe2 <USBH_HandleControl+0x2de>
      break;
 800afd0:	bf00      	nop
 800afd2:	e006      	b.n	800afe2 <USBH_HandleControl+0x2de>
      break;
 800afd4:	bf00      	nop
 800afd6:	e004      	b.n	800afe2 <USBH_HandleControl+0x2de>
      break;
 800afd8:	bf00      	nop
 800afda:	e002      	b.n	800afe2 <USBH_HandleControl+0x2de>
      break;
 800afdc:	bf00      	nop
 800afde:	e000      	b.n	800afe2 <USBH_HandleControl+0x2de>
      break;
 800afe0:	bf00      	nop
  }

  return status;
 800afe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b088      	sub	sp, #32
 800aff0:	af04      	add	r7, sp, #16
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	4613      	mov	r3, r2
 800aff8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800affa:	79f9      	ldrb	r1, [r7, #7]
 800affc:	2300      	movs	r3, #0
 800affe:	9303      	str	r3, [sp, #12]
 800b000:	2308      	movs	r3, #8
 800b002:	9302      	str	r3, [sp, #8]
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	9301      	str	r3, [sp, #4]
 800b008:	2300      	movs	r3, #0
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	2300      	movs	r3, #0
 800b00e:	2200      	movs	r2, #0
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f000 fb46 	bl	800b6a2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b016:	2300      	movs	r3, #0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3710      	adds	r7, #16
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b088      	sub	sp, #32
 800b024:	af04      	add	r7, sp, #16
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	4611      	mov	r1, r2
 800b02c:	461a      	mov	r2, r3
 800b02e:	460b      	mov	r3, r1
 800b030:	80fb      	strh	r3, [r7, #6]
 800b032:	4613      	mov	r3, r2
 800b034:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d001      	beq.n	800b044 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b040:	2300      	movs	r3, #0
 800b042:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b044:	7979      	ldrb	r1, [r7, #5]
 800b046:	7e3b      	ldrb	r3, [r7, #24]
 800b048:	9303      	str	r3, [sp, #12]
 800b04a:	88fb      	ldrh	r3, [r7, #6]
 800b04c:	9302      	str	r3, [sp, #8]
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	9301      	str	r3, [sp, #4]
 800b052:	2301      	movs	r3, #1
 800b054:	9300      	str	r3, [sp, #0]
 800b056:	2300      	movs	r3, #0
 800b058:	2200      	movs	r2, #0
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	f000 fb21 	bl	800b6a2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b088      	sub	sp, #32
 800b06e:	af04      	add	r7, sp, #16
 800b070:	60f8      	str	r0, [r7, #12]
 800b072:	60b9      	str	r1, [r7, #8]
 800b074:	4611      	mov	r1, r2
 800b076:	461a      	mov	r2, r3
 800b078:	460b      	mov	r3, r1
 800b07a:	80fb      	strh	r3, [r7, #6]
 800b07c:	4613      	mov	r3, r2
 800b07e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b080:	7979      	ldrb	r1, [r7, #5]
 800b082:	2300      	movs	r3, #0
 800b084:	9303      	str	r3, [sp, #12]
 800b086:	88fb      	ldrh	r3, [r7, #6]
 800b088:	9302      	str	r3, [sp, #8]
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	9301      	str	r3, [sp, #4]
 800b08e:	2301      	movs	r3, #1
 800b090:	9300      	str	r3, [sp, #0]
 800b092:	2300      	movs	r3, #0
 800b094:	2201      	movs	r2, #1
 800b096:	68f8      	ldr	r0, [r7, #12]
 800b098:	f000 fb03 	bl	800b6a2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b09c:	2300      	movs	r3, #0

}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3710      	adds	r7, #16
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}

0800b0a6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b088      	sub	sp, #32
 800b0aa:	af04      	add	r7, sp, #16
 800b0ac:	60f8      	str	r0, [r7, #12]
 800b0ae:	60b9      	str	r1, [r7, #8]
 800b0b0:	4611      	mov	r1, r2
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	80fb      	strh	r3, [r7, #6]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d001      	beq.n	800b0ca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b0ca:	7979      	ldrb	r1, [r7, #5]
 800b0cc:	7e3b      	ldrb	r3, [r7, #24]
 800b0ce:	9303      	str	r3, [sp, #12]
 800b0d0:	88fb      	ldrh	r3, [r7, #6]
 800b0d2:	9302      	str	r3, [sp, #8]
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	9301      	str	r3, [sp, #4]
 800b0d8:	2301      	movs	r3, #1
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	2302      	movs	r3, #2
 800b0de:	2200      	movs	r2, #0
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f000 fade 	bl	800b6a2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b0e6:	2300      	movs	r3, #0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b088      	sub	sp, #32
 800b0f4:	af04      	add	r7, sp, #16
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	4611      	mov	r1, r2
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	460b      	mov	r3, r1
 800b100:	80fb      	strh	r3, [r7, #6]
 800b102:	4613      	mov	r3, r2
 800b104:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b106:	7979      	ldrb	r1, [r7, #5]
 800b108:	2300      	movs	r3, #0
 800b10a:	9303      	str	r3, [sp, #12]
 800b10c:	88fb      	ldrh	r3, [r7, #6]
 800b10e:	9302      	str	r3, [sp, #8]
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	9301      	str	r3, [sp, #4]
 800b114:	2301      	movs	r3, #1
 800b116:	9300      	str	r3, [sp, #0]
 800b118:	2302      	movs	r3, #2
 800b11a:	2201      	movs	r2, #1
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f000 fac0 	bl	800b6a2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b086      	sub	sp, #24
 800b130:	af04      	add	r7, sp, #16
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	4608      	mov	r0, r1
 800b136:	4611      	mov	r1, r2
 800b138:	461a      	mov	r2, r3
 800b13a:	4603      	mov	r3, r0
 800b13c:	70fb      	strb	r3, [r7, #3]
 800b13e:	460b      	mov	r3, r1
 800b140:	70bb      	strb	r3, [r7, #2]
 800b142:	4613      	mov	r3, r2
 800b144:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b146:	7878      	ldrb	r0, [r7, #1]
 800b148:	78ba      	ldrb	r2, [r7, #2]
 800b14a:	78f9      	ldrb	r1, [r7, #3]
 800b14c:	8b3b      	ldrh	r3, [r7, #24]
 800b14e:	9302      	str	r3, [sp, #8]
 800b150:	7d3b      	ldrb	r3, [r7, #20]
 800b152:	9301      	str	r3, [sp, #4]
 800b154:	7c3b      	ldrb	r3, [r7, #16]
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	4603      	mov	r3, r0
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 fa53 	bl	800b606 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b082      	sub	sp, #8
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
 800b172:	460b      	mov	r3, r1
 800b174:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b176:	78fb      	ldrb	r3, [r7, #3]
 800b178:	4619      	mov	r1, r3
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 fa72 	bl	800b664 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	3708      	adds	r7, #8
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}

0800b18a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b084      	sub	sp, #16
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
 800b192:	460b      	mov	r3, r1
 800b194:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 f836 	bl	800b208 <USBH_GetFreePipe>
 800b19c:	4603      	mov	r3, r0
 800b19e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b1a0:	89fb      	ldrh	r3, [r7, #14]
 800b1a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d00a      	beq.n	800b1c0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b1aa:	78fa      	ldrb	r2, [r7, #3]
 800b1ac:	89fb      	ldrh	r3, [r7, #14]
 800b1ae:	f003 030f 	and.w	r3, r3, #15
 800b1b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b1b6:	6879      	ldr	r1, [r7, #4]
 800b1b8:	33e0      	adds	r3, #224	@ 0xe0
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	440b      	add	r3, r1
 800b1be:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b1c0:	89fb      	ldrh	r3, [r7, #14]
 800b1c2:	b2db      	uxtb	r3, r3
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3710      	adds	r7, #16
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b1d8:	78fb      	ldrb	r3, [r7, #3]
 800b1da:	2b0f      	cmp	r3, #15
 800b1dc:	d80d      	bhi.n	800b1fa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b1de:	78fb      	ldrb	r3, [r7, #3]
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	33e0      	adds	r3, #224	@ 0xe0
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	4413      	add	r3, r2
 800b1e8:	685a      	ldr	r2, [r3, #4]
 800b1ea:	78fb      	ldrb	r3, [r7, #3]
 800b1ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b1f0:	6879      	ldr	r1, [r7, #4]
 800b1f2:	33e0      	adds	r3, #224	@ 0xe0
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	440b      	add	r3, r1
 800b1f8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b1fa:	2300      	movs	r3, #0
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b210:	2300      	movs	r3, #0
 800b212:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b214:	2300      	movs	r3, #0
 800b216:	73fb      	strb	r3, [r7, #15]
 800b218:	e00f      	b.n	800b23a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	33e0      	adds	r3, #224	@ 0xe0
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	4413      	add	r3, r2
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d102      	bne.n	800b234 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b22e:	7bfb      	ldrb	r3, [r7, #15]
 800b230:	b29b      	uxth	r3, r3
 800b232:	e007      	b.n	800b244 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b234:	7bfb      	ldrb	r3, [r7, #15]
 800b236:	3301      	adds	r3, #1
 800b238:	73fb      	strb	r3, [r7, #15]
 800b23a:	7bfb      	ldrb	r3, [r7, #15]
 800b23c:	2b0f      	cmp	r3, #15
 800b23e:	d9ec      	bls.n	800b21a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b240:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b244:	4618      	mov	r0, r3
 800b246:	3714      	adds	r7, #20
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b254:	2201      	movs	r2, #1
 800b256:	490e      	ldr	r1, [pc, #56]	@ (800b290 <MX_USB_HOST_Init+0x40>)
 800b258:	480e      	ldr	r0, [pc, #56]	@ (800b294 <MX_USB_HOST_Init+0x44>)
 800b25a:	f7fe fb15 	bl	8009888 <USBH_Init>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b264:	f7f5 fe6a 	bl	8000f3c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b268:	490b      	ldr	r1, [pc, #44]	@ (800b298 <MX_USB_HOST_Init+0x48>)
 800b26a:	480a      	ldr	r0, [pc, #40]	@ (800b294 <MX_USB_HOST_Init+0x44>)
 800b26c:	f7fe fbb9 	bl	80099e2 <USBH_RegisterClass>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d001      	beq.n	800b27a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b276:	f7f5 fe61 	bl	8000f3c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b27a:	4806      	ldr	r0, [pc, #24]	@ (800b294 <MX_USB_HOST_Init+0x44>)
 800b27c:	f7fe fc3d 	bl	8009afa <USBH_Start>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d001      	beq.n	800b28a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b286:	f7f5 fe59 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b28a:	bf00      	nop
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	0800b2b1 	.word	0x0800b2b1
 800b294:	200002e8 	.word	0x200002e8
 800b298:	2000000c 	.word	0x2000000c

0800b29c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b2a0:	4802      	ldr	r0, [pc, #8]	@ (800b2ac <MX_USB_HOST_Process+0x10>)
 800b2a2:	f7fe fc3b 	bl	8009b1c <USBH_Process>
}
 800b2a6:	bf00      	nop
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	200002e8 	.word	0x200002e8

0800b2b0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b2bc:	78fb      	ldrb	r3, [r7, #3]
 800b2be:	3b01      	subs	r3, #1
 800b2c0:	2b04      	cmp	r3, #4
 800b2c2:	d819      	bhi.n	800b2f8 <USBH_UserProcess+0x48>
 800b2c4:	a201      	add	r2, pc, #4	@ (adr r2, 800b2cc <USBH_UserProcess+0x1c>)
 800b2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ca:	bf00      	nop
 800b2cc:	0800b2f9 	.word	0x0800b2f9
 800b2d0:	0800b2e9 	.word	0x0800b2e9
 800b2d4:	0800b2f9 	.word	0x0800b2f9
 800b2d8:	0800b2f1 	.word	0x0800b2f1
 800b2dc:	0800b2e1 	.word	0x0800b2e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b2e0:	4b09      	ldr	r3, [pc, #36]	@ (800b308 <USBH_UserProcess+0x58>)
 800b2e2:	2203      	movs	r2, #3
 800b2e4:	701a      	strb	r2, [r3, #0]
  break;
 800b2e6:	e008      	b.n	800b2fa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b2e8:	4b07      	ldr	r3, [pc, #28]	@ (800b308 <USBH_UserProcess+0x58>)
 800b2ea:	2202      	movs	r2, #2
 800b2ec:	701a      	strb	r2, [r3, #0]
  break;
 800b2ee:	e004      	b.n	800b2fa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b2f0:	4b05      	ldr	r3, [pc, #20]	@ (800b308 <USBH_UserProcess+0x58>)
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	701a      	strb	r2, [r3, #0]
  break;
 800b2f6:	e000      	b.n	800b2fa <USBH_UserProcess+0x4a>

  default:
  break;
 800b2f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b2fa:	bf00      	nop
 800b2fc:	370c      	adds	r7, #12
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	200006c0 	.word	0x200006c0

0800b30c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b08a      	sub	sp, #40	@ 0x28
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b314:	f107 0314 	add.w	r3, r7, #20
 800b318:	2200      	movs	r2, #0
 800b31a:	601a      	str	r2, [r3, #0]
 800b31c:	605a      	str	r2, [r3, #4]
 800b31e:	609a      	str	r2, [r3, #8]
 800b320:	60da      	str	r2, [r3, #12]
 800b322:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b32c:	d147      	bne.n	800b3be <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b32e:	2300      	movs	r3, #0
 800b330:	613b      	str	r3, [r7, #16]
 800b332:	4b25      	ldr	r3, [pc, #148]	@ (800b3c8 <HAL_HCD_MspInit+0xbc>)
 800b334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b336:	4a24      	ldr	r2, [pc, #144]	@ (800b3c8 <HAL_HCD_MspInit+0xbc>)
 800b338:	f043 0301 	orr.w	r3, r3, #1
 800b33c:	6313      	str	r3, [r2, #48]	@ 0x30
 800b33e:	4b22      	ldr	r3, [pc, #136]	@ (800b3c8 <HAL_HCD_MspInit+0xbc>)
 800b340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b342:	f003 0301 	and.w	r3, r3, #1
 800b346:	613b      	str	r3, [r7, #16]
 800b348:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b34a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b34e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b350:	2300      	movs	r3, #0
 800b352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b354:	2300      	movs	r3, #0
 800b356:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b358:	f107 0314 	add.w	r3, r7, #20
 800b35c:	4619      	mov	r1, r3
 800b35e:	481b      	ldr	r0, [pc, #108]	@ (800b3cc <HAL_HCD_MspInit+0xc0>)
 800b360:	f7f7 fb32 	bl	80029c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b364:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b36a:	2302      	movs	r3, #2
 800b36c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b36e:	2300      	movs	r3, #0
 800b370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b372:	2300      	movs	r3, #0
 800b374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b376:	230a      	movs	r3, #10
 800b378:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b37a:	f107 0314 	add.w	r3, r7, #20
 800b37e:	4619      	mov	r1, r3
 800b380:	4812      	ldr	r0, [pc, #72]	@ (800b3cc <HAL_HCD_MspInit+0xc0>)
 800b382:	f7f7 fb21 	bl	80029c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b386:	4b10      	ldr	r3, [pc, #64]	@ (800b3c8 <HAL_HCD_MspInit+0xbc>)
 800b388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b38a:	4a0f      	ldr	r2, [pc, #60]	@ (800b3c8 <HAL_HCD_MspInit+0xbc>)
 800b38c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b390:	6353      	str	r3, [r2, #52]	@ 0x34
 800b392:	2300      	movs	r3, #0
 800b394:	60fb      	str	r3, [r7, #12]
 800b396:	4b0c      	ldr	r3, [pc, #48]	@ (800b3c8 <HAL_HCD_MspInit+0xbc>)
 800b398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b39a:	4a0b      	ldr	r2, [pc, #44]	@ (800b3c8 <HAL_HCD_MspInit+0xbc>)
 800b39c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b3a0:	6453      	str	r3, [r2, #68]	@ 0x44
 800b3a2:	4b09      	ldr	r3, [pc, #36]	@ (800b3c8 <HAL_HCD_MspInit+0xbc>)
 800b3a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b3aa:	60fb      	str	r3, [r7, #12]
 800b3ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	2043      	movs	r0, #67	@ 0x43
 800b3b4:	f7f6 fdc7 	bl	8001f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b3b8:	2043      	movs	r0, #67	@ 0x43
 800b3ba:	f7f6 fde0 	bl	8001f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b3be:	bf00      	nop
 800b3c0:	3728      	adds	r7, #40	@ 0x28
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	40023800 	.word	0x40023800
 800b3cc:	40020000 	.word	0x40020000

0800b3d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7fe ff73 	bl	800a2ca <USBH_LL_IncTimer>
}
 800b3e4:	bf00      	nop
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7fe ffab 	bl	800a356 <USBH_LL_Connect>
}
 800b400:	bf00      	nop
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b416:	4618      	mov	r0, r3
 800b418:	f7fe ffb4 	bl	800a384 <USBH_LL_Disconnect>
}
 800b41c:	bf00      	nop
 800b41e:	3708      	adds	r7, #8
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	460b      	mov	r3, r1
 800b42e:	70fb      	strb	r3, [r7, #3]
 800b430:	4613      	mov	r3, r2
 800b432:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b434:	bf00      	nop
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b44e:	4618      	mov	r0, r3
 800b450:	f7fe ff65 	bl	800a31e <USBH_LL_PortEnabled>
}
 800b454:	bf00      	nop
 800b456:	3708      	adds	r7, #8
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7fe ff65 	bl	800a33a <USBH_LL_PortDisabled>
}
 800b470:	bf00      	nop
 800b472:	3708      	adds	r7, #8
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b486:	2b01      	cmp	r3, #1
 800b488:	d12a      	bne.n	800b4e0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b48a:	4a18      	ldr	r2, [pc, #96]	@ (800b4ec <USBH_LL_Init+0x74>)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4a15      	ldr	r2, [pc, #84]	@ (800b4ec <USBH_LL_Init+0x74>)
 800b496:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b49a:	4b14      	ldr	r3, [pc, #80]	@ (800b4ec <USBH_LL_Init+0x74>)
 800b49c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b4a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b4a2:	4b12      	ldr	r3, [pc, #72]	@ (800b4ec <USBH_LL_Init+0x74>)
 800b4a4:	2208      	movs	r2, #8
 800b4a6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b4a8:	4b10      	ldr	r3, [pc, #64]	@ (800b4ec <USBH_LL_Init+0x74>)
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b4ae:	4b0f      	ldr	r3, [pc, #60]	@ (800b4ec <USBH_LL_Init+0x74>)
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b4b4:	4b0d      	ldr	r3, [pc, #52]	@ (800b4ec <USBH_LL_Init+0x74>)
 800b4b6:	2202      	movs	r2, #2
 800b4b8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b4ba:	4b0c      	ldr	r3, [pc, #48]	@ (800b4ec <USBH_LL_Init+0x74>)
 800b4bc:	2200      	movs	r2, #0
 800b4be:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b4c0:	480a      	ldr	r0, [pc, #40]	@ (800b4ec <USBH_LL_Init+0x74>)
 800b4c2:	f7f7 fc36 	bl	8002d32 <HAL_HCD_Init>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d001      	beq.n	800b4d0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b4cc:	f7f5 fd36 	bl	8000f3c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b4d0:	4806      	ldr	r0, [pc, #24]	@ (800b4ec <USBH_LL_Init+0x74>)
 800b4d2:	f7f8 f897 	bl	8003604 <HAL_HCD_GetCurrentFrame>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	4619      	mov	r1, r3
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f7fe fee6 	bl	800a2ac <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	200006c4 	.word	0x200006c4

0800b4f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b506:	4618      	mov	r0, r3
 800b508:	f7f8 f804 	bl	8003514 <HAL_HCD_Start>
 800b50c:	4603      	mov	r3, r0
 800b50e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b510:	7bfb      	ldrb	r3, [r7, #15]
 800b512:	4618      	mov	r0, r3
 800b514:	f000 f95e 	bl	800b7d4 <USBH_Get_USB_Status>
 800b518:	4603      	mov	r3, r0
 800b51a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b51c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b084      	sub	sp, #16
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b52e:	2300      	movs	r3, #0
 800b530:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b532:	2300      	movs	r3, #0
 800b534:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7f8 f80c 	bl	800355a <HAL_HCD_Stop>
 800b542:	4603      	mov	r3, r0
 800b544:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b546:	7bfb      	ldrb	r3, [r7, #15]
 800b548:	4618      	mov	r0, r3
 800b54a:	f000 f943 	bl	800b7d4 <USBH_Get_USB_Status>
 800b54e:	4603      	mov	r3, r0
 800b550:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b552:	7bbb      	ldrb	r3, [r7, #14]
}
 800b554:	4618      	mov	r0, r3
 800b556:	3710      	adds	r7, #16
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b564:	2301      	movs	r3, #1
 800b566:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b56e:	4618      	mov	r0, r3
 800b570:	f7f8 f856 	bl	8003620 <HAL_HCD_GetCurrentSpeed>
 800b574:	4603      	mov	r3, r0
 800b576:	2b02      	cmp	r3, #2
 800b578:	d00c      	beq.n	800b594 <USBH_LL_GetSpeed+0x38>
 800b57a:	2b02      	cmp	r3, #2
 800b57c:	d80d      	bhi.n	800b59a <USBH_LL_GetSpeed+0x3e>
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d002      	beq.n	800b588 <USBH_LL_GetSpeed+0x2c>
 800b582:	2b01      	cmp	r3, #1
 800b584:	d003      	beq.n	800b58e <USBH_LL_GetSpeed+0x32>
 800b586:	e008      	b.n	800b59a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b588:	2300      	movs	r3, #0
 800b58a:	73fb      	strb	r3, [r7, #15]
    break;
 800b58c:	e008      	b.n	800b5a0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b58e:	2301      	movs	r3, #1
 800b590:	73fb      	strb	r3, [r7, #15]
    break;
 800b592:	e005      	b.n	800b5a0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b594:	2302      	movs	r3, #2
 800b596:	73fb      	strb	r3, [r7, #15]
    break;
 800b598:	e002      	b.n	800b5a0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b59a:	2301      	movs	r3, #1
 800b59c:	73fb      	strb	r3, [r7, #15]
    break;
 800b59e:	bf00      	nop
  }
  return  speed;
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b084      	sub	sp, #16
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7f7 ffe7 	bl	8003594 <HAL_HCD_ResetPort>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f000 f901 	bl	800b7d4 <USBH_Get_USB_Status>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3710      	adds	r7, #16
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b5f2:	78fa      	ldrb	r2, [r7, #3]
 800b5f4:	4611      	mov	r1, r2
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7f7 ffef 	bl	80035da <HAL_HCD_HC_GetXferCount>
 800b5fc:	4603      	mov	r3, r0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b606:	b590      	push	{r4, r7, lr}
 800b608:	b089      	sub	sp, #36	@ 0x24
 800b60a:	af04      	add	r7, sp, #16
 800b60c:	6078      	str	r0, [r7, #4]
 800b60e:	4608      	mov	r0, r1
 800b610:	4611      	mov	r1, r2
 800b612:	461a      	mov	r2, r3
 800b614:	4603      	mov	r3, r0
 800b616:	70fb      	strb	r3, [r7, #3]
 800b618:	460b      	mov	r3, r1
 800b61a:	70bb      	strb	r3, [r7, #2]
 800b61c:	4613      	mov	r3, r2
 800b61e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b620:	2300      	movs	r3, #0
 800b622:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b624:	2300      	movs	r3, #0
 800b626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b62e:	787c      	ldrb	r4, [r7, #1]
 800b630:	78ba      	ldrb	r2, [r7, #2]
 800b632:	78f9      	ldrb	r1, [r7, #3]
 800b634:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b636:	9302      	str	r3, [sp, #8]
 800b638:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b63c:	9301      	str	r3, [sp, #4]
 800b63e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b642:	9300      	str	r3, [sp, #0]
 800b644:	4623      	mov	r3, r4
 800b646:	f7f7 fbdb 	bl	8002e00 <HAL_HCD_HC_Init>
 800b64a:	4603      	mov	r3, r0
 800b64c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b64e:	7bfb      	ldrb	r3, [r7, #15]
 800b650:	4618      	mov	r0, r3
 800b652:	f000 f8bf 	bl	800b7d4 <USBH_Get_USB_Status>
 800b656:	4603      	mov	r3, r0
 800b658:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b65a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3714      	adds	r7, #20
 800b660:	46bd      	mov	sp, r7
 800b662:	bd90      	pop	{r4, r7, pc}

0800b664 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	460b      	mov	r3, r1
 800b66e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b670:	2300      	movs	r3, #0
 800b672:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b674:	2300      	movs	r3, #0
 800b676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b67e:	78fa      	ldrb	r2, [r7, #3]
 800b680:	4611      	mov	r1, r2
 800b682:	4618      	mov	r0, r3
 800b684:	f7f7 fc74 	bl	8002f70 <HAL_HCD_HC_Halt>
 800b688:	4603      	mov	r3, r0
 800b68a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b68c:	7bfb      	ldrb	r3, [r7, #15]
 800b68e:	4618      	mov	r0, r3
 800b690:	f000 f8a0 	bl	800b7d4 <USBH_Get_USB_Status>
 800b694:	4603      	mov	r3, r0
 800b696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b698:	7bbb      	ldrb	r3, [r7, #14]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b6a2:	b590      	push	{r4, r7, lr}
 800b6a4:	b089      	sub	sp, #36	@ 0x24
 800b6a6:	af04      	add	r7, sp, #16
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	4608      	mov	r0, r1
 800b6ac:	4611      	mov	r1, r2
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	70fb      	strb	r3, [r7, #3]
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	70bb      	strb	r3, [r7, #2]
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b6ca:	787c      	ldrb	r4, [r7, #1]
 800b6cc:	78ba      	ldrb	r2, [r7, #2]
 800b6ce:	78f9      	ldrb	r1, [r7, #3]
 800b6d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b6d4:	9303      	str	r3, [sp, #12]
 800b6d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b6d8:	9302      	str	r3, [sp, #8]
 800b6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6dc:	9301      	str	r3, [sp, #4]
 800b6de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b6e2:	9300      	str	r3, [sp, #0]
 800b6e4:	4623      	mov	r3, r4
 800b6e6:	f7f7 fc67 	bl	8002fb8 <HAL_HCD_HC_SubmitRequest>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b6ee:	7bfb      	ldrb	r3, [r7, #15]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 f86f 	bl	800b7d4 <USBH_Get_USB_Status>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3714      	adds	r7, #20
 800b700:	46bd      	mov	sp, r7
 800b702:	bd90      	pop	{r4, r7, pc}

0800b704 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	460b      	mov	r3, r1
 800b70e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b716:	78fa      	ldrb	r2, [r7, #3]
 800b718:	4611      	mov	r1, r2
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7f7 ff48 	bl	80035b0 <HAL_HCD_HC_GetURBState>
 800b720:	4603      	mov	r3, r0
}
 800b722:	4618      	mov	r0, r3
 800b724:	3708      	adds	r7, #8
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}

0800b72a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b082      	sub	sp, #8
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	460b      	mov	r3, r1
 800b734:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d103      	bne.n	800b748 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b740:	78fb      	ldrb	r3, [r7, #3]
 800b742:	4618      	mov	r0, r3
 800b744:	f000 f872 	bl	800b82c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b748:	20c8      	movs	r0, #200	@ 0xc8
 800b74a:	f7f5 ff63 	bl	8001614 <HAL_Delay>
  return USBH_OK;
 800b74e:	2300      	movs	r3, #0
}
 800b750:	4618      	mov	r0, r3
 800b752:	3708      	adds	r7, #8
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b758:	b480      	push	{r7}
 800b75a:	b085      	sub	sp, #20
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	460b      	mov	r3, r1
 800b762:	70fb      	strb	r3, [r7, #3]
 800b764:	4613      	mov	r3, r2
 800b766:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b76e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b770:	78fa      	ldrb	r2, [r7, #3]
 800b772:	68f9      	ldr	r1, [r7, #12]
 800b774:	4613      	mov	r3, r2
 800b776:	011b      	lsls	r3, r3, #4
 800b778:	1a9b      	subs	r3, r3, r2
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	440b      	add	r3, r1
 800b77e:	3317      	adds	r3, #23
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d00a      	beq.n	800b79c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b786:	78fa      	ldrb	r2, [r7, #3]
 800b788:	68f9      	ldr	r1, [r7, #12]
 800b78a:	4613      	mov	r3, r2
 800b78c:	011b      	lsls	r3, r3, #4
 800b78e:	1a9b      	subs	r3, r3, r2
 800b790:	009b      	lsls	r3, r3, #2
 800b792:	440b      	add	r3, r1
 800b794:	333c      	adds	r3, #60	@ 0x3c
 800b796:	78ba      	ldrb	r2, [r7, #2]
 800b798:	701a      	strb	r2, [r3, #0]
 800b79a:	e009      	b.n	800b7b0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b79c:	78fa      	ldrb	r2, [r7, #3]
 800b79e:	68f9      	ldr	r1, [r7, #12]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	011b      	lsls	r3, r3, #4
 800b7a4:	1a9b      	subs	r3, r3, r2
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	440b      	add	r3, r1
 800b7aa:	333d      	adds	r3, #61	@ 0x3d
 800b7ac:	78ba      	ldrb	r2, [r7, #2]
 800b7ae:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b7b0:	2300      	movs	r3, #0
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3714      	adds	r7, #20
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr

0800b7be <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b082      	sub	sp, #8
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f7f5 ff24 	bl	8001614 <HAL_Delay>
}
 800b7cc:	bf00      	nop
 800b7ce:	3708      	adds	r7, #8
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b085      	sub	sp, #20
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	4603      	mov	r3, r0
 800b7dc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b7e2:	79fb      	ldrb	r3, [r7, #7]
 800b7e4:	2b03      	cmp	r3, #3
 800b7e6:	d817      	bhi.n	800b818 <USBH_Get_USB_Status+0x44>
 800b7e8:	a201      	add	r2, pc, #4	@ (adr r2, 800b7f0 <USBH_Get_USB_Status+0x1c>)
 800b7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ee:	bf00      	nop
 800b7f0:	0800b801 	.word	0x0800b801
 800b7f4:	0800b807 	.word	0x0800b807
 800b7f8:	0800b80d 	.word	0x0800b80d
 800b7fc:	0800b813 	.word	0x0800b813
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	73fb      	strb	r3, [r7, #15]
    break;
 800b804:	e00b      	b.n	800b81e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b806:	2302      	movs	r3, #2
 800b808:	73fb      	strb	r3, [r7, #15]
    break;
 800b80a:	e008      	b.n	800b81e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b80c:	2301      	movs	r3, #1
 800b80e:	73fb      	strb	r3, [r7, #15]
    break;
 800b810:	e005      	b.n	800b81e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b812:	2302      	movs	r3, #2
 800b814:	73fb      	strb	r3, [r7, #15]
    break;
 800b816:	e002      	b.n	800b81e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b818:	2302      	movs	r3, #2
 800b81a:	73fb      	strb	r3, [r7, #15]
    break;
 800b81c:	bf00      	nop
  }
  return usb_status;
 800b81e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3714      	adds	r7, #20
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	4603      	mov	r3, r0
 800b834:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b836:	79fb      	ldrb	r3, [r7, #7]
 800b838:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b83a:	79fb      	ldrb	r3, [r7, #7]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d102      	bne.n	800b846 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b840:	2300      	movs	r3, #0
 800b842:	73fb      	strb	r3, [r7, #15]
 800b844:	e001      	b.n	800b84a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b846:	2301      	movs	r3, #1
 800b848:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b84a:	7bfb      	ldrb	r3, [r7, #15]
 800b84c:	461a      	mov	r2, r3
 800b84e:	2101      	movs	r1, #1
 800b850:	4803      	ldr	r0, [pc, #12]	@ (800b860 <MX_DriverVbusFS+0x34>)
 800b852:	f7f7 fa55 	bl	8002d00 <HAL_GPIO_WritePin>
}
 800b856:	bf00      	nop
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	40020800 	.word	0x40020800

0800b864 <malloc>:
 800b864:	4b02      	ldr	r3, [pc, #8]	@ (800b870 <malloc+0xc>)
 800b866:	4601      	mov	r1, r0
 800b868:	6818      	ldr	r0, [r3, #0]
 800b86a:	f000 b82d 	b.w	800b8c8 <_malloc_r>
 800b86e:	bf00      	nop
 800b870:	2000002c 	.word	0x2000002c

0800b874 <free>:
 800b874:	4b02      	ldr	r3, [pc, #8]	@ (800b880 <free+0xc>)
 800b876:	4601      	mov	r1, r0
 800b878:	6818      	ldr	r0, [r3, #0]
 800b87a:	f000 b8f5 	b.w	800ba68 <_free_r>
 800b87e:	bf00      	nop
 800b880:	2000002c 	.word	0x2000002c

0800b884 <sbrk_aligned>:
 800b884:	b570      	push	{r4, r5, r6, lr}
 800b886:	4e0f      	ldr	r6, [pc, #60]	@ (800b8c4 <sbrk_aligned+0x40>)
 800b888:	460c      	mov	r4, r1
 800b88a:	6831      	ldr	r1, [r6, #0]
 800b88c:	4605      	mov	r5, r0
 800b88e:	b911      	cbnz	r1, 800b896 <sbrk_aligned+0x12>
 800b890:	f000 f8ae 	bl	800b9f0 <_sbrk_r>
 800b894:	6030      	str	r0, [r6, #0]
 800b896:	4621      	mov	r1, r4
 800b898:	4628      	mov	r0, r5
 800b89a:	f000 f8a9 	bl	800b9f0 <_sbrk_r>
 800b89e:	1c43      	adds	r3, r0, #1
 800b8a0:	d103      	bne.n	800b8aa <sbrk_aligned+0x26>
 800b8a2:	f04f 34ff 	mov.w	r4, #4294967295
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	bd70      	pop	{r4, r5, r6, pc}
 800b8aa:	1cc4      	adds	r4, r0, #3
 800b8ac:	f024 0403 	bic.w	r4, r4, #3
 800b8b0:	42a0      	cmp	r0, r4
 800b8b2:	d0f8      	beq.n	800b8a6 <sbrk_aligned+0x22>
 800b8b4:	1a21      	subs	r1, r4, r0
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	f000 f89a 	bl	800b9f0 <_sbrk_r>
 800b8bc:	3001      	adds	r0, #1
 800b8be:	d1f2      	bne.n	800b8a6 <sbrk_aligned+0x22>
 800b8c0:	e7ef      	b.n	800b8a2 <sbrk_aligned+0x1e>
 800b8c2:	bf00      	nop
 800b8c4:	20000aa4 	.word	0x20000aa4

0800b8c8 <_malloc_r>:
 800b8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8cc:	1ccd      	adds	r5, r1, #3
 800b8ce:	f025 0503 	bic.w	r5, r5, #3
 800b8d2:	3508      	adds	r5, #8
 800b8d4:	2d0c      	cmp	r5, #12
 800b8d6:	bf38      	it	cc
 800b8d8:	250c      	movcc	r5, #12
 800b8da:	2d00      	cmp	r5, #0
 800b8dc:	4606      	mov	r6, r0
 800b8de:	db01      	blt.n	800b8e4 <_malloc_r+0x1c>
 800b8e0:	42a9      	cmp	r1, r5
 800b8e2:	d904      	bls.n	800b8ee <_malloc_r+0x26>
 800b8e4:	230c      	movs	r3, #12
 800b8e6:	6033      	str	r3, [r6, #0]
 800b8e8:	2000      	movs	r0, #0
 800b8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b9c4 <_malloc_r+0xfc>
 800b8f2:	f000 f869 	bl	800b9c8 <__malloc_lock>
 800b8f6:	f8d8 3000 	ldr.w	r3, [r8]
 800b8fa:	461c      	mov	r4, r3
 800b8fc:	bb44      	cbnz	r4, 800b950 <_malloc_r+0x88>
 800b8fe:	4629      	mov	r1, r5
 800b900:	4630      	mov	r0, r6
 800b902:	f7ff ffbf 	bl	800b884 <sbrk_aligned>
 800b906:	1c43      	adds	r3, r0, #1
 800b908:	4604      	mov	r4, r0
 800b90a:	d158      	bne.n	800b9be <_malloc_r+0xf6>
 800b90c:	f8d8 4000 	ldr.w	r4, [r8]
 800b910:	4627      	mov	r7, r4
 800b912:	2f00      	cmp	r7, #0
 800b914:	d143      	bne.n	800b99e <_malloc_r+0xd6>
 800b916:	2c00      	cmp	r4, #0
 800b918:	d04b      	beq.n	800b9b2 <_malloc_r+0xea>
 800b91a:	6823      	ldr	r3, [r4, #0]
 800b91c:	4639      	mov	r1, r7
 800b91e:	4630      	mov	r0, r6
 800b920:	eb04 0903 	add.w	r9, r4, r3
 800b924:	f000 f864 	bl	800b9f0 <_sbrk_r>
 800b928:	4581      	cmp	r9, r0
 800b92a:	d142      	bne.n	800b9b2 <_malloc_r+0xea>
 800b92c:	6821      	ldr	r1, [r4, #0]
 800b92e:	1a6d      	subs	r5, r5, r1
 800b930:	4629      	mov	r1, r5
 800b932:	4630      	mov	r0, r6
 800b934:	f7ff ffa6 	bl	800b884 <sbrk_aligned>
 800b938:	3001      	adds	r0, #1
 800b93a:	d03a      	beq.n	800b9b2 <_malloc_r+0xea>
 800b93c:	6823      	ldr	r3, [r4, #0]
 800b93e:	442b      	add	r3, r5
 800b940:	6023      	str	r3, [r4, #0]
 800b942:	f8d8 3000 	ldr.w	r3, [r8]
 800b946:	685a      	ldr	r2, [r3, #4]
 800b948:	bb62      	cbnz	r2, 800b9a4 <_malloc_r+0xdc>
 800b94a:	f8c8 7000 	str.w	r7, [r8]
 800b94e:	e00f      	b.n	800b970 <_malloc_r+0xa8>
 800b950:	6822      	ldr	r2, [r4, #0]
 800b952:	1b52      	subs	r2, r2, r5
 800b954:	d420      	bmi.n	800b998 <_malloc_r+0xd0>
 800b956:	2a0b      	cmp	r2, #11
 800b958:	d917      	bls.n	800b98a <_malloc_r+0xc2>
 800b95a:	1961      	adds	r1, r4, r5
 800b95c:	42a3      	cmp	r3, r4
 800b95e:	6025      	str	r5, [r4, #0]
 800b960:	bf18      	it	ne
 800b962:	6059      	strne	r1, [r3, #4]
 800b964:	6863      	ldr	r3, [r4, #4]
 800b966:	bf08      	it	eq
 800b968:	f8c8 1000 	streq.w	r1, [r8]
 800b96c:	5162      	str	r2, [r4, r5]
 800b96e:	604b      	str	r3, [r1, #4]
 800b970:	4630      	mov	r0, r6
 800b972:	f000 f82f 	bl	800b9d4 <__malloc_unlock>
 800b976:	f104 000b 	add.w	r0, r4, #11
 800b97a:	1d23      	adds	r3, r4, #4
 800b97c:	f020 0007 	bic.w	r0, r0, #7
 800b980:	1ac2      	subs	r2, r0, r3
 800b982:	bf1c      	itt	ne
 800b984:	1a1b      	subne	r3, r3, r0
 800b986:	50a3      	strne	r3, [r4, r2]
 800b988:	e7af      	b.n	800b8ea <_malloc_r+0x22>
 800b98a:	6862      	ldr	r2, [r4, #4]
 800b98c:	42a3      	cmp	r3, r4
 800b98e:	bf0c      	ite	eq
 800b990:	f8c8 2000 	streq.w	r2, [r8]
 800b994:	605a      	strne	r2, [r3, #4]
 800b996:	e7eb      	b.n	800b970 <_malloc_r+0xa8>
 800b998:	4623      	mov	r3, r4
 800b99a:	6864      	ldr	r4, [r4, #4]
 800b99c:	e7ae      	b.n	800b8fc <_malloc_r+0x34>
 800b99e:	463c      	mov	r4, r7
 800b9a0:	687f      	ldr	r7, [r7, #4]
 800b9a2:	e7b6      	b.n	800b912 <_malloc_r+0x4a>
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	42a3      	cmp	r3, r4
 800b9aa:	d1fb      	bne.n	800b9a4 <_malloc_r+0xdc>
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	6053      	str	r3, [r2, #4]
 800b9b0:	e7de      	b.n	800b970 <_malloc_r+0xa8>
 800b9b2:	230c      	movs	r3, #12
 800b9b4:	6033      	str	r3, [r6, #0]
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	f000 f80c 	bl	800b9d4 <__malloc_unlock>
 800b9bc:	e794      	b.n	800b8e8 <_malloc_r+0x20>
 800b9be:	6005      	str	r5, [r0, #0]
 800b9c0:	e7d6      	b.n	800b970 <_malloc_r+0xa8>
 800b9c2:	bf00      	nop
 800b9c4:	20000aa8 	.word	0x20000aa8

0800b9c8 <__malloc_lock>:
 800b9c8:	4801      	ldr	r0, [pc, #4]	@ (800b9d0 <__malloc_lock+0x8>)
 800b9ca:	f000 b84b 	b.w	800ba64 <__retarget_lock_acquire_recursive>
 800b9ce:	bf00      	nop
 800b9d0:	20000be8 	.word	0x20000be8

0800b9d4 <__malloc_unlock>:
 800b9d4:	4801      	ldr	r0, [pc, #4]	@ (800b9dc <__malloc_unlock+0x8>)
 800b9d6:	f000 b846 	b.w	800ba66 <__retarget_lock_release_recursive>
 800b9da:	bf00      	nop
 800b9dc:	20000be8 	.word	0x20000be8

0800b9e0 <memset>:
 800b9e0:	4402      	add	r2, r0
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d100      	bne.n	800b9ea <memset+0xa>
 800b9e8:	4770      	bx	lr
 800b9ea:	f803 1b01 	strb.w	r1, [r3], #1
 800b9ee:	e7f9      	b.n	800b9e4 <memset+0x4>

0800b9f0 <_sbrk_r>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	4d06      	ldr	r5, [pc, #24]	@ (800ba0c <_sbrk_r+0x1c>)
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	4608      	mov	r0, r1
 800b9fa:	602b      	str	r3, [r5, #0]
 800b9fc:	f7f5 fd26 	bl	800144c <_sbrk>
 800ba00:	1c43      	adds	r3, r0, #1
 800ba02:	d102      	bne.n	800ba0a <_sbrk_r+0x1a>
 800ba04:	682b      	ldr	r3, [r5, #0]
 800ba06:	b103      	cbz	r3, 800ba0a <_sbrk_r+0x1a>
 800ba08:	6023      	str	r3, [r4, #0]
 800ba0a:	bd38      	pop	{r3, r4, r5, pc}
 800ba0c:	20000be4 	.word	0x20000be4

0800ba10 <__errno>:
 800ba10:	4b01      	ldr	r3, [pc, #4]	@ (800ba18 <__errno+0x8>)
 800ba12:	6818      	ldr	r0, [r3, #0]
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	2000002c 	.word	0x2000002c

0800ba1c <__libc_init_array>:
 800ba1c:	b570      	push	{r4, r5, r6, lr}
 800ba1e:	4d0d      	ldr	r5, [pc, #52]	@ (800ba54 <__libc_init_array+0x38>)
 800ba20:	4c0d      	ldr	r4, [pc, #52]	@ (800ba58 <__libc_init_array+0x3c>)
 800ba22:	1b64      	subs	r4, r4, r5
 800ba24:	10a4      	asrs	r4, r4, #2
 800ba26:	2600      	movs	r6, #0
 800ba28:	42a6      	cmp	r6, r4
 800ba2a:	d109      	bne.n	800ba40 <__libc_init_array+0x24>
 800ba2c:	4d0b      	ldr	r5, [pc, #44]	@ (800ba5c <__libc_init_array+0x40>)
 800ba2e:	4c0c      	ldr	r4, [pc, #48]	@ (800ba60 <__libc_init_array+0x44>)
 800ba30:	f000 f864 	bl	800bafc <_init>
 800ba34:	1b64      	subs	r4, r4, r5
 800ba36:	10a4      	asrs	r4, r4, #2
 800ba38:	2600      	movs	r6, #0
 800ba3a:	42a6      	cmp	r6, r4
 800ba3c:	d105      	bne.n	800ba4a <__libc_init_array+0x2e>
 800ba3e:	bd70      	pop	{r4, r5, r6, pc}
 800ba40:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba44:	4798      	blx	r3
 800ba46:	3601      	adds	r6, #1
 800ba48:	e7ee      	b.n	800ba28 <__libc_init_array+0xc>
 800ba4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba4e:	4798      	blx	r3
 800ba50:	3601      	adds	r6, #1
 800ba52:	e7f2      	b.n	800ba3a <__libc_init_array+0x1e>
 800ba54:	0800bb40 	.word	0x0800bb40
 800ba58:	0800bb40 	.word	0x0800bb40
 800ba5c:	0800bb40 	.word	0x0800bb40
 800ba60:	0800bb44 	.word	0x0800bb44

0800ba64 <__retarget_lock_acquire_recursive>:
 800ba64:	4770      	bx	lr

0800ba66 <__retarget_lock_release_recursive>:
 800ba66:	4770      	bx	lr

0800ba68 <_free_r>:
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	4605      	mov	r5, r0
 800ba6c:	2900      	cmp	r1, #0
 800ba6e:	d041      	beq.n	800baf4 <_free_r+0x8c>
 800ba70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba74:	1f0c      	subs	r4, r1, #4
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	bfb8      	it	lt
 800ba7a:	18e4      	addlt	r4, r4, r3
 800ba7c:	f7ff ffa4 	bl	800b9c8 <__malloc_lock>
 800ba80:	4a1d      	ldr	r2, [pc, #116]	@ (800baf8 <_free_r+0x90>)
 800ba82:	6813      	ldr	r3, [r2, #0]
 800ba84:	b933      	cbnz	r3, 800ba94 <_free_r+0x2c>
 800ba86:	6063      	str	r3, [r4, #4]
 800ba88:	6014      	str	r4, [r2, #0]
 800ba8a:	4628      	mov	r0, r5
 800ba8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba90:	f7ff bfa0 	b.w	800b9d4 <__malloc_unlock>
 800ba94:	42a3      	cmp	r3, r4
 800ba96:	d908      	bls.n	800baaa <_free_r+0x42>
 800ba98:	6820      	ldr	r0, [r4, #0]
 800ba9a:	1821      	adds	r1, r4, r0
 800ba9c:	428b      	cmp	r3, r1
 800ba9e:	bf01      	itttt	eq
 800baa0:	6819      	ldreq	r1, [r3, #0]
 800baa2:	685b      	ldreq	r3, [r3, #4]
 800baa4:	1809      	addeq	r1, r1, r0
 800baa6:	6021      	streq	r1, [r4, #0]
 800baa8:	e7ed      	b.n	800ba86 <_free_r+0x1e>
 800baaa:	461a      	mov	r2, r3
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	b10b      	cbz	r3, 800bab4 <_free_r+0x4c>
 800bab0:	42a3      	cmp	r3, r4
 800bab2:	d9fa      	bls.n	800baaa <_free_r+0x42>
 800bab4:	6811      	ldr	r1, [r2, #0]
 800bab6:	1850      	adds	r0, r2, r1
 800bab8:	42a0      	cmp	r0, r4
 800baba:	d10b      	bne.n	800bad4 <_free_r+0x6c>
 800babc:	6820      	ldr	r0, [r4, #0]
 800babe:	4401      	add	r1, r0
 800bac0:	1850      	adds	r0, r2, r1
 800bac2:	4283      	cmp	r3, r0
 800bac4:	6011      	str	r1, [r2, #0]
 800bac6:	d1e0      	bne.n	800ba8a <_free_r+0x22>
 800bac8:	6818      	ldr	r0, [r3, #0]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	6053      	str	r3, [r2, #4]
 800bace:	4408      	add	r0, r1
 800bad0:	6010      	str	r0, [r2, #0]
 800bad2:	e7da      	b.n	800ba8a <_free_r+0x22>
 800bad4:	d902      	bls.n	800badc <_free_r+0x74>
 800bad6:	230c      	movs	r3, #12
 800bad8:	602b      	str	r3, [r5, #0]
 800bada:	e7d6      	b.n	800ba8a <_free_r+0x22>
 800badc:	6820      	ldr	r0, [r4, #0]
 800bade:	1821      	adds	r1, r4, r0
 800bae0:	428b      	cmp	r3, r1
 800bae2:	bf04      	itt	eq
 800bae4:	6819      	ldreq	r1, [r3, #0]
 800bae6:	685b      	ldreq	r3, [r3, #4]
 800bae8:	6063      	str	r3, [r4, #4]
 800baea:	bf04      	itt	eq
 800baec:	1809      	addeq	r1, r1, r0
 800baee:	6021      	streq	r1, [r4, #0]
 800baf0:	6054      	str	r4, [r2, #4]
 800baf2:	e7ca      	b.n	800ba8a <_free_r+0x22>
 800baf4:	bd38      	pop	{r3, r4, r5, pc}
 800baf6:	bf00      	nop
 800baf8:	20000aa8 	.word	0x20000aa8

0800bafc <_init>:
 800bafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bafe:	bf00      	nop
 800bb00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb02:	bc08      	pop	{r3}
 800bb04:	469e      	mov	lr, r3
 800bb06:	4770      	bx	lr

0800bb08 <_fini>:
 800bb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb0a:	bf00      	nop
 800bb0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb0e:	bc08      	pop	{r3}
 800bb10:	469e      	mov	lr, r3
 800bb12:	4770      	bx	lr
