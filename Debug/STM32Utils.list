
STM32Utils.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800ab58  0800ab58  0000bb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abf0  0800abf0  0000c14c  2**0
                  CONTENTS
  4 .ARM          00000008  0800abf0  0800abf0  0000bbf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abf8  0800abf8  0000c14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abf8  0800abf8  0000bbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800abfc  0800abfc  0000bbfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  0800ac00  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c14c  2**0
                  CONTENTS
 10 .bss          00001f3c  2000014c  2000014c  0000c14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002088  20002088  0000c14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017429  00000000  00000000  0000c17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004109  00000000  00000000  000235a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001490  00000000  00000000  000276b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f95  00000000  00000000  00028b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026079  00000000  00000000  00029ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b997  00000000  00000000  0004fb4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da3a6  00000000  00000000  0006b4e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014588b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005958  00000000  00000000  001458d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003c  00000000  00000000  0014b228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab40 	.word	0x0800ab40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	0800ab40 	.word	0x0800ab40

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <status_led_init>:
// status led config >> for four leds
void status_led_init(Status_led_s *status_led, GPIO_TypeDef * Led1_GPIOx, uint16_t Led1_GPIO_pin,
		GPIO_TypeDef * Led2_GPIOx, uint16_t Led2_GPIO_pin,
		GPIO_TypeDef * Led3_GPIOx, uint16_t Led3_GPIO_pin,
		GPIO_TypeDef * Led4_GPIOx, uint16_t Led4_GPIO_pin)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4613      	mov	r3, r2
 800057e:	80fb      	strh	r3, [r7, #6]
	status_led->Led1_GPIOx = Led1_GPIOx;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	601a      	str	r2, [r3, #0]
	status_led->Led1_GPIO_pin = Led1_GPIO_pin;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	88fa      	ldrh	r2, [r7, #6]
 800058a:	809a      	strh	r2, [r3, #4]

	status_led->Led2_GPIOx = Led2_GPIOx;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	683a      	ldr	r2, [r7, #0]
 8000590:	609a      	str	r2, [r3, #8]
	status_led->Led2_GPIO_pin = Led2_GPIO_pin;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	8b3a      	ldrh	r2, [r7, #24]
 8000596:	819a      	strh	r2, [r3, #12]

	status_led->Led3_GPIOx = Led3_GPIOx;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	69fa      	ldr	r2, [r7, #28]
 800059c:	611a      	str	r2, [r3, #16]
	status_led->Led3_GPIO_pin = Led3_GPIO_pin;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	8c3a      	ldrh	r2, [r7, #32]
 80005a2:	829a      	strh	r2, [r3, #20]

	status_led->Led4_GPIOx = Led4_GPIOx;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005a8:	619a      	str	r2, [r3, #24]
	status_led->Led4_GPIO_pin = Led4_GPIO_pin;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80005ae:	839a      	strh	r2, [r3, #28]

}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <status_led_process>:

// led 1 -- kırmızı
// led 2 -- yeşil
// led 3 -- 2. yeşil
// led 4 -- sarı
void status_led_process(Status_led_s* status_led, Status_led_mode_e Mode){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	70fb      	strb	r3, [r7, #3]
	switch (Mode) {
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	2b04      	cmp	r3, #4
 80005cc:	f200 80a4 	bhi.w	8000718 <status_led_process+0x15c>
 80005d0:	a201      	add	r2, pc, #4	@ (adr r2, 80005d8 <status_led_process+0x1c>)
 80005d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d6:	bf00      	nop
 80005d8:	080005ed 	.word	0x080005ed
 80005dc:	0800061b 	.word	0x0800061b
 80005e0:	080006eb 	.word	0x080006eb
 80005e4:	08000677 	.word	0x08000677
 80005e8:	08000649 	.word	0x08000649
		case LED_STOP :
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 1);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6818      	ldr	r0, [r3, #0]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	889b      	ldrh	r3, [r3, #4]
 80005f4:	2201      	movs	r2, #1
 80005f6:	4619      	mov	r1, r3
 80005f8:	f002 fcd4 	bl	8002fa4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80005fc:	20c8      	movs	r0, #200	@ 0xc8
 80005fe:	f001 f867 	bl	80016d0 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 0);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6818      	ldr	r0, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	889b      	ldrh	r3, [r3, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	4619      	mov	r1, r3
 800060e:	f002 fcc9 	bl	8002fa4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000612:	20c8      	movs	r0, #200	@ 0xc8
 8000614:	f001 f85c 	bl	80016d0 <HAL_Delay>
			break;
 8000618:	e095      	b.n	8000746 <status_led_process+0x18a>
		case LED_START :
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 1);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6898      	ldr	r0, [r3, #8]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	899b      	ldrh	r3, [r3, #12]
 8000622:	2201      	movs	r2, #1
 8000624:	4619      	mov	r1, r3
 8000626:	f002 fcbd 	bl	8002fa4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 800062a:	20c8      	movs	r0, #200	@ 0xc8
 800062c:	f001 f850 	bl	80016d0 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 0);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6898      	ldr	r0, [r3, #8]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	899b      	ldrh	r3, [r3, #12]
 8000638:	2200      	movs	r2, #0
 800063a:	4619      	mov	r1, r3
 800063c:	f002 fcb2 	bl	8002fa4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000640:	20c8      	movs	r0, #200	@ 0xc8
 8000642:	f001 f845 	bl	80016d0 <HAL_Delay>
			break;
 8000646:	e07e      	b.n	8000746 <status_led_process+0x18a>
		case LED_OKAY :
			HAL_GPIO_WritePin(status_led->Led3_GPIOx, status_led->Led3_GPIO_pin, 1);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	6918      	ldr	r0, [r3, #16]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	8a9b      	ldrh	r3, [r3, #20]
 8000650:	2201      	movs	r2, #1
 8000652:	4619      	mov	r1, r3
 8000654:	f002 fca6 	bl	8002fa4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000658:	20c8      	movs	r0, #200	@ 0xc8
 800065a:	f001 f839 	bl	80016d0 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led3_GPIOx, status_led->Led3_GPIO_pin, 0);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6918      	ldr	r0, [r3, #16]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	8a9b      	ldrh	r3, [r3, #20]
 8000666:	2200      	movs	r2, #0
 8000668:	4619      	mov	r1, r3
 800066a:	f002 fc9b 	bl	8002fa4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 800066e:	20c8      	movs	r0, #200	@ 0xc8
 8000670:	f001 f82e 	bl	80016d0 <HAL_Delay>
			break;
 8000674:	e067      	b.n	8000746 <status_led_process+0x18a>
		case LED_GO :
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 0);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6898      	ldr	r0, [r3, #8]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	899b      	ldrh	r3, [r3, #12]
 800067e:	2200      	movs	r2, #0
 8000680:	4619      	mov	r1, r3
 8000682:	f002 fc8f 	bl	8002fa4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 1);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6818      	ldr	r0, [r3, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	889b      	ldrh	r3, [r3, #4]
 800068e:	2201      	movs	r2, #1
 8000690:	4619      	mov	r1, r3
 8000692:	f002 fc87 	bl	8002fa4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000696:	20c8      	movs	r0, #200	@ 0xc8
 8000698:	f001 f81a 	bl	80016d0 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 0);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6818      	ldr	r0, [r3, #0]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	889b      	ldrh	r3, [r3, #4]
 80006a4:	2200      	movs	r2, #0
 80006a6:	4619      	mov	r1, r3
 80006a8:	f002 fc7c 	bl	8002fa4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 1);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6998      	ldr	r0, [r3, #24]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	8b9b      	ldrh	r3, [r3, #28]
 80006b4:	2201      	movs	r2, #1
 80006b6:	4619      	mov	r1, r3
 80006b8:	f002 fc74 	bl	8002fa4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80006bc:	20c8      	movs	r0, #200	@ 0xc8
 80006be:	f001 f807 	bl	80016d0 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 0);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6998      	ldr	r0, [r3, #24]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	8b9b      	ldrh	r3, [r3, #28]
 80006ca:	2200      	movs	r2, #0
 80006cc:	4619      	mov	r1, r3
 80006ce:	f002 fc69 	bl	8002fa4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 1);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6898      	ldr	r0, [r3, #8]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	899b      	ldrh	r3, [r3, #12]
 80006da:	2201      	movs	r2, #1
 80006dc:	4619      	mov	r1, r3
 80006de:	f002 fc61 	bl	8002fa4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80006e2:	20c8      	movs	r0, #200	@ 0xc8
 80006e4:	f000 fff4 	bl	80016d0 <HAL_Delay>
			break;
 80006e8:	e02d      	b.n	8000746 <status_led_process+0x18a>
		case LED_STAY :
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 1);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6998      	ldr	r0, [r3, #24]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	8b9b      	ldrh	r3, [r3, #28]
 80006f2:	2201      	movs	r2, #1
 80006f4:	4619      	mov	r1, r3
 80006f6:	f002 fc55 	bl	8002fa4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80006fa:	20c8      	movs	r0, #200	@ 0xc8
 80006fc:	f000 ffe8 	bl	80016d0 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 0);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6998      	ldr	r0, [r3, #24]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	8b9b      	ldrh	r3, [r3, #28]
 8000708:	2200      	movs	r2, #0
 800070a:	4619      	mov	r1, r3
 800070c:	f002 fc4a 	bl	8002fa4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000710:	20c8      	movs	r0, #200	@ 0xc8
 8000712:	f000 ffdd 	bl	80016d0 <HAL_Delay>
			break;
 8000716:	e016      	b.n	8000746 <status_led_process+0x18a>

		default:
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 1);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6818      	ldr	r0, [r3, #0]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	889b      	ldrh	r3, [r3, #4]
 8000720:	2201      	movs	r2, #1
 8000722:	4619      	mov	r1, r3
 8000724:	f002 fc3e 	bl	8002fa4 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000728:	2064      	movs	r0, #100	@ 0x64
 800072a:	f000 ffd1 	bl	80016d0 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 0);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	889b      	ldrh	r3, [r3, #4]
 8000736:	2200      	movs	r2, #0
 8000738:	4619      	mov	r1, r3
 800073a:	f002 fc33 	bl	8002fa4 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 800073e:	2064      	movs	r0, #100	@ 0x64
 8000740:	f000 ffc6 	bl	80016d0 <HAL_Delay>
			break;
 8000744:	bf00      	nop
	}
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop

08000750 <Flash_WR>:
 *      Author: ilbeyli
 */

#include "FLASH_PROCESS_lib.h"

void Flash_WR(uint32_t Flash_Address, uint32_t Flash_WR_Data){
 8000750:	b5b0      	push	{r4, r5, r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 800075a:	f002 f8c5 	bl	80028e8 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);  // add sector usage
 800075e:	2102      	movs	r1, #2
 8000760:	200b      	movs	r0, #11
 8000762:	f002 fa23 	bl	8002bac <FLASH_Erase_Sector>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Flash_Address, Flash_WR_Data);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2200      	movs	r2, #0
 800076a:	461c      	mov	r4, r3
 800076c:	4615      	mov	r5, r2
 800076e:	4622      	mov	r2, r4
 8000770:	462b      	mov	r3, r5
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	2002      	movs	r0, #2
 8000776:	f002 f863 	bl	8002840 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 800077a:	f002 f8d7 	bl	800292c <HAL_FLASH_Lock>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bdb0      	pop	{r4, r5, r7, pc}

08000786 <Flash_RD>:

uint32_t Flash_RD(uint32_t Flash_Address){
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
	return *((uint32_t*)Flash_Address);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <init_servo>:
void init_servo(	servo_config* 		servo_config,
					GPIO_TypeDef*		servo_GPIOx,
					uint32_t 			servo_GPIO_pin,
					TIM_HandleTypeDef*	Timer_Handle,
					uint32_t			Timer_Channel)
{
 800079e:	b480      	push	{r7}
 80007a0:	b085      	sub	sp, #20
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	60f8      	str	r0, [r7, #12]
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	603b      	str	r3, [r7, #0]
	servo_config->servo_GPIOx 			=servo_GPIOx;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	601a      	str	r2, [r3, #0]
	servo_config->servo_GPIO_pin 		=servo_GPIO_pin;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	605a      	str	r2, [r3, #4]
	servo_config->Timer_Handle 			=Timer_Handle;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	609a      	str	r2, [r3, #8]
	servo_config->Timer_Channel			=Timer_Channel;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	69ba      	ldr	r2, [r7, #24]
 80007c2:	60da      	str	r2, [r3, #12]
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <map>:


uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	69b9      	ldr	r1, [r7, #24]
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	1a8a      	subs	r2, r1, r2
 80007ea:	fb03 f202 	mul.w	r2, r3, r2
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	1acb      	subs	r3, r1, r3
 80007f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	4413      	add	r3, r2
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <servo_angle>:


void servo_angle(servo_config* servo_config, uint32_t angle)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b085      	sub	sp, #20
 800080c:	af02      	add	r7, sp, #8
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
	if(0!= angle)
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d052      	beq.n	80008be <servo_angle+0xb6>
	{
		HAL_TIM_PWM_Start(servo_config->Timer_Handle, servo_config->Timer_Channel);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	689a      	ldr	r2, [r3, #8]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	4619      	mov	r1, r3
 8000822:	4610      	mov	r0, r2
 8000824:	f004 fb5a 	bl	8004edc <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map(angle,0,180,1000,2000));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d10f      	bne.n	8000850 <servo_angle+0x48>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	681c      	ldr	r4, [r3, #0]
 8000836:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000840:	22b4      	movs	r2, #180	@ 0xb4
 8000842:	2100      	movs	r1, #0
 8000844:	6838      	ldr	r0, [r7, #0]
 8000846:	f7ff ffc3 	bl	80007d0 <map>
 800084a:	4603      	mov	r3, r0
 800084c:	6363      	str	r3, [r4, #52]	@ 0x34
	}

}
 800084e:	e036      	b.n	80008be <servo_angle+0xb6>
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map(angle,0,180,1000,2000));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	2b04      	cmp	r3, #4
 8000856:	d10f      	bne.n	8000878 <servo_angle+0x70>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	681c      	ldr	r4, [r3, #0]
 800085e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000868:	22b4      	movs	r2, #180	@ 0xb4
 800086a:	2100      	movs	r1, #0
 800086c:	6838      	ldr	r0, [r7, #0]
 800086e:	f7ff ffaf 	bl	80007d0 <map>
 8000872:	4603      	mov	r3, r0
 8000874:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8000876:	e022      	b.n	80008be <servo_angle+0xb6>
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map(angle,0,180,1000,2000));
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	2b08      	cmp	r3, #8
 800087e:	d10f      	bne.n	80008a0 <servo_angle+0x98>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	681c      	ldr	r4, [r3, #0]
 8000886:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000890:	22b4      	movs	r2, #180	@ 0xb4
 8000892:	2100      	movs	r1, #0
 8000894:	6838      	ldr	r0, [r7, #0]
 8000896:	f7ff ff9b 	bl	80007d0 <map>
 800089a:	4603      	mov	r3, r0
 800089c:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 800089e:	e00e      	b.n	80008be <servo_angle+0xb6>
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map(angle,0,180,1000,2000));
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	681c      	ldr	r4, [r3, #0]
 80008a6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008b0:	22b4      	movs	r2, #180	@ 0xb4
 80008b2:	2100      	movs	r1, #0
 80008b4:	6838      	ldr	r0, [r7, #0]
 80008b6:	f7ff ff8b 	bl	80007d0 <map>
 80008ba:	4603      	mov	r3, r0
 80008bc:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd90      	pop	{r4, r7, pc}

080008c6 <step_init>:
void step_init(	step_config* step_config,
					TIM_HandleTypeDef*	Timer_handle,
					uint32_t			Timer_channel,
					GPIO_TypeDef*		dir_GPIOx,
					uint16_t			dir_GPIO_Pin)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b085      	sub	sp, #20
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	60f8      	str	r0, [r7, #12]
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
 80008d2:	603b      	str	r3, [r7, #0]
		step_config->Timer_handle 	= Timer_handle;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	601a      	str	r2, [r3, #0]
		step_config->Timer_channel 	= Timer_channel;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	605a      	str	r2, [r3, #4]
		step_config->dir_GPIOx		= dir_GPIOx;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	683a      	ldr	r2, [r7, #0]
 80008e4:	609a      	str	r2, [r3, #8]
		step_config->dir_GPIO_Pin	= dir_GPIO_Pin;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	8b3a      	ldrh	r2, [r7, #24]
 80008ea:	819a      	strh	r2, [r3, #12]

}
 80008ec:	bf00      	nop
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <step>:

void step(step_config* step_config, uint32_t adim, uint32_t yon)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	if (step_config->step_set.durum == Step_DURDU){
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d147      	bne.n	800099c <step+0xa4>
		step_config->step_set.adim = adim;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	615a      	str	r2, [r3, #20]
		step_config->step_set.durum = Step_BASLADI;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2201      	movs	r2, #1
 8000916:	619a      	str	r2, [r3, #24]
		if(yon == Step_ILERI ){
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d108      	bne.n	8000930 <step+0x38>
			HAL_GPIO_WritePin(step_config->dir_GPIOx, step_config->dir_GPIO_Pin, 1);
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	6898      	ldr	r0, [r3, #8]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	899b      	ldrh	r3, [r3, #12]
 8000926:	2201      	movs	r2, #1
 8000928:	4619      	mov	r1, r3
 800092a:	f002 fb3b 	bl	8002fa4 <HAL_GPIO_WritePin>
 800092e:	e007      	b.n	8000940 <step+0x48>

		}
		else {
			HAL_GPIO_WritePin(step_config->dir_GPIOx, step_config->dir_GPIO_Pin, 0);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	6898      	ldr	r0, [r3, #8]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	899b      	ldrh	r3, [r3, #12]
 8000938:	2200      	movs	r2, #0
 800093a:	4619      	mov	r1, r3
 800093c:	f002 fb32 	bl	8002fa4 <HAL_GPIO_WritePin>

		}

		if (0 != adim){
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d02a      	beq.n	800099c <step+0xa4>
			HAL_TIM_PWM_Start_IT(step_config->Timer_handle, step_config->Timer_channel);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	4619      	mov	r1, r3
 8000950:	4610      	mov	r0, r2
 8000952:	f004 fb8b 	bl	800506c <HAL_TIM_PWM_Start_IT>
			__HAL_TIM_SET_COMPARE(step_config->Timer_handle, step_config->Timer_channel, 100);
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d105      	bne.n	800096a <step+0x72>
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2264      	movs	r2, #100	@ 0x64
 8000966:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
}
 8000968:	e018      	b.n	800099c <step+0xa4>
			__HAL_TIM_SET_COMPARE(step_config->Timer_handle, step_config->Timer_channel, 100);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	2b04      	cmp	r3, #4
 8000970:	d105      	bne.n	800097e <step+0x86>
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	2364      	movs	r3, #100	@ 0x64
 800097a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800097c:	e00e      	b.n	800099c <step+0xa4>
			__HAL_TIM_SET_COMPARE(step_config->Timer_handle, step_config->Timer_channel, 100);
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	2b08      	cmp	r3, #8
 8000984:	d105      	bne.n	8000992 <step+0x9a>
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	2364      	movs	r3, #100	@ 0x64
 800098e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000990:	e004      	b.n	800099c <step+0xa4>
			__HAL_TIM_SET_COMPARE(step_config->Timer_handle, step_config->Timer_channel, 100);
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	2364      	movs	r3, #100	@ 0x64
 800099a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <step_durdur>:

void step_durdur(step_config* step_config){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	if (step_config->step_set.sayac == step_config->step_set.adim){
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	691a      	ldr	r2, [r3, #16]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	695b      	ldr	r3, [r3, #20]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d10d      	bne.n	80009d4 <step_durdur+0x30>
		HAL_TIM_PWM_Stop_IT(step_config->Timer_handle, step_config->Timer_channel);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	4619      	mov	r1, r3
 80009c2:	4610      	mov	r0, r2
 80009c4:	f004 fc68 	bl	8005298 <HAL_TIM_PWM_Stop_IT>
		step_config->step_set.durum = Step_DURDU;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
		step_config->step_set.sayac =0;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
	}

}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef * htim)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	if (htim-> Instance == TIM1){
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a09      	ldr	r2, [pc, #36]	@ (8000a10 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d10b      	bne.n	8000a06 <HAL_TIM_PWM_PulseFinishedCallback+0x2a>

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	7f1b      	ldrb	r3, [r3, #28]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d104      	bne.n	8000a00 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
		{
			step1.step_set.sayac++;
 80009f6:	4b07      	ldr	r3, [pc, #28]	@ (8000a14 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 80009f8:	691b      	ldr	r3, [r3, #16]
 80009fa:	3301      	adds	r3, #1
 80009fc:	4a05      	ldr	r2, [pc, #20]	@ (8000a14 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 80009fe:	6113      	str	r3, [r2, #16]
		}

		step_durdur(&step1);
 8000a00:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000a02:	f7ff ffcf 	bl	80009a4 <step_durdur>

		}

}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40010000 	.word	0x40010000
 8000a14:	200002a0 	.word	0x200002a0

08000a18 <HAL_GPIO_EXTI_Callback>:


// Yapilan ayarlari kaydetmek icin
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 8000a22:	88fb      	ldrh	r3, [r7, #6]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d105      	bne.n	8000a34 <HAL_GPIO_EXTI_Callback+0x1c>
    {
    	Flash_WR(0x080E0000, flash_ref);
 8000a28:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <HAL_GPIO_EXTI_Callback+0x24>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4804      	ldr	r0, [pc, #16]	@ (8000a40 <HAL_GPIO_EXTI_Callback+0x28>)
 8000a30:	f7ff fe8e 	bl	8000750 <Flash_WR>
    }

}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200002f4 	.word	0x200002f4
 8000a40:	080e0000 	.word	0x080e0000

08000a44 <flag_check>:

void flag_check(){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) == GPIO_PIN_RESET){
 8000a48:	2102      	movs	r1, #2
 8000a4a:	4810      	ldr	r0, [pc, #64]	@ (8000a8c <flag_check+0x48>)
 8000a4c:	f002 fa92 	bl	8002f74 <HAL_GPIO_ReadPin>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d103      	bne.n	8000a5e <flag_check+0x1a>
    	currentAction = PARAMETER_NEXT_SET;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <flag_check+0x4c>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
    	currentAction = PARAMETER_PREV_SET;
    }
    else if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_RESET){
    	currentAction = PARAMETER_APPLY;
    }
}
 8000a5c:	e014      	b.n	8000a88 <flag_check+0x44>
    else if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_RESET){
 8000a5e:	2104      	movs	r1, #4
 8000a60:	480a      	ldr	r0, [pc, #40]	@ (8000a8c <flag_check+0x48>)
 8000a62:	f002 fa87 	bl	8002f74 <HAL_GPIO_ReadPin>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d103      	bne.n	8000a74 <flag_check+0x30>
    	currentAction = PARAMETER_PREV_SET;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <flag_check+0x4c>)
 8000a6e:	2202      	movs	r2, #2
 8000a70:	701a      	strb	r2, [r3, #0]
}
 8000a72:	e009      	b.n	8000a88 <flag_check+0x44>
    else if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_RESET){
 8000a74:	2108      	movs	r1, #8
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <flag_check+0x48>)
 8000a78:	f002 fa7c 	bl	8002f74 <HAL_GPIO_ReadPin>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d102      	bne.n	8000a88 <flag_check+0x44>
    	currentAction = PARAMETER_APPLY;
 8000a82:	4b03      	ldr	r3, [pc, #12]	@ (8000a90 <flag_check+0x4c>)
 8000a84:	2203      	movs	r2, #3
 8000a86:	701a      	strb	r2, [r3, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40020c00 	.word	0x40020c00
 8000a90:	20000332 	.word	0x20000332

08000a94 <process>:

void process(int currentAction, int value){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
	switch(currentAction){
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b03      	cmp	r3, #3
 8000aa2:	d025      	beq.n	8000af0 <process+0x5c>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	dc31      	bgt.n	8000b0e <process+0x7a>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d003      	beq.n	8000ab8 <process+0x24>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d00b      	beq.n	8000ace <process+0x3a>
			status_led_process(&statusLED,LED_START);
			step(&step1, value, yon);
			step_durdur(&step1);
			break;
	}
}
 8000ab6:	e02a      	b.n	8000b0e <process+0x7a>
			adim = value;
 8000ab8:	4a17      	ldr	r2, [pc, #92]	@ (8000b18 <process+0x84>)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	6013      	str	r3, [r2, #0]
			status_led_process(&statusLED,LED_STAY);
 8000abe:	2102      	movs	r1, #2
 8000ac0:	4816      	ldr	r0, [pc, #88]	@ (8000b1c <process+0x88>)
 8000ac2:	f7ff fd7b 	bl	80005bc <status_led_process>
			flash_ref = value;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	4a15      	ldr	r2, [pc, #84]	@ (8000b20 <process+0x8c>)
 8000aca:	6013      	str	r3, [r2, #0]
			break;
 8000acc:	e01f      	b.n	8000b0e <process+0x7a>
			if(value < adim){
 8000ace:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <process+0x84>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	683a      	ldr	r2, [r7, #0]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	da03      	bge.n	8000ae0 <process+0x4c>
				yon = Step_GERI;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <process+0x90>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	e002      	b.n	8000ae6 <process+0x52>
				yon = Step_ILERI;
 8000ae0:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <process+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
			status_led_process(&statusLED,LED_STAY);
 8000ae6:	2102      	movs	r1, #2
 8000ae8:	480c      	ldr	r0, [pc, #48]	@ (8000b1c <process+0x88>)
 8000aea:	f7ff fd67 	bl	80005bc <status_led_process>
			break;
 8000aee:	e00e      	b.n	8000b0e <process+0x7a>
			status_led_process(&statusLED,LED_START);
 8000af0:	2101      	movs	r1, #1
 8000af2:	480a      	ldr	r0, [pc, #40]	@ (8000b1c <process+0x88>)
 8000af4:	f7ff fd62 	bl	80005bc <status_led_process>
			step(&step1, value, yon);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <process+0x90>)
 8000afc:	6812      	ldr	r2, [r2, #0]
 8000afe:	4619      	mov	r1, r3
 8000b00:	4809      	ldr	r0, [pc, #36]	@ (8000b28 <process+0x94>)
 8000b02:	f7ff fef9 	bl	80008f8 <step>
			step_durdur(&step1);
 8000b06:	4808      	ldr	r0, [pc, #32]	@ (8000b28 <process+0x94>)
 8000b08:	f7ff ff4c 	bl	80009a4 <step_durdur>
			break;
 8000b0c:	bf00      	nop
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200002bc 	.word	0x200002bc
 8000b1c:	200002d4 	.word	0x200002d4
 8000b20:	200002f4 	.word	0x200002f4
 8000b24:	200002c0 	.word	0x200002c0
 8000b28:	200002a0 	.word	0x200002a0

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b32:	f000 fd5b 	bl	80015ec <HAL_Init>

  /* USER CODE BEGIN Init */
//Led
  status_led_init(&statusLED, GPIOD, GPIO_PIN_13, GPIOD, GPIO_PIN_14, GPIOD, GPIO_PIN_15, GPIOD, GPIO_PIN_12);
 8000b36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b3a:	9304      	str	r3, [sp, #16]
 8000b3c:	4b4c      	ldr	r3, [pc, #304]	@ (8000c70 <main+0x144>)
 8000b3e:	9303      	str	r3, [sp, #12]
 8000b40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b44:	9302      	str	r3, [sp, #8]
 8000b46:	4b4a      	ldr	r3, [pc, #296]	@ (8000c70 <main+0x144>)
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	4b47      	ldr	r3, [pc, #284]	@ (8000c70 <main+0x144>)
 8000b52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b56:	4946      	ldr	r1, [pc, #280]	@ (8000c70 <main+0x144>)
 8000b58:	4846      	ldr	r0, [pc, #280]	@ (8000c74 <main+0x148>)
 8000b5a:	f7ff fd09 	bl	8000570 <status_led_init>
//StepMotor
  step_init(&step1, &htim1, TIM_CHANNEL_1, dir_GPIO_Port, dir_Pin);
 8000b5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	4b42      	ldr	r3, [pc, #264]	@ (8000c70 <main+0x144>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	4943      	ldr	r1, [pc, #268]	@ (8000c78 <main+0x14c>)
 8000b6a:	4844      	ldr	r0, [pc, #272]	@ (8000c7c <main+0x150>)
 8000b6c:	f7ff feab 	bl	80008c6 <step_init>
//Servo
  init_servo(&servo1, GPIOA, GPIO_PIN_15, &htim2, TIM_CHANNEL_1);
 8000b70:	2300      	movs	r3, #0
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	4b42      	ldr	r3, [pc, #264]	@ (8000c80 <main+0x154>)
 8000b76:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b7a:	4942      	ldr	r1, [pc, #264]	@ (8000c84 <main+0x158>)
 8000b7c:	4842      	ldr	r0, [pc, #264]	@ (8000c88 <main+0x15c>)
 8000b7e:	f7ff fe0e 	bl	800079e <init_servo>
//Lcd
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b82:	f000 f891 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b86:	f000 fa81 	bl	800108c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b8a:	f000 fa5f 	bl	800104c <MX_DMA_Init>
  MX_ADC1_Init();
 8000b8e:	f000 f8f5 	bl	8000d7c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000b92:	f000 f945 	bl	8000e20 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000b96:	f008 fdf7 	bl	8009788 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000b9a:	f000 f9e1 	bl	8000f60 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	493a      	ldr	r1, [pc, #232]	@ (8000c8c <main+0x160>)
 8000ba2:	483b      	ldr	r0, [pc, #236]	@ (8000c90 <main+0x164>)
 8000ba4:	f000 fdfc 	bl	80017a0 <HAL_ADC_Start_DMA>
  status_led_process(&statusLED, LED_GO);
 8000ba8:	2103      	movs	r1, #3
 8000baa:	4832      	ldr	r0, [pc, #200]	@ (8000c74 <main+0x148>)
 8000bac:	f7ff fd06 	bl	80005bc <status_led_process>

  read_step_value = Flash_RD(0x080E0000);
 8000bb0:	4838      	ldr	r0, [pc, #224]	@ (8000c94 <main+0x168>)
 8000bb2:	f7ff fde8 	bl	8000786 <Flash_RD>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b37      	ldr	r3, [pc, #220]	@ (8000c98 <main+0x16c>)
 8000bbc:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(currentAction == 0){
 8000bbe:	4b37      	ldr	r3, [pc, #220]	@ (8000c9c <main+0x170>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d10b      	bne.n	8000bde <main+0xb2>
		flag_check();
 8000bc6:	f7ff ff3d 	bl	8000a44 <flag_check>
		process(currentAction, read_step_value);
 8000bca:	4b34      	ldr	r3, [pc, #208]	@ (8000c9c <main+0x170>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b31      	ldr	r3, [pc, #196]	@ (8000c98 <main+0x16c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4610      	mov	r0, r2
 8000bd8:	f7ff ff5c 	bl	8000a94 <process>
 8000bdc:	e030      	b.n	8000c40 <main+0x114>
	}

	else{
		read_step_value = map(adc_buffer[0], 0, 4095, 0, 200);
 8000bde:	4b2b      	ldr	r3, [pc, #172]	@ (8000c8c <main+0x160>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	23c8      	movs	r3, #200	@ 0xc8
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2300      	movs	r3, #0
 8000bea:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000bee:	2100      	movs	r1, #0
 8000bf0:	f7ff fdee 	bl	80007d0 <map>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4b27      	ldr	r3, [pc, #156]	@ (8000c98 <main+0x16c>)
 8000bfa:	601a      	str	r2, [r3, #0]
		snprintf((char*)send_data, sizeof(send_data), "%d\n", read_step_value);
 8000bfc:	4b26      	ldr	r3, [pc, #152]	@ (8000c98 <main+0x16c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a27      	ldr	r2, [pc, #156]	@ (8000ca0 <main+0x174>)
 8000c02:	2132      	movs	r1, #50	@ 0x32
 8000c04:	4827      	ldr	r0, [pc, #156]	@ (8000ca4 <main+0x178>)
 8000c06:	f009 fae7 	bl	800a1d8 <sniprintf>
		while (CDC_Transmit_FS((uint8_t*)send_data, strlen((char*)send_data)) == USBD_BUSY) {
 8000c0a:	e002      	b.n	8000c12 <main+0xe6>
			HAL_Delay(1);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f000 fd5f 	bl	80016d0 <HAL_Delay>
		while (CDC_Transmit_FS((uint8_t*)send_data, strlen((char*)send_data)) == USBD_BUSY) {
 8000c12:	4824      	ldr	r0, [pc, #144]	@ (8000ca4 <main+0x178>)
 8000c14:	f7ff fadc 	bl	80001d0 <strlen>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4821      	ldr	r0, [pc, #132]	@ (8000ca4 <main+0x178>)
 8000c20:	f008 fe70 	bl	8009904 <CDC_Transmit_FS>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d0f0      	beq.n	8000c0c <main+0xe0>
		}

		flag_check();
 8000c2a:	f7ff ff0b 	bl	8000a44 <flag_check>
		process(currentAction, read_step_value);
 8000c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c9c <main+0x170>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <main+0x16c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4610      	mov	r0, r2
 8000c3c:	f7ff ff2a 	bl	8000a94 <process>
	}
	int angle = map(adc_buffer[0],0,4095,0,180);
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <main+0x160>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	23b4      	movs	r3, #180	@ 0xb4
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000c50:	2100      	movs	r1, #0
 8000c52:	f7ff fdbd 	bl	80007d0 <map>
 8000c56:	4603      	mov	r3, r0
 8000c58:	607b      	str	r3, [r7, #4]
	servo_angle(&servo1, angle);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	@ (8000c88 <main+0x15c>)
 8000c60:	f7ff fdd2 	bl	8000808 <servo_angle>
	HAL_Delay(1000);
 8000c64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c68:	f000 fd32 	bl	80016d0 <HAL_Delay>
  {
 8000c6c:	e7a7      	b.n	8000bbe <main+0x92>
 8000c6e:	bf00      	nop
 8000c70:	40020c00 	.word	0x40020c00
 8000c74:	200002d4 	.word	0x200002d4
 8000c78:	20000210 	.word	0x20000210
 8000c7c:	200002a0 	.word	0x200002a0
 8000c80:	20000258 	.word	0x20000258
 8000c84:	40020000 	.word	0x40020000
 8000c88:	200002c4 	.word	0x200002c4
 8000c8c:	200002f8 	.word	0x200002f8
 8000c90:	20000168 	.word	0x20000168
 8000c94:	080e0000 	.word	0x080e0000
 8000c98:	200002fc 	.word	0x200002fc
 8000c9c:	20000332 	.word	0x20000332
 8000ca0:	0800ab58 	.word	0x0800ab58
 8000ca4:	20000300 	.word	0x20000300

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b094      	sub	sp, #80	@ 0x50
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0320 	add.w	r3, r7, #32
 8000cb2:	2230      	movs	r2, #48	@ 0x30
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f009 fac2 	bl	800a240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	4b28      	ldr	r3, [pc, #160]	@ (8000d74 <SystemClock_Config+0xcc>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd4:	4a27      	ldr	r2, [pc, #156]	@ (8000d74 <SystemClock_Config+0xcc>)
 8000cd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cdc:	4b25      	ldr	r3, [pc, #148]	@ (8000d74 <SystemClock_Config+0xcc>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	4b22      	ldr	r3, [pc, #136]	@ (8000d78 <SystemClock_Config+0xd0>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a21      	ldr	r2, [pc, #132]	@ (8000d78 <SystemClock_Config+0xd0>)
 8000cf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <SystemClock_Config+0xd0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d04:	2301      	movs	r3, #1
 8000d06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d08:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d12:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000d1c:	2348      	movs	r3, #72	@ 0x48
 8000d1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000d24:	2303      	movs	r3, #3
 8000d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d28:	f107 0320 	add.w	r3, r7, #32
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f003 fbbd 	bl	80044ac <HAL_RCC_OscConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d38:	f000 fa4e 	bl	80011d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d40:	2302      	movs	r3, #2
 8000d42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	2102      	movs	r1, #2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 fe1e 	bl	800499c <HAL_RCC_ClockConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d66:	f000 fa37 	bl	80011d8 <Error_Handler>
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	3750      	adds	r7, #80	@ 0x50
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40007000 	.word	0x40007000

08000d7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d82:	463b      	mov	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d90:	4a21      	ldr	r2, [pc, #132]	@ (8000e18 <MX_ADC1_Init+0x9c>)
 8000d92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d94:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000da0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000da6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dac:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db4:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dba:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dbc:	4a17      	ldr	r2, [pc, #92]	@ (8000e1c <MX_ADC1_Init+0xa0>)
 8000dbe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dda:	480e      	ldr	r0, [pc, #56]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000ddc:	f000 fc9c 	bl	8001718 <HAL_ADC_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000de6:	f000 f9f7 	bl	80011d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dea:	2301      	movs	r3, #1
 8000dec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000df2:	2303      	movs	r3, #3
 8000df4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df6:	463b      	mov	r3, r7
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4806      	ldr	r0, [pc, #24]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dfc:	f000 fdfe 	bl	80019fc <HAL_ADC_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e06:	f000 f9e7 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000168 	.word	0x20000168
 8000e18:	40012000 	.word	0x40012000
 8000e1c:	0f000001 	.word	0x0f000001

08000e20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b096      	sub	sp, #88	@ 0x58
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e26:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e34:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]
 8000e4e:	615a      	str	r2, [r3, #20]
 8000e50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2220      	movs	r2, #32
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f009 f9f1 	bl	800a240 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e5e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f58 <MX_TIM1_Init+0x138>)
 8000e60:	4a3e      	ldr	r2, [pc, #248]	@ (8000f5c <MX_TIM1_Init+0x13c>)
 8000e62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000e64:	4b3c      	ldr	r3, [pc, #240]	@ (8000f58 <MX_TIM1_Init+0x138>)
 8000e66:	2247      	movs	r2, #71	@ 0x47
 8000e68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f58 <MX_TIM1_Init+0x138>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000e70:	4b39      	ldr	r3, [pc, #228]	@ (8000f58 <MX_TIM1_Init+0x138>)
 8000e72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e78:	4b37      	ldr	r3, [pc, #220]	@ (8000f58 <MX_TIM1_Init+0x138>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e7e:	4b36      	ldr	r3, [pc, #216]	@ (8000f58 <MX_TIM1_Init+0x138>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e84:	4b34      	ldr	r3, [pc, #208]	@ (8000f58 <MX_TIM1_Init+0x138>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e8a:	4833      	ldr	r0, [pc, #204]	@ (8000f58 <MX_TIM1_Init+0x138>)
 8000e8c:	f003 ff7e 	bl	8004d8c <HAL_TIM_Base_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e96:	f000 f99f 	bl	80011d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ea0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	482c      	ldr	r0, [pc, #176]	@ (8000f58 <MX_TIM1_Init+0x138>)
 8000ea8:	f004 fc66 	bl	8005778 <HAL_TIM_ConfigClockSource>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000eb2:	f000 f991 	bl	80011d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eb6:	4828      	ldr	r0, [pc, #160]	@ (8000f58 <MX_TIM1_Init+0x138>)
 8000eb8:	f003 ffb7 	bl	8004e2a <HAL_TIM_PWM_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ec2:	f000 f989 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ece:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4820      	ldr	r0, [pc, #128]	@ (8000f58 <MX_TIM1_Init+0x138>)
 8000ed6:	f005 f85b 	bl	8005f90 <HAL_TIMEx_MasterConfigSynchronization>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ee0:	f000 f97a 	bl	80011d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee4:	2360      	movs	r3, #96	@ 0x60
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f04:	2200      	movs	r2, #0
 8000f06:	4619      	mov	r1, r3
 8000f08:	4813      	ldr	r0, [pc, #76]	@ (8000f58 <MX_TIM1_Init+0x138>)
 8000f0a:	f004 fb73 	bl	80055f4 <HAL_TIM_PWM_ConfigChannel>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000f14:	f000 f960 	bl	80011d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4807      	ldr	r0, [pc, #28]	@ (8000f58 <MX_TIM1_Init+0x138>)
 8000f3c:	f005 f8a4 	bl	8006088 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000f46:	f000 f947 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f4a:	4803      	ldr	r0, [pc, #12]	@ (8000f58 <MX_TIM1_Init+0x138>)
 8000f4c:	f000 fa26 	bl	800139c <HAL_TIM_MspPostInit>

}
 8000f50:	bf00      	nop
 8000f52:	3758      	adds	r7, #88	@ 0x58
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000210 	.word	0x20000210
 8000f5c:	40010000 	.word	0x40010000

08000f60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08e      	sub	sp, #56	@ 0x38
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f74:	f107 0320 	add.w	r3, r7, #32
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
 8000f8c:	615a      	str	r2, [r3, #20]
 8000f8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f90:	4b2d      	ldr	r3, [pc, #180]	@ (8001048 <MX_TIM2_Init+0xe8>)
 8000f92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8000f98:	4b2b      	ldr	r3, [pc, #172]	@ (8001048 <MX_TIM2_Init+0xe8>)
 8000f9a:	2248      	movs	r2, #72	@ 0x48
 8000f9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001048 <MX_TIM2_Init+0xe8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000fa4:	4b28      	ldr	r3, [pc, #160]	@ (8001048 <MX_TIM2_Init+0xe8>)
 8000fa6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000faa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fac:	4b26      	ldr	r3, [pc, #152]	@ (8001048 <MX_TIM2_Init+0xe8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb2:	4b25      	ldr	r3, [pc, #148]	@ (8001048 <MX_TIM2_Init+0xe8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb8:	4823      	ldr	r0, [pc, #140]	@ (8001048 <MX_TIM2_Init+0xe8>)
 8000fba:	f003 fee7 	bl	8004d8c <HAL_TIM_Base_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000fc4:	f000 f908 	bl	80011d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	481c      	ldr	r0, [pc, #112]	@ (8001048 <MX_TIM2_Init+0xe8>)
 8000fd6:	f004 fbcf 	bl	8005778 <HAL_TIM_ConfigClockSource>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000fe0:	f000 f8fa 	bl	80011d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fe4:	4818      	ldr	r0, [pc, #96]	@ (8001048 <MX_TIM2_Init+0xe8>)
 8000fe6:	f003 ff20 	bl	8004e2a <HAL_TIM_PWM_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ff0:	f000 f8f2 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ffc:	f107 0320 	add.w	r3, r7, #32
 8001000:	4619      	mov	r1, r3
 8001002:	4811      	ldr	r0, [pc, #68]	@ (8001048 <MX_TIM2_Init+0xe8>)
 8001004:	f004 ffc4 	bl	8005f90 <HAL_TIMEx_MasterConfigSynchronization>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800100e:	f000 f8e3 	bl	80011d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001012:	2360      	movs	r3, #96	@ 0x60
 8001014:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2200      	movs	r2, #0
 8001026:	4619      	mov	r1, r3
 8001028:	4807      	ldr	r0, [pc, #28]	@ (8001048 <MX_TIM2_Init+0xe8>)
 800102a:	f004 fae3 	bl	80055f4 <HAL_TIM_PWM_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001034:	f000 f8d0 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001038:	4803      	ldr	r0, [pc, #12]	@ (8001048 <MX_TIM2_Init+0xe8>)
 800103a:	f000 f9af 	bl	800139c <HAL_TIM_MspPostInit>

}
 800103e:	bf00      	nop
 8001040:	3738      	adds	r7, #56	@ 0x38
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000258 	.word	0x20000258

0800104c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <MX_DMA_Init+0x3c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a0b      	ldr	r2, [pc, #44]	@ (8001088 <MX_DMA_Init+0x3c>)
 800105c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_DMA_Init+0x3c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2038      	movs	r0, #56	@ 0x38
 8001074:	f001 f83d 	bl	80020f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001078:	2038      	movs	r0, #56	@ 0x38
 800107a:	f001 f856 	bl	800212a <HAL_NVIC_EnableIRQ>

}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800

0800108c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	@ 0x28
 8001090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b48      	ldr	r3, [pc, #288]	@ (80011c8 <MX_GPIO_Init+0x13c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a47      	ldr	r2, [pc, #284]	@ (80011c8 <MX_GPIO_Init+0x13c>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b45      	ldr	r3, [pc, #276]	@ (80011c8 <MX_GPIO_Init+0x13c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b41      	ldr	r3, [pc, #260]	@ (80011c8 <MX_GPIO_Init+0x13c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a40      	ldr	r2, [pc, #256]	@ (80011c8 <MX_GPIO_Init+0x13c>)
 80010c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b3e      	ldr	r3, [pc, #248]	@ (80011c8 <MX_GPIO_Init+0x13c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	4b3a      	ldr	r3, [pc, #232]	@ (80011c8 <MX_GPIO_Init+0x13c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a39      	ldr	r2, [pc, #228]	@ (80011c8 <MX_GPIO_Init+0x13c>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b37      	ldr	r3, [pc, #220]	@ (80011c8 <MX_GPIO_Init+0x13c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b33      	ldr	r3, [pc, #204]	@ (80011c8 <MX_GPIO_Init+0x13c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a32      	ldr	r2, [pc, #200]	@ (80011c8 <MX_GPIO_Init+0x13c>)
 8001100:	f043 0310 	orr.w	r3, r3, #16
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b30      	ldr	r3, [pc, #192]	@ (80011c8 <MX_GPIO_Init+0x13c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0310 	and.w	r3, r3, #16
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	4b2c      	ldr	r3, [pc, #176]	@ (80011c8 <MX_GPIO_Init+0x13c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a2b      	ldr	r2, [pc, #172]	@ (80011c8 <MX_GPIO_Init+0x13c>)
 800111c:	f043 0308 	orr.w	r3, r3, #8
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b29      	ldr	r3, [pc, #164]	@ (80011c8 <MX_GPIO_Init+0x13c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2130      	movs	r1, #48	@ 0x30
 8001132:	4826      	ldr	r0, [pc, #152]	@ (80011cc <MX_GPIO_Init+0x140>)
 8001134:	f001 ff36 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, dir_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001138:	2200      	movs	r2, #0
 800113a:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800113e:	4824      	ldr	r0, [pc, #144]	@ (80011d0 <MX_GPIO_Init+0x144>)
 8001140:	f001 ff30 	bl	8002fa4 <HAL_GPIO_WritePin>
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001144:	2301      	movs	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001148:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800114c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	481e      	ldr	r0, [pc, #120]	@ (80011d4 <MX_GPIO_Init+0x148>)
 800115a:	f001 fd6f 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800115e:	2330      	movs	r3, #48	@ 0x30
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001162:	2301      	movs	r3, #1
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	4815      	ldr	r0, [pc, #84]	@ (80011cc <MX_GPIO_Init+0x140>)
 8001176:	f001 fd61 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : dir_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = dir_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800117a:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 800117e:	617b      	str	r3, [r7, #20]
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	480f      	ldr	r0, [pc, #60]	@ (80011d0 <MX_GPIO_Init+0x144>)
 8001194:	f001 fd52 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001198:	230e      	movs	r3, #14
 800119a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119c:	2300      	movs	r3, #0
 800119e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	4809      	ldr	r0, [pc, #36]	@ (80011d0 <MX_GPIO_Init+0x144>)
 80011ac:	f001 fd46 	bl	8002c3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	2006      	movs	r0, #6
 80011b6:	f000 ff9c 	bl	80020f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011ba:	2006      	movs	r0, #6
 80011bc:	f000 ffb5 	bl	800212a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011c0:	bf00      	nop
 80011c2:	3728      	adds	r7, #40	@ 0x28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020800 	.word	0x40020800
 80011d0:	40020c00 	.word	0x40020c00
 80011d4:	40020000 	.word	0x40020000

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <Error_Handler+0x8>

080011e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <HAL_MspInit+0x4c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001230 <HAL_MspInit+0x4c>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001230 <HAL_MspInit+0x4c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <HAL_MspInit+0x4c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	4a08      	ldr	r2, [pc, #32]	@ (8001230 <HAL_MspInit+0x4c>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001214:	6413      	str	r3, [r2, #64]	@ 0x40
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_MspInit+0x4c>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001222:	2007      	movs	r0, #7
 8001224:	f000 ff5a 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800

08001234 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	@ 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a2f      	ldr	r2, [pc, #188]	@ (8001310 <HAL_ADC_MspInit+0xdc>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d158      	bne.n	8001308 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b2e      	ldr	r3, [pc, #184]	@ (8001314 <HAL_ADC_MspInit+0xe0>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125e:	4a2d      	ldr	r2, [pc, #180]	@ (8001314 <HAL_ADC_MspInit+0xe0>)
 8001260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001264:	6453      	str	r3, [r2, #68]	@ 0x44
 8001266:	4b2b      	ldr	r3, [pc, #172]	@ (8001314 <HAL_ADC_MspInit+0xe0>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b27      	ldr	r3, [pc, #156]	@ (8001314 <HAL_ADC_MspInit+0xe0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a26      	ldr	r2, [pc, #152]	@ (8001314 <HAL_ADC_MspInit+0xe0>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b24      	ldr	r3, [pc, #144]	@ (8001314 <HAL_ADC_MspInit+0xe0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800128e:	2302      	movs	r3, #2
 8001290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001292:	2303      	movs	r3, #3
 8001294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	481d      	ldr	r0, [pc, #116]	@ (8001318 <HAL_ADC_MspInit+0xe4>)
 80012a2:	f001 fccb 	bl	8002c3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012a6:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <HAL_ADC_MspInit+0xe8>)
 80012a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001320 <HAL_ADC_MspInit+0xec>)
 80012aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <HAL_ADC_MspInit+0xe8>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <HAL_ADC_MspInit+0xe8>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b8:	4b18      	ldr	r3, [pc, #96]	@ (800131c <HAL_ADC_MspInit+0xe8>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012be:	4b17      	ldr	r3, [pc, #92]	@ (800131c <HAL_ADC_MspInit+0xe8>)
 80012c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012c6:	4b15      	ldr	r3, [pc, #84]	@ (800131c <HAL_ADC_MspInit+0xe8>)
 80012c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012ce:	4b13      	ldr	r3, [pc, #76]	@ (800131c <HAL_ADC_MspInit+0xe8>)
 80012d0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012d6:	4b11      	ldr	r3, [pc, #68]	@ (800131c <HAL_ADC_MspInit+0xe8>)
 80012d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <HAL_ADC_MspInit+0xe8>)
 80012e0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012e4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012e6:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <HAL_ADC_MspInit+0xe8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012ec:	480b      	ldr	r0, [pc, #44]	@ (800131c <HAL_ADC_MspInit+0xe8>)
 80012ee:	f000 ff37 	bl	8002160 <HAL_DMA_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80012f8:	f7ff ff6e 	bl	80011d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a07      	ldr	r2, [pc, #28]	@ (800131c <HAL_ADC_MspInit+0xe8>)
 8001300:	639a      	str	r2, [r3, #56]	@ 0x38
 8001302:	4a06      	ldr	r2, [pc, #24]	@ (800131c <HAL_ADC_MspInit+0xe8>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	@ 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40012000 	.word	0x40012000
 8001314:	40023800 	.word	0x40023800
 8001318:	40020000 	.word	0x40020000
 800131c:	200001b0 	.word	0x200001b0
 8001320:	40026410 	.word	0x40026410

08001324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a18      	ldr	r2, [pc, #96]	@ (8001394 <HAL_TIM_Base_MspInit+0x70>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d116      	bne.n	8001364 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <HAL_TIM_Base_MspInit+0x74>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133e:	4a16      	ldr	r2, [pc, #88]	@ (8001398 <HAL_TIM_Base_MspInit+0x74>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6453      	str	r3, [r2, #68]	@ 0x44
 8001346:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <HAL_TIM_Base_MspInit+0x74>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	201b      	movs	r0, #27
 8001358:	f000 fecb 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800135c:	201b      	movs	r0, #27
 800135e:	f000 fee4 	bl	800212a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001362:	e012      	b.n	800138a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800136c:	d10d      	bne.n	800138a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_TIM_Base_MspInit+0x74>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	4a08      	ldr	r2, [pc, #32]	@ (8001398 <HAL_TIM_Base_MspInit+0x74>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6413      	str	r3, [r2, #64]	@ 0x40
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_TIM_Base_MspInit+0x74>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
}
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40010000 	.word	0x40010000
 8001398:	40023800 	.word	0x40023800

0800139c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	@ 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a25      	ldr	r2, [pc, #148]	@ (8001450 <HAL_TIM_MspPostInit+0xb4>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d11f      	bne.n	80013fe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <HAL_TIM_MspPostInit+0xb8>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a23      	ldr	r2, [pc, #140]	@ (8001454 <HAL_TIM_MspPostInit+0xb8>)
 80013c8:	f043 0310 	orr.w	r3, r3, #16
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <HAL_TIM_MspPostInit+0xb8>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013ec:	2301      	movs	r3, #1
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	4818      	ldr	r0, [pc, #96]	@ (8001458 <HAL_TIM_MspPostInit+0xbc>)
 80013f8:	f001 fc20 	bl	8002c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013fc:	e023      	b.n	8001446 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001406:	d11e      	bne.n	8001446 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <HAL_TIM_MspPostInit+0xb8>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001410:	4a10      	ldr	r2, [pc, #64]	@ (8001454 <HAL_TIM_MspPostInit+0xb8>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6313      	str	r3, [r2, #48]	@ 0x30
 8001418:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <HAL_TIM_MspPostInit+0xb8>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001424:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001436:	2301      	movs	r3, #1
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4806      	ldr	r0, [pc, #24]	@ (800145c <HAL_TIM_MspPostInit+0xc0>)
 8001442:	f001 fbfb 	bl	8002c3c <HAL_GPIO_Init>
}
 8001446:	bf00      	nop
 8001448:	3728      	adds	r7, #40	@ 0x28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40010000 	.word	0x40010000
 8001454:	40023800 	.word	0x40023800
 8001458:	40021000 	.word	0x40021000
 800145c:	40020000 	.word	0x40020000

08001460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <NMI_Handler+0x4>

08001468 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <HardFault_Handler+0x4>

08001470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <MemManage_Handler+0x4>

08001478 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <BusFault_Handler+0x4>

08001480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <UsageFault_Handler+0x4>

08001488 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b6:	f000 f8eb 	bl	8001690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}

080014be <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f001 fd88 	bl	8002fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <TIM1_CC_IRQHandler+0x10>)
 80014d2:	f003 ff9f 	bl	8005414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000210 	.word	0x20000210

080014e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <DMA2_Stream0_IRQHandler+0x10>)
 80014e6:	f000 ff41 	bl	800236c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200001b0 	.word	0x200001b0

080014f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <OTG_FS_IRQHandler+0x10>)
 80014fa:	f001 fec9 	bl	8003290 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000183c 	.word	0x2000183c

08001508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001510:	4a14      	ldr	r2, [pc, #80]	@ (8001564 <_sbrk+0x5c>)
 8001512:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <_sbrk+0x60>)
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800151c:	4b13      	ldr	r3, [pc, #76]	@ (800156c <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d102      	bne.n	800152a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <_sbrk+0x64>)
 8001526:	4a12      	ldr	r2, [pc, #72]	@ (8001570 <_sbrk+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	429a      	cmp	r2, r3
 8001536:	d207      	bcs.n	8001548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001538:	f008 fe8a 	bl	800a250 <__errno>
 800153c:	4603      	mov	r3, r0
 800153e:	220c      	movs	r2, #12
 8001540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	e009      	b.n	800155c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001548:	4b08      	ldr	r3, [pc, #32]	@ (800156c <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800154e:	4b07      	ldr	r3, [pc, #28]	@ (800156c <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	4a05      	ldr	r2, [pc, #20]	@ (800156c <_sbrk+0x64>)
 8001558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155a:	68fb      	ldr	r3, [r7, #12]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20020000 	.word	0x20020000
 8001568:	00000400 	.word	0x00000400
 800156c:	20000334 	.word	0x20000334
 8001570:	20002088 	.word	0x20002088

08001574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <SystemInit+0x20>)
 800157a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800157e:	4a05      	ldr	r2, [pc, #20]	@ (8001594 <SystemInit+0x20>)
 8001580:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001584:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001598:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800159c:	f7ff ffea 	bl	8001574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015a0:	480c      	ldr	r0, [pc, #48]	@ (80015d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015a2:	490d      	ldr	r1, [pc, #52]	@ (80015d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015a4:	4a0d      	ldr	r2, [pc, #52]	@ (80015dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a8:	e002      	b.n	80015b0 <LoopCopyDataInit>

080015aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ae:	3304      	adds	r3, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b4:	d3f9      	bcc.n	80015aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b6:	4a0a      	ldr	r2, [pc, #40]	@ (80015e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b8:	4c0a      	ldr	r4, [pc, #40]	@ (80015e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015bc:	e001      	b.n	80015c2 <LoopFillZerobss>

080015be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c0:	3204      	adds	r2, #4

080015c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015c6:	f008 fe49 	bl	800a25c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ca:	f7ff faaf 	bl	8000b2c <main>
  bx  lr    
 80015ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d8:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 80015dc:	0800ac00 	.word	0x0800ac00
  ldr r2, =_sbss
 80015e0:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80015e4:	20002088 	.word	0x20002088

080015e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e8:	e7fe      	b.n	80015e8 <ADC_IRQHandler>
	...

080015ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015f0:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0d      	ldr	r2, [pc, #52]	@ (800162c <HAL_Init+0x40>)
 80015f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015fc:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <HAL_Init+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0a      	ldr	r2, [pc, #40]	@ (800162c <HAL_Init+0x40>)
 8001602:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001606:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001608:	4b08      	ldr	r3, [pc, #32]	@ (800162c <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a07      	ldr	r2, [pc, #28]	@ (800162c <HAL_Init+0x40>)
 800160e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001612:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001614:	2003      	movs	r0, #3
 8001616:	f000 fd61 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161a:	2000      	movs	r0, #0
 800161c:	f000 f808 	bl	8001630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001620:	f7ff fde0 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023c00 	.word	0x40023c00

08001630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001638:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <HAL_InitTick+0x54>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <HAL_InitTick+0x58>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001646:	fbb3 f3f1 	udiv	r3, r3, r1
 800164a:	fbb2 f3f3 	udiv	r3, r2, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fd79 	bl	8002146 <HAL_SYSTICK_Config>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e00e      	b.n	800167c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b0f      	cmp	r3, #15
 8001662:	d80a      	bhi.n	800167a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001664:	2200      	movs	r2, #0
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f000 fd41 	bl	80020f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001670:	4a06      	ldr	r2, [pc, #24]	@ (800168c <HAL_InitTick+0x5c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e000      	b.n	800167c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000000 	.word	0x20000000
 8001688:	20000008 	.word	0x20000008
 800168c:	20000004 	.word	0x20000004

08001690 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001694:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <HAL_IncTick+0x20>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_IncTick+0x24>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	4a04      	ldr	r2, [pc, #16]	@ (80016b4 <HAL_IncTick+0x24>)
 80016a2:	6013      	str	r3, [r2, #0]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000008 	.word	0x20000008
 80016b4:	20000338 	.word	0x20000338

080016b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return uwTick;
 80016bc:	4b03      	ldr	r3, [pc, #12]	@ (80016cc <HAL_GetTick+0x14>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000338 	.word	0x20000338

080016d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d8:	f7ff ffee 	bl	80016b8 <HAL_GetTick>
 80016dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e8:	d005      	beq.n	80016f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <HAL_Delay+0x44>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4413      	add	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016f6:	bf00      	nop
 80016f8:	f7ff ffde 	bl	80016b8 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	429a      	cmp	r2, r3
 8001706:	d8f7      	bhi.n	80016f8 <HAL_Delay+0x28>
  {
  }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000008 	.word	0x20000008

08001718 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e033      	b.n	8001796 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	2b00      	cmp	r3, #0
 8001734:	d109      	bne.n	800174a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fd7c 	bl	8001234 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	2b00      	cmp	r3, #0
 8001754:	d118      	bne.n	8001788 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800175e:	f023 0302 	bic.w	r3, r3, #2
 8001762:	f043 0202 	orr.w	r2, r3, #2
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 fa68 	bl	8001c40 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	f023 0303 	bic.w	r3, r3, #3
 800177e:	f043 0201 	orr.w	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	641a      	str	r2, [r3, #64]	@ 0x40
 8001786:	e001      	b.n	800178c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_ADC_Start_DMA+0x1e>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e0e9      	b.n	8001992 <HAL_ADC_Start_DMA+0x1f2>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d018      	beq.n	8001806 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0201 	orr.w	r2, r2, #1
 80017e2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017e4:	4b6d      	ldr	r3, [pc, #436]	@ (800199c <HAL_ADC_Start_DMA+0x1fc>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a6d      	ldr	r2, [pc, #436]	@ (80019a0 <HAL_ADC_Start_DMA+0x200>)
 80017ea:	fba2 2303 	umull	r2, r3, r2, r3
 80017ee:	0c9a      	lsrs	r2, r3, #18
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80017f8:	e002      	b.n	8001800 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f9      	bne.n	80017fa <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001810:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001814:	d107      	bne.n	8001826 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001824:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b01      	cmp	r3, #1
 8001832:	f040 80a1 	bne.w	8001978 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800183e:	f023 0301 	bic.w	r3, r3, #1
 8001842:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001854:	2b00      	cmp	r3, #0
 8001856:	d007      	beq.n	8001868 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001860:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001874:	d106      	bne.n	8001884 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187a:	f023 0206 	bic.w	r2, r3, #6
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	645a      	str	r2, [r3, #68]	@ 0x44
 8001882:	e002      	b.n	800188a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001892:	4b44      	ldr	r3, [pc, #272]	@ (80019a4 <HAL_ADC_Start_DMA+0x204>)
 8001894:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800189a:	4a43      	ldr	r2, [pc, #268]	@ (80019a8 <HAL_ADC_Start_DMA+0x208>)
 800189c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018a2:	4a42      	ldr	r2, [pc, #264]	@ (80019ac <HAL_ADC_Start_DMA+0x20c>)
 80018a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018aa:	4a41      	ldr	r2, [pc, #260]	@ (80019b0 <HAL_ADC_Start_DMA+0x210>)
 80018ac:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80018b6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80018c6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018d6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	334c      	adds	r3, #76	@ 0x4c
 80018e2:	4619      	mov	r1, r3
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f000 fce8 	bl	80022bc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d12a      	bne.n	800194e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a2d      	ldr	r2, [pc, #180]	@ (80019b4 <HAL_ADC_Start_DMA+0x214>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d015      	beq.n	800192e <HAL_ADC_Start_DMA+0x18e>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a2c      	ldr	r2, [pc, #176]	@ (80019b8 <HAL_ADC_Start_DMA+0x218>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d105      	bne.n	8001918 <HAL_ADC_Start_DMA+0x178>
 800190c:	4b25      	ldr	r3, [pc, #148]	@ (80019a4 <HAL_ADC_Start_DMA+0x204>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 031f 	and.w	r3, r3, #31
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00a      	beq.n	800192e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a27      	ldr	r2, [pc, #156]	@ (80019bc <HAL_ADC_Start_DMA+0x21c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d136      	bne.n	8001990 <HAL_ADC_Start_DMA+0x1f0>
 8001922:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <HAL_ADC_Start_DMA+0x204>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0310 	and.w	r3, r3, #16
 800192a:	2b00      	cmp	r3, #0
 800192c:	d130      	bne.n	8001990 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d129      	bne.n	8001990 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	e020      	b.n	8001990 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a18      	ldr	r2, [pc, #96]	@ (80019b4 <HAL_ADC_Start_DMA+0x214>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d11b      	bne.n	8001990 <HAL_ADC_Start_DMA+0x1f0>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d114      	bne.n	8001990 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	e00b      	b.n	8001990 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	f043 0210 	orr.w	r2, r3, #16
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001988:	f043 0201 	orr.w	r2, r3, #1
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000000 	.word	0x20000000
 80019a0:	431bde83 	.word	0x431bde83
 80019a4:	40012300 	.word	0x40012300
 80019a8:	08001e39 	.word	0x08001e39
 80019ac:	08001ef3 	.word	0x08001ef3
 80019b0:	08001f0f 	.word	0x08001f0f
 80019b4:	40012000 	.word	0x40012000
 80019b8:	40012100 	.word	0x40012100
 80019bc:	40012200 	.word	0x40012200

080019c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x1c>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e105      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x228>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b09      	cmp	r3, #9
 8001a26:	d925      	bls.n	8001a74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68d9      	ldr	r1, [r3, #12]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	461a      	mov	r2, r3
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3b1e      	subs	r3, #30
 8001a3e:	2207      	movs	r2, #7
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43da      	mvns	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	400a      	ands	r2, r1
 8001a4c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68d9      	ldr	r1, [r3, #12]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	4603      	mov	r3, r0
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4403      	add	r3, r0
 8001a66:	3b1e      	subs	r3, #30
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	e022      	b.n	8001aba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6919      	ldr	r1, [r3, #16]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	2207      	movs	r2, #7
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	400a      	ands	r2, r1
 8001a96:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6919      	ldr	r1, [r3, #16]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	4603      	mov	r3, r0
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4403      	add	r3, r0
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d824      	bhi.n	8001b0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3b05      	subs	r3, #5
 8001ad4:	221f      	movs	r2, #31
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43da      	mvns	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	400a      	ands	r2, r1
 8001ae2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	4618      	mov	r0, r3
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	3b05      	subs	r3, #5
 8001afe:	fa00 f203 	lsl.w	r2, r0, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b0a:	e04c      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b0c      	cmp	r3, #12
 8001b12:	d824      	bhi.n	8001b5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	3b23      	subs	r3, #35	@ 0x23
 8001b26:	221f      	movs	r2, #31
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43da      	mvns	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	400a      	ands	r2, r1
 8001b34:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3b23      	subs	r3, #35	@ 0x23
 8001b50:	fa00 f203 	lsl.w	r2, r0, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b5c:	e023      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3b41      	subs	r3, #65	@ 0x41
 8001b70:	221f      	movs	r2, #31
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43da      	mvns	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	3b41      	subs	r3, #65	@ 0x41
 8001b9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ba6:	4b22      	ldr	r3, [pc, #136]	@ (8001c30 <HAL_ADC_ConfigChannel+0x234>)
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a21      	ldr	r2, [pc, #132]	@ (8001c34 <HAL_ADC_ConfigChannel+0x238>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d109      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x1cc>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b12      	cmp	r3, #18
 8001bba:	d105      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a19      	ldr	r2, [pc, #100]	@ (8001c34 <HAL_ADC_ConfigChannel+0x238>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d123      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x21e>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d003      	beq.n	8001be2 <HAL_ADC_ConfigChannel+0x1e6>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b11      	cmp	r3, #17
 8001be0:	d11b      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b10      	cmp	r3, #16
 8001bf4:	d111      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bf6:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <HAL_ADC_ConfigChannel+0x23c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a10      	ldr	r2, [pc, #64]	@ (8001c3c <HAL_ADC_ConfigChannel+0x240>)
 8001bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001c00:	0c9a      	lsrs	r2, r3, #18
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c0c:	e002      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f9      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	40012300 	.word	0x40012300
 8001c34:	40012000 	.word	0x40012000
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	431bde83 	.word	0x431bde83

08001c40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c48:	4b79      	ldr	r3, [pc, #484]	@ (8001e30 <ADC_Init+0x1f0>)
 8001c4a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	431a      	orrs	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6859      	ldr	r1, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	021a      	lsls	r2, r3, #8
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6859      	ldr	r1, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6899      	ldr	r1, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd2:	4a58      	ldr	r2, [pc, #352]	@ (8001e34 <ADC_Init+0x1f4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d022      	beq.n	8001d1e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ce6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6899      	ldr	r1, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6899      	ldr	r1, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	e00f      	b.n	8001d3e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d3c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0202 	bic.w	r2, r2, #2
 8001d4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6899      	ldr	r1, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	7e1b      	ldrb	r3, [r3, #24]
 8001d58:	005a      	lsls	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d01b      	beq.n	8001da4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d7a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6859      	ldr	r1, [r3, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d96:	3b01      	subs	r3, #1
 8001d98:	035a      	lsls	r2, r3, #13
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	e007      	b.n	8001db4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001db2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	051a      	lsls	r2, r3, #20
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001de8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6899      	ldr	r1, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001df6:	025a      	lsls	r2, r3, #9
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6899      	ldr	r1, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	029a      	lsls	r2, r3, #10
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	609a      	str	r2, [r3, #8]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40012300 	.word	0x40012300
 8001e34:	0f000001 	.word	0x0f000001

08001e38 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e44:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d13c      	bne.n	8001ecc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d12b      	bne.n	8001ec4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d127      	bne.n	8001ec4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d006      	beq.n	8001e90 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d119      	bne.n	8001ec4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0220 	bic.w	r2, r2, #32
 8001e9e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d105      	bne.n	8001ec4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebc:	f043 0201 	orr.w	r2, r3, #1
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f7ff fd7b 	bl	80019c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001eca:	e00e      	b.n	8001eea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f7ff fd85 	bl	80019e8 <HAL_ADC_ErrorCallback>
}
 8001ede:	e004      	b.n	8001eea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	4798      	blx	r3
}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001efe:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f7ff fd67 	bl	80019d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f1a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2240      	movs	r2, #64	@ 0x40
 8001f20:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f26:	f043 0204 	orr.w	r2, r3, #4
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f7ff fd5a 	bl	80019e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6e:	4a04      	ldr	r2, [pc, #16]	@ (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60d3      	str	r3, [r2, #12]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f88:	4b04      	ldr	r3, [pc, #16]	@ (8001f9c <__NVIC_GetPriorityGrouping+0x18>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 0307 	and.w	r3, r3, #7
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0b      	blt.n	8001fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	4907      	ldr	r1, [pc, #28]	@ (8001fd8 <__NVIC_EnableIRQ+0x38>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000e100 	.word	0xe000e100

08001fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db0a      	blt.n	8002006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	490c      	ldr	r1, [pc, #48]	@ (8002028 <__NVIC_SetPriority+0x4c>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002004:	e00a      	b.n	800201c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4908      	ldr	r1, [pc, #32]	@ (800202c <__NVIC_SetPriority+0x50>)
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	3b04      	subs	r3, #4
 8002014:	0112      	lsls	r2, r2, #4
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	440b      	add	r3, r1
 800201a:	761a      	strb	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	@ 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f1c3 0307 	rsb	r3, r3, #7
 800204a:	2b04      	cmp	r3, #4
 800204c:	bf28      	it	cs
 800204e:	2304      	movcs	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	2b06      	cmp	r3, #6
 8002058:	d902      	bls.n	8002060 <NVIC_EncodePriority+0x30>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3b03      	subs	r3, #3
 800205e:	e000      	b.n	8002062 <NVIC_EncodePriority+0x32>
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	f04f 32ff 	mov.w	r2, #4294967295
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	401a      	ands	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002078:	f04f 31ff 	mov.w	r1, #4294967295
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43d9      	mvns	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	4313      	orrs	r3, r2
         );
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	@ 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020a8:	d301      	bcc.n	80020ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00f      	b.n	80020ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ae:	4a0a      	ldr	r2, [pc, #40]	@ (80020d8 <SysTick_Config+0x40>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b6:	210f      	movs	r1, #15
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f7ff ff8e 	bl	8001fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c0:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <SysTick_Config+0x40>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c6:	4b04      	ldr	r3, [pc, #16]	@ (80020d8 <SysTick_Config+0x40>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	e000e010 	.word	0xe000e010

080020dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff29 	bl	8001f3c <__NVIC_SetPriorityGrouping>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002104:	f7ff ff3e 	bl	8001f84 <__NVIC_GetPriorityGrouping>
 8002108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	6978      	ldr	r0, [r7, #20]
 8002110:	f7ff ff8e 	bl	8002030 <NVIC_EncodePriority>
 8002114:	4602      	mov	r2, r0
 8002116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff5d 	bl	8001fdc <__NVIC_SetPriority>
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff31 	bl	8001fa0 <__NVIC_EnableIRQ>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ffa2 	bl	8002098 <SysTick_Config>
 8002154:	4603      	mov	r3, r0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800216c:	f7ff faa4 	bl	80016b8 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e099      	b.n	80022b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2202      	movs	r2, #2
 8002180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0201 	bic.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800219c:	e00f      	b.n	80021be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800219e:	f7ff fa8b 	bl	80016b8 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b05      	cmp	r3, #5
 80021aa:	d908      	bls.n	80021be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2220      	movs	r2, #32
 80021b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2203      	movs	r2, #3
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e078      	b.n	80022b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e8      	bne.n	800219e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	4b38      	ldr	r3, [pc, #224]	@ (80022b8 <HAL_DMA_Init+0x158>)
 80021d8:	4013      	ands	r3, r2
 80021da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002202:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4313      	orrs	r3, r2
 800220e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002214:	2b04      	cmp	r3, #4
 8002216:	d107      	bne.n	8002228 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002220:	4313      	orrs	r3, r2
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f023 0307 	bic.w	r3, r3, #7
 800223e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	4313      	orrs	r3, r2
 8002248:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224e:	2b04      	cmp	r3, #4
 8002250:	d117      	bne.n	8002282 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4313      	orrs	r3, r2
 800225a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00e      	beq.n	8002282 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 fa6f 	bl	8002748 <DMA_CheckFifoParam>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2240      	movs	r2, #64	@ 0x40
 8002274:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800227e:	2301      	movs	r3, #1
 8002280:	e016      	b.n	80022b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 fa26 	bl	80026dc <DMA_CalcBaseAndBitshift>
 8002290:	4603      	mov	r3, r0
 8002292:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002298:	223f      	movs	r2, #63	@ 0x3f
 800229a:	409a      	lsls	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	f010803f 	.word	0xf010803f

080022bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <HAL_DMA_Start_IT+0x26>
 80022de:	2302      	movs	r3, #2
 80022e0:	e040      	b.n	8002364 <HAL_DMA_Start_IT+0xa8>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d12f      	bne.n	8002356 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2202      	movs	r2, #2
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f9b8 	bl	8002680 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002314:	223f      	movs	r2, #63	@ 0x3f
 8002316:	409a      	lsls	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0216 	orr.w	r2, r2, #22
 800232a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002330:	2b00      	cmp	r3, #0
 8002332:	d007      	beq.n	8002344 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0208 	orr.w	r2, r2, #8
 8002342:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0201 	orr.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	e005      	b.n	8002362 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800235e:	2302      	movs	r3, #2
 8002360:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002362:	7dfb      	ldrb	r3, [r7, #23]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002378:	4b8e      	ldr	r3, [pc, #568]	@ (80025b4 <HAL_DMA_IRQHandler+0x248>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a8e      	ldr	r2, [pc, #568]	@ (80025b8 <HAL_DMA_IRQHandler+0x24c>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	0a9b      	lsrs	r3, r3, #10
 8002384:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002396:	2208      	movs	r2, #8
 8002398:	409a      	lsls	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4013      	ands	r3, r2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d01a      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d013      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0204 	bic.w	r2, r2, #4
 80023be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c4:	2208      	movs	r2, #8
 80023c6:	409a      	lsls	r2, r3
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d0:	f043 0201 	orr.w	r2, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023dc:	2201      	movs	r2, #1
 80023de:	409a      	lsls	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d012      	beq.n	800240e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fa:	2201      	movs	r2, #1
 80023fc:	409a      	lsls	r2, r3
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002406:	f043 0202 	orr.w	r2, r3, #2
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002412:	2204      	movs	r2, #4
 8002414:	409a      	lsls	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4013      	ands	r3, r2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d012      	beq.n	8002444 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00b      	beq.n	8002444 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002430:	2204      	movs	r2, #4
 8002432:	409a      	lsls	r2, r3
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243c:	f043 0204 	orr.w	r2, r3, #4
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002448:	2210      	movs	r2, #16
 800244a:	409a      	lsls	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d043      	beq.n	80024dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d03c      	beq.n	80024dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002466:	2210      	movs	r2, #16
 8002468:	409a      	lsls	r2, r3
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d018      	beq.n	80024ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d108      	bne.n	800249c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	2b00      	cmp	r3, #0
 8002490:	d024      	beq.n	80024dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	4798      	blx	r3
 800249a:	e01f      	b.n	80024dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d01b      	beq.n	80024dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4798      	blx	r3
 80024ac:	e016      	b.n	80024dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d107      	bne.n	80024cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0208 	bic.w	r2, r2, #8
 80024ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e0:	2220      	movs	r2, #32
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 808f 	beq.w	800260c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0310 	and.w	r3, r3, #16
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 8087 	beq.w	800260c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002502:	2220      	movs	r2, #32
 8002504:	409a      	lsls	r2, r3
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b05      	cmp	r3, #5
 8002514:	d136      	bne.n	8002584 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0216 	bic.w	r2, r2, #22
 8002524:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695a      	ldr	r2, [r3, #20]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002534:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	2b00      	cmp	r3, #0
 800253c:	d103      	bne.n	8002546 <HAL_DMA_IRQHandler+0x1da>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002542:	2b00      	cmp	r3, #0
 8002544:	d007      	beq.n	8002556 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0208 	bic.w	r2, r2, #8
 8002554:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255a:	223f      	movs	r2, #63	@ 0x3f
 800255c:	409a      	lsls	r2, r3
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002576:	2b00      	cmp	r3, #0
 8002578:	d07e      	beq.n	8002678 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	4798      	blx	r3
        }
        return;
 8002582:	e079      	b.n	8002678 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d01d      	beq.n	80025ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10d      	bne.n	80025bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d031      	beq.n	800260c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	4798      	blx	r3
 80025b0:	e02c      	b.n	800260c <HAL_DMA_IRQHandler+0x2a0>
 80025b2:	bf00      	nop
 80025b4:	20000000 	.word	0x20000000
 80025b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d023      	beq.n	800260c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	4798      	blx	r3
 80025cc:	e01e      	b.n	800260c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10f      	bne.n	80025fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0210 	bic.w	r2, r2, #16
 80025ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002610:	2b00      	cmp	r3, #0
 8002612:	d032      	beq.n	800267a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d022      	beq.n	8002666 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2205      	movs	r2, #5
 8002624:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0201 	bic.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	3301      	adds	r3, #1
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	429a      	cmp	r2, r3
 8002642:	d307      	bcc.n	8002654 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f2      	bne.n	8002638 <HAL_DMA_IRQHandler+0x2cc>
 8002652:	e000      	b.n	8002656 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002654:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	4798      	blx	r3
 8002676:	e000      	b.n	800267a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002678:	bf00      	nop
    }
  }
}
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800269c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b40      	cmp	r3, #64	@ 0x40
 80026ac:	d108      	bne.n	80026c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026be:	e007      	b.n	80026d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	60da      	str	r2, [r3, #12]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	3b10      	subs	r3, #16
 80026ec:	4a14      	ldr	r2, [pc, #80]	@ (8002740 <DMA_CalcBaseAndBitshift+0x64>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	091b      	lsrs	r3, r3, #4
 80026f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026f6:	4a13      	ldr	r2, [pc, #76]	@ (8002744 <DMA_CalcBaseAndBitshift+0x68>)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4413      	add	r3, r2
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b03      	cmp	r3, #3
 8002708:	d909      	bls.n	800271e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002712:	f023 0303 	bic.w	r3, r3, #3
 8002716:	1d1a      	adds	r2, r3, #4
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	659a      	str	r2, [r3, #88]	@ 0x58
 800271c:	e007      	b.n	800272e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002726:	f023 0303 	bic.w	r3, r3, #3
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	aaaaaaab 	.word	0xaaaaaaab
 8002744:	0800abb4 	.word	0x0800abb4

08002748 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002758:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d11f      	bne.n	80027a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b03      	cmp	r3, #3
 8002766:	d856      	bhi.n	8002816 <DMA_CheckFifoParam+0xce>
 8002768:	a201      	add	r2, pc, #4	@ (adr r2, 8002770 <DMA_CheckFifoParam+0x28>)
 800276a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276e:	bf00      	nop
 8002770:	08002781 	.word	0x08002781
 8002774:	08002793 	.word	0x08002793
 8002778:	08002781 	.word	0x08002781
 800277c:	08002817 	.word	0x08002817
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002784:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d046      	beq.n	800281a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002790:	e043      	b.n	800281a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002796:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800279a:	d140      	bne.n	800281e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a0:	e03d      	b.n	800281e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027aa:	d121      	bne.n	80027f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d837      	bhi.n	8002822 <DMA_CheckFifoParam+0xda>
 80027b2:	a201      	add	r2, pc, #4	@ (adr r2, 80027b8 <DMA_CheckFifoParam+0x70>)
 80027b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b8:	080027c9 	.word	0x080027c9
 80027bc:	080027cf 	.word	0x080027cf
 80027c0:	080027c9 	.word	0x080027c9
 80027c4:	080027e1 	.word	0x080027e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
      break;
 80027cc:	e030      	b.n	8002830 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d025      	beq.n	8002826 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027de:	e022      	b.n	8002826 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027e8:	d11f      	bne.n	800282a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027ee:	e01c      	b.n	800282a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d903      	bls.n	80027fe <DMA_CheckFifoParam+0xb6>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d003      	beq.n	8002804 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027fc:	e018      	b.n	8002830 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
      break;
 8002802:	e015      	b.n	8002830 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002808:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00e      	beq.n	800282e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
      break;
 8002814:	e00b      	b.n	800282e <DMA_CheckFifoParam+0xe6>
      break;
 8002816:	bf00      	nop
 8002818:	e00a      	b.n	8002830 <DMA_CheckFifoParam+0xe8>
      break;
 800281a:	bf00      	nop
 800281c:	e008      	b.n	8002830 <DMA_CheckFifoParam+0xe8>
      break;
 800281e:	bf00      	nop
 8002820:	e006      	b.n	8002830 <DMA_CheckFifoParam+0xe8>
      break;
 8002822:	bf00      	nop
 8002824:	e004      	b.n	8002830 <DMA_CheckFifoParam+0xe8>
      break;
 8002826:	bf00      	nop
 8002828:	e002      	b.n	8002830 <DMA_CheckFifoParam+0xe8>
      break;   
 800282a:	bf00      	nop
 800282c:	e000      	b.n	8002830 <DMA_CheckFifoParam+0xe8>
      break;
 800282e:	bf00      	nop
    }
  } 
  
  return status; 
 8002830:	7bfb      	ldrb	r3, [r7, #15]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop

08002840 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002852:	4b23      	ldr	r3, [pc, #140]	@ (80028e0 <HAL_FLASH_Program+0xa0>)
 8002854:	7e1b      	ldrb	r3, [r3, #24]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_FLASH_Program+0x1e>
 800285a:	2302      	movs	r3, #2
 800285c:	e03b      	b.n	80028d6 <HAL_FLASH_Program+0x96>
 800285e:	4b20      	ldr	r3, [pc, #128]	@ (80028e0 <HAL_FLASH_Program+0xa0>)
 8002860:	2201      	movs	r2, #1
 8002862:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002864:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002868:	f000 f870 	bl	800294c <FLASH_WaitForLastOperation>
 800286c:	4603      	mov	r3, r0
 800286e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002870:	7dfb      	ldrb	r3, [r7, #23]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d12b      	bne.n	80028ce <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d105      	bne.n	8002888 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800287c:	783b      	ldrb	r3, [r7, #0]
 800287e:	4619      	mov	r1, r3
 8002880:	68b8      	ldr	r0, [r7, #8]
 8002882:	f000 f91b 	bl	8002abc <FLASH_Program_Byte>
 8002886:	e016      	b.n	80028b6 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d105      	bne.n	800289a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800288e:	883b      	ldrh	r3, [r7, #0]
 8002890:	4619      	mov	r1, r3
 8002892:	68b8      	ldr	r0, [r7, #8]
 8002894:	f000 f8ee 	bl	8002a74 <FLASH_Program_HalfWord>
 8002898:	e00d      	b.n	80028b6 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b02      	cmp	r3, #2
 800289e:	d105      	bne.n	80028ac <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	4619      	mov	r1, r3
 80028a4:	68b8      	ldr	r0, [r7, #8]
 80028a6:	f000 f8c3 	bl	8002a30 <FLASH_Program_Word>
 80028aa:	e004      	b.n	80028b6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80028ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028b0:	68b8      	ldr	r0, [r7, #8]
 80028b2:	f000 f88b 	bl	80029cc <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028b6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80028ba:	f000 f847 	bl	800294c <FLASH_WaitForLastOperation>
 80028be:	4603      	mov	r3, r0
 80028c0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80028c2:	4b08      	ldr	r3, [pc, #32]	@ (80028e4 <HAL_FLASH_Program+0xa4>)
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	4a07      	ldr	r2, [pc, #28]	@ (80028e4 <HAL_FLASH_Program+0xa4>)
 80028c8:	f023 0301 	bic.w	r3, r3, #1
 80028cc:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80028ce:	4b04      	ldr	r3, [pc, #16]	@ (80028e0 <HAL_FLASH_Program+0xa0>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	761a      	strb	r2, [r3, #24]

  return status;
 80028d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	2000033c 	.word	0x2000033c
 80028e4:	40023c00 	.word	0x40023c00

080028e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80028f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002920 <HAL_FLASH_Unlock+0x38>)
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	da0b      	bge.n	8002912 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80028fa:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <HAL_FLASH_Unlock+0x38>)
 80028fc:	4a09      	ldr	r2, [pc, #36]	@ (8002924 <HAL_FLASH_Unlock+0x3c>)
 80028fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002900:	4b07      	ldr	r3, [pc, #28]	@ (8002920 <HAL_FLASH_Unlock+0x38>)
 8002902:	4a09      	ldr	r2, [pc, #36]	@ (8002928 <HAL_FLASH_Unlock+0x40>)
 8002904:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002906:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <HAL_FLASH_Unlock+0x38>)
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	2b00      	cmp	r3, #0
 800290c:	da01      	bge.n	8002912 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002912:	79fb      	ldrb	r3, [r7, #7]
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40023c00 	.word	0x40023c00
 8002924:	45670123 	.word	0x45670123
 8002928:	cdef89ab 	.word	0xcdef89ab

0800292c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002930:	4b05      	ldr	r3, [pc, #20]	@ (8002948 <HAL_FLASH_Lock+0x1c>)
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	4a04      	ldr	r2, [pc, #16]	@ (8002948 <HAL_FLASH_Lock+0x1c>)
 8002936:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800293a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	40023c00 	.word	0x40023c00

0800294c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002958:	4b1a      	ldr	r3, [pc, #104]	@ (80029c4 <FLASH_WaitForLastOperation+0x78>)
 800295a:	2200      	movs	r2, #0
 800295c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800295e:	f7fe feab 	bl	80016b8 <HAL_GetTick>
 8002962:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002964:	e010      	b.n	8002988 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296c:	d00c      	beq.n	8002988 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d007      	beq.n	8002984 <FLASH_WaitForLastOperation+0x38>
 8002974:	f7fe fea0 	bl	80016b8 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	429a      	cmp	r2, r3
 8002982:	d201      	bcs.n	8002988 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e019      	b.n	80029bc <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002988:	4b0f      	ldr	r3, [pc, #60]	@ (80029c8 <FLASH_WaitForLastOperation+0x7c>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1e8      	bne.n	8002966 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002994:	4b0c      	ldr	r3, [pc, #48]	@ (80029c8 <FLASH_WaitForLastOperation+0x7c>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80029a0:	4b09      	ldr	r3, [pc, #36]	@ (80029c8 <FLASH_WaitForLastOperation+0x7c>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80029a6:	4b08      	ldr	r3, [pc, #32]	@ (80029c8 <FLASH_WaitForLastOperation+0x7c>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80029b2:	f000 f8a5 	bl	8002b00 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0

}
 80029bc:	4618      	mov	r0, r3
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	2000033c 	.word	0x2000033c
 80029c8:	40023c00 	.word	0x40023c00

080029cc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029d8:	4b14      	ldr	r3, [pc, #80]	@ (8002a2c <FLASH_Program_DoubleWord+0x60>)
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	4a13      	ldr	r2, [pc, #76]	@ (8002a2c <FLASH_Program_DoubleWord+0x60>)
 80029de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80029e4:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <FLASH_Program_DoubleWord+0x60>)
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	4a10      	ldr	r2, [pc, #64]	@ (8002a2c <FLASH_Program_DoubleWord+0x60>)
 80029ea:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80029ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80029f0:	4b0e      	ldr	r3, [pc, #56]	@ (8002a2c <FLASH_Program_DoubleWord+0x60>)
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	4a0d      	ldr	r2, [pc, #52]	@ (8002a2c <FLASH_Program_DoubleWord+0x60>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002a02:	f3bf 8f6f 	isb	sy
}
 8002a06:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8002a08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	000a      	movs	r2, r1
 8002a16:	2300      	movs	r3, #0
 8002a18:	68f9      	ldr	r1, [r7, #12]
 8002a1a:	3104      	adds	r1, #4
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	600b      	str	r3, [r1, #0]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	40023c00 	.word	0x40023c00

08002a30 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a70 <FLASH_Program_Word+0x40>)
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8002a70 <FLASH_Program_Word+0x40>)
 8002a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002a46:	4b0a      	ldr	r3, [pc, #40]	@ (8002a70 <FLASH_Program_Word+0x40>)
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	4a09      	ldr	r2, [pc, #36]	@ (8002a70 <FLASH_Program_Word+0x40>)
 8002a4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a50:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a52:	4b07      	ldr	r3, [pc, #28]	@ (8002a70 <FLASH_Program_Word+0x40>)
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	4a06      	ldr	r2, [pc, #24]	@ (8002a70 <FLASH_Program_Word+0x40>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	601a      	str	r2, [r3, #0]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	40023c00 	.word	0x40023c00

08002a74 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a80:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab8 <FLASH_Program_HalfWord+0x44>)
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	4a0c      	ldr	r2, [pc, #48]	@ (8002ab8 <FLASH_Program_HalfWord+0x44>)
 8002a86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <FLASH_Program_HalfWord+0x44>)
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	4a09      	ldr	r2, [pc, #36]	@ (8002ab8 <FLASH_Program_HalfWord+0x44>)
 8002a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a98:	4b07      	ldr	r3, [pc, #28]	@ (8002ab8 <FLASH_Program_HalfWord+0x44>)
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	4a06      	ldr	r2, [pc, #24]	@ (8002ab8 <FLASH_Program_HalfWord+0x44>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	887a      	ldrh	r2, [r7, #2]
 8002aa8:	801a      	strh	r2, [r3, #0]
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40023c00 	.word	0x40023c00

08002abc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8002afc <FLASH_Program_Byte+0x40>)
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	4a0b      	ldr	r2, [pc, #44]	@ (8002afc <FLASH_Program_Byte+0x40>)
 8002ace:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ad2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002ad4:	4b09      	ldr	r3, [pc, #36]	@ (8002afc <FLASH_Program_Byte+0x40>)
 8002ad6:	4a09      	ldr	r2, [pc, #36]	@ (8002afc <FLASH_Program_Byte+0x40>)
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002adc:	4b07      	ldr	r3, [pc, #28]	@ (8002afc <FLASH_Program_Byte+0x40>)
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	4a06      	ldr	r2, [pc, #24]	@ (8002afc <FLASH_Program_Byte+0x40>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	701a      	strb	r2, [r3, #0]
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40023c00 	.word	0x40023c00

08002b00 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002b04:	4b27      	ldr	r3, [pc, #156]	@ (8002ba4 <FLASH_SetErrorCode+0xa4>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002b10:	4b25      	ldr	r3, [pc, #148]	@ (8002ba8 <FLASH_SetErrorCode+0xa8>)
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f043 0310 	orr.w	r3, r3, #16
 8002b18:	4a23      	ldr	r2, [pc, #140]	@ (8002ba8 <FLASH_SetErrorCode+0xa8>)
 8002b1a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002b1c:	4b21      	ldr	r3, [pc, #132]	@ (8002ba4 <FLASH_SetErrorCode+0xa4>)
 8002b1e:	2210      	movs	r2, #16
 8002b20:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002b22:	4b20      	ldr	r3, [pc, #128]	@ (8002ba4 <FLASH_SetErrorCode+0xa4>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d008      	beq.n	8002b40 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba8 <FLASH_SetErrorCode+0xa8>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f043 0308 	orr.w	r3, r3, #8
 8002b36:	4a1c      	ldr	r2, [pc, #112]	@ (8002ba8 <FLASH_SetErrorCode+0xa8>)
 8002b38:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba4 <FLASH_SetErrorCode+0xa4>)
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002b40:	4b18      	ldr	r3, [pc, #96]	@ (8002ba4 <FLASH_SetErrorCode+0xa4>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002b4c:	4b16      	ldr	r3, [pc, #88]	@ (8002ba8 <FLASH_SetErrorCode+0xa8>)
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	f043 0304 	orr.w	r3, r3, #4
 8002b54:	4a14      	ldr	r2, [pc, #80]	@ (8002ba8 <FLASH_SetErrorCode+0xa8>)
 8002b56:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002b58:	4b12      	ldr	r3, [pc, #72]	@ (8002ba4 <FLASH_SetErrorCode+0xa4>)
 8002b5a:	2240      	movs	r2, #64	@ 0x40
 8002b5c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002b5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ba4 <FLASH_SetErrorCode+0xa4>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba8 <FLASH_SetErrorCode+0xa8>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f043 0302 	orr.w	r3, r3, #2
 8002b72:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba8 <FLASH_SetErrorCode+0xa8>)
 8002b74:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002b76:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba4 <FLASH_SetErrorCode+0xa4>)
 8002b78:	2280      	movs	r2, #128	@ 0x80
 8002b7a:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002b7c:	4b09      	ldr	r3, [pc, #36]	@ (8002ba4 <FLASH_SetErrorCode+0xa4>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002b88:	4b07      	ldr	r3, [pc, #28]	@ (8002ba8 <FLASH_SetErrorCode+0xa8>)
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	f043 0320 	orr.w	r3, r3, #32
 8002b90:	4a05      	ldr	r2, [pc, #20]	@ (8002ba8 <FLASH_SetErrorCode+0xa8>)
 8002b92:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002b94:	4b03      	ldr	r3, [pc, #12]	@ (8002ba4 <FLASH_SetErrorCode+0xa4>)
 8002b96:	2202      	movs	r2, #2
 8002b98:	60da      	str	r2, [r3, #12]
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	40023c00 	.word	0x40023c00
 8002ba8:	2000033c 	.word	0x2000033c

08002bac <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d102      	bne.n	8002bc8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	e010      	b.n	8002bea <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d103      	bne.n	8002bd6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002bce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	e009      	b.n	8002bea <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d103      	bne.n	8002be4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002bdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	e002      	b.n	8002bea <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002be4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002be8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002bea:	4b13      	ldr	r3, [pc, #76]	@ (8002c38 <FLASH_Erase_Sector+0x8c>)
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	4a12      	ldr	r2, [pc, #72]	@ (8002c38 <FLASH_Erase_Sector+0x8c>)
 8002bf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002bf6:	4b10      	ldr	r3, [pc, #64]	@ (8002c38 <FLASH_Erase_Sector+0x8c>)
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	490f      	ldr	r1, [pc, #60]	@ (8002c38 <FLASH_Erase_Sector+0x8c>)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002c02:	4b0d      	ldr	r3, [pc, #52]	@ (8002c38 <FLASH_Erase_Sector+0x8c>)
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	4a0c      	ldr	r2, [pc, #48]	@ (8002c38 <FLASH_Erase_Sector+0x8c>)
 8002c08:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002c0c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <FLASH_Erase_Sector+0x8c>)
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4313      	orrs	r3, r2
 8002c18:	4a07      	ldr	r2, [pc, #28]	@ (8002c38 <FLASH_Erase_Sector+0x8c>)
 8002c1a:	f043 0302 	orr.w	r3, r3, #2
 8002c1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002c20:	4b05      	ldr	r3, [pc, #20]	@ (8002c38 <FLASH_Erase_Sector+0x8c>)
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	4a04      	ldr	r2, [pc, #16]	@ (8002c38 <FLASH_Erase_Sector+0x8c>)
 8002c26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2a:	6113      	str	r3, [r2, #16]
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	40023c00 	.word	0x40023c00

08002c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b089      	sub	sp, #36	@ 0x24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	e16b      	b.n	8002f30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c58:	2201      	movs	r2, #1
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	f040 815a 	bne.w	8002f2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d005      	beq.n	8002c8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d130      	bne.n	8002cf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	2203      	movs	r2, #3
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 0201 	and.w	r2, r3, #1
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d017      	beq.n	8002d2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	2203      	movs	r2, #3
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d123      	bne.n	8002d80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	08da      	lsrs	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3208      	adds	r2, #8
 8002d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	220f      	movs	r2, #15
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	08da      	lsrs	r2, r3, #3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3208      	adds	r2, #8
 8002d7a:	69b9      	ldr	r1, [r7, #24]
 8002d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0203 	and.w	r2, r3, #3
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80b4 	beq.w	8002f2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	4b60      	ldr	r3, [pc, #384]	@ (8002f48 <HAL_GPIO_Init+0x30c>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dca:	4a5f      	ldr	r2, [pc, #380]	@ (8002f48 <HAL_GPIO_Init+0x30c>)
 8002dcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dd2:	4b5d      	ldr	r3, [pc, #372]	@ (8002f48 <HAL_GPIO_Init+0x30c>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dde:	4a5b      	ldr	r2, [pc, #364]	@ (8002f4c <HAL_GPIO_Init+0x310>)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	3302      	adds	r3, #2
 8002de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	220f      	movs	r2, #15
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a52      	ldr	r2, [pc, #328]	@ (8002f50 <HAL_GPIO_Init+0x314>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d02b      	beq.n	8002e62 <HAL_GPIO_Init+0x226>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a51      	ldr	r2, [pc, #324]	@ (8002f54 <HAL_GPIO_Init+0x318>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d025      	beq.n	8002e5e <HAL_GPIO_Init+0x222>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a50      	ldr	r2, [pc, #320]	@ (8002f58 <HAL_GPIO_Init+0x31c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d01f      	beq.n	8002e5a <HAL_GPIO_Init+0x21e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a4f      	ldr	r2, [pc, #316]	@ (8002f5c <HAL_GPIO_Init+0x320>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d019      	beq.n	8002e56 <HAL_GPIO_Init+0x21a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4e      	ldr	r2, [pc, #312]	@ (8002f60 <HAL_GPIO_Init+0x324>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <HAL_GPIO_Init+0x216>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4d      	ldr	r2, [pc, #308]	@ (8002f64 <HAL_GPIO_Init+0x328>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00d      	beq.n	8002e4e <HAL_GPIO_Init+0x212>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4c      	ldr	r2, [pc, #304]	@ (8002f68 <HAL_GPIO_Init+0x32c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d007      	beq.n	8002e4a <HAL_GPIO_Init+0x20e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4b      	ldr	r2, [pc, #300]	@ (8002f6c <HAL_GPIO_Init+0x330>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <HAL_GPIO_Init+0x20a>
 8002e42:	2307      	movs	r3, #7
 8002e44:	e00e      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e46:	2308      	movs	r3, #8
 8002e48:	e00c      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e4a:	2306      	movs	r3, #6
 8002e4c:	e00a      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e4e:	2305      	movs	r3, #5
 8002e50:	e008      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e52:	2304      	movs	r3, #4
 8002e54:	e006      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e56:	2303      	movs	r3, #3
 8002e58:	e004      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e002      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e62:	2300      	movs	r3, #0
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	f002 0203 	and.w	r2, r2, #3
 8002e6a:	0092      	lsls	r2, r2, #2
 8002e6c:	4093      	lsls	r3, r2
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e74:	4935      	ldr	r1, [pc, #212]	@ (8002f4c <HAL_GPIO_Init+0x310>)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	089b      	lsrs	r3, r3, #2
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e82:	4b3b      	ldr	r3, [pc, #236]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ea6:	4a32      	ldr	r2, [pc, #200]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eac:	4b30      	ldr	r3, [pc, #192]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ed0:	4a27      	ldr	r2, [pc, #156]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ed6:	4b26      	ldr	r3, [pc, #152]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002efa:	4a1d      	ldr	r2, [pc, #116]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f00:	4b1b      	ldr	r3, [pc, #108]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f24:	4a12      	ldr	r2, [pc, #72]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	61fb      	str	r3, [r7, #28]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b0f      	cmp	r3, #15
 8002f34:	f67f ae90 	bls.w	8002c58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	3724      	adds	r7, #36	@ 0x24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40013800 	.word	0x40013800
 8002f50:	40020000 	.word	0x40020000
 8002f54:	40020400 	.word	0x40020400
 8002f58:	40020800 	.word	0x40020800
 8002f5c:	40020c00 	.word	0x40020c00
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40021400 	.word	0x40021400
 8002f68:	40021800 	.word	0x40021800
 8002f6c:	40021c00 	.word	0x40021c00
 8002f70:	40013c00 	.word	0x40013c00

08002f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	887b      	ldrh	r3, [r7, #2]
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
 8002f90:	e001      	b.n	8002f96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	807b      	strh	r3, [r7, #2]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fb4:	787b      	ldrb	r3, [r7, #1]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fba:	887a      	ldrh	r2, [r7, #2]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fc0:	e003      	b.n	8002fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fc2:	887b      	ldrh	r3, [r7, #2]
 8002fc4:	041a      	lsls	r2, r3, #16
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	619a      	str	r2, [r3, #24]
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fe2:	4b08      	ldr	r3, [pc, #32]	@ (8003004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	88fb      	ldrh	r3, [r7, #6]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d006      	beq.n	8002ffc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fee:	4a05      	ldr	r2, [pc, #20]	@ (8003004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ff0:	88fb      	ldrh	r3, [r7, #6]
 8002ff2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ff4:	88fb      	ldrh	r3, [r7, #6]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fd fd0e 	bl	8000a18 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40013c00 	.word	0x40013c00

08003008 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af02      	add	r7, sp, #8
 800300e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e101      	b.n	800321e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d106      	bne.n	800303a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f006 fdad 	bl	8009b94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2203      	movs	r2, #3
 800303e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003048:	d102      	bne.n	8003050 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f003 f994 	bl	8006382 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7c1a      	ldrb	r2, [r3, #16]
 8003062:	f88d 2000 	strb.w	r2, [sp]
 8003066:	3304      	adds	r3, #4
 8003068:	cb0e      	ldmia	r3, {r1, r2, r3}
 800306a:	f003 f873 	bl	8006154 <USB_CoreInit>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0ce      	b.n	800321e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2100      	movs	r1, #0
 8003086:	4618      	mov	r0, r3
 8003088:	f003 f98c 	bl	80063a4 <USB_SetCurrentMode>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2202      	movs	r2, #2
 8003096:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e0bf      	b.n	800321e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800309e:	2300      	movs	r3, #0
 80030a0:	73fb      	strb	r3, [r7, #15]
 80030a2:	e04a      	b.n	800313a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030a4:	7bfa      	ldrb	r2, [r7, #15]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	3315      	adds	r3, #21
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030b8:	7bfa      	ldrb	r2, [r7, #15]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	3314      	adds	r3, #20
 80030c8:	7bfa      	ldrb	r2, [r7, #15]
 80030ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030cc:	7bfa      	ldrb	r2, [r7, #15]
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	b298      	uxth	r0, r3
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	332e      	adds	r3, #46	@ 0x2e
 80030e0:	4602      	mov	r2, r0
 80030e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	3318      	adds	r3, #24
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	331c      	adds	r3, #28
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800310c:	7bfa      	ldrb	r2, [r7, #15]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	3320      	adds	r3, #32
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003120:	7bfa      	ldrb	r2, [r7, #15]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	3324      	adds	r3, #36	@ 0x24
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	3301      	adds	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	791b      	ldrb	r3, [r3, #4]
 800313e:	7bfa      	ldrb	r2, [r7, #15]
 8003140:	429a      	cmp	r2, r3
 8003142:	d3af      	bcc.n	80030a4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]
 8003148:	e044      	b.n	80031d4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
 80031d0:	3301      	adds	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	791b      	ldrb	r3, [r3, #4]
 80031d8:	7bfa      	ldrb	r2, [r7, #15]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d3b5      	bcc.n	800314a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	7c1a      	ldrb	r2, [r3, #16]
 80031e6:	f88d 2000 	strb.w	r2, [sp]
 80031ea:	3304      	adds	r3, #4
 80031ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031ee:	f003 f925 	bl	800643c <USB_DevInit>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e00c      	b.n	800321e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f004 f96f 	bl	80074fa <USB_DevDisconnect>

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_PCD_Start+0x1c>
 800323e:	2302      	movs	r3, #2
 8003240:	e022      	b.n	8003288 <HAL_PCD_Start+0x62>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800325a:	2b01      	cmp	r3, #1
 800325c:	d105      	bne.n	800326a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003262:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f003 f876 	bl	8006360 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f004 f91d 	bl	80074b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003290:	b590      	push	{r4, r7, lr}
 8003292:	b08d      	sub	sp, #52	@ 0x34
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 f9db 	bl	8007662 <USB_GetMode>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f040 848c 	bne.w	8003bcc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f004 f93f 	bl	800753c <USB_ReadInterrupts>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 8482 	beq.w	8003bca <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	0a1b      	lsrs	r3, r3, #8
 80032d0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f004 f92c 	bl	800753c <USB_ReadInterrupts>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d107      	bne.n	80032fe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f002 0202 	and.w	r2, r2, #2
 80032fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f004 f91a 	bl	800753c <USB_ReadInterrupts>
 8003308:	4603      	mov	r3, r0
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	2b10      	cmp	r3, #16
 8003310:	d161      	bne.n	80033d6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699a      	ldr	r2, [r3, #24]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0210 	bic.w	r2, r2, #16
 8003320:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	f003 020f 	and.w	r2, r3, #15
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	4413      	add	r3, r2
 800333e:	3304      	adds	r3, #4
 8003340:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	0c5b      	lsrs	r3, r3, #17
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	2b02      	cmp	r3, #2
 800334c:	d124      	bne.n	8003398 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003354:	4013      	ands	r3, r2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d035      	beq.n	80033c6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003364:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003368:	b29b      	uxth	r3, r3
 800336a:	461a      	mov	r2, r3
 800336c:	6a38      	ldr	r0, [r7, #32]
 800336e:	f003 ff51 	bl	8007214 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	091b      	lsrs	r3, r3, #4
 800337a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800337e:	441a      	add	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	091b      	lsrs	r3, r3, #4
 800338c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003390:	441a      	add	r2, r3
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	615a      	str	r2, [r3, #20]
 8003396:	e016      	b.n	80033c6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	0c5b      	lsrs	r3, r3, #17
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	2b06      	cmp	r3, #6
 80033a2:	d110      	bne.n	80033c6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033aa:	2208      	movs	r2, #8
 80033ac:	4619      	mov	r1, r3
 80033ae:	6a38      	ldr	r0, [r7, #32]
 80033b0:	f003 ff30 	bl	8007214 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	091b      	lsrs	r3, r3, #4
 80033bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033c0:	441a      	add	r2, r3
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699a      	ldr	r2, [r3, #24]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0210 	orr.w	r2, r2, #16
 80033d4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f004 f8ae 	bl	800753c <USB_ReadInterrupts>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033e6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80033ea:	f040 80a7 	bne.w	800353c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f004 f8b3 	bl	8007562 <USB_ReadDevAllOutEpInterrupt>
 80033fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80033fe:	e099      	b.n	8003534 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 808e 	beq.w	8003528 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	4611      	mov	r1, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f004 f8d7 	bl	80075ca <USB_ReadDevOutEPInterrupt>
 800341c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00c      	beq.n	8003442 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	4413      	add	r3, r2
 8003430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003434:	461a      	mov	r2, r3
 8003436:	2301      	movs	r3, #1
 8003438:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800343a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fea3 	bl	8004188 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00c      	beq.n	8003466 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800344c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	4413      	add	r3, r2
 8003454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003458:	461a      	mov	r2, r3
 800345a:	2308      	movs	r3, #8
 800345c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800345e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 ff79 	bl	8004358 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	4413      	add	r3, r2
 8003478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800347c:	461a      	mov	r2, r3
 800347e:	2310      	movs	r3, #16
 8003480:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d030      	beq.n	80034ee <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003494:	2b80      	cmp	r3, #128	@ 0x80
 8003496:	d109      	bne.n	80034ac <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034aa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80034ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	3304      	adds	r3, #4
 80034c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	78db      	ldrb	r3, [r3, #3]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d108      	bne.n	80034dc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2200      	movs	r2, #0
 80034ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	4619      	mov	r1, r3
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f006 fc70 	bl	8009dbc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80034dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034e8:	461a      	mov	r2, r3
 80034ea:	2302      	movs	r3, #2
 80034ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f003 0320 	and.w	r3, r3, #32
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003504:	461a      	mov	r2, r3
 8003506:	2320      	movs	r3, #32
 8003508:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d009      	beq.n	8003528 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	4413      	add	r3, r2
 800351c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003520:	461a      	mov	r2, r3
 8003522:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003526:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352a:	3301      	adds	r3, #1
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800352e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003530:	085b      	lsrs	r3, r3, #1
 8003532:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003536:	2b00      	cmp	r3, #0
 8003538:	f47f af62 	bne.w	8003400 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f003 fffb 	bl	800753c <USB_ReadInterrupts>
 8003546:	4603      	mov	r3, r0
 8003548:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800354c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003550:	f040 80db 	bne.w	800370a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f004 f81c 	bl	8007596 <USB_ReadDevAllInEpInterrupt>
 800355e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003564:	e0cd      	b.n	8003702 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80c2 	beq.w	80036f6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	4611      	mov	r1, r2
 800357c:	4618      	mov	r0, r3
 800357e:	f004 f842 	bl	8007606 <USB_ReadDevInEPInterrupt>
 8003582:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d057      	beq.n	800363e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	2201      	movs	r2, #1
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	69f9      	ldr	r1, [r7, #28]
 80035aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035ae:	4013      	ands	r3, r2
 80035b0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035be:	461a      	mov	r2, r3
 80035c0:	2301      	movs	r3, #1
 80035c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	799b      	ldrb	r3, [r3, #6]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d132      	bne.n	8003632 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	3320      	adds	r3, #32
 80035dc:	6819      	ldr	r1, [r3, #0]
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e2:	4613      	mov	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4403      	add	r3, r0
 80035ec:	331c      	adds	r3, #28
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4419      	add	r1, r3
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f6:	4613      	mov	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4403      	add	r3, r0
 8003600:	3320      	adds	r3, #32
 8003602:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003606:	2b00      	cmp	r3, #0
 8003608:	d113      	bne.n	8003632 <HAL_PCD_IRQHandler+0x3a2>
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	3324      	adds	r3, #36	@ 0x24
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d108      	bne.n	8003632 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800362a:	461a      	mov	r2, r3
 800362c:	2101      	movs	r1, #1
 800362e:	f004 f849 	bl	80076c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	b2db      	uxtb	r3, r3
 8003636:	4619      	mov	r1, r3
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f006 fb3a 	bl	8009cb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003654:	461a      	mov	r2, r3
 8003656:	2308      	movs	r3, #8
 8003658:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003670:	461a      	mov	r2, r3
 8003672:	2310      	movs	r3, #16
 8003674:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	4413      	add	r3, r2
 8003688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800368c:	461a      	mov	r2, r3
 800368e:	2340      	movs	r3, #64	@ 0x40
 8003690:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d023      	beq.n	80036e4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800369c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800369e:	6a38      	ldr	r0, [r7, #32]
 80036a0:	f003 f830 	bl	8006704 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80036a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a6:	4613      	mov	r3, r2
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	3310      	adds	r3, #16
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	4413      	add	r3, r2
 80036b4:	3304      	adds	r3, #4
 80036b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	78db      	ldrb	r3, [r3, #3]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d108      	bne.n	80036d2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2200      	movs	r2, #0
 80036c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	4619      	mov	r1, r3
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f006 fb87 	bl	8009de0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036de:	461a      	mov	r2, r3
 80036e0:	2302      	movs	r3, #2
 80036e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 fcbd 	bl	8004070 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	3301      	adds	r3, #1
 80036fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80036fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fe:	085b      	lsrs	r3, r3, #1
 8003700:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003704:	2b00      	cmp	r3, #0
 8003706:	f47f af2e 	bne.w	8003566 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f003 ff14 	bl	800753c <USB_ReadInterrupts>
 8003714:	4603      	mov	r3, r0
 8003716:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800371a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800371e:	d122      	bne.n	8003766 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800373a:	2b01      	cmp	r3, #1
 800373c:	d108      	bne.n	8003750 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003746:	2100      	movs	r1, #0
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 fea3 	bl	8004494 <HAL_PCDEx_LPM_Callback>
 800374e:	e002      	b.n	8003756 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f006 fb25 	bl	8009da0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695a      	ldr	r2, [r3, #20]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003764:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f003 fee6 	bl	800753c <USB_ReadInterrupts>
 8003770:	4603      	mov	r3, r0
 8003772:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003776:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800377a:	d112      	bne.n	80037a2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b01      	cmp	r3, #1
 800378a:	d102      	bne.n	8003792 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f006 fae1 	bl	8009d54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695a      	ldr	r2, [r3, #20]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80037a0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f003 fec8 	bl	800753c <USB_ReadInterrupts>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b6:	f040 80b7 	bne.w	8003928 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2110      	movs	r1, #16
 80037d4:	4618      	mov	r0, r3
 80037d6:	f002 ff95 	bl	8006704 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037da:	2300      	movs	r3, #0
 80037dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037de:	e046      	b.n	800386e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037ec:	461a      	mov	r2, r3
 80037ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037f2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003804:	0151      	lsls	r1, r2, #5
 8003806:	69fa      	ldr	r2, [r7, #28]
 8003808:	440a      	add	r2, r1
 800380a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800380e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003812:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003820:	461a      	mov	r2, r3
 8003822:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003826:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003838:	0151      	lsls	r1, r2, #5
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	440a      	add	r2, r1
 800383e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003842:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003846:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003858:	0151      	lsls	r1, r2, #5
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	440a      	add	r2, r1
 800385e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003862:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003866:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386a:	3301      	adds	r3, #1
 800386c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	791b      	ldrb	r3, [r3, #4]
 8003872:	461a      	mov	r2, r3
 8003874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003876:	4293      	cmp	r3, r2
 8003878:	d3b2      	bcc.n	80037e0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	69fa      	ldr	r2, [r7, #28]
 8003884:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003888:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800388c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7bdb      	ldrb	r3, [r3, #15]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d016      	beq.n	80038c4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800389c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038a0:	69fa      	ldr	r2, [r7, #28]
 80038a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038a6:	f043 030b 	orr.w	r3, r3, #11
 80038aa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038bc:	f043 030b 	orr.w	r3, r3, #11
 80038c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80038c2:	e015      	b.n	80038f0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038d6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80038da:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	69fa      	ldr	r2, [r7, #28]
 80038e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038ea:	f043 030b 	orr.w	r3, r3, #11
 80038ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038fe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003902:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003912:	461a      	mov	r2, r3
 8003914:	f003 fed6 	bl	80076c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003926:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f003 fe05 	bl	800753c <USB_ReadInterrupts>
 8003932:	4603      	mov	r3, r0
 8003934:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003938:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800393c:	d123      	bne.n	8003986 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f003 fe9b 	bl	800767e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f002 ff52 	bl	80067f6 <USB_GetDevSpeed>
 8003952:	4603      	mov	r3, r0
 8003954:	461a      	mov	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681c      	ldr	r4, [r3, #0]
 800395e:	f001 fa09 	bl	8004d74 <HAL_RCC_GetHCLKFreq>
 8003962:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003968:	461a      	mov	r2, r3
 800396a:	4620      	mov	r0, r4
 800396c:	f002 fc56 	bl	800621c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f006 f9c6 	bl	8009d02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695a      	ldr	r2, [r3, #20]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003984:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f003 fdd6 	bl	800753c <USB_ReadInterrupts>
 8003990:	4603      	mov	r3, r0
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b08      	cmp	r3, #8
 8003998:	d10a      	bne.n	80039b0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f006 f9a3 	bl	8009ce6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695a      	ldr	r2, [r3, #20]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f002 0208 	and.w	r2, r2, #8
 80039ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f003 fdc1 	bl	800753c <USB_ReadInterrupts>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c0:	2b80      	cmp	r3, #128	@ 0x80
 80039c2:	d123      	bne.n	8003a0c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039d0:	2301      	movs	r3, #1
 80039d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80039d4:	e014      	b.n	8003a00 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039da:	4613      	mov	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d105      	bne.n	80039fa <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	4619      	mov	r1, r3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fb0a 	bl	800400e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	3301      	adds	r3, #1
 80039fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	791b      	ldrb	r3, [r3, #4]
 8003a04:	461a      	mov	r2, r3
 8003a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d3e4      	bcc.n	80039d6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f003 fd93 	bl	800753c <USB_ReadInterrupts>
 8003a16:	4603      	mov	r3, r0
 8003a18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a20:	d13c      	bne.n	8003a9c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a22:	2301      	movs	r3, #1
 8003a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a26:	e02b      	b.n	8003a80 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	3318      	adds	r3, #24
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d115      	bne.n	8003a7a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a4e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	da12      	bge.n	8003a7a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	3317      	adds	r3, #23
 8003a64:	2201      	movs	r2, #1
 8003a66:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	4619      	mov	r1, r3
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 faca 	bl	800400e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	791b      	ldrb	r3, [r3, #4]
 8003a84:	461a      	mov	r2, r3
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d3cd      	bcc.n	8003a28 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f003 fd4b 	bl	800753c <USB_ReadInterrupts>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ab0:	d156      	bne.n	8003b60 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab6:	e045      	b.n	8003b44 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d12e      	bne.n	8003b3e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ae0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	da2b      	bge.n	8003b3e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003af2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d121      	bne.n	8003b3e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b3a:	6053      	str	r3, [r2, #4]
            break;
 8003b3c:	e008      	b.n	8003b50 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b40:	3301      	adds	r3, #1
 8003b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	791b      	ldrb	r3, [r3, #4]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d3b3      	bcc.n	8003ab8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003b5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f003 fce9 	bl	800753c <USB_ReadInterrupts>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b74:	d10a      	bne.n	8003b8c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f006 f944 	bl	8009e04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f003 fcd3 	bl	800753c <USB_ReadInterrupts>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d115      	bne.n	8003bcc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f006 f934 	bl	8009e20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6859      	ldr	r1, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	605a      	str	r2, [r3, #4]
 8003bc8:	e000      	b.n	8003bcc <HAL_PCD_IRQHandler+0x93c>
      return;
 8003bca:	bf00      	nop
    }
  }
}
 8003bcc:	3734      	adds	r7, #52	@ 0x34
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd90      	pop	{r4, r7, pc}

08003bd2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_PCD_SetAddress+0x1a>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e012      	b.n	8003c12 <HAL_PCD_SetAddress+0x40>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	78fa      	ldrb	r2, [r7, #3]
 8003bf8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	78fa      	ldrb	r2, [r7, #3]
 8003c00:	4611      	mov	r1, r2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f003 fc32 	bl	800746c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	4608      	mov	r0, r1
 8003c24:	4611      	mov	r1, r2
 8003c26:	461a      	mov	r2, r3
 8003c28:	4603      	mov	r3, r0
 8003c2a:	70fb      	strb	r3, [r7, #3]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	803b      	strh	r3, [r7, #0]
 8003c30:	4613      	mov	r3, r2
 8003c32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	da0f      	bge.n	8003c60 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	f003 020f 	and.w	r2, r3, #15
 8003c46:	4613      	mov	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	3310      	adds	r3, #16
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4413      	add	r3, r2
 8003c54:	3304      	adds	r3, #4
 8003c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	705a      	strb	r2, [r3, #1]
 8003c5e:	e00f      	b.n	8003c80 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	f003 020f 	and.w	r2, r3, #15
 8003c66:	4613      	mov	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	3304      	adds	r3, #4
 8003c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003c8c:	883b      	ldrh	r3, [r7, #0]
 8003c8e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	78ba      	ldrb	r2, [r7, #2]
 8003c9a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	785b      	ldrb	r3, [r3, #1]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d004      	beq.n	8003cae <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003cae:	78bb      	ldrb	r3, [r7, #2]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d102      	bne.n	8003cba <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_PCD_EP_Open+0xae>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e00e      	b.n	8003ce6 <HAL_PCD_EP_Open+0xcc>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68f9      	ldr	r1, [r7, #12]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f002 fdb2 	bl	8006840 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003ce4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	da0f      	bge.n	8003d22 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d02:	78fb      	ldrb	r3, [r7, #3]
 8003d04:	f003 020f 	and.w	r2, r3, #15
 8003d08:	4613      	mov	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	3310      	adds	r3, #16
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	4413      	add	r3, r2
 8003d16:	3304      	adds	r3, #4
 8003d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	705a      	strb	r2, [r3, #1]
 8003d20:	e00f      	b.n	8003d42 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d22:	78fb      	ldrb	r3, [r7, #3]
 8003d24:	f003 020f 	and.w	r2, r3, #15
 8003d28:	4613      	mov	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	4413      	add	r3, r2
 8003d38:	3304      	adds	r3, #4
 8003d3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	f003 030f 	and.w	r3, r3, #15
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_PCD_EP_Close+0x6e>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e00e      	b.n	8003d7a <HAL_PCD_EP_Close+0x8c>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68f9      	ldr	r1, [r7, #12]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f002 fdf0 	bl	8006950 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b086      	sub	sp, #24
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d92:	7afb      	ldrb	r3, [r7, #11]
 8003d94:	f003 020f 	and.w	r2, r3, #15
 8003d98:	4613      	mov	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	3304      	adds	r3, #4
 8003daa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dc4:	7afb      	ldrb	r3, [r7, #11]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	799b      	ldrb	r3, [r3, #6]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d102      	bne.n	8003dde <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	799b      	ldrb	r3, [r3, #6]
 8003de6:	461a      	mov	r2, r3
 8003de8:	6979      	ldr	r1, [r7, #20]
 8003dea:	f002 fe8d 	bl	8006b08 <USB_EPStartXfer>

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	f003 020f 	and.w	r2, r3, #15
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003e1a:	681b      	ldr	r3, [r3, #0]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	460b      	mov	r3, r1
 8003e36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e38:	7afb      	ldrb	r3, [r7, #11]
 8003e3a:	f003 020f 	and.w	r2, r3, #15
 8003e3e:	4613      	mov	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	3310      	adds	r3, #16
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2201      	movs	r2, #1
 8003e66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e68:	7afb      	ldrb	r3, [r7, #11]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	799b      	ldrb	r3, [r3, #6]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d102      	bne.n	8003e82 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	799b      	ldrb	r3, [r3, #6]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	6979      	ldr	r1, [r7, #20]
 8003e8e:	f002 fe3b 	bl	8006b08 <USB_EPStartXfer>

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	7912      	ldrb	r2, [r2, #4]
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e04f      	b.n	8003f5a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003eba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	da0f      	bge.n	8003ee2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	f003 020f 	and.w	r2, r3, #15
 8003ec8:	4613      	mov	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	3310      	adds	r3, #16
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	705a      	strb	r2, [r3, #1]
 8003ee0:	e00d      	b.n	8003efe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ee2:	78fa      	ldrb	r2, [r7, #3]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_PCD_EP_SetStall+0x82>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e01d      	b.n	8003f5a <HAL_PCD_EP_SetStall+0xbe>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68f9      	ldr	r1, [r7, #12]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f003 f9c9 	bl	80072c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d109      	bne.n	8003f50 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	7999      	ldrb	r1, [r3, #6]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f003 fbba 	bl	80076c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	7912      	ldrb	r2, [r2, #4]
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d901      	bls.n	8003f80 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e042      	b.n	8004006 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	da0f      	bge.n	8003fa8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	f003 020f 	and.w	r2, r3, #15
 8003f8e:	4613      	mov	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	3310      	adds	r3, #16
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	705a      	strb	r2, [r3, #1]
 8003fa6:	e00f      	b.n	8003fc8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fa8:	78fb      	ldrb	r3, [r7, #3]
 8003faa:	f003 020f 	and.w	r2, r3, #15
 8003fae:	4613      	mov	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_PCD_EP_ClrStall+0x86>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e00e      	b.n	8004006 <HAL_PCD_EP_ClrStall+0xa4>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68f9      	ldr	r1, [r7, #12]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f003 f9d2 	bl	80073a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	460b      	mov	r3, r1
 8004018:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800401a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800401e:	2b00      	cmp	r3, #0
 8004020:	da0c      	bge.n	800403c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	f003 020f 	and.w	r2, r3, #15
 8004028:	4613      	mov	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	3310      	adds	r3, #16
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4413      	add	r3, r2
 8004036:	3304      	adds	r3, #4
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	e00c      	b.n	8004056 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	f003 020f 	and.w	r2, r3, #15
 8004042:	4613      	mov	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	3304      	adds	r3, #4
 8004054:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68f9      	ldr	r1, [r7, #12]
 800405c:	4618      	mov	r0, r3
 800405e:	f002 fff1 	bl	8007044 <USB_EPStopXfer>
 8004062:	4603      	mov	r3, r0
 8004064:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004066:	7afb      	ldrb	r3, [r7, #11]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08a      	sub	sp, #40	@ 0x28
 8004074:	af02      	add	r7, sp, #8
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	3310      	adds	r3, #16
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	4413      	add	r3, r2
 8004094:	3304      	adds	r3, #4
 8004096:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d901      	bls.n	80040a8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e06b      	b.n	8004180 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d902      	bls.n	80040c4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	3303      	adds	r3, #3
 80040c8:	089b      	lsrs	r3, r3, #2
 80040ca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040cc:	e02a      	b.n	8004124 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d902      	bls.n	80040ea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3303      	adds	r3, #3
 80040ee:	089b      	lsrs	r3, r3, #2
 80040f0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	68d9      	ldr	r1, [r3, #12]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	4603      	mov	r3, r0
 8004106:	6978      	ldr	r0, [r7, #20]
 8004108:	f003 f846 	bl	8007198 <USB_WritePacket>

    ep->xfer_buff  += len;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	441a      	add	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	695a      	ldr	r2, [r3, #20]
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	441a      	add	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	429a      	cmp	r2, r3
 8004138:	d809      	bhi.n	800414e <PCD_WriteEmptyTxFifo+0xde>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004142:	429a      	cmp	r2, r3
 8004144:	d203      	bcs.n	800414e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1bf      	bne.n	80040ce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	429a      	cmp	r2, r3
 8004158:	d811      	bhi.n	800417e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	f003 030f 	and.w	r3, r3, #15
 8004160:	2201      	movs	r2, #1
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800416e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	43db      	mvns	r3, r3
 8004174:	6939      	ldr	r1, [r7, #16]
 8004176:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800417a:	4013      	ands	r3, r2
 800417c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3720      	adds	r7, #32
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	333c      	adds	r3, #60	@ 0x3c
 80041a0:	3304      	adds	r3, #4
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	799b      	ldrb	r3, [r3, #6]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d17b      	bne.n	80042b6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d015      	beq.n	80041f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	4a61      	ldr	r2, [pc, #388]	@ (8004350 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	f240 80b9 	bls.w	8004344 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80b3 	beq.w	8004344 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ea:	461a      	mov	r2, r3
 80041ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041f0:	6093      	str	r3, [r2, #8]
 80041f2:	e0a7      	b.n	8004344 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800420a:	461a      	mov	r2, r3
 800420c:	2320      	movs	r3, #32
 800420e:	6093      	str	r3, [r2, #8]
 8004210:	e098      	b.n	8004344 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004218:	2b00      	cmp	r3, #0
 800421a:	f040 8093 	bne.w	8004344 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	4a4b      	ldr	r2, [pc, #300]	@ (8004350 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d90f      	bls.n	8004246 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800423c:	461a      	mov	r2, r3
 800423e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004242:	6093      	str	r3, [r2, #8]
 8004244:	e07e      	b.n	8004344 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	4613      	mov	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	4413      	add	r3, r2
 8004258:	3304      	adds	r3, #4
 800425a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a1a      	ldr	r2, [r3, #32]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	0159      	lsls	r1, r3, #5
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	440b      	add	r3, r1
 8004268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004272:	1ad2      	subs	r2, r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d114      	bne.n	80042a8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004290:	461a      	mov	r2, r3
 8004292:	2101      	movs	r1, #1
 8004294:	f003 fa16 	bl	80076c4 <USB_EP0_OutStart>
 8004298:	e006      	b.n	80042a8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	441a      	add	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	4619      	mov	r1, r3
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f005 fce4 	bl	8009c7c <HAL_PCD_DataOutStageCallback>
 80042b4:	e046      	b.n	8004344 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	4a26      	ldr	r2, [pc, #152]	@ (8004354 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d124      	bne.n	8004308 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d4:	461a      	mov	r2, r3
 80042d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042da:	6093      	str	r3, [r2, #8]
 80042dc:	e032      	b.n	8004344 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042f4:	461a      	mov	r2, r3
 80042f6:	2320      	movs	r3, #32
 80042f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	4619      	mov	r1, r3
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f005 fcbb 	bl	8009c7c <HAL_PCD_DataOutStageCallback>
 8004306:	e01d      	b.n	8004344 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d114      	bne.n	8004338 <PCD_EP_OutXfrComplete_int+0x1b0>
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	4613      	mov	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d108      	bne.n	8004338 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004330:	461a      	mov	r2, r3
 8004332:	2100      	movs	r1, #0
 8004334:	f003 f9c6 	bl	80076c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	4619      	mov	r1, r3
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f005 fc9c 	bl	8009c7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3720      	adds	r7, #32
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	4f54300a 	.word	0x4f54300a
 8004354:	4f54310a 	.word	0x4f54310a

08004358 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	333c      	adds	r3, #60	@ 0x3c
 8004370:	3304      	adds	r3, #4
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4a15      	ldr	r2, [pc, #84]	@ (80043e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d90e      	bls.n	80043ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004394:	2b00      	cmp	r3, #0
 8004396:	d009      	beq.n	80043ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a4:	461a      	mov	r2, r3
 80043a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f005 fc53 	bl	8009c58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4a0a      	ldr	r2, [pc, #40]	@ (80043e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d90c      	bls.n	80043d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	799b      	ldrb	r3, [r3, #6]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d108      	bne.n	80043d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043cc:	461a      	mov	r2, r3
 80043ce:	2101      	movs	r1, #1
 80043d0:	f003 f978 	bl	80076c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	4f54300a 	.word	0x4f54300a

080043e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	70fb      	strb	r3, [r7, #3]
 80043f0:	4613      	mov	r3, r2
 80043f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d107      	bne.n	8004412 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004402:	883b      	ldrh	r3, [r7, #0]
 8004404:	0419      	lsls	r1, r3, #16
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	430a      	orrs	r2, r1
 800440e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004410:	e028      	b.n	8004464 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004418:	0c1b      	lsrs	r3, r3, #16
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	4413      	add	r3, r2
 800441e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004420:	2300      	movs	r3, #0
 8004422:	73fb      	strb	r3, [r7, #15]
 8004424:	e00d      	b.n	8004442 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	3340      	adds	r3, #64	@ 0x40
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	0c1b      	lsrs	r3, r3, #16
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	4413      	add	r3, r2
 800443a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	3301      	adds	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
 8004442:	7bfa      	ldrb	r2, [r7, #15]
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	3b01      	subs	r3, #1
 8004448:	429a      	cmp	r2, r3
 800444a:	d3ec      	bcc.n	8004426 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800444c:	883b      	ldrh	r3, [r7, #0]
 800444e:	0418      	lsls	r0, r3, #16
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6819      	ldr	r1, [r3, #0]
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	3b01      	subs	r3, #1
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	4302      	orrs	r2, r0
 800445c:	3340      	adds	r3, #64	@ 0x40
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	460b      	mov	r3, r1
 800447c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	887a      	ldrh	r2, [r7, #2]
 8004484:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e267      	b.n	800498e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d075      	beq.n	80045b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044ca:	4b88      	ldr	r3, [pc, #544]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 030c 	and.w	r3, r3, #12
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d00c      	beq.n	80044f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044d6:	4b85      	ldr	r3, [pc, #532]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d112      	bne.n	8004508 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044e2:	4b82      	ldr	r3, [pc, #520]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044ee:	d10b      	bne.n	8004508 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f0:	4b7e      	ldr	r3, [pc, #504]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d05b      	beq.n	80045b4 <HAL_RCC_OscConfig+0x108>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d157      	bne.n	80045b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e242      	b.n	800498e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004510:	d106      	bne.n	8004520 <HAL_RCC_OscConfig+0x74>
 8004512:	4b76      	ldr	r3, [pc, #472]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a75      	ldr	r2, [pc, #468]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 8004518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	e01d      	b.n	800455c <HAL_RCC_OscConfig+0xb0>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004528:	d10c      	bne.n	8004544 <HAL_RCC_OscConfig+0x98>
 800452a:	4b70      	ldr	r3, [pc, #448]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a6f      	ldr	r2, [pc, #444]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 8004530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	4b6d      	ldr	r3, [pc, #436]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a6c      	ldr	r2, [pc, #432]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 800453c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	e00b      	b.n	800455c <HAL_RCC_OscConfig+0xb0>
 8004544:	4b69      	ldr	r3, [pc, #420]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a68      	ldr	r2, [pc, #416]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 800454a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	4b66      	ldr	r3, [pc, #408]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a65      	ldr	r2, [pc, #404]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 8004556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800455a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d013      	beq.n	800458c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004564:	f7fd f8a8 	bl	80016b8 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800456c:	f7fd f8a4 	bl	80016b8 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b64      	cmp	r3, #100	@ 0x64
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e207      	b.n	800498e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457e:	4b5b      	ldr	r3, [pc, #364]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0xc0>
 800458a:	e014      	b.n	80045b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458c:	f7fd f894 	bl	80016b8 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004594:	f7fd f890 	bl	80016b8 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b64      	cmp	r3, #100	@ 0x64
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e1f3      	b.n	800498e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a6:	4b51      	ldr	r3, [pc, #324]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f0      	bne.n	8004594 <HAL_RCC_OscConfig+0xe8>
 80045b2:	e000      	b.n	80045b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d063      	beq.n	800468a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045c2:	4b4a      	ldr	r3, [pc, #296]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00b      	beq.n	80045e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ce:	4b47      	ldr	r3, [pc, #284]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d11c      	bne.n	8004614 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045da:	4b44      	ldr	r3, [pc, #272]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d116      	bne.n	8004614 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045e6:	4b41      	ldr	r3, [pc, #260]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <HAL_RCC_OscConfig+0x152>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d001      	beq.n	80045fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e1c7      	b.n	800498e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fe:	4b3b      	ldr	r3, [pc, #236]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	4937      	ldr	r1, [pc, #220]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 800460e:	4313      	orrs	r3, r2
 8004610:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004612:	e03a      	b.n	800468a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d020      	beq.n	800465e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800461c:	4b34      	ldr	r3, [pc, #208]	@ (80046f0 <HAL_RCC_OscConfig+0x244>)
 800461e:	2201      	movs	r2, #1
 8004620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004622:	f7fd f849 	bl	80016b8 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800462a:	f7fd f845 	bl	80016b8 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e1a8      	b.n	800498e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463c:	4b2b      	ldr	r3, [pc, #172]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0f0      	beq.n	800462a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004648:	4b28      	ldr	r3, [pc, #160]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	4925      	ldr	r1, [pc, #148]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 8004658:	4313      	orrs	r3, r2
 800465a:	600b      	str	r3, [r1, #0]
 800465c:	e015      	b.n	800468a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800465e:	4b24      	ldr	r3, [pc, #144]	@ (80046f0 <HAL_RCC_OscConfig+0x244>)
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004664:	f7fd f828 	bl	80016b8 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800466c:	f7fd f824 	bl	80016b8 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e187      	b.n	800498e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467e:	4b1b      	ldr	r3, [pc, #108]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d036      	beq.n	8004704 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d016      	beq.n	80046cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800469e:	4b15      	ldr	r3, [pc, #84]	@ (80046f4 <HAL_RCC_OscConfig+0x248>)
 80046a0:	2201      	movs	r2, #1
 80046a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a4:	f7fd f808 	bl	80016b8 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ac:	f7fd f804 	bl	80016b8 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e167      	b.n	800498e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046be:	4b0b      	ldr	r3, [pc, #44]	@ (80046ec <HAL_RCC_OscConfig+0x240>)
 80046c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0x200>
 80046ca:	e01b      	b.n	8004704 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046cc:	4b09      	ldr	r3, [pc, #36]	@ (80046f4 <HAL_RCC_OscConfig+0x248>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d2:	f7fc fff1 	bl	80016b8 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d8:	e00e      	b.n	80046f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046da:	f7fc ffed 	bl	80016b8 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d907      	bls.n	80046f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e150      	b.n	800498e <HAL_RCC_OscConfig+0x4e2>
 80046ec:	40023800 	.word	0x40023800
 80046f0:	42470000 	.word	0x42470000
 80046f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f8:	4b88      	ldr	r3, [pc, #544]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 80046fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1ea      	bne.n	80046da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 8097 	beq.w	8004840 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004712:	2300      	movs	r3, #0
 8004714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004716:	4b81      	ldr	r3, [pc, #516]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10f      	bne.n	8004742 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004722:	2300      	movs	r3, #0
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	4b7d      	ldr	r3, [pc, #500]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	4a7c      	ldr	r2, [pc, #496]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 800472c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004730:	6413      	str	r3, [r2, #64]	@ 0x40
 8004732:	4b7a      	ldr	r3, [pc, #488]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800473a:	60bb      	str	r3, [r7, #8]
 800473c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800473e:	2301      	movs	r3, #1
 8004740:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004742:	4b77      	ldr	r3, [pc, #476]	@ (8004920 <HAL_RCC_OscConfig+0x474>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800474a:	2b00      	cmp	r3, #0
 800474c:	d118      	bne.n	8004780 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800474e:	4b74      	ldr	r3, [pc, #464]	@ (8004920 <HAL_RCC_OscConfig+0x474>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a73      	ldr	r2, [pc, #460]	@ (8004920 <HAL_RCC_OscConfig+0x474>)
 8004754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800475a:	f7fc ffad 	bl	80016b8 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004762:	f7fc ffa9 	bl	80016b8 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e10c      	b.n	800498e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004774:	4b6a      	ldr	r3, [pc, #424]	@ (8004920 <HAL_RCC_OscConfig+0x474>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0f0      	beq.n	8004762 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d106      	bne.n	8004796 <HAL_RCC_OscConfig+0x2ea>
 8004788:	4b64      	ldr	r3, [pc, #400]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 800478a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478c:	4a63      	ldr	r2, [pc, #396]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 800478e:	f043 0301 	orr.w	r3, r3, #1
 8004792:	6713      	str	r3, [r2, #112]	@ 0x70
 8004794:	e01c      	b.n	80047d0 <HAL_RCC_OscConfig+0x324>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	2b05      	cmp	r3, #5
 800479c:	d10c      	bne.n	80047b8 <HAL_RCC_OscConfig+0x30c>
 800479e:	4b5f      	ldr	r3, [pc, #380]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 80047a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a2:	4a5e      	ldr	r2, [pc, #376]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 80047a4:	f043 0304 	orr.w	r3, r3, #4
 80047a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80047aa:	4b5c      	ldr	r3, [pc, #368]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 80047ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ae:	4a5b      	ldr	r2, [pc, #364]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 80047b0:	f043 0301 	orr.w	r3, r3, #1
 80047b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80047b6:	e00b      	b.n	80047d0 <HAL_RCC_OscConfig+0x324>
 80047b8:	4b58      	ldr	r3, [pc, #352]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047bc:	4a57      	ldr	r2, [pc, #348]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 80047be:	f023 0301 	bic.w	r3, r3, #1
 80047c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80047c4:	4b55      	ldr	r3, [pc, #340]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 80047c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c8:	4a54      	ldr	r2, [pc, #336]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 80047ca:	f023 0304 	bic.w	r3, r3, #4
 80047ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d015      	beq.n	8004804 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d8:	f7fc ff6e 	bl	80016b8 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047de:	e00a      	b.n	80047f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e0:	f7fc ff6a 	bl	80016b8 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e0cb      	b.n	800498e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f6:	4b49      	ldr	r3, [pc, #292]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0ee      	beq.n	80047e0 <HAL_RCC_OscConfig+0x334>
 8004802:	e014      	b.n	800482e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004804:	f7fc ff58 	bl	80016b8 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800480a:	e00a      	b.n	8004822 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480c:	f7fc ff54 	bl	80016b8 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800481a:	4293      	cmp	r3, r2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e0b5      	b.n	800498e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004822:	4b3e      	ldr	r3, [pc, #248]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1ee      	bne.n	800480c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800482e:	7dfb      	ldrb	r3, [r7, #23]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d105      	bne.n	8004840 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004834:	4b39      	ldr	r3, [pc, #228]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 8004836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004838:	4a38      	ldr	r2, [pc, #224]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 800483a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800483e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 80a1 	beq.w	800498c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800484a:	4b34      	ldr	r3, [pc, #208]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 030c 	and.w	r3, r3, #12
 8004852:	2b08      	cmp	r3, #8
 8004854:	d05c      	beq.n	8004910 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d141      	bne.n	80048e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800485e:	4b31      	ldr	r3, [pc, #196]	@ (8004924 <HAL_RCC_OscConfig+0x478>)
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004864:	f7fc ff28 	bl	80016b8 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800486c:	f7fc ff24 	bl	80016b8 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e087      	b.n	800498e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487e:	4b27      	ldr	r3, [pc, #156]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f0      	bne.n	800486c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	69da      	ldr	r2, [r3, #28]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004898:	019b      	lsls	r3, r3, #6
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a0:	085b      	lsrs	r3, r3, #1
 80048a2:	3b01      	subs	r3, #1
 80048a4:	041b      	lsls	r3, r3, #16
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ac:	061b      	lsls	r3, r3, #24
 80048ae:	491b      	ldr	r1, [pc, #108]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004924 <HAL_RCC_OscConfig+0x478>)
 80048b6:	2201      	movs	r2, #1
 80048b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ba:	f7fc fefd 	bl	80016b8 <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c2:	f7fc fef9 	bl	80016b8 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e05c      	b.n	800498e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d4:	4b11      	ldr	r3, [pc, #68]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0f0      	beq.n	80048c2 <HAL_RCC_OscConfig+0x416>
 80048e0:	e054      	b.n	800498c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e2:	4b10      	ldr	r3, [pc, #64]	@ (8004924 <HAL_RCC_OscConfig+0x478>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e8:	f7fc fee6 	bl	80016b8 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f0:	f7fc fee2 	bl	80016b8 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e045      	b.n	800498e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004902:	4b06      	ldr	r3, [pc, #24]	@ (800491c <HAL_RCC_OscConfig+0x470>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f0      	bne.n	80048f0 <HAL_RCC_OscConfig+0x444>
 800490e:	e03d      	b.n	800498c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d107      	bne.n	8004928 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e038      	b.n	800498e <HAL_RCC_OscConfig+0x4e2>
 800491c:	40023800 	.word	0x40023800
 8004920:	40007000 	.word	0x40007000
 8004924:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004928:	4b1b      	ldr	r3, [pc, #108]	@ (8004998 <HAL_RCC_OscConfig+0x4ec>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d028      	beq.n	8004988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004940:	429a      	cmp	r2, r3
 8004942:	d121      	bne.n	8004988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800494e:	429a      	cmp	r2, r3
 8004950:	d11a      	bne.n	8004988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004958:	4013      	ands	r3, r2
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800495e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004960:	4293      	cmp	r3, r2
 8004962:	d111      	bne.n	8004988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496e:	085b      	lsrs	r3, r3, #1
 8004970:	3b01      	subs	r3, #1
 8004972:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004974:	429a      	cmp	r2, r3
 8004976:	d107      	bne.n	8004988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004982:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004984:	429a      	cmp	r2, r3
 8004986:	d001      	beq.n	800498c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	40023800 	.word	0x40023800

0800499c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0cc      	b.n	8004b4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049b0:	4b68      	ldr	r3, [pc, #416]	@ (8004b54 <HAL_RCC_ClockConfig+0x1b8>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d90c      	bls.n	80049d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049be:	4b65      	ldr	r3, [pc, #404]	@ (8004b54 <HAL_RCC_ClockConfig+0x1b8>)
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c6:	4b63      	ldr	r3, [pc, #396]	@ (8004b54 <HAL_RCC_ClockConfig+0x1b8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d001      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0b8      	b.n	8004b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d020      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049f0:	4b59      	ldr	r3, [pc, #356]	@ (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	4a58      	ldr	r2, [pc, #352]	@ (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d005      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a08:	4b53      	ldr	r3, [pc, #332]	@ (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	4a52      	ldr	r2, [pc, #328]	@ (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a14:	4b50      	ldr	r3, [pc, #320]	@ (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	494d      	ldr	r1, [pc, #308]	@ (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d044      	beq.n	8004abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d107      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a3a:	4b47      	ldr	r3, [pc, #284]	@ (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d119      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e07f      	b.n	8004b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d003      	beq.n	8004a5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d107      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a5a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d109      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e06f      	b.n	8004b4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e067      	b.n	8004b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a7a:	4b37      	ldr	r3, [pc, #220]	@ (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f023 0203 	bic.w	r2, r3, #3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	4934      	ldr	r1, [pc, #208]	@ (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a8c:	f7fc fe14 	bl	80016b8 <HAL_GetTick>
 8004a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a92:	e00a      	b.n	8004aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a94:	f7fc fe10 	bl	80016b8 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e04f      	b.n	8004b4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 020c 	and.w	r2, r3, #12
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d1eb      	bne.n	8004a94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004abc:	4b25      	ldr	r3, [pc, #148]	@ (8004b54 <HAL_RCC_ClockConfig+0x1b8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d20c      	bcs.n	8004ae4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aca:	4b22      	ldr	r3, [pc, #136]	@ (8004b54 <HAL_RCC_ClockConfig+0x1b8>)
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad2:	4b20      	ldr	r3, [pc, #128]	@ (8004b54 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d001      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e032      	b.n	8004b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d008      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004af0:	4b19      	ldr	r3, [pc, #100]	@ (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	4916      	ldr	r1, [pc, #88]	@ (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d009      	beq.n	8004b22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b0e:	4b12      	ldr	r3, [pc, #72]	@ (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	490e      	ldr	r1, [pc, #56]	@ (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b22:	f000 f821 	bl	8004b68 <HAL_RCC_GetSysClockFreq>
 8004b26:	4602      	mov	r2, r0
 8004b28:	4b0b      	ldr	r3, [pc, #44]	@ (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	091b      	lsrs	r3, r3, #4
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	490a      	ldr	r1, [pc, #40]	@ (8004b5c <HAL_RCC_ClockConfig+0x1c0>)
 8004b34:	5ccb      	ldrb	r3, [r1, r3]
 8004b36:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3a:	4a09      	ldr	r2, [pc, #36]	@ (8004b60 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b3e:	4b09      	ldr	r3, [pc, #36]	@ (8004b64 <HAL_RCC_ClockConfig+0x1c8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fc fd74 	bl	8001630 <HAL_InitTick>

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40023c00 	.word	0x40023c00
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	0800aba4 	.word	0x0800aba4
 8004b60:	20000000 	.word	0x20000000
 8004b64:	20000004 	.word	0x20000004

08004b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b6c:	b094      	sub	sp, #80	@ 0x50
 8004b6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b80:	4b79      	ldr	r3, [pc, #484]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 030c 	and.w	r3, r3, #12
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d00d      	beq.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x40>
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	f200 80e1 	bhi.w	8004d54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <HAL_RCC_GetSysClockFreq+0x34>
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d003      	beq.n	8004ba2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b9a:	e0db      	b.n	8004d54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b9c:	4b73      	ldr	r3, [pc, #460]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ba0:	e0db      	b.n	8004d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ba2:	4b73      	ldr	r3, [pc, #460]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ba6:	e0d8      	b.n	8004d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bb0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bb2:	4b6d      	ldr	r3, [pc, #436]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d063      	beq.n	8004c86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	099b      	lsrs	r3, r3, #6
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bda:	4622      	mov	r2, r4
 8004bdc:	462b      	mov	r3, r5
 8004bde:	f04f 0000 	mov.w	r0, #0
 8004be2:	f04f 0100 	mov.w	r1, #0
 8004be6:	0159      	lsls	r1, r3, #5
 8004be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bec:	0150      	lsls	r0, r2, #5
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4621      	mov	r1, r4
 8004bf4:	1a51      	subs	r1, r2, r1
 8004bf6:	6139      	str	r1, [r7, #16]
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c0c:	4659      	mov	r1, fp
 8004c0e:	018b      	lsls	r3, r1, #6
 8004c10:	4651      	mov	r1, sl
 8004c12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c16:	4651      	mov	r1, sl
 8004c18:	018a      	lsls	r2, r1, #6
 8004c1a:	4651      	mov	r1, sl
 8004c1c:	ebb2 0801 	subs.w	r8, r2, r1
 8004c20:	4659      	mov	r1, fp
 8004c22:	eb63 0901 	sbc.w	r9, r3, r1
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c3a:	4690      	mov	r8, r2
 8004c3c:	4699      	mov	r9, r3
 8004c3e:	4623      	mov	r3, r4
 8004c40:	eb18 0303 	adds.w	r3, r8, r3
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	462b      	mov	r3, r5
 8004c48:	eb49 0303 	adc.w	r3, r9, r3
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c5a:	4629      	mov	r1, r5
 8004c5c:	024b      	lsls	r3, r1, #9
 8004c5e:	4621      	mov	r1, r4
 8004c60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c64:	4621      	mov	r1, r4
 8004c66:	024a      	lsls	r2, r1, #9
 8004c68:	4610      	mov	r0, r2
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c6e:	2200      	movs	r2, #0
 8004c70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c78:	f7fb fb02 	bl	8000280 <__aeabi_uldivmod>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4613      	mov	r3, r2
 8004c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c84:	e058      	b.n	8004d38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c86:	4b38      	ldr	r3, [pc, #224]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	099b      	lsrs	r3, r3, #6
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	4618      	mov	r0, r3
 8004c90:	4611      	mov	r1, r2
 8004c92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c96:	623b      	str	r3, [r7, #32]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	464b      	mov	r3, r9
 8004ca4:	f04f 0000 	mov.w	r0, #0
 8004ca8:	f04f 0100 	mov.w	r1, #0
 8004cac:	0159      	lsls	r1, r3, #5
 8004cae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cb2:	0150      	lsls	r0, r2, #5
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4641      	mov	r1, r8
 8004cba:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cd8:	ebb2 040a 	subs.w	r4, r2, sl
 8004cdc:	eb63 050b 	sbc.w	r5, r3, fp
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	00eb      	lsls	r3, r5, #3
 8004cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cee:	00e2      	lsls	r2, r4, #3
 8004cf0:	4614      	mov	r4, r2
 8004cf2:	461d      	mov	r5, r3
 8004cf4:	4643      	mov	r3, r8
 8004cf6:	18e3      	adds	r3, r4, r3
 8004cf8:	603b      	str	r3, [r7, #0]
 8004cfa:	464b      	mov	r3, r9
 8004cfc:	eb45 0303 	adc.w	r3, r5, r3
 8004d00:	607b      	str	r3, [r7, #4]
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d0e:	4629      	mov	r1, r5
 8004d10:	028b      	lsls	r3, r1, #10
 8004d12:	4621      	mov	r1, r4
 8004d14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d18:	4621      	mov	r1, r4
 8004d1a:	028a      	lsls	r2, r1, #10
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4619      	mov	r1, r3
 8004d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d22:	2200      	movs	r2, #0
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	61fa      	str	r2, [r7, #28]
 8004d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d2c:	f7fb faa8 	bl	8000280 <__aeabi_uldivmod>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4613      	mov	r3, r2
 8004d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d38:	4b0b      	ldr	r3, [pc, #44]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	0c1b      	lsrs	r3, r3, #16
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	3301      	adds	r3, #1
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d52:	e002      	b.n	8004d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d54:	4b05      	ldr	r3, [pc, #20]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3750      	adds	r7, #80	@ 0x50
 8004d60:	46bd      	mov	sp, r7
 8004d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	00f42400 	.word	0x00f42400
 8004d70:	007a1200 	.word	0x007a1200

08004d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d78:	4b03      	ldr	r3, [pc, #12]	@ (8004d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	20000000 	.word	0x20000000

08004d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e041      	b.n	8004e22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fc fab6 	bl	8001324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4610      	mov	r0, r2
 8004dcc:	f000 fdc4 	bl	8005958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b082      	sub	sp, #8
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e041      	b.n	8004ec0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d106      	bne.n	8004e56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f839 	bl	8004ec8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	3304      	adds	r3, #4
 8004e66:	4619      	mov	r1, r3
 8004e68:	4610      	mov	r0, r2
 8004e6a:	f000 fd75 	bl	8005958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d109      	bne.n	8004f00 <HAL_TIM_PWM_Start+0x24>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	bf14      	ite	ne
 8004ef8:	2301      	movne	r3, #1
 8004efa:	2300      	moveq	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	e022      	b.n	8004f46 <HAL_TIM_PWM_Start+0x6a>
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d109      	bne.n	8004f1a <HAL_TIM_PWM_Start+0x3e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	bf14      	ite	ne
 8004f12:	2301      	movne	r3, #1
 8004f14:	2300      	moveq	r3, #0
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	e015      	b.n	8004f46 <HAL_TIM_PWM_Start+0x6a>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d109      	bne.n	8004f34 <HAL_TIM_PWM_Start+0x58>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	bf14      	ite	ne
 8004f2c:	2301      	movne	r3, #1
 8004f2e:	2300      	moveq	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	e008      	b.n	8004f46 <HAL_TIM_PWM_Start+0x6a>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	bf14      	ite	ne
 8004f40:	2301      	movne	r3, #1
 8004f42:	2300      	moveq	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e07c      	b.n	8005048 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d104      	bne.n	8004f5e <HAL_TIM_PWM_Start+0x82>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f5c:	e013      	b.n	8004f86 <HAL_TIM_PWM_Start+0xaa>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d104      	bne.n	8004f6e <HAL_TIM_PWM_Start+0x92>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f6c:	e00b      	b.n	8004f86 <HAL_TIM_PWM_Start+0xaa>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d104      	bne.n	8004f7e <HAL_TIM_PWM_Start+0xa2>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f7c:	e003      	b.n	8004f86 <HAL_TIM_PWM_Start+0xaa>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2202      	movs	r2, #2
 8004f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	6839      	ldr	r1, [r7, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 ffd8 	bl	8005f44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a2d      	ldr	r2, [pc, #180]	@ (8005050 <HAL_TIM_PWM_Start+0x174>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d004      	beq.n	8004fa8 <HAL_TIM_PWM_Start+0xcc>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a2c      	ldr	r2, [pc, #176]	@ (8005054 <HAL_TIM_PWM_Start+0x178>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d101      	bne.n	8004fac <HAL_TIM_PWM_Start+0xd0>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <HAL_TIM_PWM_Start+0xd2>
 8004fac:	2300      	movs	r3, #0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d007      	beq.n	8004fc2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a22      	ldr	r2, [pc, #136]	@ (8005050 <HAL_TIM_PWM_Start+0x174>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d022      	beq.n	8005012 <HAL_TIM_PWM_Start+0x136>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fd4:	d01d      	beq.n	8005012 <HAL_TIM_PWM_Start+0x136>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1f      	ldr	r2, [pc, #124]	@ (8005058 <HAL_TIM_PWM_Start+0x17c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d018      	beq.n	8005012 <HAL_TIM_PWM_Start+0x136>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1d      	ldr	r2, [pc, #116]	@ (800505c <HAL_TIM_PWM_Start+0x180>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d013      	beq.n	8005012 <HAL_TIM_PWM_Start+0x136>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1c      	ldr	r2, [pc, #112]	@ (8005060 <HAL_TIM_PWM_Start+0x184>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00e      	beq.n	8005012 <HAL_TIM_PWM_Start+0x136>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a16      	ldr	r2, [pc, #88]	@ (8005054 <HAL_TIM_PWM_Start+0x178>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d009      	beq.n	8005012 <HAL_TIM_PWM_Start+0x136>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a18      	ldr	r2, [pc, #96]	@ (8005064 <HAL_TIM_PWM_Start+0x188>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d004      	beq.n	8005012 <HAL_TIM_PWM_Start+0x136>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a16      	ldr	r2, [pc, #88]	@ (8005068 <HAL_TIM_PWM_Start+0x18c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d111      	bne.n	8005036 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2b06      	cmp	r3, #6
 8005022:	d010      	beq.n	8005046 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0201 	orr.w	r2, r2, #1
 8005032:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005034:	e007      	b.n	8005046 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0201 	orr.w	r2, r2, #1
 8005044:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40010000 	.word	0x40010000
 8005054:	40010400 	.word	0x40010400
 8005058:	40000400 	.word	0x40000400
 800505c:	40000800 	.word	0x40000800
 8005060:	40000c00 	.word	0x40000c00
 8005064:	40014000 	.word	0x40014000
 8005068:	40001800 	.word	0x40001800

0800506c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d109      	bne.n	8005094 <HAL_TIM_PWM_Start_IT+0x28>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	bf14      	ite	ne
 800508c:	2301      	movne	r3, #1
 800508e:	2300      	moveq	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	e022      	b.n	80050da <HAL_TIM_PWM_Start_IT+0x6e>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b04      	cmp	r3, #4
 8005098:	d109      	bne.n	80050ae <HAL_TIM_PWM_Start_IT+0x42>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	bf14      	ite	ne
 80050a6:	2301      	movne	r3, #1
 80050a8:	2300      	moveq	r3, #0
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	e015      	b.n	80050da <HAL_TIM_PWM_Start_IT+0x6e>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d109      	bne.n	80050c8 <HAL_TIM_PWM_Start_IT+0x5c>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b01      	cmp	r3, #1
 80050be:	bf14      	ite	ne
 80050c0:	2301      	movne	r3, #1
 80050c2:	2300      	moveq	r3, #0
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	e008      	b.n	80050da <HAL_TIM_PWM_Start_IT+0x6e>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	bf14      	ite	ne
 80050d4:	2301      	movne	r3, #1
 80050d6:	2300      	moveq	r3, #0
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e0c7      	b.n	8005272 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d104      	bne.n	80050f2 <HAL_TIM_PWM_Start_IT+0x86>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050f0:	e013      	b.n	800511a <HAL_TIM_PWM_Start_IT+0xae>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d104      	bne.n	8005102 <HAL_TIM_PWM_Start_IT+0x96>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005100:	e00b      	b.n	800511a <HAL_TIM_PWM_Start_IT+0xae>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b08      	cmp	r3, #8
 8005106:	d104      	bne.n	8005112 <HAL_TIM_PWM_Start_IT+0xa6>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005110:	e003      	b.n	800511a <HAL_TIM_PWM_Start_IT+0xae>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2202      	movs	r2, #2
 8005116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b0c      	cmp	r3, #12
 800511e:	d841      	bhi.n	80051a4 <HAL_TIM_PWM_Start_IT+0x138>
 8005120:	a201      	add	r2, pc, #4	@ (adr r2, 8005128 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005126:	bf00      	nop
 8005128:	0800515d 	.word	0x0800515d
 800512c:	080051a5 	.word	0x080051a5
 8005130:	080051a5 	.word	0x080051a5
 8005134:	080051a5 	.word	0x080051a5
 8005138:	0800516f 	.word	0x0800516f
 800513c:	080051a5 	.word	0x080051a5
 8005140:	080051a5 	.word	0x080051a5
 8005144:	080051a5 	.word	0x080051a5
 8005148:	08005181 	.word	0x08005181
 800514c:	080051a5 	.word	0x080051a5
 8005150:	080051a5 	.word	0x080051a5
 8005154:	080051a5 	.word	0x080051a5
 8005158:	08005193 	.word	0x08005193
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0202 	orr.w	r2, r2, #2
 800516a:	60da      	str	r2, [r3, #12]
      break;
 800516c:	e01d      	b.n	80051aa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 0204 	orr.w	r2, r2, #4
 800517c:	60da      	str	r2, [r3, #12]
      break;
 800517e:	e014      	b.n	80051aa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0208 	orr.w	r2, r2, #8
 800518e:	60da      	str	r2, [r3, #12]
      break;
 8005190:	e00b      	b.n	80051aa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0210 	orr.w	r2, r2, #16
 80051a0:	60da      	str	r2, [r3, #12]
      break;
 80051a2:	e002      	b.n	80051aa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	73fb      	strb	r3, [r7, #15]
      break;
 80051a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d15f      	bne.n	8005270 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2201      	movs	r2, #1
 80051b6:	6839      	ldr	r1, [r7, #0]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fec3 	bl	8005f44 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a2e      	ldr	r2, [pc, #184]	@ (800527c <HAL_TIM_PWM_Start_IT+0x210>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d004      	beq.n	80051d2 <HAL_TIM_PWM_Start_IT+0x166>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005280 <HAL_TIM_PWM_Start_IT+0x214>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d101      	bne.n	80051d6 <HAL_TIM_PWM_Start_IT+0x16a>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <HAL_TIM_PWM_Start_IT+0x16c>
 80051d6:	2300      	movs	r3, #0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d007      	beq.n	80051ec <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051ea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a22      	ldr	r2, [pc, #136]	@ (800527c <HAL_TIM_PWM_Start_IT+0x210>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d022      	beq.n	800523c <HAL_TIM_PWM_Start_IT+0x1d0>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051fe:	d01d      	beq.n	800523c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a1f      	ldr	r2, [pc, #124]	@ (8005284 <HAL_TIM_PWM_Start_IT+0x218>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d018      	beq.n	800523c <HAL_TIM_PWM_Start_IT+0x1d0>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a1e      	ldr	r2, [pc, #120]	@ (8005288 <HAL_TIM_PWM_Start_IT+0x21c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d013      	beq.n	800523c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a1c      	ldr	r2, [pc, #112]	@ (800528c <HAL_TIM_PWM_Start_IT+0x220>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00e      	beq.n	800523c <HAL_TIM_PWM_Start_IT+0x1d0>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a17      	ldr	r2, [pc, #92]	@ (8005280 <HAL_TIM_PWM_Start_IT+0x214>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d009      	beq.n	800523c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a18      	ldr	r2, [pc, #96]	@ (8005290 <HAL_TIM_PWM_Start_IT+0x224>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d004      	beq.n	800523c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a17      	ldr	r2, [pc, #92]	@ (8005294 <HAL_TIM_PWM_Start_IT+0x228>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d111      	bne.n	8005260 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b06      	cmp	r3, #6
 800524c:	d010      	beq.n	8005270 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f042 0201 	orr.w	r2, r2, #1
 800525c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525e:	e007      	b.n	8005270 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0201 	orr.w	r2, r2, #1
 800526e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005270:	7bfb      	ldrb	r3, [r7, #15]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40010000 	.word	0x40010000
 8005280:	40010400 	.word	0x40010400
 8005284:	40000400 	.word	0x40000400
 8005288:	40000800 	.word	0x40000800
 800528c:	40000c00 	.word	0x40000c00
 8005290:	40014000 	.word	0x40014000
 8005294:	40001800 	.word	0x40001800

08005298 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b0c      	cmp	r3, #12
 80052aa:	d841      	bhi.n	8005330 <HAL_TIM_PWM_Stop_IT+0x98>
 80052ac:	a201      	add	r2, pc, #4	@ (adr r2, 80052b4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052e9 	.word	0x080052e9
 80052b8:	08005331 	.word	0x08005331
 80052bc:	08005331 	.word	0x08005331
 80052c0:	08005331 	.word	0x08005331
 80052c4:	080052fb 	.word	0x080052fb
 80052c8:	08005331 	.word	0x08005331
 80052cc:	08005331 	.word	0x08005331
 80052d0:	08005331 	.word	0x08005331
 80052d4:	0800530d 	.word	0x0800530d
 80052d8:	08005331 	.word	0x08005331
 80052dc:	08005331 	.word	0x08005331
 80052e0:	08005331 	.word	0x08005331
 80052e4:	0800531f 	.word	0x0800531f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0202 	bic.w	r2, r2, #2
 80052f6:	60da      	str	r2, [r3, #12]
      break;
 80052f8:	e01d      	b.n	8005336 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0204 	bic.w	r2, r2, #4
 8005308:	60da      	str	r2, [r3, #12]
      break;
 800530a:	e014      	b.n	8005336 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0208 	bic.w	r2, r2, #8
 800531a:	60da      	str	r2, [r3, #12]
      break;
 800531c:	e00b      	b.n	8005336 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0210 	bic.w	r2, r2, #16
 800532c:	60da      	str	r2, [r3, #12]
      break;
 800532e:	e002      	b.n	8005336 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	73fb      	strb	r3, [r7, #15]
      break;
 8005334:	bf00      	nop
  }

  if (status == HAL_OK)
 8005336:	7bfb      	ldrb	r3, [r7, #15]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d161      	bne.n	8005400 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2200      	movs	r2, #0
 8005342:	6839      	ldr	r1, [r7, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	f000 fdfd 	bl	8005f44 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a2f      	ldr	r2, [pc, #188]	@ (800540c <HAL_TIM_PWM_Stop_IT+0x174>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d004      	beq.n	800535e <HAL_TIM_PWM_Stop_IT+0xc6>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a2d      	ldr	r2, [pc, #180]	@ (8005410 <HAL_TIM_PWM_Stop_IT+0x178>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d101      	bne.n	8005362 <HAL_TIM_PWM_Stop_IT+0xca>
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <HAL_TIM_PWM_Stop_IT+0xcc>
 8005362:	2300      	movs	r3, #0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d017      	beq.n	8005398 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6a1a      	ldr	r2, [r3, #32]
 800536e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005372:	4013      	ands	r3, r2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10f      	bne.n	8005398 <HAL_TIM_PWM_Stop_IT+0x100>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6a1a      	ldr	r2, [r3, #32]
 800537e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005382:	4013      	ands	r3, r2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d107      	bne.n	8005398 <HAL_TIM_PWM_Stop_IT+0x100>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005396:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6a1a      	ldr	r2, [r3, #32]
 800539e:	f241 1311 	movw	r3, #4369	@ 0x1111
 80053a2:	4013      	ands	r3, r2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10f      	bne.n	80053c8 <HAL_TIM_PWM_Stop_IT+0x130>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6a1a      	ldr	r2, [r3, #32]
 80053ae:	f240 4344 	movw	r3, #1092	@ 0x444
 80053b2:	4013      	ands	r3, r2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d107      	bne.n	80053c8 <HAL_TIM_PWM_Stop_IT+0x130>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0201 	bic.w	r2, r2, #1
 80053c6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d104      	bne.n	80053d8 <HAL_TIM_PWM_Stop_IT+0x140>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053d6:	e013      	b.n	8005400 <HAL_TIM_PWM_Stop_IT+0x168>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d104      	bne.n	80053e8 <HAL_TIM_PWM_Stop_IT+0x150>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053e6:	e00b      	b.n	8005400 <HAL_TIM_PWM_Stop_IT+0x168>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d104      	bne.n	80053f8 <HAL_TIM_PWM_Stop_IT+0x160>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053f6:	e003      	b.n	8005400 <HAL_TIM_PWM_Stop_IT+0x168>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8005400:	7bfb      	ldrb	r3, [r7, #15]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	40010000 	.word	0x40010000
 8005410:	40010400 	.word	0x40010400

08005414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d020      	beq.n	8005478 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01b      	beq.n	8005478 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f06f 0202 	mvn.w	r2, #2
 8005448:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fa65 	bl	800592e <HAL_TIM_IC_CaptureCallback>
 8005464:	e005      	b.n	8005472 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fa57 	bl	800591a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7fb fab5 	bl	80009dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d020      	beq.n	80054c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01b      	beq.n	80054c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f06f 0204 	mvn.w	r2, #4
 8005494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2202      	movs	r2, #2
 800549a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fa3f 	bl	800592e <HAL_TIM_IC_CaptureCallback>
 80054b0:	e005      	b.n	80054be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fa31 	bl	800591a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7fb fa8f 	bl	80009dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d020      	beq.n	8005510 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01b      	beq.n	8005510 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f06f 0208 	mvn.w	r2, #8
 80054e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2204      	movs	r2, #4
 80054e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fa19 	bl	800592e <HAL_TIM_IC_CaptureCallback>
 80054fc:	e005      	b.n	800550a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fa0b 	bl	800591a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7fb fa69 	bl	80009dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f003 0310 	and.w	r3, r3, #16
 8005516:	2b00      	cmp	r3, #0
 8005518:	d020      	beq.n	800555c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01b      	beq.n	800555c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f06f 0210 	mvn.w	r2, #16
 800552c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2208      	movs	r2, #8
 8005532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f9f3 	bl	800592e <HAL_TIM_IC_CaptureCallback>
 8005548:	e005      	b.n	8005556 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f9e5 	bl	800591a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7fb fa43 	bl	80009dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00c      	beq.n	8005580 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d007      	beq.n	8005580 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0201 	mvn.w	r2, #1
 8005578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f9c3 	bl	8005906 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00c      	beq.n	80055a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005590:	2b00      	cmp	r3, #0
 8005592:	d007      	beq.n	80055a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800559c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fdce 	bl	8006140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00c      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f9bd 	bl	8005942 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00c      	beq.n	80055ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d007      	beq.n	80055ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0220 	mvn.w	r2, #32
 80055e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fda0 	bl	800612c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055ec:	bf00      	nop
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800560a:	2b01      	cmp	r3, #1
 800560c:	d101      	bne.n	8005612 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800560e:	2302      	movs	r3, #2
 8005610:	e0ae      	b.n	8005770 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b0c      	cmp	r3, #12
 800561e:	f200 809f 	bhi.w	8005760 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005622:	a201      	add	r2, pc, #4	@ (adr r2, 8005628 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	0800565d 	.word	0x0800565d
 800562c:	08005761 	.word	0x08005761
 8005630:	08005761 	.word	0x08005761
 8005634:	08005761 	.word	0x08005761
 8005638:	0800569d 	.word	0x0800569d
 800563c:	08005761 	.word	0x08005761
 8005640:	08005761 	.word	0x08005761
 8005644:	08005761 	.word	0x08005761
 8005648:	080056df 	.word	0x080056df
 800564c:	08005761 	.word	0x08005761
 8005650:	08005761 	.word	0x08005761
 8005654:	08005761 	.word	0x08005761
 8005658:	0800571f 	.word	0x0800571f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fa24 	bl	8005ab0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699a      	ldr	r2, [r3, #24]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0208 	orr.w	r2, r2, #8
 8005676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0204 	bic.w	r2, r2, #4
 8005686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6999      	ldr	r1, [r3, #24]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	619a      	str	r2, [r3, #24]
      break;
 800569a:	e064      	b.n	8005766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fa74 	bl	8005b90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6999      	ldr	r1, [r3, #24]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	021a      	lsls	r2, r3, #8
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	619a      	str	r2, [r3, #24]
      break;
 80056dc:	e043      	b.n	8005766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fac9 	bl	8005c7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69da      	ldr	r2, [r3, #28]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0208 	orr.w	r2, r2, #8
 80056f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0204 	bic.w	r2, r2, #4
 8005708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69d9      	ldr	r1, [r3, #28]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	61da      	str	r2, [r3, #28]
      break;
 800571c:	e023      	b.n	8005766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68b9      	ldr	r1, [r7, #8]
 8005724:	4618      	mov	r0, r3
 8005726:	f000 fb1d 	bl	8005d64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69da      	ldr	r2, [r3, #28]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69d9      	ldr	r1, [r3, #28]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	021a      	lsls	r2, r3, #8
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	61da      	str	r2, [r3, #28]
      break;
 800575e:	e002      	b.n	8005766 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	75fb      	strb	r3, [r7, #23]
      break;
 8005764:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800576e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800578c:	2b01      	cmp	r3, #1
 800578e:	d101      	bne.n	8005794 <HAL_TIM_ConfigClockSource+0x1c>
 8005790:	2302      	movs	r3, #2
 8005792:	e0b4      	b.n	80058fe <HAL_TIM_ConfigClockSource+0x186>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80057b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057cc:	d03e      	beq.n	800584c <HAL_TIM_ConfigClockSource+0xd4>
 80057ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057d2:	f200 8087 	bhi.w	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 80057d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057da:	f000 8086 	beq.w	80058ea <HAL_TIM_ConfigClockSource+0x172>
 80057de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057e2:	d87f      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 80057e4:	2b70      	cmp	r3, #112	@ 0x70
 80057e6:	d01a      	beq.n	800581e <HAL_TIM_ConfigClockSource+0xa6>
 80057e8:	2b70      	cmp	r3, #112	@ 0x70
 80057ea:	d87b      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 80057ec:	2b60      	cmp	r3, #96	@ 0x60
 80057ee:	d050      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x11a>
 80057f0:	2b60      	cmp	r3, #96	@ 0x60
 80057f2:	d877      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 80057f4:	2b50      	cmp	r3, #80	@ 0x50
 80057f6:	d03c      	beq.n	8005872 <HAL_TIM_ConfigClockSource+0xfa>
 80057f8:	2b50      	cmp	r3, #80	@ 0x50
 80057fa:	d873      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 80057fc:	2b40      	cmp	r3, #64	@ 0x40
 80057fe:	d058      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x13a>
 8005800:	2b40      	cmp	r3, #64	@ 0x40
 8005802:	d86f      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005804:	2b30      	cmp	r3, #48	@ 0x30
 8005806:	d064      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005808:	2b30      	cmp	r3, #48	@ 0x30
 800580a:	d86b      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 800580c:	2b20      	cmp	r3, #32
 800580e:	d060      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005810:	2b20      	cmp	r3, #32
 8005812:	d867      	bhi.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005814:	2b00      	cmp	r3, #0
 8005816:	d05c      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005818:	2b10      	cmp	r3, #16
 800581a:	d05a      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0x15a>
 800581c:	e062      	b.n	80058e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800582e:	f000 fb69 	bl	8005f04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005840:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	609a      	str	r2, [r3, #8]
      break;
 800584a:	e04f      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800585c:	f000 fb52 	bl	8005f04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689a      	ldr	r2, [r3, #8]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800586e:	609a      	str	r2, [r3, #8]
      break;
 8005870:	e03c      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800587e:	461a      	mov	r2, r3
 8005880:	f000 fac6 	bl	8005e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2150      	movs	r1, #80	@ 0x50
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fb1f 	bl	8005ece <TIM_ITRx_SetConfig>
      break;
 8005890:	e02c      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800589e:	461a      	mov	r2, r3
 80058a0:	f000 fae5 	bl	8005e6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2160      	movs	r1, #96	@ 0x60
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fb0f 	bl	8005ece <TIM_ITRx_SetConfig>
      break;
 80058b0:	e01c      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058be:	461a      	mov	r2, r3
 80058c0:	f000 faa6 	bl	8005e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2140      	movs	r1, #64	@ 0x40
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 faff 	bl	8005ece <TIM_ITRx_SetConfig>
      break;
 80058d0:	e00c      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4619      	mov	r1, r3
 80058dc:	4610      	mov	r0, r2
 80058de:	f000 faf6 	bl	8005ece <TIM_ITRx_SetConfig>
      break;
 80058e2:	e003      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]
      break;
 80058e8:	e000      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800590e:	bf00      	nop
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a46      	ldr	r2, [pc, #280]	@ (8005a84 <TIM_Base_SetConfig+0x12c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d013      	beq.n	8005998 <TIM_Base_SetConfig+0x40>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005976:	d00f      	beq.n	8005998 <TIM_Base_SetConfig+0x40>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a43      	ldr	r2, [pc, #268]	@ (8005a88 <TIM_Base_SetConfig+0x130>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00b      	beq.n	8005998 <TIM_Base_SetConfig+0x40>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a42      	ldr	r2, [pc, #264]	@ (8005a8c <TIM_Base_SetConfig+0x134>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d007      	beq.n	8005998 <TIM_Base_SetConfig+0x40>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a41      	ldr	r2, [pc, #260]	@ (8005a90 <TIM_Base_SetConfig+0x138>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_Base_SetConfig+0x40>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a40      	ldr	r2, [pc, #256]	@ (8005a94 <TIM_Base_SetConfig+0x13c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d108      	bne.n	80059aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800599e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a35      	ldr	r2, [pc, #212]	@ (8005a84 <TIM_Base_SetConfig+0x12c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d02b      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059b8:	d027      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a32      	ldr	r2, [pc, #200]	@ (8005a88 <TIM_Base_SetConfig+0x130>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d023      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a31      	ldr	r2, [pc, #196]	@ (8005a8c <TIM_Base_SetConfig+0x134>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d01f      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a30      	ldr	r2, [pc, #192]	@ (8005a90 <TIM_Base_SetConfig+0x138>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d01b      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a2f      	ldr	r2, [pc, #188]	@ (8005a94 <TIM_Base_SetConfig+0x13c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d017      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a2e      	ldr	r2, [pc, #184]	@ (8005a98 <TIM_Base_SetConfig+0x140>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d013      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a2d      	ldr	r2, [pc, #180]	@ (8005a9c <TIM_Base_SetConfig+0x144>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00f      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a2c      	ldr	r2, [pc, #176]	@ (8005aa0 <TIM_Base_SetConfig+0x148>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00b      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a2b      	ldr	r2, [pc, #172]	@ (8005aa4 <TIM_Base_SetConfig+0x14c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d007      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a2a      	ldr	r2, [pc, #168]	@ (8005aa8 <TIM_Base_SetConfig+0x150>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d003      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a29      	ldr	r2, [pc, #164]	@ (8005aac <TIM_Base_SetConfig+0x154>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d108      	bne.n	8005a1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a10      	ldr	r2, [pc, #64]	@ (8005a84 <TIM_Base_SetConfig+0x12c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d003      	beq.n	8005a50 <TIM_Base_SetConfig+0xf8>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a12      	ldr	r2, [pc, #72]	@ (8005a94 <TIM_Base_SetConfig+0x13c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d103      	bne.n	8005a58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d105      	bne.n	8005a76 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f023 0201 	bic.w	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	611a      	str	r2, [r3, #16]
  }
}
 8005a76:	bf00      	nop
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40010000 	.word	0x40010000
 8005a88:	40000400 	.word	0x40000400
 8005a8c:	40000800 	.word	0x40000800
 8005a90:	40000c00 	.word	0x40000c00
 8005a94:	40010400 	.word	0x40010400
 8005a98:	40014000 	.word	0x40014000
 8005a9c:	40014400 	.word	0x40014400
 8005aa0:	40014800 	.word	0x40014800
 8005aa4:	40001800 	.word	0x40001800
 8005aa8:	40001c00 	.word	0x40001c00
 8005aac:	40002000 	.word	0x40002000

08005ab0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	f023 0201 	bic.w	r2, r3, #1
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0303 	bic.w	r3, r3, #3
 8005ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f023 0302 	bic.w	r3, r3, #2
 8005af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a20      	ldr	r2, [pc, #128]	@ (8005b88 <TIM_OC1_SetConfig+0xd8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d003      	beq.n	8005b14 <TIM_OC1_SetConfig+0x64>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8005b8c <TIM_OC1_SetConfig+0xdc>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d10c      	bne.n	8005b2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f023 0308 	bic.w	r3, r3, #8
 8005b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f023 0304 	bic.w	r3, r3, #4
 8005b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a15      	ldr	r2, [pc, #84]	@ (8005b88 <TIM_OC1_SetConfig+0xd8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d003      	beq.n	8005b3e <TIM_OC1_SetConfig+0x8e>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a14      	ldr	r2, [pc, #80]	@ (8005b8c <TIM_OC1_SetConfig+0xdc>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d111      	bne.n	8005b62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	621a      	str	r2, [r3, #32]
}
 8005b7c:	bf00      	nop
 8005b7e:	371c      	adds	r7, #28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	40010000 	.word	0x40010000
 8005b8c:	40010400 	.word	0x40010400

08005b90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	f023 0210 	bic.w	r2, r3, #16
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	021b      	lsls	r3, r3, #8
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 0320 	bic.w	r3, r3, #32
 8005bda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a22      	ldr	r2, [pc, #136]	@ (8005c74 <TIM_OC2_SetConfig+0xe4>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <TIM_OC2_SetConfig+0x68>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a21      	ldr	r2, [pc, #132]	@ (8005c78 <TIM_OC2_SetConfig+0xe8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d10d      	bne.n	8005c14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	011b      	lsls	r3, r3, #4
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a17      	ldr	r2, [pc, #92]	@ (8005c74 <TIM_OC2_SetConfig+0xe4>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_OC2_SetConfig+0x94>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a16      	ldr	r2, [pc, #88]	@ (8005c78 <TIM_OC2_SetConfig+0xe8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d113      	bne.n	8005c4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	621a      	str	r2, [r3, #32]
}
 8005c66:	bf00      	nop
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	40010000 	.word	0x40010000
 8005c78:	40010400 	.word	0x40010400

08005c7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0303 	bic.w	r3, r3, #3
 8005cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	021b      	lsls	r3, r3, #8
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a21      	ldr	r2, [pc, #132]	@ (8005d5c <TIM_OC3_SetConfig+0xe0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d003      	beq.n	8005ce2 <TIM_OC3_SetConfig+0x66>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a20      	ldr	r2, [pc, #128]	@ (8005d60 <TIM_OC3_SetConfig+0xe4>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d10d      	bne.n	8005cfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	021b      	lsls	r3, r3, #8
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a16      	ldr	r2, [pc, #88]	@ (8005d5c <TIM_OC3_SetConfig+0xe0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d003      	beq.n	8005d0e <TIM_OC3_SetConfig+0x92>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a15      	ldr	r2, [pc, #84]	@ (8005d60 <TIM_OC3_SetConfig+0xe4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d113      	bne.n	8005d36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	011b      	lsls	r3, r3, #4
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	621a      	str	r2, [r3, #32]
}
 8005d50:	bf00      	nop
 8005d52:	371c      	adds	r7, #28
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	40010000 	.word	0x40010000
 8005d60:	40010400 	.word	0x40010400

08005d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	021b      	lsls	r3, r3, #8
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	031b      	lsls	r3, r3, #12
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a12      	ldr	r2, [pc, #72]	@ (8005e08 <TIM_OC4_SetConfig+0xa4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d003      	beq.n	8005dcc <TIM_OC4_SetConfig+0x68>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a11      	ldr	r2, [pc, #68]	@ (8005e0c <TIM_OC4_SetConfig+0xa8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d109      	bne.n	8005de0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	019b      	lsls	r3, r3, #6
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	621a      	str	r2, [r3, #32]
}
 8005dfa:	bf00      	nop
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40010000 	.word	0x40010000
 8005e0c:	40010400 	.word	0x40010400

08005e10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	f023 0201 	bic.w	r2, r3, #1
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f023 030a 	bic.w	r3, r3, #10
 8005e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	621a      	str	r2, [r3, #32]
}
 8005e62:	bf00      	nop
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b087      	sub	sp, #28
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	f023 0210 	bic.w	r2, r3, #16
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	031b      	lsls	r3, r3, #12
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005eaa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	621a      	str	r2, [r3, #32]
}
 8005ec2:	bf00      	nop
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b085      	sub	sp, #20
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ee4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	f043 0307 	orr.w	r3, r3, #7
 8005ef0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	609a      	str	r2, [r3, #8]
}
 8005ef8:	bf00      	nop
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	021a      	lsls	r2, r3, #8
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	431a      	orrs	r2, r3
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	609a      	str	r2, [r3, #8]
}
 8005f38:	bf00      	nop
 8005f3a:	371c      	adds	r7, #28
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f003 031f 	and.w	r3, r3, #31
 8005f56:	2201      	movs	r2, #1
 8005f58:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a1a      	ldr	r2, [r3, #32]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	43db      	mvns	r3, r3
 8005f66:	401a      	ands	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a1a      	ldr	r2, [r3, #32]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f003 031f 	and.w	r3, r3, #31
 8005f76:	6879      	ldr	r1, [r7, #4]
 8005f78:	fa01 f303 	lsl.w	r3, r1, r3
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	621a      	str	r2, [r3, #32]
}
 8005f82:	bf00      	nop
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
	...

08005f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d101      	bne.n	8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	e05a      	b.n	800605e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a21      	ldr	r2, [pc, #132]	@ (800606c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d022      	beq.n	8006032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff4:	d01d      	beq.n	8006032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8006070 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d018      	beq.n	8006032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1b      	ldr	r2, [pc, #108]	@ (8006074 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d013      	beq.n	8006032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a1a      	ldr	r2, [pc, #104]	@ (8006078 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00e      	beq.n	8006032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a18      	ldr	r2, [pc, #96]	@ (800607c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d009      	beq.n	8006032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a17      	ldr	r2, [pc, #92]	@ (8006080 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d004      	beq.n	8006032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a15      	ldr	r2, [pc, #84]	@ (8006084 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d10c      	bne.n	800604c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	4313      	orrs	r3, r2
 8006042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40010000 	.word	0x40010000
 8006070:	40000400 	.word	0x40000400
 8006074:	40000800 	.word	0x40000800
 8006078:	40000c00 	.word	0x40000c00
 800607c:	40010400 	.word	0x40010400
 8006080:	40014000 	.word	0x40014000
 8006084:	40001800 	.word	0x40001800

08006088 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e03d      	b.n	8006120 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006154:	b084      	sub	sp, #16
 8006156:	b580      	push	{r7, lr}
 8006158:	b084      	sub	sp, #16
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	f107 001c 	add.w	r0, r7, #28
 8006162:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006166:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800616a:	2b01      	cmp	r3, #1
 800616c:	d123      	bne.n	80061b6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006172:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006182:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006196:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800619a:	2b01      	cmp	r3, #1
 800619c:	d105      	bne.n	80061aa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f001 fae8 	bl	8007780 <USB_CoreReset>
 80061b0:	4603      	mov	r3, r0
 80061b2:	73fb      	strb	r3, [r7, #15]
 80061b4:	e01b      	b.n	80061ee <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f001 fadc 	bl	8007780 <USB_CoreReset>
 80061c8:	4603      	mov	r3, r0
 80061ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d106      	bne.n	80061e2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	639a      	str	r2, [r3, #56]	@ 0x38
 80061e0:	e005      	b.n	80061ee <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061ee:	7fbb      	ldrb	r3, [r7, #30]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d10b      	bne.n	800620c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f043 0206 	orr.w	r2, r3, #6
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f043 0220 	orr.w	r2, r3, #32
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006218:	b004      	add	sp, #16
 800621a:	4770      	bx	lr

0800621c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	4613      	mov	r3, r2
 8006228:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800622a:	79fb      	ldrb	r3, [r7, #7]
 800622c:	2b02      	cmp	r3, #2
 800622e:	d165      	bne.n	80062fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4a41      	ldr	r2, [pc, #260]	@ (8006338 <USB_SetTurnaroundTime+0x11c>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d906      	bls.n	8006246 <USB_SetTurnaroundTime+0x2a>
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	4a40      	ldr	r2, [pc, #256]	@ (800633c <USB_SetTurnaroundTime+0x120>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d202      	bcs.n	8006246 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006240:	230f      	movs	r3, #15
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	e062      	b.n	800630c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	4a3c      	ldr	r2, [pc, #240]	@ (800633c <USB_SetTurnaroundTime+0x120>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d306      	bcc.n	800625c <USB_SetTurnaroundTime+0x40>
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	4a3b      	ldr	r2, [pc, #236]	@ (8006340 <USB_SetTurnaroundTime+0x124>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d202      	bcs.n	800625c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006256:	230e      	movs	r3, #14
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	e057      	b.n	800630c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	4a38      	ldr	r2, [pc, #224]	@ (8006340 <USB_SetTurnaroundTime+0x124>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d306      	bcc.n	8006272 <USB_SetTurnaroundTime+0x56>
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	4a37      	ldr	r2, [pc, #220]	@ (8006344 <USB_SetTurnaroundTime+0x128>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d202      	bcs.n	8006272 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800626c:	230d      	movs	r3, #13
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	e04c      	b.n	800630c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	4a33      	ldr	r2, [pc, #204]	@ (8006344 <USB_SetTurnaroundTime+0x128>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d306      	bcc.n	8006288 <USB_SetTurnaroundTime+0x6c>
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	4a32      	ldr	r2, [pc, #200]	@ (8006348 <USB_SetTurnaroundTime+0x12c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d802      	bhi.n	8006288 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006282:	230c      	movs	r3, #12
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	e041      	b.n	800630c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	4a2f      	ldr	r2, [pc, #188]	@ (8006348 <USB_SetTurnaroundTime+0x12c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d906      	bls.n	800629e <USB_SetTurnaroundTime+0x82>
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	4a2e      	ldr	r2, [pc, #184]	@ (800634c <USB_SetTurnaroundTime+0x130>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d802      	bhi.n	800629e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006298:	230b      	movs	r3, #11
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	e036      	b.n	800630c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	4a2a      	ldr	r2, [pc, #168]	@ (800634c <USB_SetTurnaroundTime+0x130>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d906      	bls.n	80062b4 <USB_SetTurnaroundTime+0x98>
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	4a29      	ldr	r2, [pc, #164]	@ (8006350 <USB_SetTurnaroundTime+0x134>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d802      	bhi.n	80062b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80062ae:	230a      	movs	r3, #10
 80062b0:	617b      	str	r3, [r7, #20]
 80062b2:	e02b      	b.n	800630c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4a26      	ldr	r2, [pc, #152]	@ (8006350 <USB_SetTurnaroundTime+0x134>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d906      	bls.n	80062ca <USB_SetTurnaroundTime+0xae>
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	4a25      	ldr	r2, [pc, #148]	@ (8006354 <USB_SetTurnaroundTime+0x138>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d202      	bcs.n	80062ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80062c4:	2309      	movs	r3, #9
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	e020      	b.n	800630c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	4a21      	ldr	r2, [pc, #132]	@ (8006354 <USB_SetTurnaroundTime+0x138>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d306      	bcc.n	80062e0 <USB_SetTurnaroundTime+0xc4>
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	4a20      	ldr	r2, [pc, #128]	@ (8006358 <USB_SetTurnaroundTime+0x13c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d802      	bhi.n	80062e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80062da:	2308      	movs	r3, #8
 80062dc:	617b      	str	r3, [r7, #20]
 80062de:	e015      	b.n	800630c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	4a1d      	ldr	r2, [pc, #116]	@ (8006358 <USB_SetTurnaroundTime+0x13c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d906      	bls.n	80062f6 <USB_SetTurnaroundTime+0xda>
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4a1c      	ldr	r2, [pc, #112]	@ (800635c <USB_SetTurnaroundTime+0x140>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d202      	bcs.n	80062f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80062f0:	2307      	movs	r3, #7
 80062f2:	617b      	str	r3, [r7, #20]
 80062f4:	e00a      	b.n	800630c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80062f6:	2306      	movs	r3, #6
 80062f8:	617b      	str	r3, [r7, #20]
 80062fa:	e007      	b.n	800630c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80062fc:	79fb      	ldrb	r3, [r7, #7]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d102      	bne.n	8006308 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006302:	2309      	movs	r3, #9
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	e001      	b.n	800630c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006308:	2309      	movs	r3, #9
 800630a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	029b      	lsls	r3, r3, #10
 8006320:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006324:	431a      	orrs	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	371c      	adds	r7, #28
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	00d8acbf 	.word	0x00d8acbf
 800633c:	00e4e1c0 	.word	0x00e4e1c0
 8006340:	00f42400 	.word	0x00f42400
 8006344:	01067380 	.word	0x01067380
 8006348:	011a499f 	.word	0x011a499f
 800634c:	01312cff 	.word	0x01312cff
 8006350:	014ca43f 	.word	0x014ca43f
 8006354:	016e3600 	.word	0x016e3600
 8006358:	01a6ab1f 	.word	0x01a6ab1f
 800635c:	01e84800 	.word	0x01e84800

08006360 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f043 0201 	orr.w	r2, r3, #1
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f023 0201 	bic.w	r2, r3, #1
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063c0:	78fb      	ldrb	r3, [r7, #3]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d115      	bne.n	80063f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80063d2:	200a      	movs	r0, #10
 80063d4:	f7fb f97c 	bl	80016d0 <HAL_Delay>
      ms += 10U;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	330a      	adds	r3, #10
 80063dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f001 f93f 	bl	8007662 <USB_GetMode>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d01e      	beq.n	8006428 <USB_SetCurrentMode+0x84>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2bc7      	cmp	r3, #199	@ 0xc7
 80063ee:	d9f0      	bls.n	80063d2 <USB_SetCurrentMode+0x2e>
 80063f0:	e01a      	b.n	8006428 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063f2:	78fb      	ldrb	r3, [r7, #3]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d115      	bne.n	8006424 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006404:	200a      	movs	r0, #10
 8006406:	f7fb f963 	bl	80016d0 <HAL_Delay>
      ms += 10U;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	330a      	adds	r3, #10
 800640e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f001 f926 	bl	8007662 <USB_GetMode>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <USB_SetCurrentMode+0x84>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006420:	d9f0      	bls.n	8006404 <USB_SetCurrentMode+0x60>
 8006422:	e001      	b.n	8006428 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e005      	b.n	8006434 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2bc8      	cmp	r3, #200	@ 0xc8
 800642c:	d101      	bne.n	8006432 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e000      	b.n	8006434 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800643c:	b084      	sub	sp, #16
 800643e:	b580      	push	{r7, lr}
 8006440:	b086      	sub	sp, #24
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800644a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006456:	2300      	movs	r3, #0
 8006458:	613b      	str	r3, [r7, #16]
 800645a:	e009      	b.n	8006470 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	3340      	adds	r3, #64	@ 0x40
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	2200      	movs	r2, #0
 8006468:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	3301      	adds	r3, #1
 800646e:	613b      	str	r3, [r7, #16]
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	2b0e      	cmp	r3, #14
 8006474:	d9f2      	bls.n	800645c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006476:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800647a:	2b00      	cmp	r3, #0
 800647c:	d11c      	bne.n	80064b8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800648c:	f043 0302 	orr.w	r3, r3, #2
 8006490:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006496:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ae:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80064b6:	e00b      	b.n	80064d0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064bc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064d6:	461a      	mov	r2, r3
 80064d8:	2300      	movs	r3, #0
 80064da:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064dc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d10d      	bne.n	8006500 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d104      	bne.n	80064f6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064ec:	2100      	movs	r1, #0
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f968 	bl	80067c4 <USB_SetDevSpeed>
 80064f4:	e008      	b.n	8006508 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064f6:	2101      	movs	r1, #1
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f963 	bl	80067c4 <USB_SetDevSpeed>
 80064fe:	e003      	b.n	8006508 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006500:	2103      	movs	r1, #3
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f95e 	bl	80067c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006508:	2110      	movs	r1, #16
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f8fa 	bl	8006704 <USB_FlushTxFifo>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f924 	bl	8006768 <USB_FlushRxFifo>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006530:	461a      	mov	r2, r3
 8006532:	2300      	movs	r3, #0
 8006534:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800653c:	461a      	mov	r2, r3
 800653e:	2300      	movs	r3, #0
 8006540:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006548:	461a      	mov	r2, r3
 800654a:	2300      	movs	r3, #0
 800654c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800654e:	2300      	movs	r3, #0
 8006550:	613b      	str	r3, [r7, #16]
 8006552:	e043      	b.n	80065dc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006566:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800656a:	d118      	bne.n	800659e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10a      	bne.n	8006588 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800657e:	461a      	mov	r2, r3
 8006580:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	e013      	b.n	80065b0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006594:	461a      	mov	r2, r3
 8006596:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800659a:	6013      	str	r3, [r2, #0]
 800659c:	e008      	b.n	80065b0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065aa:	461a      	mov	r2, r3
 80065ac:	2300      	movs	r3, #0
 80065ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065bc:	461a      	mov	r2, r3
 80065be:	2300      	movs	r3, #0
 80065c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ce:	461a      	mov	r2, r3
 80065d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	3301      	adds	r3, #1
 80065da:	613b      	str	r3, [r7, #16]
 80065dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80065e0:	461a      	mov	r2, r3
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d3b5      	bcc.n	8006554 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065e8:	2300      	movs	r3, #0
 80065ea:	613b      	str	r3, [r7, #16]
 80065ec:	e043      	b.n	8006676 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006600:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006604:	d118      	bne.n	8006638 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10a      	bne.n	8006622 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4413      	add	r3, r2
 8006614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006618:	461a      	mov	r2, r3
 800661a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	e013      	b.n	800664a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800662e:	461a      	mov	r2, r3
 8006630:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	e008      	b.n	800664a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006644:	461a      	mov	r2, r3
 8006646:	2300      	movs	r3, #0
 8006648:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006656:	461a      	mov	r2, r3
 8006658:	2300      	movs	r3, #0
 800665a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006668:	461a      	mov	r2, r3
 800666a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800666e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	3301      	adds	r3, #1
 8006674:	613b      	str	r3, [r7, #16]
 8006676:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800667a:	461a      	mov	r2, r3
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	4293      	cmp	r3, r2
 8006680:	d3b5      	bcc.n	80065ee <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006690:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006694:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80066a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d105      	bne.n	80066b8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	f043 0210 	orr.w	r2, r3, #16
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	699a      	ldr	r2, [r3, #24]
 80066bc:	4b10      	ldr	r3, [pc, #64]	@ (8006700 <USB_DevInit+0x2c4>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d005      	beq.n	80066d8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	f043 0208 	orr.w	r2, r3, #8
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d107      	bne.n	80066f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066e8:	f043 0304 	orr.w	r3, r3, #4
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3718      	adds	r7, #24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066fc:	b004      	add	sp, #16
 80066fe:	4770      	bx	lr
 8006700:	803c3800 	.word	0x803c3800

08006704 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	3301      	adds	r3, #1
 8006716:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800671e:	d901      	bls.n	8006724 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e01b      	b.n	800675c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	daf2      	bge.n	8006712 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	019b      	lsls	r3, r3, #6
 8006734:	f043 0220 	orr.w	r2, r3, #32
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3301      	adds	r3, #1
 8006740:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006748:	d901      	bls.n	800674e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e006      	b.n	800675c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f003 0320 	and.w	r3, r3, #32
 8006756:	2b20      	cmp	r3, #32
 8006758:	d0f0      	beq.n	800673c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3714      	adds	r7, #20
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3301      	adds	r3, #1
 8006778:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006780:	d901      	bls.n	8006786 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e018      	b.n	80067b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	daf2      	bge.n	8006774 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2210      	movs	r2, #16
 8006796:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3301      	adds	r3, #1
 800679c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067a4:	d901      	bls.n	80067aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e006      	b.n	80067b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	f003 0310 	and.w	r3, r3, #16
 80067b2:	2b10      	cmp	r3, #16
 80067b4:	d0f0      	beq.n	8006798 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	78fb      	ldrb	r3, [r7, #3]
 80067de:	68f9      	ldr	r1, [r7, #12]
 80067e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067e4:	4313      	orrs	r3, r2
 80067e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b087      	sub	sp, #28
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f003 0306 	and.w	r3, r3, #6
 800680e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d102      	bne.n	800681c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006816:	2300      	movs	r3, #0
 8006818:	75fb      	strb	r3, [r7, #23]
 800681a:	e00a      	b.n	8006832 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2b02      	cmp	r3, #2
 8006820:	d002      	beq.n	8006828 <USB_GetDevSpeed+0x32>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b06      	cmp	r3, #6
 8006826:	d102      	bne.n	800682e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006828:	2302      	movs	r3, #2
 800682a:	75fb      	strb	r3, [r7, #23]
 800682c:	e001      	b.n	8006832 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800682e:	230f      	movs	r3, #15
 8006830:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006832:	7dfb      	ldrb	r3, [r7, #23]
}
 8006834:	4618      	mov	r0, r3
 8006836:	371c      	adds	r7, #28
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	785b      	ldrb	r3, [r3, #1]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d13a      	bne.n	80068d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006862:	69da      	ldr	r2, [r3, #28]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	2101      	movs	r1, #1
 800686e:	fa01 f303 	lsl.w	r3, r1, r3
 8006872:	b29b      	uxth	r3, r3
 8006874:	68f9      	ldr	r1, [r7, #12]
 8006876:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800687a:	4313      	orrs	r3, r2
 800687c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4413      	add	r3, r2
 8006886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d155      	bne.n	8006940 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	791b      	ldrb	r3, [r3, #4]
 80068ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	059b      	lsls	r3, r3, #22
 80068b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068b8:	4313      	orrs	r3, r2
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	0151      	lsls	r1, r2, #5
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	440a      	add	r2, r1
 80068c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ce:	6013      	str	r3, [r2, #0]
 80068d0:	e036      	b.n	8006940 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068d8:	69da      	ldr	r2, [r3, #28]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	f003 030f 	and.w	r3, r3, #15
 80068e2:	2101      	movs	r1, #1
 80068e4:	fa01 f303 	lsl.w	r3, r1, r3
 80068e8:	041b      	lsls	r3, r3, #16
 80068ea:	68f9      	ldr	r1, [r7, #12]
 80068ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068f0:	4313      	orrs	r3, r2
 80068f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d11a      	bne.n	8006940 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	791b      	ldrb	r3, [r3, #4]
 8006924:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006926:	430b      	orrs	r3, r1
 8006928:	4313      	orrs	r3, r2
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	0151      	lsls	r1, r2, #5
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	440a      	add	r2, r1
 8006932:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800693a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800693e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
	...

08006950 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	785b      	ldrb	r3, [r3, #1]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d161      	bne.n	8006a30 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800697e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006982:	d11f      	bne.n	80069c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	440a      	add	r2, r1
 800699a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800699e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80069a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	f003 030f 	and.w	r3, r3, #15
 80069d4:	2101      	movs	r1, #1
 80069d6:	fa01 f303 	lsl.w	r3, r1, r3
 80069da:	b29b      	uxth	r3, r3
 80069dc:	43db      	mvns	r3, r3
 80069de:	68f9      	ldr	r1, [r7, #12]
 80069e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069e4:	4013      	ands	r3, r2
 80069e6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ee:	69da      	ldr	r2, [r3, #28]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	f003 030f 	and.w	r3, r3, #15
 80069f8:	2101      	movs	r1, #1
 80069fa:	fa01 f303 	lsl.w	r3, r1, r3
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	43db      	mvns	r3, r3
 8006a02:	68f9      	ldr	r1, [r7, #12]
 8006a04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a08:	4013      	ands	r3, r2
 8006a0a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	0159      	lsls	r1, r3, #5
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	440b      	add	r3, r1
 8006a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a26:	4619      	mov	r1, r3
 8006a28:	4b35      	ldr	r3, [pc, #212]	@ (8006b00 <USB_DeactivateEndpoint+0x1b0>)
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	600b      	str	r3, [r1, #0]
 8006a2e:	e060      	b.n	8006af2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a46:	d11f      	bne.n	8006a88 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	0151      	lsls	r1, r2, #5
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	440a      	add	r2, r1
 8006a5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a66:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	0151      	lsls	r1, r2, #5
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	440a      	add	r2, r1
 8006a7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	f003 030f 	and.w	r3, r3, #15
 8006a98:	2101      	movs	r1, #1
 8006a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9e:	041b      	lsls	r3, r3, #16
 8006aa0:	43db      	mvns	r3, r3
 8006aa2:	68f9      	ldr	r1, [r7, #12]
 8006aa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ab2:	69da      	ldr	r2, [r3, #28]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	f003 030f 	and.w	r3, r3, #15
 8006abc:	2101      	movs	r1, #1
 8006abe:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac2:	041b      	lsls	r3, r3, #16
 8006ac4:	43db      	mvns	r3, r3
 8006ac6:	68f9      	ldr	r1, [r7, #12]
 8006ac8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006acc:	4013      	ands	r3, r2
 8006ace:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	0159      	lsls	r1, r3, #5
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	440b      	add	r3, r1
 8006ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aea:	4619      	mov	r1, r3
 8006aec:	4b05      	ldr	r3, [pc, #20]	@ (8006b04 <USB_DeactivateEndpoint+0x1b4>)
 8006aee:	4013      	ands	r3, r2
 8006af0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	ec337800 	.word	0xec337800
 8006b04:	eff37800 	.word	0xeff37800

08006b08 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08a      	sub	sp, #40	@ 0x28
 8006b0c:	af02      	add	r7, sp, #8
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	4613      	mov	r3, r2
 8006b14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	785b      	ldrb	r3, [r3, #1]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	f040 817f 	bne.w	8006e28 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d132      	bne.n	8006b98 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	0151      	lsls	r1, r2, #5
 8006b44:	69fa      	ldr	r2, [r7, #28]
 8006b46:	440a      	add	r2, r1
 8006b48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b4c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006b50:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006b54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	0151      	lsls	r1, r2, #5
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	440a      	add	r2, r1
 8006b6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	0151      	lsls	r1, r2, #5
 8006b88:	69fa      	ldr	r2, [r7, #28]
 8006b8a:	440a      	add	r2, r1
 8006b8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b90:	0cdb      	lsrs	r3, r3, #19
 8006b92:	04db      	lsls	r3, r3, #19
 8006b94:	6113      	str	r3, [r2, #16]
 8006b96:	e097      	b.n	8006cc8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	0151      	lsls	r1, r2, #5
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	440a      	add	r2, r1
 8006bae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bb2:	0cdb      	lsrs	r3, r3, #19
 8006bb4:	04db      	lsls	r3, r3, #19
 8006bb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	0151      	lsls	r1, r2, #5
 8006bca:	69fa      	ldr	r2, [r7, #28]
 8006bcc:	440a      	add	r2, r1
 8006bce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bd2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006bd6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006bda:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d11a      	bne.n	8006c18 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	691a      	ldr	r2, [r3, #16]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d903      	bls.n	8006bf6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	689a      	ldr	r2, [r3, #8]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	69ba      	ldr	r2, [r7, #24]
 8006c06:	0151      	lsls	r1, r2, #5
 8006c08:	69fa      	ldr	r2, [r7, #28]
 8006c0a:	440a      	add	r2, r1
 8006c0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c14:	6113      	str	r3, [r2, #16]
 8006c16:	e044      	b.n	8006ca2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	691a      	ldr	r2, [r3, #16]
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	4413      	add	r3, r2
 8006c22:	1e5a      	subs	r2, r3, #1
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c3a:	691a      	ldr	r2, [r3, #16]
 8006c3c:	8afb      	ldrh	r3, [r7, #22]
 8006c3e:	04d9      	lsls	r1, r3, #19
 8006c40:	4ba4      	ldr	r3, [pc, #656]	@ (8006ed4 <USB_EPStartXfer+0x3cc>)
 8006c42:	400b      	ands	r3, r1
 8006c44:	69b9      	ldr	r1, [r7, #24]
 8006c46:	0148      	lsls	r0, r1, #5
 8006c48:	69f9      	ldr	r1, [r7, #28]
 8006c4a:	4401      	add	r1, r0
 8006c4c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006c50:	4313      	orrs	r3, r2
 8006c52:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	791b      	ldrb	r3, [r3, #4]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d122      	bne.n	8006ca2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	0151      	lsls	r1, r2, #5
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	440a      	add	r2, r1
 8006c72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c76:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006c7a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c88:	691a      	ldr	r2, [r3, #16]
 8006c8a:	8afb      	ldrh	r3, [r7, #22]
 8006c8c:	075b      	lsls	r3, r3, #29
 8006c8e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006c92:	69b9      	ldr	r1, [r7, #24]
 8006c94:	0148      	lsls	r0, r1, #5
 8006c96:	69f9      	ldr	r1, [r7, #28]
 8006c98:	4401      	add	r1, r0
 8006c9a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cae:	691a      	ldr	r2, [r3, #16]
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cb8:	69b9      	ldr	r1, [r7, #24]
 8006cba:	0148      	lsls	r0, r1, #5
 8006cbc:	69f9      	ldr	r1, [r7, #28]
 8006cbe:	4401      	add	r1, r0
 8006cc0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006cc8:	79fb      	ldrb	r3, [r7, #7]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d14b      	bne.n	8006d66 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d009      	beq.n	8006cea <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	015a      	lsls	r2, r3, #5
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	791b      	ldrb	r3, [r3, #4]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d128      	bne.n	8006d44 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d110      	bne.n	8006d24 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	0151      	lsls	r1, r2, #5
 8006d14:	69fa      	ldr	r2, [r7, #28]
 8006d16:	440a      	add	r2, r1
 8006d18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d1c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d20:	6013      	str	r3, [r2, #0]
 8006d22:	e00f      	b.n	8006d44 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	0151      	lsls	r1, r2, #5
 8006d36:	69fa      	ldr	r2, [r7, #28]
 8006d38:	440a      	add	r2, r1
 8006d3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d42:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	0151      	lsls	r1, r2, #5
 8006d56:	69fa      	ldr	r2, [r7, #28]
 8006d58:	440a      	add	r2, r1
 8006d5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d5e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	e166      	b.n	8007034 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	0151      	lsls	r1, r2, #5
 8006d78:	69fa      	ldr	r2, [r7, #28]
 8006d7a:	440a      	add	r2, r1
 8006d7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d80:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d84:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	791b      	ldrb	r3, [r3, #4]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d015      	beq.n	8006dba <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 814e 	beq.w	8007034 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	f003 030f 	and.w	r3, r3, #15
 8006da8:	2101      	movs	r1, #1
 8006daa:	fa01 f303 	lsl.w	r3, r1, r3
 8006dae:	69f9      	ldr	r1, [r7, #28]
 8006db0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006db4:	4313      	orrs	r3, r2
 8006db6:	634b      	str	r3, [r1, #52]	@ 0x34
 8006db8:	e13c      	b.n	8007034 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d110      	bne.n	8006dec <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	015a      	lsls	r2, r3, #5
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	0151      	lsls	r1, r2, #5
 8006ddc:	69fa      	ldr	r2, [r7, #28]
 8006dde:	440a      	add	r2, r1
 8006de0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006de4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	e00f      	b.n	8006e0c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	69ba      	ldr	r2, [r7, #24]
 8006dfc:	0151      	lsls	r1, r2, #5
 8006dfe:	69fa      	ldr	r2, [r7, #28]
 8006e00:	440a      	add	r2, r1
 8006e02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e0a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	68d9      	ldr	r1, [r3, #12]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	781a      	ldrb	r2, [r3, #0]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	b298      	uxth	r0, r3
 8006e1a:	79fb      	ldrb	r3, [r7, #7]
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	4603      	mov	r3, r0
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 f9b9 	bl	8007198 <USB_WritePacket>
 8006e26:	e105      	b.n	8007034 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	69ba      	ldr	r2, [r7, #24]
 8006e38:	0151      	lsls	r1, r2, #5
 8006e3a:	69fa      	ldr	r2, [r7, #28]
 8006e3c:	440a      	add	r2, r1
 8006e3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e42:	0cdb      	lsrs	r3, r3, #19
 8006e44:	04db      	lsls	r3, r3, #19
 8006e46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	0151      	lsls	r1, r2, #5
 8006e5a:	69fa      	ldr	r2, [r7, #28]
 8006e5c:	440a      	add	r2, r1
 8006e5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e62:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e66:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e6a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d132      	bne.n	8006ed8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	689a      	ldr	r2, [r3, #8]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e96:	691a      	ldr	r2, [r3, #16]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ea0:	69b9      	ldr	r1, [r7, #24]
 8006ea2:	0148      	lsls	r0, r1, #5
 8006ea4:	69f9      	ldr	r1, [r7, #28]
 8006ea6:	4401      	add	r1, r0
 8006ea8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006eac:	4313      	orrs	r3, r2
 8006eae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	0151      	lsls	r1, r2, #5
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	440a      	add	r2, r1
 8006ec6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006eca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ece:	6113      	str	r3, [r2, #16]
 8006ed0:	e062      	b.n	8006f98 <USB_EPStartXfer+0x490>
 8006ed2:	bf00      	nop
 8006ed4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d123      	bne.n	8006f28 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eec:	691a      	ldr	r2, [r3, #16]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ef6:	69b9      	ldr	r1, [r7, #24]
 8006ef8:	0148      	lsls	r0, r1, #5
 8006efa:	69f9      	ldr	r1, [r7, #28]
 8006efc:	4401      	add	r1, r0
 8006efe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f02:	4313      	orrs	r3, r2
 8006f04:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	0151      	lsls	r1, r2, #5
 8006f18:	69fa      	ldr	r2, [r7, #28]
 8006f1a:	440a      	add	r2, r1
 8006f1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f24:	6113      	str	r3, [r2, #16]
 8006f26:	e037      	b.n	8006f98 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	4413      	add	r3, r2
 8006f32:	1e5a      	subs	r2, r3, #1
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f3c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	8afa      	ldrh	r2, [r7, #22]
 8006f44:	fb03 f202 	mul.w	r2, r3, r2
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f58:	691a      	ldr	r2, [r3, #16]
 8006f5a:	8afb      	ldrh	r3, [r7, #22]
 8006f5c:	04d9      	lsls	r1, r3, #19
 8006f5e:	4b38      	ldr	r3, [pc, #224]	@ (8007040 <USB_EPStartXfer+0x538>)
 8006f60:	400b      	ands	r3, r1
 8006f62:	69b9      	ldr	r1, [r7, #24]
 8006f64:	0148      	lsls	r0, r1, #5
 8006f66:	69f9      	ldr	r1, [r7, #28]
 8006f68:	4401      	add	r1, r0
 8006f6a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	015a      	lsls	r2, r3, #5
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	4413      	add	r3, r2
 8006f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f7e:	691a      	ldr	r2, [r3, #16]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f88:	69b9      	ldr	r1, [r7, #24]
 8006f8a:	0148      	lsls	r0, r1, #5
 8006f8c:	69f9      	ldr	r1, [r7, #28]
 8006f8e:	4401      	add	r1, r0
 8006f90:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f94:	4313      	orrs	r3, r2
 8006f96:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006f98:	79fb      	ldrb	r3, [r7, #7]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d10d      	bne.n	8006fba <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d009      	beq.n	8006fba <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	68d9      	ldr	r1, [r3, #12]
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb6:	460a      	mov	r2, r1
 8006fb8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	791b      	ldrb	r3, [r3, #4]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d128      	bne.n	8007014 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d110      	bne.n	8006ff4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	0151      	lsls	r1, r2, #5
 8006fe4:	69fa      	ldr	r2, [r7, #28]
 8006fe6:	440a      	add	r2, r1
 8006fe8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	e00f      	b.n	8007014 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	0151      	lsls	r1, r2, #5
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	440a      	add	r2, r1
 800700a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800700e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007012:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	0151      	lsls	r1, r2, #5
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	440a      	add	r2, r1
 800702a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800702e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007032:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3720      	adds	r7, #32
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	1ff80000 	.word	0x1ff80000

08007044 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007044:	b480      	push	{r7}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	785b      	ldrb	r3, [r3, #1]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d14a      	bne.n	80070f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007076:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800707a:	f040 8086 	bne.w	800718a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	7812      	ldrb	r2, [r2, #0]
 8007092:	0151      	lsls	r1, r2, #5
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	440a      	add	r2, r1
 8007098:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800709c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80070a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	7812      	ldrb	r2, [r2, #0]
 80070b6:	0151      	lsls	r1, r2, #5
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	440a      	add	r2, r1
 80070bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3301      	adds	r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d902      	bls.n	80070dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	75fb      	strb	r3, [r7, #23]
          break;
 80070da:	e056      	b.n	800718a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070f4:	d0e7      	beq.n	80070c6 <USB_EPStopXfer+0x82>
 80070f6:	e048      	b.n	800718a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800710c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007110:	d13b      	bne.n	800718a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	4413      	add	r3, r2
 800711c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	7812      	ldrb	r2, [r2, #0]
 8007126:	0151      	lsls	r1, r2, #5
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	440a      	add	r2, r1
 800712c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007130:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007134:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	7812      	ldrb	r2, [r2, #0]
 800714a:	0151      	lsls	r1, r2, #5
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	440a      	add	r2, r1
 8007150:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007154:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007158:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	3301      	adds	r3, #1
 800715e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007166:	4293      	cmp	r3, r2
 8007168:	d902      	bls.n	8007170 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	75fb      	strb	r3, [r7, #23]
          break;
 800716e:	e00c      	b.n	800718a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007184:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007188:	d0e7      	beq.n	800715a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800718a:	7dfb      	ldrb	r3, [r7, #23]
}
 800718c:	4618      	mov	r0, r3
 800718e:	371c      	adds	r7, #28
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007198:	b480      	push	{r7}
 800719a:	b089      	sub	sp, #36	@ 0x24
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	4611      	mov	r1, r2
 80071a4:	461a      	mov	r2, r3
 80071a6:	460b      	mov	r3, r1
 80071a8:	71fb      	strb	r3, [r7, #7]
 80071aa:	4613      	mov	r3, r2
 80071ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80071b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d123      	bne.n	8007206 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80071be:	88bb      	ldrh	r3, [r7, #4]
 80071c0:	3303      	adds	r3, #3
 80071c2:	089b      	lsrs	r3, r3, #2
 80071c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80071c6:	2300      	movs	r3, #0
 80071c8:	61bb      	str	r3, [r7, #24]
 80071ca:	e018      	b.n	80071fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80071cc:	79fb      	ldrb	r3, [r7, #7]
 80071ce:	031a      	lsls	r2, r3, #12
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071d8:	461a      	mov	r2, r3
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	3301      	adds	r3, #1
 80071e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	3301      	adds	r3, #1
 80071ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	3301      	adds	r3, #1
 80071f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	3301      	adds	r3, #1
 80071f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	3301      	adds	r3, #1
 80071fc:	61bb      	str	r3, [r7, #24]
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	429a      	cmp	r2, r3
 8007204:	d3e2      	bcc.n	80071cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3724      	adds	r7, #36	@ 0x24
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007214:	b480      	push	{r7}
 8007216:	b08b      	sub	sp, #44	@ 0x2c
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	4613      	mov	r3, r2
 8007220:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800722a:	88fb      	ldrh	r3, [r7, #6]
 800722c:	089b      	lsrs	r3, r3, #2
 800722e:	b29b      	uxth	r3, r3
 8007230:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007232:	88fb      	ldrh	r3, [r7, #6]
 8007234:	f003 0303 	and.w	r3, r3, #3
 8007238:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800723a:	2300      	movs	r3, #0
 800723c:	623b      	str	r3, [r7, #32]
 800723e:	e014      	b.n	800726a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724a:	601a      	str	r2, [r3, #0]
    pDest++;
 800724c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724e:	3301      	adds	r3, #1
 8007250:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007254:	3301      	adds	r3, #1
 8007256:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725a:	3301      	adds	r3, #1
 800725c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800725e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007260:	3301      	adds	r3, #1
 8007262:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	3301      	adds	r3, #1
 8007268:	623b      	str	r3, [r7, #32]
 800726a:	6a3a      	ldr	r2, [r7, #32]
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	429a      	cmp	r2, r3
 8007270:	d3e6      	bcc.n	8007240 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007272:	8bfb      	ldrh	r3, [r7, #30]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d01e      	beq.n	80072b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007282:	461a      	mov	r2, r3
 8007284:	f107 0310 	add.w	r3, r7, #16
 8007288:	6812      	ldr	r2, [r2, #0]
 800728a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	fa22 f303 	lsr.w	r3, r2, r3
 8007298:	b2da      	uxtb	r2, r3
 800729a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729c:	701a      	strb	r2, [r3, #0]
      i++;
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	3301      	adds	r3, #1
 80072a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80072a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a6:	3301      	adds	r3, #1
 80072a8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80072aa:	8bfb      	ldrh	r3, [r7, #30]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80072b0:	8bfb      	ldrh	r3, [r7, #30]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1ea      	bne.n	800728c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	372c      	adds	r7, #44	@ 0x2c
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	785b      	ldrb	r3, [r3, #1]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d12c      	bne.n	800733a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	db12      	blt.n	8007318 <USB_EPSetStall+0x54>
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00f      	beq.n	8007318 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	0151      	lsls	r1, r2, #5
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	440a      	add	r2, r1
 800730e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007312:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007316:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	0151      	lsls	r1, r2, #5
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	440a      	add	r2, r1
 800732e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007332:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007336:	6013      	str	r3, [r2, #0]
 8007338:	e02b      	b.n	8007392 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	4413      	add	r3, r2
 8007342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	db12      	blt.n	8007372 <USB_EPSetStall+0xae>
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00f      	beq.n	8007372 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	0151      	lsls	r1, r2, #5
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	440a      	add	r2, r1
 8007368:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800736c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007370:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	0151      	lsls	r1, r2, #5
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	440a      	add	r2, r1
 8007388:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800738c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007390:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	785b      	ldrb	r3, [r3, #1]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d128      	bne.n	800740e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	0151      	lsls	r1, r2, #5
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	440a      	add	r2, r1
 80073d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80073da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	791b      	ldrb	r3, [r3, #4]
 80073e0:	2b03      	cmp	r3, #3
 80073e2:	d003      	beq.n	80073ec <USB_EPClearStall+0x4c>
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	791b      	ldrb	r3, [r3, #4]
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d138      	bne.n	800745e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	015a      	lsls	r2, r3, #5
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4413      	add	r3, r2
 80073f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	0151      	lsls	r1, r2, #5
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	440a      	add	r2, r1
 8007402:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	e027      	b.n	800745e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4413      	add	r3, r2
 8007416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	0151      	lsls	r1, r2, #5
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	440a      	add	r2, r1
 8007424:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007428:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800742c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	791b      	ldrb	r3, [r3, #4]
 8007432:	2b03      	cmp	r3, #3
 8007434:	d003      	beq.n	800743e <USB_EPClearStall+0x9e>
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	791b      	ldrb	r3, [r3, #4]
 800743a:	2b02      	cmp	r3, #2
 800743c:	d10f      	bne.n	800745e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	0151      	lsls	r1, r2, #5
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	440a      	add	r2, r1
 8007454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800745c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	460b      	mov	r3, r1
 8007476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800748a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800748e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	011b      	lsls	r3, r3, #4
 800749c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80074a0:	68f9      	ldr	r1, [r7, #12]
 80074a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074a6:	4313      	orrs	r3, r2
 80074a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80074d2:	f023 0303 	bic.w	r3, r3, #3
 80074d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074e6:	f023 0302 	bic.w	r3, r3, #2
 80074ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b085      	sub	sp, #20
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007514:	f023 0303 	bic.w	r3, r3, #3
 8007518:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007528:	f043 0302 	orr.w	r3, r3, #2
 800752c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	4013      	ands	r3, r2
 8007552:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007554:	68fb      	ldr	r3, [r7, #12]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007562:	b480      	push	{r7}
 8007564:	b085      	sub	sp, #20
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	4013      	ands	r3, r2
 8007584:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	0c1b      	lsrs	r3, r3, #16
}
 800758a:	4618      	mov	r0, r3
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007596:	b480      	push	{r7}
 8007598:	b085      	sub	sp, #20
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	4013      	ands	r3, r2
 80075b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	b29b      	uxth	r3, r3
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b085      	sub	sp, #20
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	460b      	mov	r3, r1
 80075d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80075da:	78fb      	ldrb	r3, [r7, #3]
 80075dc:	015a      	lsls	r2, r3, #5
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	4013      	ands	r3, r2
 80075f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075f8:	68bb      	ldr	r3, [r7, #8]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007606:	b480      	push	{r7}
 8007608:	b087      	sub	sp, #28
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	460b      	mov	r3, r1
 8007610:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007628:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800762a:	78fb      	ldrb	r3, [r7, #3]
 800762c:	f003 030f 	and.w	r3, r3, #15
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	fa22 f303 	lsr.w	r3, r2, r3
 8007636:	01db      	lsls	r3, r3, #7
 8007638:	b2db      	uxtb	r3, r3
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	4313      	orrs	r3, r2
 800763e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007640:	78fb      	ldrb	r3, [r7, #3]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	4413      	add	r3, r2
 8007648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	4013      	ands	r3, r2
 8007652:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007654:	68bb      	ldr	r3, [r7, #8]
}
 8007656:	4618      	mov	r0, r3
 8007658:	371c      	adds	r7, #28
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	f003 0301 	and.w	r3, r3, #1
}
 8007672:	4618      	mov	r0, r3
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800767e:	b480      	push	{r7}
 8007680:	b085      	sub	sp, #20
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007698:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800769c:	f023 0307 	bic.w	r3, r3, #7
 80076a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	460b      	mov	r3, r1
 80076ce:	607a      	str	r2, [r7, #4]
 80076d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	333c      	adds	r3, #60	@ 0x3c
 80076da:	3304      	adds	r3, #4
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	4a26      	ldr	r2, [pc, #152]	@ (800777c <USB_EP0_OutStart+0xb8>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d90a      	bls.n	80076fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076f8:	d101      	bne.n	80076fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	e037      	b.n	800776e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007704:	461a      	mov	r2, r3
 8007706:	2300      	movs	r3, #0
 8007708:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007718:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800771c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800772c:	f043 0318 	orr.w	r3, r3, #24
 8007730:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007740:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007744:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007746:	7afb      	ldrb	r3, [r7, #11]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d10f      	bne.n	800776c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007752:	461a      	mov	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007766:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800776a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	371c      	adds	r7, #28
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	4f54300a 	.word	0x4f54300a

08007780 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	3301      	adds	r3, #1
 8007790:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007798:	d901      	bls.n	800779e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e01b      	b.n	80077d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	daf2      	bge.n	800778c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f043 0201 	orr.w	r2, r3, #1
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	3301      	adds	r3, #1
 80077ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077c2:	d901      	bls.n	80077c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e006      	b.n	80077d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d0f0      	beq.n	80077b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
	...

080077e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80077f0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80077f4:	f002 fcac 	bl	800a150 <USBD_static_malloc>
 80077f8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d109      	bne.n	8007814 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	32b0      	adds	r2, #176	@ 0xb0
 800780a:	2100      	movs	r1, #0
 800780c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007810:	2302      	movs	r3, #2
 8007812:	e0d4      	b.n	80079be <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007814:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007818:	2100      	movs	r1, #0
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f002 fd10 	bl	800a240 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	32b0      	adds	r2, #176	@ 0xb0
 800782a:	68f9      	ldr	r1, [r7, #12]
 800782c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	32b0      	adds	r2, #176	@ 0xb0
 800783a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	7c1b      	ldrb	r3, [r3, #16]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d138      	bne.n	80078be <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800784c:	4b5e      	ldr	r3, [pc, #376]	@ (80079c8 <USBD_CDC_Init+0x1e4>)
 800784e:	7819      	ldrb	r1, [r3, #0]
 8007850:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007854:	2202      	movs	r2, #2
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f002 fb57 	bl	8009f0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800785c:	4b5a      	ldr	r3, [pc, #360]	@ (80079c8 <USBD_CDC_Init+0x1e4>)
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	f003 020f 	and.w	r2, r3, #15
 8007864:	6879      	ldr	r1, [r7, #4]
 8007866:	4613      	mov	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4413      	add	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	440b      	add	r3, r1
 8007870:	3324      	adds	r3, #36	@ 0x24
 8007872:	2201      	movs	r2, #1
 8007874:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007876:	4b55      	ldr	r3, [pc, #340]	@ (80079cc <USBD_CDC_Init+0x1e8>)
 8007878:	7819      	ldrb	r1, [r3, #0]
 800787a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800787e:	2202      	movs	r2, #2
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f002 fb42 	bl	8009f0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007886:	4b51      	ldr	r3, [pc, #324]	@ (80079cc <USBD_CDC_Init+0x1e8>)
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	f003 020f 	and.w	r2, r3, #15
 800788e:	6879      	ldr	r1, [r7, #4]
 8007890:	4613      	mov	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	440b      	add	r3, r1
 800789a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800789e:	2201      	movs	r2, #1
 80078a0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80078a2:	4b4b      	ldr	r3, [pc, #300]	@ (80079d0 <USBD_CDC_Init+0x1ec>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	f003 020f 	and.w	r2, r3, #15
 80078aa:	6879      	ldr	r1, [r7, #4]
 80078ac:	4613      	mov	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	440b      	add	r3, r1
 80078b6:	3326      	adds	r3, #38	@ 0x26
 80078b8:	2210      	movs	r2, #16
 80078ba:	801a      	strh	r2, [r3, #0]
 80078bc:	e035      	b.n	800792a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80078be:	4b42      	ldr	r3, [pc, #264]	@ (80079c8 <USBD_CDC_Init+0x1e4>)
 80078c0:	7819      	ldrb	r1, [r3, #0]
 80078c2:	2340      	movs	r3, #64	@ 0x40
 80078c4:	2202      	movs	r2, #2
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f002 fb1f 	bl	8009f0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80078cc:	4b3e      	ldr	r3, [pc, #248]	@ (80079c8 <USBD_CDC_Init+0x1e4>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	f003 020f 	and.w	r2, r3, #15
 80078d4:	6879      	ldr	r1, [r7, #4]
 80078d6:	4613      	mov	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	440b      	add	r3, r1
 80078e0:	3324      	adds	r3, #36	@ 0x24
 80078e2:	2201      	movs	r2, #1
 80078e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80078e6:	4b39      	ldr	r3, [pc, #228]	@ (80079cc <USBD_CDC_Init+0x1e8>)
 80078e8:	7819      	ldrb	r1, [r3, #0]
 80078ea:	2340      	movs	r3, #64	@ 0x40
 80078ec:	2202      	movs	r2, #2
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f002 fb0b 	bl	8009f0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80078f4:	4b35      	ldr	r3, [pc, #212]	@ (80079cc <USBD_CDC_Init+0x1e8>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	f003 020f 	and.w	r2, r3, #15
 80078fc:	6879      	ldr	r1, [r7, #4]
 80078fe:	4613      	mov	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	440b      	add	r3, r1
 8007908:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800790c:	2201      	movs	r2, #1
 800790e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007910:	4b2f      	ldr	r3, [pc, #188]	@ (80079d0 <USBD_CDC_Init+0x1ec>)
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	f003 020f 	and.w	r2, r3, #15
 8007918:	6879      	ldr	r1, [r7, #4]
 800791a:	4613      	mov	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	440b      	add	r3, r1
 8007924:	3326      	adds	r3, #38	@ 0x26
 8007926:	2210      	movs	r2, #16
 8007928:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800792a:	4b29      	ldr	r3, [pc, #164]	@ (80079d0 <USBD_CDC_Init+0x1ec>)
 800792c:	7819      	ldrb	r1, [r3, #0]
 800792e:	2308      	movs	r3, #8
 8007930:	2203      	movs	r2, #3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f002 fae9 	bl	8009f0a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007938:	4b25      	ldr	r3, [pc, #148]	@ (80079d0 <USBD_CDC_Init+0x1ec>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	f003 020f 	and.w	r2, r3, #15
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	3324      	adds	r3, #36	@ 0x24
 800794e:	2201      	movs	r2, #1
 8007950:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	33b0      	adds	r3, #176	@ 0xb0
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007988:	2302      	movs	r3, #2
 800798a:	e018      	b.n	80079be <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	7c1b      	ldrb	r3, [r3, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10a      	bne.n	80079aa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007994:	4b0d      	ldr	r3, [pc, #52]	@ (80079cc <USBD_CDC_Init+0x1e8>)
 8007996:	7819      	ldrb	r1, [r3, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800799e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f002 fba0 	bl	800a0e8 <USBD_LL_PrepareReceive>
 80079a8:	e008      	b.n	80079bc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079aa:	4b08      	ldr	r3, [pc, #32]	@ (80079cc <USBD_CDC_Init+0x1e8>)
 80079ac:	7819      	ldrb	r1, [r3, #0]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80079b4:	2340      	movs	r3, #64	@ 0x40
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f002 fb96 	bl	800a0e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	20000093 	.word	0x20000093
 80079cc:	20000094 	.word	0x20000094
 80079d0:	20000095 	.word	0x20000095

080079d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80079e0:	4b3a      	ldr	r3, [pc, #232]	@ (8007acc <USBD_CDC_DeInit+0xf8>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f002 fab5 	bl	8009f56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80079ec:	4b37      	ldr	r3, [pc, #220]	@ (8007acc <USBD_CDC_DeInit+0xf8>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	f003 020f 	and.w	r2, r3, #15
 80079f4:	6879      	ldr	r1, [r7, #4]
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	440b      	add	r3, r1
 8007a00:	3324      	adds	r3, #36	@ 0x24
 8007a02:	2200      	movs	r2, #0
 8007a04:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007a06:	4b32      	ldr	r3, [pc, #200]	@ (8007ad0 <USBD_CDC_DeInit+0xfc>)
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f002 faa2 	bl	8009f56 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007a12:	4b2f      	ldr	r3, [pc, #188]	@ (8007ad0 <USBD_CDC_DeInit+0xfc>)
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	f003 020f 	and.w	r2, r3, #15
 8007a1a:	6879      	ldr	r1, [r7, #4]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	440b      	add	r3, r1
 8007a26:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007a2e:	4b29      	ldr	r3, [pc, #164]	@ (8007ad4 <USBD_CDC_DeInit+0x100>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f002 fa8e 	bl	8009f56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007a3a:	4b26      	ldr	r3, [pc, #152]	@ (8007ad4 <USBD_CDC_DeInit+0x100>)
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	f003 020f 	and.w	r2, r3, #15
 8007a42:	6879      	ldr	r1, [r7, #4]
 8007a44:	4613      	mov	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	440b      	add	r3, r1
 8007a4e:	3324      	adds	r3, #36	@ 0x24
 8007a50:	2200      	movs	r2, #0
 8007a52:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007a54:	4b1f      	ldr	r3, [pc, #124]	@ (8007ad4 <USBD_CDC_DeInit+0x100>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	f003 020f 	and.w	r2, r3, #15
 8007a5c:	6879      	ldr	r1, [r7, #4]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	440b      	add	r3, r1
 8007a68:	3326      	adds	r3, #38	@ 0x26
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	32b0      	adds	r2, #176	@ 0xb0
 8007a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01f      	beq.n	8007ac0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	33b0      	adds	r3, #176	@ 0xb0
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	32b0      	adds	r2, #176	@ 0xb0
 8007a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f002 fb62 	bl	800a16c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	32b0      	adds	r2, #176	@ 0xb0
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20000093 	.word	0x20000093
 8007ad0:	20000094 	.word	0x20000094
 8007ad4:	20000095 	.word	0x20000095

08007ad8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	32b0      	adds	r2, #176	@ 0xb0
 8007aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e0bf      	b.n	8007c88 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d050      	beq.n	8007bb6 <USBD_CDC_Setup+0xde>
 8007b14:	2b20      	cmp	r3, #32
 8007b16:	f040 80af 	bne.w	8007c78 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	88db      	ldrh	r3, [r3, #6]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d03a      	beq.n	8007b98 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	b25b      	sxtb	r3, r3
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	da1b      	bge.n	8007b64 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	33b0      	adds	r3, #176	@ 0xb0
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007b42:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	88d2      	ldrh	r2, [r2, #6]
 8007b48:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	88db      	ldrh	r3, [r3, #6]
 8007b4e:	2b07      	cmp	r3, #7
 8007b50:	bf28      	it	cs
 8007b52:	2307      	movcs	r3, #7
 8007b54:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	89fa      	ldrh	r2, [r7, #14]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f001 fd93 	bl	8009688 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007b62:	e090      	b.n	8007c86 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	785a      	ldrb	r2, [r3, #1]
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	88db      	ldrh	r3, [r3, #6]
 8007b72:	2b3f      	cmp	r3, #63	@ 0x3f
 8007b74:	d803      	bhi.n	8007b7e <USBD_CDC_Setup+0xa6>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	88db      	ldrh	r3, [r3, #6]
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	e000      	b.n	8007b80 <USBD_CDC_Setup+0xa8>
 8007b7e:	2240      	movs	r2, #64	@ 0x40
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007b86:	6939      	ldr	r1, [r7, #16]
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007b8e:	461a      	mov	r2, r3
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f001 fda5 	bl	80096e0 <USBD_CtlPrepareRx>
      break;
 8007b96:	e076      	b.n	8007c86 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	33b0      	adds	r3, #176	@ 0xb0
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	7850      	ldrb	r0, [r2, #1]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	4798      	blx	r3
      break;
 8007bb4:	e067      	b.n	8007c86 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	785b      	ldrb	r3, [r3, #1]
 8007bba:	2b0b      	cmp	r3, #11
 8007bbc:	d851      	bhi.n	8007c62 <USBD_CDC_Setup+0x18a>
 8007bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc4 <USBD_CDC_Setup+0xec>)
 8007bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc4:	08007bf5 	.word	0x08007bf5
 8007bc8:	08007c71 	.word	0x08007c71
 8007bcc:	08007c63 	.word	0x08007c63
 8007bd0:	08007c63 	.word	0x08007c63
 8007bd4:	08007c63 	.word	0x08007c63
 8007bd8:	08007c63 	.word	0x08007c63
 8007bdc:	08007c63 	.word	0x08007c63
 8007be0:	08007c63 	.word	0x08007c63
 8007be4:	08007c63 	.word	0x08007c63
 8007be8:	08007c63 	.word	0x08007c63
 8007bec:	08007c1f 	.word	0x08007c1f
 8007bf0:	08007c49 	.word	0x08007c49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b03      	cmp	r3, #3
 8007bfe:	d107      	bne.n	8007c10 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c00:	f107 030a 	add.w	r3, r7, #10
 8007c04:	2202      	movs	r2, #2
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f001 fd3d 	bl	8009688 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c0e:	e032      	b.n	8007c76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f001 fcbb 	bl	800958e <USBD_CtlError>
            ret = USBD_FAIL;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	75fb      	strb	r3, [r7, #23]
          break;
 8007c1c:	e02b      	b.n	8007c76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d107      	bne.n	8007c3a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c2a:	f107 030d 	add.w	r3, r7, #13
 8007c2e:	2201      	movs	r2, #1
 8007c30:	4619      	mov	r1, r3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 fd28 	bl	8009688 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c38:	e01d      	b.n	8007c76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f001 fca6 	bl	800958e <USBD_CtlError>
            ret = USBD_FAIL;
 8007c42:	2303      	movs	r3, #3
 8007c44:	75fb      	strb	r3, [r7, #23]
          break;
 8007c46:	e016      	b.n	8007c76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b03      	cmp	r3, #3
 8007c52:	d00f      	beq.n	8007c74 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f001 fc99 	bl	800958e <USBD_CtlError>
            ret = USBD_FAIL;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c60:	e008      	b.n	8007c74 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f001 fc92 	bl	800958e <USBD_CtlError>
          ret = USBD_FAIL;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	75fb      	strb	r3, [r7, #23]
          break;
 8007c6e:	e002      	b.n	8007c76 <USBD_CDC_Setup+0x19e>
          break;
 8007c70:	bf00      	nop
 8007c72:	e008      	b.n	8007c86 <USBD_CDC_Setup+0x1ae>
          break;
 8007c74:	bf00      	nop
      }
      break;
 8007c76:	e006      	b.n	8007c86 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f001 fc87 	bl	800958e <USBD_CtlError>
      ret = USBD_FAIL;
 8007c80:	2303      	movs	r3, #3
 8007c82:	75fb      	strb	r3, [r7, #23]
      break;
 8007c84:	bf00      	nop
  }

  return (uint8_t)ret;
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ca2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	32b0      	adds	r2, #176	@ 0xb0
 8007cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e065      	b.n	8007d86 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	32b0      	adds	r2, #176	@ 0xb0
 8007cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007cca:	78fb      	ldrb	r3, [r7, #3]
 8007ccc:	f003 020f 	and.w	r2, r3, #15
 8007cd0:	6879      	ldr	r1, [r7, #4]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	440b      	add	r3, r1
 8007cdc:	3318      	adds	r3, #24
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d02f      	beq.n	8007d44 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007ce4:	78fb      	ldrb	r3, [r7, #3]
 8007ce6:	f003 020f 	and.w	r2, r3, #15
 8007cea:	6879      	ldr	r1, [r7, #4]
 8007cec:	4613      	mov	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	440b      	add	r3, r1
 8007cf6:	3318      	adds	r3, #24
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	78fb      	ldrb	r3, [r7, #3]
 8007cfc:	f003 010f 	and.w	r1, r3, #15
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	460b      	mov	r3, r1
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	440b      	add	r3, r1
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4403      	add	r3, r0
 8007d0c:	331c      	adds	r3, #28
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d14:	fb01 f303 	mul.w	r3, r1, r3
 8007d18:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d112      	bne.n	8007d44 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007d1e:	78fb      	ldrb	r3, [r7, #3]
 8007d20:	f003 020f 	and.w	r2, r3, #15
 8007d24:	6879      	ldr	r1, [r7, #4]
 8007d26:	4613      	mov	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	440b      	add	r3, r1
 8007d30:	3318      	adds	r3, #24
 8007d32:	2200      	movs	r2, #0
 8007d34:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d36:	78f9      	ldrb	r1, [r7, #3]
 8007d38:	2300      	movs	r3, #0
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f002 f9b2 	bl	800a0a6 <USBD_LL_Transmit>
 8007d42:	e01f      	b.n	8007d84 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	33b0      	adds	r3, #176	@ 0xb0
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4413      	add	r3, r2
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d010      	beq.n	8007d84 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	33b0      	adds	r3, #176	@ 0xb0
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007d80:	78fa      	ldrb	r2, [r7, #3]
 8007d82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b084      	sub	sp, #16
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	460b      	mov	r3, r1
 8007d98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	32b0      	adds	r2, #176	@ 0xb0
 8007da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	32b0      	adds	r2, #176	@ 0xb0
 8007db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e01a      	b.n	8007df6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007dc0:	78fb      	ldrb	r3, [r7, #3]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f002 f9b0 	bl	800a12a <USBD_LL_GetRxDataSize>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	33b0      	adds	r3, #176	@ 0xb0
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007df0:	4611      	mov	r1, r2
 8007df2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b084      	sub	sp, #16
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	32b0      	adds	r2, #176	@ 0xb0
 8007e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e14:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d101      	bne.n	8007e20 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e024      	b.n	8007e6a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	33b0      	adds	r3, #176	@ 0xb0
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d019      	beq.n	8007e68 <USBD_CDC_EP0_RxReady+0x6a>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007e3a:	2bff      	cmp	r3, #255	@ 0xff
 8007e3c:	d014      	beq.n	8007e68 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	33b0      	adds	r3, #176	@ 0xb0
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007e56:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e5e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	22ff      	movs	r2, #255	@ 0xff
 8007e64:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
	...

08007e74 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e7c:	2182      	movs	r1, #130	@ 0x82
 8007e7e:	4818      	ldr	r0, [pc, #96]	@ (8007ee0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e80:	f000 fd4f 	bl	8008922 <USBD_GetEpDesc>
 8007e84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e86:	2101      	movs	r1, #1
 8007e88:	4815      	ldr	r0, [pc, #84]	@ (8007ee0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e8a:	f000 fd4a 	bl	8008922 <USBD_GetEpDesc>
 8007e8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e90:	2181      	movs	r1, #129	@ 0x81
 8007e92:	4813      	ldr	r0, [pc, #76]	@ (8007ee0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e94:	f000 fd45 	bl	8008922 <USBD_GetEpDesc>
 8007e98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d002      	beq.n	8007ea6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2210      	movs	r2, #16
 8007ea4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d006      	beq.n	8007eba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007eb4:	711a      	strb	r2, [r3, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d006      	beq.n	8007ece <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ec8:	711a      	strb	r2, [r3, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2243      	movs	r2, #67	@ 0x43
 8007ed2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ed4:	4b02      	ldr	r3, [pc, #8]	@ (8007ee0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	20000050 	.word	0x20000050

08007ee4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007eec:	2182      	movs	r1, #130	@ 0x82
 8007eee:	4818      	ldr	r0, [pc, #96]	@ (8007f50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ef0:	f000 fd17 	bl	8008922 <USBD_GetEpDesc>
 8007ef4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	4815      	ldr	r0, [pc, #84]	@ (8007f50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007efa:	f000 fd12 	bl	8008922 <USBD_GetEpDesc>
 8007efe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f00:	2181      	movs	r1, #129	@ 0x81
 8007f02:	4813      	ldr	r0, [pc, #76]	@ (8007f50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f04:	f000 fd0d 	bl	8008922 <USBD_GetEpDesc>
 8007f08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	2210      	movs	r2, #16
 8007f14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d006      	beq.n	8007f2a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	711a      	strb	r2, [r3, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f042 0202 	orr.w	r2, r2, #2
 8007f28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d006      	beq.n	8007f3e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	711a      	strb	r2, [r3, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f042 0202 	orr.w	r2, r2, #2
 8007f3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2243      	movs	r2, #67	@ 0x43
 8007f42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f44:	4b02      	ldr	r3, [pc, #8]	@ (8007f50 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3718      	adds	r7, #24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	20000050 	.word	0x20000050

08007f54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f5c:	2182      	movs	r1, #130	@ 0x82
 8007f5e:	4818      	ldr	r0, [pc, #96]	@ (8007fc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f60:	f000 fcdf 	bl	8008922 <USBD_GetEpDesc>
 8007f64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f66:	2101      	movs	r1, #1
 8007f68:	4815      	ldr	r0, [pc, #84]	@ (8007fc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f6a:	f000 fcda 	bl	8008922 <USBD_GetEpDesc>
 8007f6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f70:	2181      	movs	r1, #129	@ 0x81
 8007f72:	4813      	ldr	r0, [pc, #76]	@ (8007fc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f74:	f000 fcd5 	bl	8008922 <USBD_GetEpDesc>
 8007f78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d002      	beq.n	8007f86 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	2210      	movs	r2, #16
 8007f84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d006      	beq.n	8007f9a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f94:	711a      	strb	r2, [r3, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d006      	beq.n	8007fae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fa8:	711a      	strb	r2, [r3, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2243      	movs	r2, #67	@ 0x43
 8007fb2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007fb4:	4b02      	ldr	r3, [pc, #8]	@ (8007fc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3718      	adds	r7, #24
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20000050 	.word	0x20000050

08007fc4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	220a      	movs	r2, #10
 8007fd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007fd2:	4b03      	ldr	r3, [pc, #12]	@ (8007fe0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr
 8007fe0:	2000000c 	.word	0x2000000c

08007fe4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e009      	b.n	800800c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	33b0      	adds	r3, #176	@ 0xb0
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	32b0      	adds	r2, #176	@ 0xb0
 800802e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008032:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d101      	bne.n	800803e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800803a:	2303      	movs	r3, #3
 800803c:	e008      	b.n	8008050 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	371c      	adds	r7, #28
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	32b0      	adds	r2, #176	@ 0xb0
 8008070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008074:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800807c:	2303      	movs	r3, #3
 800807e:	e004      	b.n	800808a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3714      	adds	r7, #20
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
	...

08008098 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	32b0      	adds	r2, #176	@ 0xb0
 80080aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ae:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80080b0:	2301      	movs	r3, #1
 80080b2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e025      	b.n	800810a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d11f      	bne.n	8008108 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80080d0:	4b10      	ldr	r3, [pc, #64]	@ (8008114 <USBD_CDC_TransmitPacket+0x7c>)
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	f003 020f 	and.w	r2, r3, #15
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	4613      	mov	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4403      	add	r3, r0
 80080ea:	3318      	adds	r3, #24
 80080ec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80080ee:	4b09      	ldr	r3, [pc, #36]	@ (8008114 <USBD_CDC_TransmitPacket+0x7c>)
 80080f0:	7819      	ldrb	r1, [r3, #0]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f001 ffd1 	bl	800a0a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008108:	7bfb      	ldrb	r3, [r7, #15]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	20000093 	.word	0x20000093

08008118 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	32b0      	adds	r2, #176	@ 0xb0
 800812a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800812e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	32b0      	adds	r2, #176	@ 0xb0
 800813a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008142:	2303      	movs	r3, #3
 8008144:	e018      	b.n	8008178 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	7c1b      	ldrb	r3, [r3, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10a      	bne.n	8008164 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800814e:	4b0c      	ldr	r3, [pc, #48]	@ (8008180 <USBD_CDC_ReceivePacket+0x68>)
 8008150:	7819      	ldrb	r1, [r3, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008158:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f001 ffc3 	bl	800a0e8 <USBD_LL_PrepareReceive>
 8008162:	e008      	b.n	8008176 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008164:	4b06      	ldr	r3, [pc, #24]	@ (8008180 <USBD_CDC_ReceivePacket+0x68>)
 8008166:	7819      	ldrb	r1, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800816e:	2340      	movs	r3, #64	@ 0x40
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f001 ffb9 	bl	800a0e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	20000094 	.word	0x20000094

08008184 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	4613      	mov	r3, r2
 8008190:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008198:	2303      	movs	r3, #3
 800819a:	e01f      	b.n	80081dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	79fa      	ldrb	r2, [r7, #7]
 80081ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f001 fe33 	bl	8009e3c <USBD_LL_Init>
 80081d6:	4603      	mov	r3, r0
 80081d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80081da:	7dfb      	ldrb	r3, [r7, #23]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d101      	bne.n	80081fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e025      	b.n	8008248 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	32ae      	adds	r2, #174	@ 0xae
 800820e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00f      	beq.n	8008238 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	32ae      	adds	r2, #174	@ 0xae
 8008222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008228:	f107 020e 	add.w	r2, r7, #14
 800822c:	4610      	mov	r0, r2
 800822e:	4798      	blx	r3
 8008230:	4602      	mov	r2, r0
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800823e:	1c5a      	adds	r2, r3, #1
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f001 fe3b 	bl	8009ed4 <USBD_LL_Start>
 800825e:	4603      	mov	r3, r0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008270:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008272:	4618      	mov	r0, r3
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b084      	sub	sp, #16
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	460b      	mov	r3, r1
 8008288:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008294:	2b00      	cmp	r3, #0
 8008296:	d009      	beq.n	80082ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	78fa      	ldrb	r2, [r7, #3]
 80082a2:	4611      	mov	r1, r2
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	4798      	blx	r3
 80082a8:	4603      	mov	r3, r0
 80082aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	460b      	mov	r3, r1
 80082c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	78fa      	ldrb	r2, [r7, #3]
 80082d0:	4611      	mov	r1, r2
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	4798      	blx	r3
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d001      	beq.n	80082e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80082dc:	2303      	movs	r3, #3
 80082de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f001 f90c 	bl	800951a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008310:	461a      	mov	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800831e:	f003 031f 	and.w	r3, r3, #31
 8008322:	2b02      	cmp	r3, #2
 8008324:	d01a      	beq.n	800835c <USBD_LL_SetupStage+0x72>
 8008326:	2b02      	cmp	r3, #2
 8008328:	d822      	bhi.n	8008370 <USBD_LL_SetupStage+0x86>
 800832a:	2b00      	cmp	r3, #0
 800832c:	d002      	beq.n	8008334 <USBD_LL_SetupStage+0x4a>
 800832e:	2b01      	cmp	r3, #1
 8008330:	d00a      	beq.n	8008348 <USBD_LL_SetupStage+0x5e>
 8008332:	e01d      	b.n	8008370 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fb63 	bl	8008a08 <USBD_StdDevReq>
 8008342:	4603      	mov	r3, r0
 8008344:	73fb      	strb	r3, [r7, #15]
      break;
 8008346:	e020      	b.n	800838a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fbcb 	bl	8008aec <USBD_StdItfReq>
 8008356:	4603      	mov	r3, r0
 8008358:	73fb      	strb	r3, [r7, #15]
      break;
 800835a:	e016      	b.n	800838a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fc2d 	bl	8008bc4 <USBD_StdEPReq>
 800836a:	4603      	mov	r3, r0
 800836c:	73fb      	strb	r3, [r7, #15]
      break;
 800836e:	e00c      	b.n	800838a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008376:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800837a:	b2db      	uxtb	r3, r3
 800837c:	4619      	mov	r1, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f001 fe08 	bl	8009f94 <USBD_LL_StallEP>
 8008384:	4603      	mov	r3, r0
 8008386:	73fb      	strb	r3, [r7, #15]
      break;
 8008388:	bf00      	nop
  }

  return ret;
 800838a:	7bfb      	ldrb	r3, [r7, #15]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	460b      	mov	r3, r1
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80083a6:	7afb      	ldrb	r3, [r7, #11]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d16e      	bne.n	800848a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80083b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80083ba:	2b03      	cmp	r3, #3
 80083bc:	f040 8098 	bne.w	80084f0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d913      	bls.n	80083f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	689a      	ldr	r2, [r3, #8]
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	1ad2      	subs	r2, r2, r3
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	68da      	ldr	r2, [r3, #12]
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	4293      	cmp	r3, r2
 80083e4:	bf28      	it	cs
 80083e6:	4613      	movcs	r3, r2
 80083e8:	461a      	mov	r2, r3
 80083ea:	6879      	ldr	r1, [r7, #4]
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f001 f994 	bl	800971a <USBD_CtlContinueRx>
 80083f2:	e07d      	b.n	80084f0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80083fa:	f003 031f 	and.w	r3, r3, #31
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d014      	beq.n	800842c <USBD_LL_DataOutStage+0x98>
 8008402:	2b02      	cmp	r3, #2
 8008404:	d81d      	bhi.n	8008442 <USBD_LL_DataOutStage+0xae>
 8008406:	2b00      	cmp	r3, #0
 8008408:	d002      	beq.n	8008410 <USBD_LL_DataOutStage+0x7c>
 800840a:	2b01      	cmp	r3, #1
 800840c:	d003      	beq.n	8008416 <USBD_LL_DataOutStage+0x82>
 800840e:	e018      	b.n	8008442 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	75bb      	strb	r3, [r7, #22]
            break;
 8008414:	e018      	b.n	8008448 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800841c:	b2db      	uxtb	r3, r3
 800841e:	4619      	mov	r1, r3
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 fa64 	bl	80088ee <USBD_CoreFindIF>
 8008426:	4603      	mov	r3, r0
 8008428:	75bb      	strb	r3, [r7, #22]
            break;
 800842a:	e00d      	b.n	8008448 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008432:	b2db      	uxtb	r3, r3
 8008434:	4619      	mov	r1, r3
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f000 fa66 	bl	8008908 <USBD_CoreFindEP>
 800843c:	4603      	mov	r3, r0
 800843e:	75bb      	strb	r3, [r7, #22]
            break;
 8008440:	e002      	b.n	8008448 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008442:	2300      	movs	r3, #0
 8008444:	75bb      	strb	r3, [r7, #22]
            break;
 8008446:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008448:	7dbb      	ldrb	r3, [r7, #22]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d119      	bne.n	8008482 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b03      	cmp	r3, #3
 8008458:	d113      	bne.n	8008482 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800845a:	7dba      	ldrb	r2, [r7, #22]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	32ae      	adds	r2, #174	@ 0xae
 8008460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00b      	beq.n	8008482 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800846a:	7dba      	ldrb	r2, [r7, #22]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008472:	7dba      	ldrb	r2, [r7, #22]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	32ae      	adds	r2, #174	@ 0xae
 8008478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f001 f95a 	bl	800973c <USBD_CtlSendStatus>
 8008488:	e032      	b.n	80084f0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800848a:	7afb      	ldrb	r3, [r7, #11]
 800848c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008490:	b2db      	uxtb	r3, r3
 8008492:	4619      	mov	r1, r3
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 fa37 	bl	8008908 <USBD_CoreFindEP>
 800849a:	4603      	mov	r3, r0
 800849c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800849e:	7dbb      	ldrb	r3, [r7, #22]
 80084a0:	2bff      	cmp	r3, #255	@ 0xff
 80084a2:	d025      	beq.n	80084f0 <USBD_LL_DataOutStage+0x15c>
 80084a4:	7dbb      	ldrb	r3, [r7, #22]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d122      	bne.n	80084f0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	d117      	bne.n	80084e6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80084b6:	7dba      	ldrb	r2, [r7, #22]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	32ae      	adds	r2, #174	@ 0xae
 80084bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00f      	beq.n	80084e6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80084c6:	7dba      	ldrb	r2, [r7, #22]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80084ce:	7dba      	ldrb	r2, [r7, #22]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	32ae      	adds	r2, #174	@ 0xae
 80084d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	7afa      	ldrb	r2, [r7, #11]
 80084dc:	4611      	mov	r1, r2
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	4798      	blx	r3
 80084e2:	4603      	mov	r3, r0
 80084e4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80084e6:	7dfb      	ldrb	r3, [r7, #23]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80084ec:	7dfb      	ldrb	r3, [r7, #23]
 80084ee:	e000      	b.n	80084f2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3718      	adds	r7, #24
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b086      	sub	sp, #24
 80084fe:	af00      	add	r7, sp, #0
 8008500:	60f8      	str	r0, [r7, #12]
 8008502:	460b      	mov	r3, r1
 8008504:	607a      	str	r2, [r7, #4]
 8008506:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008508:	7afb      	ldrb	r3, [r7, #11]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d16f      	bne.n	80085ee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3314      	adds	r3, #20
 8008512:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800851a:	2b02      	cmp	r3, #2
 800851c:	d15a      	bne.n	80085d4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	689a      	ldr	r2, [r3, #8]
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	429a      	cmp	r2, r3
 8008528:	d914      	bls.n	8008554 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	689a      	ldr	r2, [r3, #8]
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	1ad2      	subs	r2, r2, r3
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	461a      	mov	r2, r3
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f001 f8bc 	bl	80096be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008546:	2300      	movs	r3, #0
 8008548:	2200      	movs	r2, #0
 800854a:	2100      	movs	r1, #0
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f001 fdcb 	bl	800a0e8 <USBD_LL_PrepareReceive>
 8008552:	e03f      	b.n	80085d4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	68da      	ldr	r2, [r3, #12]
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	429a      	cmp	r2, r3
 800855e:	d11c      	bne.n	800859a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008568:	429a      	cmp	r2, r3
 800856a:	d316      	bcc.n	800859a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	685a      	ldr	r2, [r3, #4]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008576:	429a      	cmp	r2, r3
 8008578:	d20f      	bcs.n	800859a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800857a:	2200      	movs	r2, #0
 800857c:	2100      	movs	r1, #0
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f001 f89d 	bl	80096be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800858c:	2300      	movs	r3, #0
 800858e:	2200      	movs	r2, #0
 8008590:	2100      	movs	r1, #0
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f001 fda8 	bl	800a0e8 <USBD_LL_PrepareReceive>
 8008598:	e01c      	b.n	80085d4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b03      	cmp	r3, #3
 80085a4:	d10f      	bne.n	80085c6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d009      	beq.n	80085c6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80085c6:	2180      	movs	r1, #128	@ 0x80
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f001 fce3 	bl	8009f94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f001 f8c7 	bl	8009762 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d03a      	beq.n	8008654 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f7ff fe42 	bl	8008268 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80085ec:	e032      	b.n	8008654 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80085ee:	7afb      	ldrb	r3, [r7, #11]
 80085f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	4619      	mov	r1, r3
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 f985 	bl	8008908 <USBD_CoreFindEP>
 80085fe:	4603      	mov	r3, r0
 8008600:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008602:	7dfb      	ldrb	r3, [r7, #23]
 8008604:	2bff      	cmp	r3, #255	@ 0xff
 8008606:	d025      	beq.n	8008654 <USBD_LL_DataInStage+0x15a>
 8008608:	7dfb      	ldrb	r3, [r7, #23]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d122      	bne.n	8008654 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b03      	cmp	r3, #3
 8008618:	d11c      	bne.n	8008654 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800861a:	7dfa      	ldrb	r2, [r7, #23]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	32ae      	adds	r2, #174	@ 0xae
 8008620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d014      	beq.n	8008654 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800862a:	7dfa      	ldrb	r2, [r7, #23]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008632:	7dfa      	ldrb	r2, [r7, #23]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	32ae      	adds	r2, #174	@ 0xae
 8008638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	7afa      	ldrb	r2, [r7, #11]
 8008640:	4611      	mov	r1, r2
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	4798      	blx	r3
 8008646:	4603      	mov	r3, r0
 8008648:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800864a:	7dbb      	ldrb	r3, [r7, #22]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008650:	7dbb      	ldrb	r3, [r7, #22]
 8008652:	e000      	b.n	8008656 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008696:	2b00      	cmp	r3, #0
 8008698:	d014      	beq.n	80086c4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00e      	beq.n	80086c4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	6852      	ldr	r2, [r2, #4]
 80086b2:	b2d2      	uxtb	r2, r2
 80086b4:	4611      	mov	r1, r2
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	4798      	blx	r3
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80086c0:	2303      	movs	r3, #3
 80086c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086c4:	2340      	movs	r3, #64	@ 0x40
 80086c6:	2200      	movs	r2, #0
 80086c8:	2100      	movs	r1, #0
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f001 fc1d 	bl	8009f0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2240      	movs	r2, #64	@ 0x40
 80086dc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086e0:	2340      	movs	r3, #64	@ 0x40
 80086e2:	2200      	movs	r2, #0
 80086e4:	2180      	movs	r1, #128	@ 0x80
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f001 fc0f 	bl	8009f0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2240      	movs	r2, #64	@ 0x40
 80086f6:	621a      	str	r2, [r3, #32]

  return ret;
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	460b      	mov	r3, r1
 800870c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	78fa      	ldrb	r2, [r7, #3]
 8008712:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008722:	b480      	push	{r7}
 8008724:	b083      	sub	sp, #12
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b04      	cmp	r3, #4
 8008734:	d006      	beq.n	8008744 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800873c:	b2da      	uxtb	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2204      	movs	r2, #4
 8008748:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800875a:	b480      	push	{r7}
 800875c:	b083      	sub	sp, #12
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008768:	b2db      	uxtb	r3, r3
 800876a:	2b04      	cmp	r3, #4
 800876c:	d106      	bne.n	800877c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008774:	b2da      	uxtb	r2, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr

0800878a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b082      	sub	sp, #8
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b03      	cmp	r3, #3
 800879c:	d110      	bne.n	80087c0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00b      	beq.n	80087c0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d005      	beq.n	80087c0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087ba:	69db      	ldr	r3, [r3, #28]
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b082      	sub	sp, #8
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	460b      	mov	r3, r1
 80087d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	32ae      	adds	r2, #174	@ 0xae
 80087e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d101      	bne.n	80087ec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e01c      	b.n	8008826 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b03      	cmp	r3, #3
 80087f6:	d115      	bne.n	8008824 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	32ae      	adds	r2, #174	@ 0xae
 8008802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00b      	beq.n	8008824 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	32ae      	adds	r2, #174	@ 0xae
 8008816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800881a:	6a1b      	ldr	r3, [r3, #32]
 800881c:	78fa      	ldrb	r2, [r7, #3]
 800881e:	4611      	mov	r1, r2
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b082      	sub	sp, #8
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	460b      	mov	r3, r1
 8008838:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	32ae      	adds	r2, #174	@ 0xae
 8008844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800884c:	2303      	movs	r3, #3
 800884e:	e01c      	b.n	800888a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008856:	b2db      	uxtb	r3, r3
 8008858:	2b03      	cmp	r3, #3
 800885a:	d115      	bne.n	8008888 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	32ae      	adds	r2, #174	@ 0xae
 8008866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800886a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00b      	beq.n	8008888 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	32ae      	adds	r2, #174	@ 0xae
 800887a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800887e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008880:	78fa      	ldrb	r2, [r7, #3]
 8008882:	4611      	mov	r1, r2
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008892:	b480      	push	{r7}
 8008894:	b083      	sub	sp, #12
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00e      	beq.n	80088e4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	6852      	ldr	r2, [r2, #4]
 80088d2:	b2d2      	uxtb	r2, r2
 80088d4:	4611      	mov	r1, r2
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	4798      	blx	r3
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d001      	beq.n	80088e4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80088e0:	2303      	movs	r3, #3
 80088e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b083      	sub	sp, #12
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	460b      	mov	r3, r1
 80088f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80088fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008914:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008916:	4618      	mov	r0, r3
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b086      	sub	sp, #24
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
 800892a:	460b      	mov	r3, r1
 800892c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008936:	2300      	movs	r3, #0
 8008938:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	885b      	ldrh	r3, [r3, #2]
 800893e:	b29b      	uxth	r3, r3
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	7812      	ldrb	r2, [r2, #0]
 8008944:	4293      	cmp	r3, r2
 8008946:	d91f      	bls.n	8008988 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800894e:	e013      	b.n	8008978 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008950:	f107 030a 	add.w	r3, r7, #10
 8008954:	4619      	mov	r1, r3
 8008956:	6978      	ldr	r0, [r7, #20]
 8008958:	f000 f81b 	bl	8008992 <USBD_GetNextDesc>
 800895c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	785b      	ldrb	r3, [r3, #1]
 8008962:	2b05      	cmp	r3, #5
 8008964:	d108      	bne.n	8008978 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	789b      	ldrb	r3, [r3, #2]
 800896e:	78fa      	ldrb	r2, [r7, #3]
 8008970:	429a      	cmp	r2, r3
 8008972:	d008      	beq.n	8008986 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008974:	2300      	movs	r3, #0
 8008976:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	885b      	ldrh	r3, [r3, #2]
 800897c:	b29a      	uxth	r2, r3
 800897e:	897b      	ldrh	r3, [r7, #10]
 8008980:	429a      	cmp	r2, r3
 8008982:	d8e5      	bhi.n	8008950 <USBD_GetEpDesc+0x2e>
 8008984:	e000      	b.n	8008988 <USBD_GetEpDesc+0x66>
          break;
 8008986:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008988:	693b      	ldr	r3, [r7, #16]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3718      	adds	r7, #24
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008992:	b480      	push	{r7}
 8008994:	b085      	sub	sp, #20
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	881b      	ldrh	r3, [r3, #0]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	7812      	ldrb	r2, [r2, #0]
 80089a8:	4413      	add	r3, r2
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	461a      	mov	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4413      	add	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80089bc:	68fb      	ldr	r3, [r7, #12]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b087      	sub	sp, #28
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	3301      	adds	r3, #1
 80089e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80089e8:	8a3b      	ldrh	r3, [r7, #16]
 80089ea:	021b      	lsls	r3, r3, #8
 80089ec:	b21a      	sxth	r2, r3
 80089ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	b21b      	sxth	r3, r3
 80089f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80089f8:	89fb      	ldrh	r3, [r7, #14]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	371c      	adds	r7, #28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
	...

08008a08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a1e:	2b40      	cmp	r3, #64	@ 0x40
 8008a20:	d005      	beq.n	8008a2e <USBD_StdDevReq+0x26>
 8008a22:	2b40      	cmp	r3, #64	@ 0x40
 8008a24:	d857      	bhi.n	8008ad6 <USBD_StdDevReq+0xce>
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00f      	beq.n	8008a4a <USBD_StdDevReq+0x42>
 8008a2a:	2b20      	cmp	r3, #32
 8008a2c:	d153      	bne.n	8008ad6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	32ae      	adds	r2, #174	@ 0xae
 8008a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	6839      	ldr	r1, [r7, #0]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	4798      	blx	r3
 8008a44:	4603      	mov	r3, r0
 8008a46:	73fb      	strb	r3, [r7, #15]
      break;
 8008a48:	e04a      	b.n	8008ae0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	785b      	ldrb	r3, [r3, #1]
 8008a4e:	2b09      	cmp	r3, #9
 8008a50:	d83b      	bhi.n	8008aca <USBD_StdDevReq+0xc2>
 8008a52:	a201      	add	r2, pc, #4	@ (adr r2, 8008a58 <USBD_StdDevReq+0x50>)
 8008a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a58:	08008aad 	.word	0x08008aad
 8008a5c:	08008ac1 	.word	0x08008ac1
 8008a60:	08008acb 	.word	0x08008acb
 8008a64:	08008ab7 	.word	0x08008ab7
 8008a68:	08008acb 	.word	0x08008acb
 8008a6c:	08008a8b 	.word	0x08008a8b
 8008a70:	08008a81 	.word	0x08008a81
 8008a74:	08008acb 	.word	0x08008acb
 8008a78:	08008aa3 	.word	0x08008aa3
 8008a7c:	08008a95 	.word	0x08008a95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fa3c 	bl	8008f00 <USBD_GetDescriptor>
          break;
 8008a88:	e024      	b.n	8008ad4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fba1 	bl	80091d4 <USBD_SetAddress>
          break;
 8008a92:	e01f      	b.n	8008ad4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008a94:	6839      	ldr	r1, [r7, #0]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fbe0 	bl	800925c <USBD_SetConfig>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73fb      	strb	r3, [r7, #15]
          break;
 8008aa0:	e018      	b.n	8008ad4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fc83 	bl	80093b0 <USBD_GetConfig>
          break;
 8008aaa:	e013      	b.n	8008ad4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fcb4 	bl	800941c <USBD_GetStatus>
          break;
 8008ab4:	e00e      	b.n	8008ad4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fce3 	bl	8009484 <USBD_SetFeature>
          break;
 8008abe:	e009      	b.n	8008ad4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ac0:	6839      	ldr	r1, [r7, #0]
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fd07 	bl	80094d6 <USBD_ClrFeature>
          break;
 8008ac8:	e004      	b.n	8008ad4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fd5e 	bl	800958e <USBD_CtlError>
          break;
 8008ad2:	bf00      	nop
      }
      break;
 8008ad4:	e004      	b.n	8008ae0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fd58 	bl	800958e <USBD_CtlError>
      break;
 8008ade:	bf00      	nop
  }

  return ret;
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop

08008aec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b02:	2b40      	cmp	r3, #64	@ 0x40
 8008b04:	d005      	beq.n	8008b12 <USBD_StdItfReq+0x26>
 8008b06:	2b40      	cmp	r3, #64	@ 0x40
 8008b08:	d852      	bhi.n	8008bb0 <USBD_StdItfReq+0xc4>
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <USBD_StdItfReq+0x26>
 8008b0e:	2b20      	cmp	r3, #32
 8008b10:	d14e      	bne.n	8008bb0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d840      	bhi.n	8008ba2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	889b      	ldrh	r3, [r3, #4]
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d836      	bhi.n	8008b98 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	889b      	ldrh	r3, [r3, #4]
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	4619      	mov	r1, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7ff fedb 	bl	80088ee <USBD_CoreFindIF>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b3c:	7bbb      	ldrb	r3, [r7, #14]
 8008b3e:	2bff      	cmp	r3, #255	@ 0xff
 8008b40:	d01d      	beq.n	8008b7e <USBD_StdItfReq+0x92>
 8008b42:	7bbb      	ldrb	r3, [r7, #14]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d11a      	bne.n	8008b7e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008b48:	7bba      	ldrb	r2, [r7, #14]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	32ae      	adds	r2, #174	@ 0xae
 8008b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00f      	beq.n	8008b78 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008b58:	7bba      	ldrb	r2, [r7, #14]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008b60:	7bba      	ldrb	r2, [r7, #14]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	32ae      	adds	r2, #174	@ 0xae
 8008b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	4798      	blx	r3
 8008b72:	4603      	mov	r3, r0
 8008b74:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b76:	e004      	b.n	8008b82 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b7c:	e001      	b.n	8008b82 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	88db      	ldrh	r3, [r3, #6]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d110      	bne.n	8008bac <USBD_StdItfReq+0xc0>
 8008b8a:	7bfb      	ldrb	r3, [r7, #15]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10d      	bne.n	8008bac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fdd3 	bl	800973c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b96:	e009      	b.n	8008bac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fcf7 	bl	800958e <USBD_CtlError>
          break;
 8008ba0:	e004      	b.n	8008bac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fcf2 	bl	800958e <USBD_CtlError>
          break;
 8008baa:	e000      	b.n	8008bae <USBD_StdItfReq+0xc2>
          break;
 8008bac:	bf00      	nop
      }
      break;
 8008bae:	e004      	b.n	8008bba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fceb 	bl	800958e <USBD_CtlError>
      break;
 8008bb8:	bf00      	nop
  }

  return ret;
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	889b      	ldrh	r3, [r3, #4]
 8008bd6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008be0:	2b40      	cmp	r3, #64	@ 0x40
 8008be2:	d007      	beq.n	8008bf4 <USBD_StdEPReq+0x30>
 8008be4:	2b40      	cmp	r3, #64	@ 0x40
 8008be6:	f200 817f 	bhi.w	8008ee8 <USBD_StdEPReq+0x324>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d02a      	beq.n	8008c44 <USBD_StdEPReq+0x80>
 8008bee:	2b20      	cmp	r3, #32
 8008bf0:	f040 817a 	bne.w	8008ee8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008bf4:	7bbb      	ldrb	r3, [r7, #14]
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f7ff fe85 	bl	8008908 <USBD_CoreFindEP>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c02:	7b7b      	ldrb	r3, [r7, #13]
 8008c04:	2bff      	cmp	r3, #255	@ 0xff
 8008c06:	f000 8174 	beq.w	8008ef2 <USBD_StdEPReq+0x32e>
 8008c0a:	7b7b      	ldrb	r3, [r7, #13]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f040 8170 	bne.w	8008ef2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008c12:	7b7a      	ldrb	r2, [r7, #13]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008c1a:	7b7a      	ldrb	r2, [r7, #13]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	32ae      	adds	r2, #174	@ 0xae
 8008c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 8163 	beq.w	8008ef2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008c2c:	7b7a      	ldrb	r2, [r7, #13]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	32ae      	adds	r2, #174	@ 0xae
 8008c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	4798      	blx	r3
 8008c3e:	4603      	mov	r3, r0
 8008c40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c42:	e156      	b.n	8008ef2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	785b      	ldrb	r3, [r3, #1]
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d008      	beq.n	8008c5e <USBD_StdEPReq+0x9a>
 8008c4c:	2b03      	cmp	r3, #3
 8008c4e:	f300 8145 	bgt.w	8008edc <USBD_StdEPReq+0x318>
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f000 809b 	beq.w	8008d8e <USBD_StdEPReq+0x1ca>
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d03c      	beq.n	8008cd6 <USBD_StdEPReq+0x112>
 8008c5c:	e13e      	b.n	8008edc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d002      	beq.n	8008c70 <USBD_StdEPReq+0xac>
 8008c6a:	2b03      	cmp	r3, #3
 8008c6c:	d016      	beq.n	8008c9c <USBD_StdEPReq+0xd8>
 8008c6e:	e02c      	b.n	8008cca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c70:	7bbb      	ldrb	r3, [r7, #14]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00d      	beq.n	8008c92 <USBD_StdEPReq+0xce>
 8008c76:	7bbb      	ldrb	r3, [r7, #14]
 8008c78:	2b80      	cmp	r3, #128	@ 0x80
 8008c7a:	d00a      	beq.n	8008c92 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f001 f987 	bl	8009f94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c86:	2180      	movs	r1, #128	@ 0x80
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f001 f983 	bl	8009f94 <USBD_LL_StallEP>
 8008c8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c90:	e020      	b.n	8008cd4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fc7a 	bl	800958e <USBD_CtlError>
              break;
 8008c9a:	e01b      	b.n	8008cd4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	885b      	ldrh	r3, [r3, #2]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10e      	bne.n	8008cc2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ca4:	7bbb      	ldrb	r3, [r7, #14]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00b      	beq.n	8008cc2 <USBD_StdEPReq+0xfe>
 8008caa:	7bbb      	ldrb	r3, [r7, #14]
 8008cac:	2b80      	cmp	r3, #128	@ 0x80
 8008cae:	d008      	beq.n	8008cc2 <USBD_StdEPReq+0xfe>
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	88db      	ldrh	r3, [r3, #6]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d104      	bne.n	8008cc2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cb8:	7bbb      	ldrb	r3, [r7, #14]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f001 f969 	bl	8009f94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fd3a 	bl	800973c <USBD_CtlSendStatus>

              break;
 8008cc8:	e004      	b.n	8008cd4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fc5e 	bl	800958e <USBD_CtlError>
              break;
 8008cd2:	bf00      	nop
          }
          break;
 8008cd4:	e107      	b.n	8008ee6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d002      	beq.n	8008ce8 <USBD_StdEPReq+0x124>
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d016      	beq.n	8008d14 <USBD_StdEPReq+0x150>
 8008ce6:	e04b      	b.n	8008d80 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ce8:	7bbb      	ldrb	r3, [r7, #14]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00d      	beq.n	8008d0a <USBD_StdEPReq+0x146>
 8008cee:	7bbb      	ldrb	r3, [r7, #14]
 8008cf0:	2b80      	cmp	r3, #128	@ 0x80
 8008cf2:	d00a      	beq.n	8008d0a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f001 f94b 	bl	8009f94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cfe:	2180      	movs	r1, #128	@ 0x80
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f001 f947 	bl	8009f94 <USBD_LL_StallEP>
 8008d06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d08:	e040      	b.n	8008d8c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008d0a:	6839      	ldr	r1, [r7, #0]
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 fc3e 	bl	800958e <USBD_CtlError>
              break;
 8008d12:	e03b      	b.n	8008d8c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	885b      	ldrh	r3, [r3, #2]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d136      	bne.n	8008d8a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d1c:	7bbb      	ldrb	r3, [r7, #14]
 8008d1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d004      	beq.n	8008d30 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d26:	7bbb      	ldrb	r3, [r7, #14]
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f001 f951 	bl	8009fd2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fd03 	bl	800973c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d36:	7bbb      	ldrb	r3, [r7, #14]
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f7ff fde4 	bl	8008908 <USBD_CoreFindEP>
 8008d40:	4603      	mov	r3, r0
 8008d42:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d44:	7b7b      	ldrb	r3, [r7, #13]
 8008d46:	2bff      	cmp	r3, #255	@ 0xff
 8008d48:	d01f      	beq.n	8008d8a <USBD_StdEPReq+0x1c6>
 8008d4a:	7b7b      	ldrb	r3, [r7, #13]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d11c      	bne.n	8008d8a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008d50:	7b7a      	ldrb	r2, [r7, #13]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008d58:	7b7a      	ldrb	r2, [r7, #13]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	32ae      	adds	r2, #174	@ 0xae
 8008d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d010      	beq.n	8008d8a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d68:	7b7a      	ldrb	r2, [r7, #13]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	32ae      	adds	r2, #174	@ 0xae
 8008d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	6839      	ldr	r1, [r7, #0]
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	4798      	blx	r3
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008d7e:	e004      	b.n	8008d8a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fc03 	bl	800958e <USBD_CtlError>
              break;
 8008d88:	e000      	b.n	8008d8c <USBD_StdEPReq+0x1c8>
              break;
 8008d8a:	bf00      	nop
          }
          break;
 8008d8c:	e0ab      	b.n	8008ee6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d002      	beq.n	8008da0 <USBD_StdEPReq+0x1dc>
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d032      	beq.n	8008e04 <USBD_StdEPReq+0x240>
 8008d9e:	e097      	b.n	8008ed0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008da0:	7bbb      	ldrb	r3, [r7, #14]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d007      	beq.n	8008db6 <USBD_StdEPReq+0x1f2>
 8008da6:	7bbb      	ldrb	r3, [r7, #14]
 8008da8:	2b80      	cmp	r3, #128	@ 0x80
 8008daa:	d004      	beq.n	8008db6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008dac:	6839      	ldr	r1, [r7, #0]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fbed 	bl	800958e <USBD_CtlError>
                break;
 8008db4:	e091      	b.n	8008eda <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008db6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	da0b      	bge.n	8008dd6 <USBD_StdEPReq+0x212>
 8008dbe:	7bbb      	ldrb	r3, [r7, #14]
 8008dc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4413      	add	r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	3310      	adds	r3, #16
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	e00b      	b.n	8008dee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008dd6:	7bbb      	ldrb	r3, [r7, #14]
 8008dd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ddc:	4613      	mov	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4413      	add	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	4413      	add	r3, r2
 8008dec:	3304      	adds	r3, #4
 8008dee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	2200      	movs	r2, #0
 8008df4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	2202      	movs	r2, #2
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fc43 	bl	8009688 <USBD_CtlSendData>
              break;
 8008e02:	e06a      	b.n	8008eda <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	da11      	bge.n	8008e30 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
 8008e0e:	f003 020f 	and.w	r2, r3, #15
 8008e12:	6879      	ldr	r1, [r7, #4]
 8008e14:	4613      	mov	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4413      	add	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	440b      	add	r3, r1
 8008e1e:	3324      	adds	r3, #36	@ 0x24
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d117      	bne.n	8008e56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008e26:	6839      	ldr	r1, [r7, #0]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fbb0 	bl	800958e <USBD_CtlError>
                  break;
 8008e2e:	e054      	b.n	8008eda <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e30:	7bbb      	ldrb	r3, [r7, #14]
 8008e32:	f003 020f 	and.w	r2, r3, #15
 8008e36:	6879      	ldr	r1, [r7, #4]
 8008e38:	4613      	mov	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4413      	add	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	440b      	add	r3, r1
 8008e42:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008e46:	881b      	ldrh	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d104      	bne.n	8008e56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fb9d 	bl	800958e <USBD_CtlError>
                  break;
 8008e54:	e041      	b.n	8008eda <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	da0b      	bge.n	8008e76 <USBD_StdEPReq+0x2b2>
 8008e5e:	7bbb      	ldrb	r3, [r7, #14]
 8008e60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e64:	4613      	mov	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	3310      	adds	r3, #16
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	4413      	add	r3, r2
 8008e72:	3304      	adds	r3, #4
 8008e74:	e00b      	b.n	8008e8e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e76:	7bbb      	ldrb	r3, [r7, #14]
 8008e78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d002      	beq.n	8008e9c <USBD_StdEPReq+0x2d8>
 8008e96:	7bbb      	ldrb	r3, [r7, #14]
 8008e98:	2b80      	cmp	r3, #128	@ 0x80
 8008e9a:	d103      	bne.n	8008ea4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	e00e      	b.n	8008ec2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ea4:	7bbb      	ldrb	r3, [r7, #14]
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f001 f8b1 	bl	800a010 <USBD_LL_IsStallEP>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d003      	beq.n	8008ebc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	601a      	str	r2, [r3, #0]
 8008eba:	e002      	b.n	8008ec2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fbdd 	bl	8009688 <USBD_CtlSendData>
              break;
 8008ece:	e004      	b.n	8008eda <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008ed0:	6839      	ldr	r1, [r7, #0]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fb5b 	bl	800958e <USBD_CtlError>
              break;
 8008ed8:	bf00      	nop
          }
          break;
 8008eda:	e004      	b.n	8008ee6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fb55 	bl	800958e <USBD_CtlError>
          break;
 8008ee4:	bf00      	nop
      }
      break;
 8008ee6:	e005      	b.n	8008ef4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fb4f 	bl	800958e <USBD_CtlError>
      break;
 8008ef0:	e000      	b.n	8008ef4 <USBD_StdEPReq+0x330>
      break;
 8008ef2:	bf00      	nop
  }

  return ret;
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
	...

08008f00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	885b      	ldrh	r3, [r3, #2]
 8008f1a:	0a1b      	lsrs	r3, r3, #8
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	2b06      	cmp	r3, #6
 8008f22:	f200 8128 	bhi.w	8009176 <USBD_GetDescriptor+0x276>
 8008f26:	a201      	add	r2, pc, #4	@ (adr r2, 8008f2c <USBD_GetDescriptor+0x2c>)
 8008f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2c:	08008f49 	.word	0x08008f49
 8008f30:	08008f61 	.word	0x08008f61
 8008f34:	08008fa1 	.word	0x08008fa1
 8008f38:	08009177 	.word	0x08009177
 8008f3c:	08009177 	.word	0x08009177
 8008f40:	08009117 	.word	0x08009117
 8008f44:	08009143 	.word	0x08009143
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	7c12      	ldrb	r2, [r2, #16]
 8008f54:	f107 0108 	add.w	r1, r7, #8
 8008f58:	4610      	mov	r0, r2
 8008f5a:	4798      	blx	r3
 8008f5c:	60f8      	str	r0, [r7, #12]
      break;
 8008f5e:	e112      	b.n	8009186 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	7c1b      	ldrb	r3, [r3, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10d      	bne.n	8008f84 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f70:	f107 0208 	add.w	r2, r7, #8
 8008f74:	4610      	mov	r0, r2
 8008f76:	4798      	blx	r3
 8008f78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	2202      	movs	r2, #2
 8008f80:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f82:	e100      	b.n	8009186 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f8c:	f107 0208 	add.w	r2, r7, #8
 8008f90:	4610      	mov	r0, r2
 8008f92:	4798      	blx	r3
 8008f94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	701a      	strb	r2, [r3, #0]
      break;
 8008f9e:	e0f2      	b.n	8009186 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	885b      	ldrh	r3, [r3, #2]
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b05      	cmp	r3, #5
 8008fa8:	f200 80ac 	bhi.w	8009104 <USBD_GetDescriptor+0x204>
 8008fac:	a201      	add	r2, pc, #4	@ (adr r2, 8008fb4 <USBD_GetDescriptor+0xb4>)
 8008fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb2:	bf00      	nop
 8008fb4:	08008fcd 	.word	0x08008fcd
 8008fb8:	08009001 	.word	0x08009001
 8008fbc:	08009035 	.word	0x08009035
 8008fc0:	08009069 	.word	0x08009069
 8008fc4:	0800909d 	.word	0x0800909d
 8008fc8:	080090d1 	.word	0x080090d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00b      	beq.n	8008ff0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	7c12      	ldrb	r2, [r2, #16]
 8008fe4:	f107 0108 	add.w	r1, r7, #8
 8008fe8:	4610      	mov	r0, r2
 8008fea:	4798      	blx	r3
 8008fec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fee:	e091      	b.n	8009114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ff0:	6839      	ldr	r1, [r7, #0]
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 facb 	bl	800958e <USBD_CtlError>
            err++;
 8008ff8:	7afb      	ldrb	r3, [r7, #11]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	72fb      	strb	r3, [r7, #11]
          break;
 8008ffe:	e089      	b.n	8009114 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00b      	beq.n	8009024 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	7c12      	ldrb	r2, [r2, #16]
 8009018:	f107 0108 	add.w	r1, r7, #8
 800901c:	4610      	mov	r0, r2
 800901e:	4798      	blx	r3
 8009020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009022:	e077      	b.n	8009114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009024:	6839      	ldr	r1, [r7, #0]
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fab1 	bl	800958e <USBD_CtlError>
            err++;
 800902c:	7afb      	ldrb	r3, [r7, #11]
 800902e:	3301      	adds	r3, #1
 8009030:	72fb      	strb	r3, [r7, #11]
          break;
 8009032:	e06f      	b.n	8009114 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00b      	beq.n	8009058 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	7c12      	ldrb	r2, [r2, #16]
 800904c:	f107 0108 	add.w	r1, r7, #8
 8009050:	4610      	mov	r0, r2
 8009052:	4798      	blx	r3
 8009054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009056:	e05d      	b.n	8009114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009058:	6839      	ldr	r1, [r7, #0]
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fa97 	bl	800958e <USBD_CtlError>
            err++;
 8009060:	7afb      	ldrb	r3, [r7, #11]
 8009062:	3301      	adds	r3, #1
 8009064:	72fb      	strb	r3, [r7, #11]
          break;
 8009066:	e055      	b.n	8009114 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00b      	beq.n	800908c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	7c12      	ldrb	r2, [r2, #16]
 8009080:	f107 0108 	add.w	r1, r7, #8
 8009084:	4610      	mov	r0, r2
 8009086:	4798      	blx	r3
 8009088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800908a:	e043      	b.n	8009114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fa7d 	bl	800958e <USBD_CtlError>
            err++;
 8009094:	7afb      	ldrb	r3, [r7, #11]
 8009096:	3301      	adds	r3, #1
 8009098:	72fb      	strb	r3, [r7, #11]
          break;
 800909a:	e03b      	b.n	8009114 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090a2:	695b      	ldr	r3, [r3, #20]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00b      	beq.n	80090c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ae:	695b      	ldr	r3, [r3, #20]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	7c12      	ldrb	r2, [r2, #16]
 80090b4:	f107 0108 	add.w	r1, r7, #8
 80090b8:	4610      	mov	r0, r2
 80090ba:	4798      	blx	r3
 80090bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090be:	e029      	b.n	8009114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fa63 	bl	800958e <USBD_CtlError>
            err++;
 80090c8:	7afb      	ldrb	r3, [r7, #11]
 80090ca:	3301      	adds	r3, #1
 80090cc:	72fb      	strb	r3, [r7, #11]
          break;
 80090ce:	e021      	b.n	8009114 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090d6:	699b      	ldr	r3, [r3, #24]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00b      	beq.n	80090f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	7c12      	ldrb	r2, [r2, #16]
 80090e8:	f107 0108 	add.w	r1, r7, #8
 80090ec:	4610      	mov	r0, r2
 80090ee:	4798      	blx	r3
 80090f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090f2:	e00f      	b.n	8009114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090f4:	6839      	ldr	r1, [r7, #0]
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 fa49 	bl	800958e <USBD_CtlError>
            err++;
 80090fc:	7afb      	ldrb	r3, [r7, #11]
 80090fe:	3301      	adds	r3, #1
 8009100:	72fb      	strb	r3, [r7, #11]
          break;
 8009102:	e007      	b.n	8009114 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fa41 	bl	800958e <USBD_CtlError>
          err++;
 800910c:	7afb      	ldrb	r3, [r7, #11]
 800910e:	3301      	adds	r3, #1
 8009110:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009112:	bf00      	nop
      }
      break;
 8009114:	e037      	b.n	8009186 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	7c1b      	ldrb	r3, [r3, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d109      	bne.n	8009132 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009126:	f107 0208 	add.w	r2, r7, #8
 800912a:	4610      	mov	r0, r2
 800912c:	4798      	blx	r3
 800912e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009130:	e029      	b.n	8009186 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fa2a 	bl	800958e <USBD_CtlError>
        err++;
 800913a:	7afb      	ldrb	r3, [r7, #11]
 800913c:	3301      	adds	r3, #1
 800913e:	72fb      	strb	r3, [r7, #11]
      break;
 8009140:	e021      	b.n	8009186 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	7c1b      	ldrb	r3, [r3, #16]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d10d      	bne.n	8009166 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009152:	f107 0208 	add.w	r2, r7, #8
 8009156:	4610      	mov	r0, r2
 8009158:	4798      	blx	r3
 800915a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	3301      	adds	r3, #1
 8009160:	2207      	movs	r2, #7
 8009162:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009164:	e00f      	b.n	8009186 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 fa10 	bl	800958e <USBD_CtlError>
        err++;
 800916e:	7afb      	ldrb	r3, [r7, #11]
 8009170:	3301      	adds	r3, #1
 8009172:	72fb      	strb	r3, [r7, #11]
      break;
 8009174:	e007      	b.n	8009186 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fa08 	bl	800958e <USBD_CtlError>
      err++;
 800917e:	7afb      	ldrb	r3, [r7, #11]
 8009180:	3301      	adds	r3, #1
 8009182:	72fb      	strb	r3, [r7, #11]
      break;
 8009184:	bf00      	nop
  }

  if (err != 0U)
 8009186:	7afb      	ldrb	r3, [r7, #11]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d11e      	bne.n	80091ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	88db      	ldrh	r3, [r3, #6]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d016      	beq.n	80091c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009194:	893b      	ldrh	r3, [r7, #8]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00e      	beq.n	80091b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	88da      	ldrh	r2, [r3, #6]
 800919e:	893b      	ldrh	r3, [r7, #8]
 80091a0:	4293      	cmp	r3, r2
 80091a2:	bf28      	it	cs
 80091a4:	4613      	movcs	r3, r2
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80091aa:	893b      	ldrh	r3, [r7, #8]
 80091ac:	461a      	mov	r2, r3
 80091ae:	68f9      	ldr	r1, [r7, #12]
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fa69 	bl	8009688 <USBD_CtlSendData>
 80091b6:	e009      	b.n	80091cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f9e7 	bl	800958e <USBD_CtlError>
 80091c0:	e004      	b.n	80091cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 faba 	bl	800973c <USBD_CtlSendStatus>
 80091c8:	e000      	b.n	80091cc <USBD_GetDescriptor+0x2cc>
    return;
 80091ca:	bf00      	nop
  }
}
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop

080091d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	889b      	ldrh	r3, [r3, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d131      	bne.n	800924a <USBD_SetAddress+0x76>
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	88db      	ldrh	r3, [r3, #6]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d12d      	bne.n	800924a <USBD_SetAddress+0x76>
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	885b      	ldrh	r3, [r3, #2]
 80091f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80091f4:	d829      	bhi.n	800924a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	885b      	ldrh	r3, [r3, #2]
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009200:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b03      	cmp	r3, #3
 800920c:	d104      	bne.n	8009218 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f9bc 	bl	800958e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009216:	e01d      	b.n	8009254 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	7bfa      	ldrb	r2, [r7, #15]
 800921c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009220:	7bfb      	ldrb	r3, [r7, #15]
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 ff1f 	bl	800a068 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fa86 	bl	800973c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009230:	7bfb      	ldrb	r3, [r7, #15]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d004      	beq.n	8009240 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2202      	movs	r2, #2
 800923a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800923e:	e009      	b.n	8009254 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009248:	e004      	b.n	8009254 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f99e 	bl	800958e <USBD_CtlError>
  }
}
 8009252:	bf00      	nop
 8009254:	bf00      	nop
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009266:	2300      	movs	r3, #0
 8009268:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	885b      	ldrh	r3, [r3, #2]
 800926e:	b2da      	uxtb	r2, r3
 8009270:	4b4e      	ldr	r3, [pc, #312]	@ (80093ac <USBD_SetConfig+0x150>)
 8009272:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009274:	4b4d      	ldr	r3, [pc, #308]	@ (80093ac <USBD_SetConfig+0x150>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d905      	bls.n	8009288 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 f985 	bl	800958e <USBD_CtlError>
    return USBD_FAIL;
 8009284:	2303      	movs	r3, #3
 8009286:	e08c      	b.n	80093a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800928e:	b2db      	uxtb	r3, r3
 8009290:	2b02      	cmp	r3, #2
 8009292:	d002      	beq.n	800929a <USBD_SetConfig+0x3e>
 8009294:	2b03      	cmp	r3, #3
 8009296:	d029      	beq.n	80092ec <USBD_SetConfig+0x90>
 8009298:	e075      	b.n	8009386 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800929a:	4b44      	ldr	r3, [pc, #272]	@ (80093ac <USBD_SetConfig+0x150>)
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d020      	beq.n	80092e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80092a2:	4b42      	ldr	r3, [pc, #264]	@ (80093ac <USBD_SetConfig+0x150>)
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	461a      	mov	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092ac:	4b3f      	ldr	r3, [pc, #252]	@ (80093ac <USBD_SetConfig+0x150>)
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	4619      	mov	r1, r3
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f7fe ffe3 	bl	800827e <USBD_SetClassConfig>
 80092b8:	4603      	mov	r3, r0
 80092ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d008      	beq.n	80092d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80092c2:	6839      	ldr	r1, [r7, #0]
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 f962 	bl	800958e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2202      	movs	r2, #2
 80092ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092d2:	e065      	b.n	80093a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fa31 	bl	800973c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2203      	movs	r2, #3
 80092de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80092e2:	e05d      	b.n	80093a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fa29 	bl	800973c <USBD_CtlSendStatus>
      break;
 80092ea:	e059      	b.n	80093a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80092ec:	4b2f      	ldr	r3, [pc, #188]	@ (80093ac <USBD_SetConfig+0x150>)
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d112      	bne.n	800931a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2202      	movs	r2, #2
 80092f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80092fc:	4b2b      	ldr	r3, [pc, #172]	@ (80093ac <USBD_SetConfig+0x150>)
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	461a      	mov	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009306:	4b29      	ldr	r3, [pc, #164]	@ (80093ac <USBD_SetConfig+0x150>)
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f7fe ffd2 	bl	80082b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fa12 	bl	800973c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009318:	e042      	b.n	80093a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800931a:	4b24      	ldr	r3, [pc, #144]	@ (80093ac <USBD_SetConfig+0x150>)
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	461a      	mov	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	429a      	cmp	r2, r3
 8009326:	d02a      	beq.n	800937e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	b2db      	uxtb	r3, r3
 800932e:	4619      	mov	r1, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f7fe ffc0 	bl	80082b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009336:	4b1d      	ldr	r3, [pc, #116]	@ (80093ac <USBD_SetConfig+0x150>)
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	461a      	mov	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009340:	4b1a      	ldr	r3, [pc, #104]	@ (80093ac <USBD_SetConfig+0x150>)
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f7fe ff99 	bl	800827e <USBD_SetClassConfig>
 800934c:	4603      	mov	r3, r0
 800934e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009350:	7bfb      	ldrb	r3, [r7, #15]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00f      	beq.n	8009376 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f918 	bl	800958e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	b2db      	uxtb	r3, r3
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7fe ffa5 	bl	80082b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2202      	movs	r2, #2
 8009370:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009374:	e014      	b.n	80093a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f9e0 	bl	800973c <USBD_CtlSendStatus>
      break;
 800937c:	e010      	b.n	80093a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f9dc 	bl	800973c <USBD_CtlSendStatus>
      break;
 8009384:	e00c      	b.n	80093a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009386:	6839      	ldr	r1, [r7, #0]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f900 	bl	800958e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800938e:	4b07      	ldr	r3, [pc, #28]	@ (80093ac <USBD_SetConfig+0x150>)
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	4619      	mov	r1, r3
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f7fe ff8e 	bl	80082b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800939a:	2303      	movs	r3, #3
 800939c:	73fb      	strb	r3, [r7, #15]
      break;
 800939e:	bf00      	nop
  }

  return ret;
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	2000035c 	.word	0x2000035c

080093b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	88db      	ldrh	r3, [r3, #6]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d004      	beq.n	80093cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093c2:	6839      	ldr	r1, [r7, #0]
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 f8e2 	bl	800958e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093ca:	e023      	b.n	8009414 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	dc02      	bgt.n	80093de <USBD_GetConfig+0x2e>
 80093d8:	2b00      	cmp	r3, #0
 80093da:	dc03      	bgt.n	80093e4 <USBD_GetConfig+0x34>
 80093dc:	e015      	b.n	800940a <USBD_GetConfig+0x5a>
 80093de:	2b03      	cmp	r3, #3
 80093e0:	d00b      	beq.n	80093fa <USBD_GetConfig+0x4a>
 80093e2:	e012      	b.n	800940a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	3308      	adds	r3, #8
 80093ee:	2201      	movs	r2, #1
 80093f0:	4619      	mov	r1, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f948 	bl	8009688 <USBD_CtlSendData>
        break;
 80093f8:	e00c      	b.n	8009414 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	3304      	adds	r3, #4
 80093fe:	2201      	movs	r2, #1
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f940 	bl	8009688 <USBD_CtlSendData>
        break;
 8009408:	e004      	b.n	8009414 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800940a:	6839      	ldr	r1, [r7, #0]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f8be 	bl	800958e <USBD_CtlError>
        break;
 8009412:	bf00      	nop
}
 8009414:	bf00      	nop
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800942c:	b2db      	uxtb	r3, r3
 800942e:	3b01      	subs	r3, #1
 8009430:	2b02      	cmp	r3, #2
 8009432:	d81e      	bhi.n	8009472 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	88db      	ldrh	r3, [r3, #6]
 8009438:	2b02      	cmp	r3, #2
 800943a:	d004      	beq.n	8009446 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f8a5 	bl	800958e <USBD_CtlError>
        break;
 8009444:	e01a      	b.n	800947c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2201      	movs	r2, #1
 800944a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009452:	2b00      	cmp	r3, #0
 8009454:	d005      	beq.n	8009462 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	f043 0202 	orr.w	r2, r3, #2
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	330c      	adds	r3, #12
 8009466:	2202      	movs	r2, #2
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f90c 	bl	8009688 <USBD_CtlSendData>
      break;
 8009470:	e004      	b.n	800947c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f88a 	bl	800958e <USBD_CtlError>
      break;
 800947a:	bf00      	nop
  }
}
 800947c:	bf00      	nop
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	885b      	ldrh	r3, [r3, #2]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d107      	bne.n	80094a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2201      	movs	r2, #1
 800949a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f94c 	bl	800973c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80094a4:	e013      	b.n	80094ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	885b      	ldrh	r3, [r3, #2]
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d10b      	bne.n	80094c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	889b      	ldrh	r3, [r3, #4]
 80094b2:	0a1b      	lsrs	r3, r3, #8
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f93c 	bl	800973c <USBD_CtlSendStatus>
}
 80094c4:	e003      	b.n	80094ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80094c6:	6839      	ldr	r1, [r7, #0]
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f860 	bl	800958e <USBD_CtlError>
}
 80094ce:	bf00      	nop
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b082      	sub	sp, #8
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	3b01      	subs	r3, #1
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d80b      	bhi.n	8009506 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	885b      	ldrh	r3, [r3, #2]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d10c      	bne.n	8009510 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f91c 	bl	800973c <USBD_CtlSendStatus>
      }
      break;
 8009504:	e004      	b.n	8009510 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f840 	bl	800958e <USBD_CtlError>
      break;
 800950e:	e000      	b.n	8009512 <USBD_ClrFeature+0x3c>
      break;
 8009510:	bf00      	nop
  }
}
 8009512:	bf00      	nop
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	781a      	ldrb	r2, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	3301      	adds	r3, #1
 8009534:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	781a      	ldrb	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	3301      	adds	r3, #1
 8009542:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f7ff fa40 	bl	80089ca <SWAPBYTE>
 800954a:	4603      	mov	r3, r0
 800954c:	461a      	mov	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	3301      	adds	r3, #1
 8009556:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3301      	adds	r3, #1
 800955c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f7ff fa33 	bl	80089ca <SWAPBYTE>
 8009564:	4603      	mov	r3, r0
 8009566:	461a      	mov	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	3301      	adds	r3, #1
 8009570:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	3301      	adds	r3, #1
 8009576:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f7ff fa26 	bl	80089ca <SWAPBYTE>
 800957e:	4603      	mov	r3, r0
 8009580:	461a      	mov	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	80da      	strh	r2, [r3, #6]
}
 8009586:	bf00      	nop
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b082      	sub	sp, #8
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009598:	2180      	movs	r1, #128	@ 0x80
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fcfa 	bl	8009f94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80095a0:	2100      	movs	r1, #0
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fcf6 	bl	8009f94 <USBD_LL_StallEP>
}
 80095a8:	bf00      	nop
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d042      	beq.n	800964c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80095ca:	6938      	ldr	r0, [r7, #16]
 80095cc:	f000 f842 	bl	8009654 <USBD_GetLen>
 80095d0:	4603      	mov	r3, r0
 80095d2:	3301      	adds	r3, #1
 80095d4:	005b      	lsls	r3, r3, #1
 80095d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095da:	d808      	bhi.n	80095ee <USBD_GetString+0x3e>
 80095dc:	6938      	ldr	r0, [r7, #16]
 80095de:	f000 f839 	bl	8009654 <USBD_GetLen>
 80095e2:	4603      	mov	r3, r0
 80095e4:	3301      	adds	r3, #1
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	e001      	b.n	80095f2 <USBD_GetString+0x42>
 80095ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80095f6:	7dfb      	ldrb	r3, [r7, #23]
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	4413      	add	r3, r2
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	7812      	ldrb	r2, [r2, #0]
 8009600:	701a      	strb	r2, [r3, #0]
  idx++;
 8009602:	7dfb      	ldrb	r3, [r7, #23]
 8009604:	3301      	adds	r3, #1
 8009606:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009608:	7dfb      	ldrb	r3, [r7, #23]
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	4413      	add	r3, r2
 800960e:	2203      	movs	r2, #3
 8009610:	701a      	strb	r2, [r3, #0]
  idx++;
 8009612:	7dfb      	ldrb	r3, [r7, #23]
 8009614:	3301      	adds	r3, #1
 8009616:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009618:	e013      	b.n	8009642 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800961a:	7dfb      	ldrb	r3, [r7, #23]
 800961c:	68ba      	ldr	r2, [r7, #8]
 800961e:	4413      	add	r3, r2
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	7812      	ldrb	r2, [r2, #0]
 8009624:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	3301      	adds	r3, #1
 800962a:	613b      	str	r3, [r7, #16]
    idx++;
 800962c:	7dfb      	ldrb	r3, [r7, #23]
 800962e:	3301      	adds	r3, #1
 8009630:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009632:	7dfb      	ldrb	r3, [r7, #23]
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	4413      	add	r3, r2
 8009638:	2200      	movs	r2, #0
 800963a:	701a      	strb	r2, [r3, #0]
    idx++;
 800963c:	7dfb      	ldrb	r3, [r7, #23]
 800963e:	3301      	adds	r3, #1
 8009640:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1e7      	bne.n	800961a <USBD_GetString+0x6a>
 800964a:	e000      	b.n	800964e <USBD_GetString+0x9e>
    return;
 800964c:	bf00      	nop
  }
}
 800964e:	3718      	adds	r7, #24
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009654:	b480      	push	{r7}
 8009656:	b085      	sub	sp, #20
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800965c:	2300      	movs	r3, #0
 800965e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009664:	e005      	b.n	8009672 <USBD_GetLen+0x1e>
  {
    len++;
 8009666:	7bfb      	ldrb	r3, [r7, #15]
 8009668:	3301      	adds	r3, #1
 800966a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	3301      	adds	r3, #1
 8009670:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1f5      	bne.n	8009666 <USBD_GetLen+0x12>
  }

  return len;
 800967a:	7bfb      	ldrb	r3, [r7, #15]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2202      	movs	r2, #2
 8009698:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	68ba      	ldr	r2, [r7, #8]
 80096ac:	2100      	movs	r1, #0
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f000 fcf9 	bl	800a0a6 <USBD_LL_Transmit>

  return USBD_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	60f8      	str	r0, [r7, #12]
 80096c6:	60b9      	str	r1, [r7, #8]
 80096c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	2100      	movs	r1, #0
 80096d0:	68f8      	ldr	r0, [r7, #12]
 80096d2:	f000 fce8 	bl	800a0a6 <USBD_LL_Transmit>

  return USBD_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2203      	movs	r2, #3
 80096f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	2100      	movs	r1, #0
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f000 fcec 	bl	800a0e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	60f8      	str	r0, [r7, #12]
 8009722:	60b9      	str	r1, [r7, #8]
 8009724:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68ba      	ldr	r2, [r7, #8]
 800972a:	2100      	movs	r1, #0
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 fcdb 	bl	800a0e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2204      	movs	r2, #4
 8009748:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800974c:	2300      	movs	r3, #0
 800974e:	2200      	movs	r2, #0
 8009750:	2100      	movs	r1, #0
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 fca7 	bl	800a0a6 <USBD_LL_Transmit>

  return USBD_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b082      	sub	sp, #8
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2205      	movs	r2, #5
 800976e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009772:	2300      	movs	r3, #0
 8009774:	2200      	movs	r2, #0
 8009776:	2100      	movs	r1, #0
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fcb5 	bl	800a0e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800978c:	2200      	movs	r2, #0
 800978e:	4912      	ldr	r1, [pc, #72]	@ (80097d8 <MX_USB_DEVICE_Init+0x50>)
 8009790:	4812      	ldr	r0, [pc, #72]	@ (80097dc <MX_USB_DEVICE_Init+0x54>)
 8009792:	f7fe fcf7 	bl	8008184 <USBD_Init>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d001      	beq.n	80097a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800979c:	f7f7 fd1c 	bl	80011d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80097a0:	490f      	ldr	r1, [pc, #60]	@ (80097e0 <MX_USB_DEVICE_Init+0x58>)
 80097a2:	480e      	ldr	r0, [pc, #56]	@ (80097dc <MX_USB_DEVICE_Init+0x54>)
 80097a4:	f7fe fd1e 	bl	80081e4 <USBD_RegisterClass>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d001      	beq.n	80097b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80097ae:	f7f7 fd13 	bl	80011d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80097b2:	490c      	ldr	r1, [pc, #48]	@ (80097e4 <MX_USB_DEVICE_Init+0x5c>)
 80097b4:	4809      	ldr	r0, [pc, #36]	@ (80097dc <MX_USB_DEVICE_Init+0x54>)
 80097b6:	f7fe fc15 	bl	8007fe4 <USBD_CDC_RegisterInterface>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d001      	beq.n	80097c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80097c0:	f7f7 fd0a 	bl	80011d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80097c4:	4805      	ldr	r0, [pc, #20]	@ (80097dc <MX_USB_DEVICE_Init+0x54>)
 80097c6:	f7fe fd43 	bl	8008250 <USBD_Start>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d001      	beq.n	80097d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80097d0:	f7f7 fd02 	bl	80011d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80097d4:	bf00      	nop
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	200000ac 	.word	0x200000ac
 80097dc:	20000360 	.word	0x20000360
 80097e0:	20000018 	.word	0x20000018
 80097e4:	20000098 	.word	0x20000098

080097e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80097ec:	2200      	movs	r2, #0
 80097ee:	4905      	ldr	r1, [pc, #20]	@ (8009804 <CDC_Init_FS+0x1c>)
 80097f0:	4805      	ldr	r0, [pc, #20]	@ (8009808 <CDC_Init_FS+0x20>)
 80097f2:	f7fe fc11 	bl	8008018 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80097f6:	4905      	ldr	r1, [pc, #20]	@ (800980c <CDC_Init_FS+0x24>)
 80097f8:	4803      	ldr	r0, [pc, #12]	@ (8009808 <CDC_Init_FS+0x20>)
 80097fa:	f7fe fc2f 	bl	800805c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80097fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009800:	4618      	mov	r0, r3
 8009802:	bd80      	pop	{r7, pc}
 8009804:	20000e3c 	.word	0x20000e3c
 8009808:	20000360 	.word	0x20000360
 800980c:	2000063c 	.word	0x2000063c

08009810 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009810:	b480      	push	{r7}
 8009812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009814:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009816:	4618      	mov	r0, r3
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	4603      	mov	r3, r0
 8009828:	6039      	str	r1, [r7, #0]
 800982a:	71fb      	strb	r3, [r7, #7]
 800982c:	4613      	mov	r3, r2
 800982e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009830:	79fb      	ldrb	r3, [r7, #7]
 8009832:	2b23      	cmp	r3, #35	@ 0x23
 8009834:	d84a      	bhi.n	80098cc <CDC_Control_FS+0xac>
 8009836:	a201      	add	r2, pc, #4	@ (adr r2, 800983c <CDC_Control_FS+0x1c>)
 8009838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983c:	080098cd 	.word	0x080098cd
 8009840:	080098cd 	.word	0x080098cd
 8009844:	080098cd 	.word	0x080098cd
 8009848:	080098cd 	.word	0x080098cd
 800984c:	080098cd 	.word	0x080098cd
 8009850:	080098cd 	.word	0x080098cd
 8009854:	080098cd 	.word	0x080098cd
 8009858:	080098cd 	.word	0x080098cd
 800985c:	080098cd 	.word	0x080098cd
 8009860:	080098cd 	.word	0x080098cd
 8009864:	080098cd 	.word	0x080098cd
 8009868:	080098cd 	.word	0x080098cd
 800986c:	080098cd 	.word	0x080098cd
 8009870:	080098cd 	.word	0x080098cd
 8009874:	080098cd 	.word	0x080098cd
 8009878:	080098cd 	.word	0x080098cd
 800987c:	080098cd 	.word	0x080098cd
 8009880:	080098cd 	.word	0x080098cd
 8009884:	080098cd 	.word	0x080098cd
 8009888:	080098cd 	.word	0x080098cd
 800988c:	080098cd 	.word	0x080098cd
 8009890:	080098cd 	.word	0x080098cd
 8009894:	080098cd 	.word	0x080098cd
 8009898:	080098cd 	.word	0x080098cd
 800989c:	080098cd 	.word	0x080098cd
 80098a0:	080098cd 	.word	0x080098cd
 80098a4:	080098cd 	.word	0x080098cd
 80098a8:	080098cd 	.word	0x080098cd
 80098ac:	080098cd 	.word	0x080098cd
 80098b0:	080098cd 	.word	0x080098cd
 80098b4:	080098cd 	.word	0x080098cd
 80098b8:	080098cd 	.word	0x080098cd
 80098bc:	080098cd 	.word	0x080098cd
 80098c0:	080098cd 	.word	0x080098cd
 80098c4:	080098cd 	.word	0x080098cd
 80098c8:	080098cd 	.word	0x080098cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80098cc:	bf00      	nop
  }

  return (USBD_OK);
 80098ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80098e6:	6879      	ldr	r1, [r7, #4]
 80098e8:	4805      	ldr	r0, [pc, #20]	@ (8009900 <CDC_Receive_FS+0x24>)
 80098ea:	f7fe fbb7 	bl	800805c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80098ee:	4804      	ldr	r0, [pc, #16]	@ (8009900 <CDC_Receive_FS+0x24>)
 80098f0:	f7fe fc12 	bl	8008118 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80098f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	20000360 	.word	0x20000360

08009904 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	460b      	mov	r3, r1
 800990e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009914:	4b0d      	ldr	r3, [pc, #52]	@ (800994c <CDC_Transmit_FS+0x48>)
 8009916:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800991a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009926:	2301      	movs	r3, #1
 8009928:	e00b      	b.n	8009942 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800992a:	887b      	ldrh	r3, [r7, #2]
 800992c:	461a      	mov	r2, r3
 800992e:	6879      	ldr	r1, [r7, #4]
 8009930:	4806      	ldr	r0, [pc, #24]	@ (800994c <CDC_Transmit_FS+0x48>)
 8009932:	f7fe fb71 	bl	8008018 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009936:	4805      	ldr	r0, [pc, #20]	@ (800994c <CDC_Transmit_FS+0x48>)
 8009938:	f7fe fbae 	bl	8008098 <USBD_CDC_TransmitPacket>
 800993c:	4603      	mov	r3, r0
 800993e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009940:	7bfb      	ldrb	r3, [r7, #15]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	20000360 	.word	0x20000360

08009950 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009950:	b480      	push	{r7}
 8009952:	b087      	sub	sp, #28
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	4613      	mov	r3, r2
 800995c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009962:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009966:	4618      	mov	r0, r3
 8009968:	371c      	adds	r7, #28
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
	...

08009974 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	4603      	mov	r3, r0
 800997c:	6039      	str	r1, [r7, #0]
 800997e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	2212      	movs	r2, #18
 8009984:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009986:	4b03      	ldr	r3, [pc, #12]	@ (8009994 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009988:	4618      	mov	r0, r3
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr
 8009994:	200000c8 	.word	0x200000c8

08009998 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	4603      	mov	r3, r0
 80099a0:	6039      	str	r1, [r7, #0]
 80099a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	2204      	movs	r2, #4
 80099a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80099aa:	4b03      	ldr	r3, [pc, #12]	@ (80099b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	200000dc 	.word	0x200000dc

080099bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	6039      	str	r1, [r7, #0]
 80099c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099c8:	79fb      	ldrb	r3, [r7, #7]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d105      	bne.n	80099da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099ce:	683a      	ldr	r2, [r7, #0]
 80099d0:	4907      	ldr	r1, [pc, #28]	@ (80099f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80099d2:	4808      	ldr	r0, [pc, #32]	@ (80099f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80099d4:	f7ff fdec 	bl	80095b0 <USBD_GetString>
 80099d8:	e004      	b.n	80099e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099da:	683a      	ldr	r2, [r7, #0]
 80099dc:	4904      	ldr	r1, [pc, #16]	@ (80099f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80099de:	4805      	ldr	r0, [pc, #20]	@ (80099f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80099e0:	f7ff fde6 	bl	80095b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099e4:	4b02      	ldr	r3, [pc, #8]	@ (80099f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	2000163c 	.word	0x2000163c
 80099f4:	0800ab5c 	.word	0x0800ab5c

080099f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	6039      	str	r1, [r7, #0]
 8009a02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	4904      	ldr	r1, [pc, #16]	@ (8009a18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a08:	4804      	ldr	r0, [pc, #16]	@ (8009a1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a0a:	f7ff fdd1 	bl	80095b0 <USBD_GetString>
  return USBD_StrDesc;
 8009a0e:	4b02      	ldr	r3, [pc, #8]	@ (8009a18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	2000163c 	.word	0x2000163c
 8009a1c:	0800ab74 	.word	0x0800ab74

08009a20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	4603      	mov	r3, r0
 8009a28:	6039      	str	r1, [r7, #0]
 8009a2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	221a      	movs	r2, #26
 8009a30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a32:	f000 f843 	bl	8009abc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009a36:	4b02      	ldr	r3, [pc, #8]	@ (8009a40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	200000e0 	.word	0x200000e0

08009a44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	6039      	str	r1, [r7, #0]
 8009a4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a50:	79fb      	ldrb	r3, [r7, #7]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d105      	bne.n	8009a62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	4907      	ldr	r1, [pc, #28]	@ (8009a78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a5a:	4808      	ldr	r0, [pc, #32]	@ (8009a7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a5c:	f7ff fda8 	bl	80095b0 <USBD_GetString>
 8009a60:	e004      	b.n	8009a6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	4904      	ldr	r1, [pc, #16]	@ (8009a78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a66:	4805      	ldr	r0, [pc, #20]	@ (8009a7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a68:	f7ff fda2 	bl	80095b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a6c:	4b02      	ldr	r3, [pc, #8]	@ (8009a78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	2000163c 	.word	0x2000163c
 8009a7c:	0800ab88 	.word	0x0800ab88

08009a80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	4603      	mov	r3, r0
 8009a88:	6039      	str	r1, [r7, #0]
 8009a8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a8c:	79fb      	ldrb	r3, [r7, #7]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d105      	bne.n	8009a9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	4907      	ldr	r1, [pc, #28]	@ (8009ab4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a96:	4808      	ldr	r0, [pc, #32]	@ (8009ab8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a98:	f7ff fd8a 	bl	80095b0 <USBD_GetString>
 8009a9c:	e004      	b.n	8009aa8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a9e:	683a      	ldr	r2, [r7, #0]
 8009aa0:	4904      	ldr	r1, [pc, #16]	@ (8009ab4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009aa2:	4805      	ldr	r0, [pc, #20]	@ (8009ab8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009aa4:	f7ff fd84 	bl	80095b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009aa8:	4b02      	ldr	r3, [pc, #8]	@ (8009ab4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	2000163c 	.word	0x2000163c
 8009ab8:	0800ab94 	.word	0x0800ab94

08009abc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8009b00 <Get_SerialNum+0x44>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8009b04 <Get_SerialNum+0x48>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ace:	4b0e      	ldr	r3, [pc, #56]	@ (8009b08 <Get_SerialNum+0x4c>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ad4:	68fa      	ldr	r2, [r7, #12]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4413      	add	r3, r2
 8009ada:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d009      	beq.n	8009af6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ae2:	2208      	movs	r2, #8
 8009ae4:	4909      	ldr	r1, [pc, #36]	@ (8009b0c <Get_SerialNum+0x50>)
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f000 f814 	bl	8009b14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009aec:	2204      	movs	r2, #4
 8009aee:	4908      	ldr	r1, [pc, #32]	@ (8009b10 <Get_SerialNum+0x54>)
 8009af0:	68b8      	ldr	r0, [r7, #8]
 8009af2:	f000 f80f 	bl	8009b14 <IntToUnicode>
  }
}
 8009af6:	bf00      	nop
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	1fff7a10 	.word	0x1fff7a10
 8009b04:	1fff7a14 	.word	0x1fff7a14
 8009b08:	1fff7a18 	.word	0x1fff7a18
 8009b0c:	200000e2 	.word	0x200000e2
 8009b10:	200000f2 	.word	0x200000f2

08009b14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b087      	sub	sp, #28
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	4613      	mov	r3, r2
 8009b20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b22:	2300      	movs	r3, #0
 8009b24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b26:	2300      	movs	r3, #0
 8009b28:	75fb      	strb	r3, [r7, #23]
 8009b2a:	e027      	b.n	8009b7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	0f1b      	lsrs	r3, r3, #28
 8009b30:	2b09      	cmp	r3, #9
 8009b32:	d80b      	bhi.n	8009b4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	0f1b      	lsrs	r3, r3, #28
 8009b38:	b2da      	uxtb	r2, r3
 8009b3a:	7dfb      	ldrb	r3, [r7, #23]
 8009b3c:	005b      	lsls	r3, r3, #1
 8009b3e:	4619      	mov	r1, r3
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	440b      	add	r3, r1
 8009b44:	3230      	adds	r2, #48	@ 0x30
 8009b46:	b2d2      	uxtb	r2, r2
 8009b48:	701a      	strb	r2, [r3, #0]
 8009b4a:	e00a      	b.n	8009b62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	0f1b      	lsrs	r3, r3, #28
 8009b50:	b2da      	uxtb	r2, r3
 8009b52:	7dfb      	ldrb	r3, [r7, #23]
 8009b54:	005b      	lsls	r3, r3, #1
 8009b56:	4619      	mov	r1, r3
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	440b      	add	r3, r1
 8009b5c:	3237      	adds	r2, #55	@ 0x37
 8009b5e:	b2d2      	uxtb	r2, r2
 8009b60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	011b      	lsls	r3, r3, #4
 8009b66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b68:	7dfb      	ldrb	r3, [r7, #23]
 8009b6a:	005b      	lsls	r3, r3, #1
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	4413      	add	r3, r2
 8009b72:	2200      	movs	r2, #0
 8009b74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b76:	7dfb      	ldrb	r3, [r7, #23]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	75fb      	strb	r3, [r7, #23]
 8009b7c:	7dfa      	ldrb	r2, [r7, #23]
 8009b7e:	79fb      	ldrb	r3, [r7, #7]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d3d3      	bcc.n	8009b2c <IntToUnicode+0x18>
  }
}
 8009b84:	bf00      	nop
 8009b86:	bf00      	nop
 8009b88:	371c      	adds	r7, #28
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
	...

08009b94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b08a      	sub	sp, #40	@ 0x28
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b9c:	f107 0314 	add.w	r3, r7, #20
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	601a      	str	r2, [r3, #0]
 8009ba4:	605a      	str	r2, [r3, #4]
 8009ba6:	609a      	str	r2, [r3, #8]
 8009ba8:	60da      	str	r2, [r3, #12]
 8009baa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009bb4:	d147      	bne.n	8009c46 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	613b      	str	r3, [r7, #16]
 8009bba:	4b25      	ldr	r3, [pc, #148]	@ (8009c50 <HAL_PCD_MspInit+0xbc>)
 8009bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bbe:	4a24      	ldr	r2, [pc, #144]	@ (8009c50 <HAL_PCD_MspInit+0xbc>)
 8009bc0:	f043 0301 	orr.w	r3, r3, #1
 8009bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bc6:	4b22      	ldr	r3, [pc, #136]	@ (8009c50 <HAL_PCD_MspInit+0xbc>)
 8009bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bca:	f003 0301 	and.w	r3, r3, #1
 8009bce:	613b      	str	r3, [r7, #16]
 8009bd0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009bd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009be0:	f107 0314 	add.w	r3, r7, #20
 8009be4:	4619      	mov	r1, r3
 8009be6:	481b      	ldr	r0, [pc, #108]	@ (8009c54 <HAL_PCD_MspInit+0xc0>)
 8009be8:	f7f9 f828 	bl	8002c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009bec:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bf2:	2302      	movs	r3, #2
 8009bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009bfe:	230a      	movs	r3, #10
 8009c00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c02:	f107 0314 	add.w	r3, r7, #20
 8009c06:	4619      	mov	r1, r3
 8009c08:	4812      	ldr	r0, [pc, #72]	@ (8009c54 <HAL_PCD_MspInit+0xc0>)
 8009c0a:	f7f9 f817 	bl	8002c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c0e:	4b10      	ldr	r3, [pc, #64]	@ (8009c50 <HAL_PCD_MspInit+0xbc>)
 8009c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c12:	4a0f      	ldr	r2, [pc, #60]	@ (8009c50 <HAL_PCD_MspInit+0xbc>)
 8009c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c18:	6353      	str	r3, [r2, #52]	@ 0x34
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	60fb      	str	r3, [r7, #12]
 8009c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8009c50 <HAL_PCD_MspInit+0xbc>)
 8009c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c22:	4a0b      	ldr	r2, [pc, #44]	@ (8009c50 <HAL_PCD_MspInit+0xbc>)
 8009c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8009c2a:	4b09      	ldr	r3, [pc, #36]	@ (8009c50 <HAL_PCD_MspInit+0xbc>)
 8009c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c32:	60fb      	str	r3, [r7, #12]
 8009c34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c36:	2200      	movs	r2, #0
 8009c38:	2100      	movs	r1, #0
 8009c3a:	2043      	movs	r0, #67	@ 0x43
 8009c3c:	f7f8 fa59 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c40:	2043      	movs	r0, #67	@ 0x43
 8009c42:	f7f8 fa72 	bl	800212a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c46:	bf00      	nop
 8009c48:	3728      	adds	r7, #40	@ 0x28
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	40023800 	.word	0x40023800
 8009c54:	40020000 	.word	0x40020000

08009c58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	4610      	mov	r0, r2
 8009c70:	f7fe fb3b 	bl	80082ea <USBD_LL_SetupStage>
}
 8009c74:	bf00      	nop
 8009c76:	3708      	adds	r7, #8
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	460b      	mov	r3, r1
 8009c86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009c8e:	78fa      	ldrb	r2, [r7, #3]
 8009c90:	6879      	ldr	r1, [r7, #4]
 8009c92:	4613      	mov	r3, r2
 8009c94:	00db      	lsls	r3, r3, #3
 8009c96:	4413      	add	r3, r2
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	440b      	add	r3, r1
 8009c9c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	78fb      	ldrb	r3, [r7, #3]
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	f7fe fb75 	bl	8008394 <USBD_LL_DataOutStage>
}
 8009caa:	bf00      	nop
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b082      	sub	sp, #8
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	460b      	mov	r3, r1
 8009cbc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009cc4:	78fa      	ldrb	r2, [r7, #3]
 8009cc6:	6879      	ldr	r1, [r7, #4]
 8009cc8:	4613      	mov	r3, r2
 8009cca:	00db      	lsls	r3, r3, #3
 8009ccc:	4413      	add	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	440b      	add	r3, r1
 8009cd2:	3320      	adds	r3, #32
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	78fb      	ldrb	r3, [r7, #3]
 8009cd8:	4619      	mov	r1, r3
 8009cda:	f7fe fc0e 	bl	80084fa <USBD_LL_DataInStage>
}
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b082      	sub	sp, #8
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7fe fd48 	bl	800878a <USBD_LL_SOF>
}
 8009cfa:	bf00      	nop
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b084      	sub	sp, #16
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	79db      	ldrb	r3, [r3, #7]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d102      	bne.n	8009d1c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009d16:	2300      	movs	r3, #0
 8009d18:	73fb      	strb	r3, [r7, #15]
 8009d1a:	e008      	b.n	8009d2e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	79db      	ldrb	r3, [r3, #7]
 8009d20:	2b02      	cmp	r3, #2
 8009d22:	d102      	bne.n	8009d2a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009d24:	2301      	movs	r3, #1
 8009d26:	73fb      	strb	r3, [r7, #15]
 8009d28:	e001      	b.n	8009d2e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009d2a:	f7f7 fa55 	bl	80011d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d34:	7bfa      	ldrb	r2, [r7, #15]
 8009d36:	4611      	mov	r1, r2
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fe fce2 	bl	8008702 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7fe fc8a 	bl	800865e <USBD_LL_Reset>
}
 8009d4a:	bf00      	nop
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
	...

08009d54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fe fcdd 	bl	8008722 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	6812      	ldr	r2, [r2, #0]
 8009d76:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009d7a:	f043 0301 	orr.w	r3, r3, #1
 8009d7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	7adb      	ldrb	r3, [r3, #11]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d005      	beq.n	8009d94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d88:	4b04      	ldr	r3, [pc, #16]	@ (8009d9c <HAL_PCD_SuspendCallback+0x48>)
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	4a03      	ldr	r2, [pc, #12]	@ (8009d9c <HAL_PCD_SuspendCallback+0x48>)
 8009d8e:	f043 0306 	orr.w	r3, r3, #6
 8009d92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009d94:	bf00      	nop
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	e000ed00 	.word	0xe000ed00

08009da0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7fe fcd3 	bl	800875a <USBD_LL_Resume>
}
 8009db4:	bf00      	nop
 8009db6:	3708      	adds	r7, #8
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009dce:	78fa      	ldrb	r2, [r7, #3]
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7fe fd2b 	bl	800882e <USBD_LL_IsoOUTIncomplete>
}
 8009dd8:	bf00      	nop
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	460b      	mov	r3, r1
 8009dea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009df2:	78fa      	ldrb	r2, [r7, #3]
 8009df4:	4611      	mov	r1, r2
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fe fce7 	bl	80087ca <USBD_LL_IsoINIncomplete>
}
 8009dfc:	bf00      	nop
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fe fd3d 	bl	8008892 <USBD_LL_DevConnected>
}
 8009e18:	bf00      	nop
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7fe fd3a 	bl	80088a8 <USBD_LL_DevDisconnected>
}
 8009e34:	bf00      	nop
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d13c      	bne.n	8009ec6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009e4c:	4a20      	ldr	r2, [pc, #128]	@ (8009ed0 <USBD_LL_Init+0x94>)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4a1e      	ldr	r2, [pc, #120]	@ (8009ed0 <USBD_LL_Init+0x94>)
 8009e58:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8009ed0 <USBD_LL_Init+0x94>)
 8009e5e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009e62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009e64:	4b1a      	ldr	r3, [pc, #104]	@ (8009ed0 <USBD_LL_Init+0x94>)
 8009e66:	2204      	movs	r2, #4
 8009e68:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009e6a:	4b19      	ldr	r3, [pc, #100]	@ (8009ed0 <USBD_LL_Init+0x94>)
 8009e6c:	2202      	movs	r2, #2
 8009e6e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009e70:	4b17      	ldr	r3, [pc, #92]	@ (8009ed0 <USBD_LL_Init+0x94>)
 8009e72:	2200      	movs	r2, #0
 8009e74:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009e76:	4b16      	ldr	r3, [pc, #88]	@ (8009ed0 <USBD_LL_Init+0x94>)
 8009e78:	2202      	movs	r2, #2
 8009e7a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009e7c:	4b14      	ldr	r3, [pc, #80]	@ (8009ed0 <USBD_LL_Init+0x94>)
 8009e7e:	2200      	movs	r2, #0
 8009e80:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009e82:	4b13      	ldr	r3, [pc, #76]	@ (8009ed0 <USBD_LL_Init+0x94>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009e88:	4b11      	ldr	r3, [pc, #68]	@ (8009ed0 <USBD_LL_Init+0x94>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009e8e:	4b10      	ldr	r3, [pc, #64]	@ (8009ed0 <USBD_LL_Init+0x94>)
 8009e90:	2201      	movs	r2, #1
 8009e92:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009e94:	4b0e      	ldr	r3, [pc, #56]	@ (8009ed0 <USBD_LL_Init+0x94>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009e9a:	480d      	ldr	r0, [pc, #52]	@ (8009ed0 <USBD_LL_Init+0x94>)
 8009e9c:	f7f9 f8b4 	bl	8003008 <HAL_PCD_Init>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d001      	beq.n	8009eaa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009ea6:	f7f7 f997 	bl	80011d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009eaa:	2180      	movs	r1, #128	@ 0x80
 8009eac:	4808      	ldr	r0, [pc, #32]	@ (8009ed0 <USBD_LL_Init+0x94>)
 8009eae:	f7fa fae0 	bl	8004472 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009eb2:	2240      	movs	r2, #64	@ 0x40
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	4806      	ldr	r0, [pc, #24]	@ (8009ed0 <USBD_LL_Init+0x94>)
 8009eb8:	f7fa fa94 	bl	80043e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009ebc:	2280      	movs	r2, #128	@ 0x80
 8009ebe:	2101      	movs	r1, #1
 8009ec0:	4803      	ldr	r0, [pc, #12]	@ (8009ed0 <USBD_LL_Init+0x94>)
 8009ec2:	f7fa fa8f 	bl	80043e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3708      	adds	r7, #8
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	2000183c 	.word	0x2000183c

08009ed4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009edc:	2300      	movs	r3, #0
 8009ede:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7f9 f99b 	bl	8003226 <HAL_PCD_Start>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 f942 	bl	800a180 <USBD_Get_USB_Status>
 8009efc:	4603      	mov	r3, r0
 8009efe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b084      	sub	sp, #16
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	4608      	mov	r0, r1
 8009f14:	4611      	mov	r1, r2
 8009f16:	461a      	mov	r2, r3
 8009f18:	4603      	mov	r3, r0
 8009f1a:	70fb      	strb	r3, [r7, #3]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	70bb      	strb	r3, [r7, #2]
 8009f20:	4613      	mov	r3, r2
 8009f22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009f32:	78bb      	ldrb	r3, [r7, #2]
 8009f34:	883a      	ldrh	r2, [r7, #0]
 8009f36:	78f9      	ldrb	r1, [r7, #3]
 8009f38:	f7f9 fe6f 	bl	8003c1a <HAL_PCD_EP_Open>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f000 f91c 	bl	800a180 <USBD_Get_USB_Status>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b084      	sub	sp, #16
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	460b      	mov	r3, r1
 8009f60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f62:	2300      	movs	r3, #0
 8009f64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f66:	2300      	movs	r3, #0
 8009f68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f70:	78fa      	ldrb	r2, [r7, #3]
 8009f72:	4611      	mov	r1, r2
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7f9 feba 	bl	8003cee <HAL_PCD_EP_Close>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f7e:	7bfb      	ldrb	r3, [r7, #15]
 8009f80:	4618      	mov	r0, r3
 8009f82:	f000 f8fd 	bl	800a180 <USBD_Get_USB_Status>
 8009f86:	4603      	mov	r3, r0
 8009f88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009fae:	78fa      	ldrb	r2, [r7, #3]
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7f9 ff72 	bl	8003e9c <HAL_PCD_EP_SetStall>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 f8de 	bl	800a180 <USBD_Get_USB_Status>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b084      	sub	sp, #16
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
 8009fda:	460b      	mov	r3, r1
 8009fdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009fec:	78fa      	ldrb	r2, [r7, #3]
 8009fee:	4611      	mov	r1, r2
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7f9 ffb6 	bl	8003f62 <HAL_PCD_EP_ClrStall>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ffa:	7bfb      	ldrb	r3, [r7, #15]
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f000 f8bf 	bl	800a180 <USBD_Get_USB_Status>
 800a002:	4603      	mov	r3, r0
 800a004:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a006:	7bbb      	ldrb	r3, [r7, #14]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	460b      	mov	r3, r1
 800a01a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a022:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	da0b      	bge.n	800a044 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a02c:	78fb      	ldrb	r3, [r7, #3]
 800a02e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a032:	68f9      	ldr	r1, [r7, #12]
 800a034:	4613      	mov	r3, r2
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	4413      	add	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	440b      	add	r3, r1
 800a03e:	3316      	adds	r3, #22
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	e00b      	b.n	800a05c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a044:	78fb      	ldrb	r3, [r7, #3]
 800a046:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a04a:	68f9      	ldr	r1, [r7, #12]
 800a04c:	4613      	mov	r3, r2
 800a04e:	00db      	lsls	r3, r3, #3
 800a050:	4413      	add	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	440b      	add	r3, r1
 800a056:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a05a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	460b      	mov	r3, r1
 800a072:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a074:	2300      	movs	r3, #0
 800a076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a078:	2300      	movs	r3, #0
 800a07a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a082:	78fa      	ldrb	r2, [r7, #3]
 800a084:	4611      	mov	r1, r2
 800a086:	4618      	mov	r0, r3
 800a088:	f7f9 fda3 	bl	8003bd2 <HAL_PCD_SetAddress>
 800a08c:	4603      	mov	r3, r0
 800a08e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a090:	7bfb      	ldrb	r3, [r7, #15]
 800a092:	4618      	mov	r0, r3
 800a094:	f000 f874 	bl	800a180 <USBD_Get_USB_Status>
 800a098:	4603      	mov	r3, r0
 800a09a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a09c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b086      	sub	sp, #24
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	60f8      	str	r0, [r7, #12]
 800a0ae:	607a      	str	r2, [r7, #4]
 800a0b0:	603b      	str	r3, [r7, #0]
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a0c4:	7af9      	ldrb	r1, [r7, #11]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	f7f9 fead 	bl	8003e28 <HAL_PCD_EP_Transmit>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0d2:	7dfb      	ldrb	r3, [r7, #23]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f000 f853 	bl	800a180 <USBD_Get_USB_Status>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a0de:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3718      	adds	r7, #24
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b086      	sub	sp, #24
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	607a      	str	r2, [r7, #4]
 800a0f2:	603b      	str	r3, [r7, #0]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a106:	7af9      	ldrb	r1, [r7, #11]
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	f7f9 fe39 	bl	8003d82 <HAL_PCD_EP_Receive>
 800a110:	4603      	mov	r3, r0
 800a112:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a114:	7dfb      	ldrb	r3, [r7, #23]
 800a116:	4618      	mov	r0, r3
 800a118:	f000 f832 	bl	800a180 <USBD_Get_USB_Status>
 800a11c:	4603      	mov	r3, r0
 800a11e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a120:	7dbb      	ldrb	r3, [r7, #22]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3718      	adds	r7, #24
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b082      	sub	sp, #8
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	460b      	mov	r3, r1
 800a134:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a13c:	78fa      	ldrb	r2, [r7, #3]
 800a13e:	4611      	mov	r1, r2
 800a140:	4618      	mov	r0, r3
 800a142:	f7f9 fe59 	bl	8003df8 <HAL_PCD_EP_GetRxCount>
 800a146:	4603      	mov	r3, r0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a158:	4b03      	ldr	r3, [pc, #12]	@ (800a168 <USBD_static_malloc+0x18>)
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	20001d20 	.word	0x20001d20

0800a16c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]

}
 800a174:	bf00      	nop
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a180:	b480      	push	{r7}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
 800a186:	4603      	mov	r3, r0
 800a188:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a18a:	2300      	movs	r3, #0
 800a18c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a18e:	79fb      	ldrb	r3, [r7, #7]
 800a190:	2b03      	cmp	r3, #3
 800a192:	d817      	bhi.n	800a1c4 <USBD_Get_USB_Status+0x44>
 800a194:	a201      	add	r2, pc, #4	@ (adr r2, 800a19c <USBD_Get_USB_Status+0x1c>)
 800a196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19a:	bf00      	nop
 800a19c:	0800a1ad 	.word	0x0800a1ad
 800a1a0:	0800a1b3 	.word	0x0800a1b3
 800a1a4:	0800a1b9 	.word	0x0800a1b9
 800a1a8:	0800a1bf 	.word	0x0800a1bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a1b0:	e00b      	b.n	800a1ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a1b2:	2303      	movs	r3, #3
 800a1b4:	73fb      	strb	r3, [r7, #15]
    break;
 800a1b6:	e008      	b.n	800a1ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a1bc:	e005      	b.n	800a1ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	73fb      	strb	r3, [r7, #15]
    break;
 800a1c2:	e002      	b.n	800a1ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a1c8:	bf00      	nop
  }
  return usb_status;
 800a1ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <sniprintf>:
 800a1d8:	b40c      	push	{r2, r3}
 800a1da:	b530      	push	{r4, r5, lr}
 800a1dc:	4b17      	ldr	r3, [pc, #92]	@ (800a23c <sniprintf+0x64>)
 800a1de:	1e0c      	subs	r4, r1, #0
 800a1e0:	681d      	ldr	r5, [r3, #0]
 800a1e2:	b09d      	sub	sp, #116	@ 0x74
 800a1e4:	da08      	bge.n	800a1f8 <sniprintf+0x20>
 800a1e6:	238b      	movs	r3, #139	@ 0x8b
 800a1e8:	602b      	str	r3, [r5, #0]
 800a1ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ee:	b01d      	add	sp, #116	@ 0x74
 800a1f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1f4:	b002      	add	sp, #8
 800a1f6:	4770      	bx	lr
 800a1f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a1fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a200:	bf14      	ite	ne
 800a202:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a206:	4623      	moveq	r3, r4
 800a208:	9304      	str	r3, [sp, #16]
 800a20a:	9307      	str	r3, [sp, #28]
 800a20c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a210:	9002      	str	r0, [sp, #8]
 800a212:	9006      	str	r0, [sp, #24]
 800a214:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a218:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a21a:	ab21      	add	r3, sp, #132	@ 0x84
 800a21c:	a902      	add	r1, sp, #8
 800a21e:	4628      	mov	r0, r5
 800a220:	9301      	str	r3, [sp, #4]
 800a222:	f000 f995 	bl	800a550 <_svfiprintf_r>
 800a226:	1c43      	adds	r3, r0, #1
 800a228:	bfbc      	itt	lt
 800a22a:	238b      	movlt	r3, #139	@ 0x8b
 800a22c:	602b      	strlt	r3, [r5, #0]
 800a22e:	2c00      	cmp	r4, #0
 800a230:	d0dd      	beq.n	800a1ee <sniprintf+0x16>
 800a232:	9b02      	ldr	r3, [sp, #8]
 800a234:	2200      	movs	r2, #0
 800a236:	701a      	strb	r2, [r3, #0]
 800a238:	e7d9      	b.n	800a1ee <sniprintf+0x16>
 800a23a:	bf00      	nop
 800a23c:	200000fc 	.word	0x200000fc

0800a240 <memset>:
 800a240:	4402      	add	r2, r0
 800a242:	4603      	mov	r3, r0
 800a244:	4293      	cmp	r3, r2
 800a246:	d100      	bne.n	800a24a <memset+0xa>
 800a248:	4770      	bx	lr
 800a24a:	f803 1b01 	strb.w	r1, [r3], #1
 800a24e:	e7f9      	b.n	800a244 <memset+0x4>

0800a250 <__errno>:
 800a250:	4b01      	ldr	r3, [pc, #4]	@ (800a258 <__errno+0x8>)
 800a252:	6818      	ldr	r0, [r3, #0]
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	200000fc 	.word	0x200000fc

0800a25c <__libc_init_array>:
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	4d0d      	ldr	r5, [pc, #52]	@ (800a294 <__libc_init_array+0x38>)
 800a260:	4c0d      	ldr	r4, [pc, #52]	@ (800a298 <__libc_init_array+0x3c>)
 800a262:	1b64      	subs	r4, r4, r5
 800a264:	10a4      	asrs	r4, r4, #2
 800a266:	2600      	movs	r6, #0
 800a268:	42a6      	cmp	r6, r4
 800a26a:	d109      	bne.n	800a280 <__libc_init_array+0x24>
 800a26c:	4d0b      	ldr	r5, [pc, #44]	@ (800a29c <__libc_init_array+0x40>)
 800a26e:	4c0c      	ldr	r4, [pc, #48]	@ (800a2a0 <__libc_init_array+0x44>)
 800a270:	f000 fc66 	bl	800ab40 <_init>
 800a274:	1b64      	subs	r4, r4, r5
 800a276:	10a4      	asrs	r4, r4, #2
 800a278:	2600      	movs	r6, #0
 800a27a:	42a6      	cmp	r6, r4
 800a27c:	d105      	bne.n	800a28a <__libc_init_array+0x2e>
 800a27e:	bd70      	pop	{r4, r5, r6, pc}
 800a280:	f855 3b04 	ldr.w	r3, [r5], #4
 800a284:	4798      	blx	r3
 800a286:	3601      	adds	r6, #1
 800a288:	e7ee      	b.n	800a268 <__libc_init_array+0xc>
 800a28a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a28e:	4798      	blx	r3
 800a290:	3601      	adds	r6, #1
 800a292:	e7f2      	b.n	800a27a <__libc_init_array+0x1e>
 800a294:	0800abf8 	.word	0x0800abf8
 800a298:	0800abf8 	.word	0x0800abf8
 800a29c:	0800abf8 	.word	0x0800abf8
 800a2a0:	0800abfc 	.word	0x0800abfc

0800a2a4 <__retarget_lock_acquire_recursive>:
 800a2a4:	4770      	bx	lr

0800a2a6 <__retarget_lock_release_recursive>:
 800a2a6:	4770      	bx	lr

0800a2a8 <_free_r>:
 800a2a8:	b538      	push	{r3, r4, r5, lr}
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	2900      	cmp	r1, #0
 800a2ae:	d041      	beq.n	800a334 <_free_r+0x8c>
 800a2b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2b4:	1f0c      	subs	r4, r1, #4
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	bfb8      	it	lt
 800a2ba:	18e4      	addlt	r4, r4, r3
 800a2bc:	f000 f8e0 	bl	800a480 <__malloc_lock>
 800a2c0:	4a1d      	ldr	r2, [pc, #116]	@ (800a338 <_free_r+0x90>)
 800a2c2:	6813      	ldr	r3, [r2, #0]
 800a2c4:	b933      	cbnz	r3, 800a2d4 <_free_r+0x2c>
 800a2c6:	6063      	str	r3, [r4, #4]
 800a2c8:	6014      	str	r4, [r2, #0]
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2d0:	f000 b8dc 	b.w	800a48c <__malloc_unlock>
 800a2d4:	42a3      	cmp	r3, r4
 800a2d6:	d908      	bls.n	800a2ea <_free_r+0x42>
 800a2d8:	6820      	ldr	r0, [r4, #0]
 800a2da:	1821      	adds	r1, r4, r0
 800a2dc:	428b      	cmp	r3, r1
 800a2de:	bf01      	itttt	eq
 800a2e0:	6819      	ldreq	r1, [r3, #0]
 800a2e2:	685b      	ldreq	r3, [r3, #4]
 800a2e4:	1809      	addeq	r1, r1, r0
 800a2e6:	6021      	streq	r1, [r4, #0]
 800a2e8:	e7ed      	b.n	800a2c6 <_free_r+0x1e>
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	b10b      	cbz	r3, 800a2f4 <_free_r+0x4c>
 800a2f0:	42a3      	cmp	r3, r4
 800a2f2:	d9fa      	bls.n	800a2ea <_free_r+0x42>
 800a2f4:	6811      	ldr	r1, [r2, #0]
 800a2f6:	1850      	adds	r0, r2, r1
 800a2f8:	42a0      	cmp	r0, r4
 800a2fa:	d10b      	bne.n	800a314 <_free_r+0x6c>
 800a2fc:	6820      	ldr	r0, [r4, #0]
 800a2fe:	4401      	add	r1, r0
 800a300:	1850      	adds	r0, r2, r1
 800a302:	4283      	cmp	r3, r0
 800a304:	6011      	str	r1, [r2, #0]
 800a306:	d1e0      	bne.n	800a2ca <_free_r+0x22>
 800a308:	6818      	ldr	r0, [r3, #0]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	6053      	str	r3, [r2, #4]
 800a30e:	4408      	add	r0, r1
 800a310:	6010      	str	r0, [r2, #0]
 800a312:	e7da      	b.n	800a2ca <_free_r+0x22>
 800a314:	d902      	bls.n	800a31c <_free_r+0x74>
 800a316:	230c      	movs	r3, #12
 800a318:	602b      	str	r3, [r5, #0]
 800a31a:	e7d6      	b.n	800a2ca <_free_r+0x22>
 800a31c:	6820      	ldr	r0, [r4, #0]
 800a31e:	1821      	adds	r1, r4, r0
 800a320:	428b      	cmp	r3, r1
 800a322:	bf04      	itt	eq
 800a324:	6819      	ldreq	r1, [r3, #0]
 800a326:	685b      	ldreq	r3, [r3, #4]
 800a328:	6063      	str	r3, [r4, #4]
 800a32a:	bf04      	itt	eq
 800a32c:	1809      	addeq	r1, r1, r0
 800a32e:	6021      	streq	r1, [r4, #0]
 800a330:	6054      	str	r4, [r2, #4]
 800a332:	e7ca      	b.n	800a2ca <_free_r+0x22>
 800a334:	bd38      	pop	{r3, r4, r5, pc}
 800a336:	bf00      	nop
 800a338:	20002084 	.word	0x20002084

0800a33c <sbrk_aligned>:
 800a33c:	b570      	push	{r4, r5, r6, lr}
 800a33e:	4e0f      	ldr	r6, [pc, #60]	@ (800a37c <sbrk_aligned+0x40>)
 800a340:	460c      	mov	r4, r1
 800a342:	6831      	ldr	r1, [r6, #0]
 800a344:	4605      	mov	r5, r0
 800a346:	b911      	cbnz	r1, 800a34e <sbrk_aligned+0x12>
 800a348:	f000 fba6 	bl	800aa98 <_sbrk_r>
 800a34c:	6030      	str	r0, [r6, #0]
 800a34e:	4621      	mov	r1, r4
 800a350:	4628      	mov	r0, r5
 800a352:	f000 fba1 	bl	800aa98 <_sbrk_r>
 800a356:	1c43      	adds	r3, r0, #1
 800a358:	d103      	bne.n	800a362 <sbrk_aligned+0x26>
 800a35a:	f04f 34ff 	mov.w	r4, #4294967295
 800a35e:	4620      	mov	r0, r4
 800a360:	bd70      	pop	{r4, r5, r6, pc}
 800a362:	1cc4      	adds	r4, r0, #3
 800a364:	f024 0403 	bic.w	r4, r4, #3
 800a368:	42a0      	cmp	r0, r4
 800a36a:	d0f8      	beq.n	800a35e <sbrk_aligned+0x22>
 800a36c:	1a21      	subs	r1, r4, r0
 800a36e:	4628      	mov	r0, r5
 800a370:	f000 fb92 	bl	800aa98 <_sbrk_r>
 800a374:	3001      	adds	r0, #1
 800a376:	d1f2      	bne.n	800a35e <sbrk_aligned+0x22>
 800a378:	e7ef      	b.n	800a35a <sbrk_aligned+0x1e>
 800a37a:	bf00      	nop
 800a37c:	20002080 	.word	0x20002080

0800a380 <_malloc_r>:
 800a380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a384:	1ccd      	adds	r5, r1, #3
 800a386:	f025 0503 	bic.w	r5, r5, #3
 800a38a:	3508      	adds	r5, #8
 800a38c:	2d0c      	cmp	r5, #12
 800a38e:	bf38      	it	cc
 800a390:	250c      	movcc	r5, #12
 800a392:	2d00      	cmp	r5, #0
 800a394:	4606      	mov	r6, r0
 800a396:	db01      	blt.n	800a39c <_malloc_r+0x1c>
 800a398:	42a9      	cmp	r1, r5
 800a39a:	d904      	bls.n	800a3a6 <_malloc_r+0x26>
 800a39c:	230c      	movs	r3, #12
 800a39e:	6033      	str	r3, [r6, #0]
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a47c <_malloc_r+0xfc>
 800a3aa:	f000 f869 	bl	800a480 <__malloc_lock>
 800a3ae:	f8d8 3000 	ldr.w	r3, [r8]
 800a3b2:	461c      	mov	r4, r3
 800a3b4:	bb44      	cbnz	r4, 800a408 <_malloc_r+0x88>
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	f7ff ffbf 	bl	800a33c <sbrk_aligned>
 800a3be:	1c43      	adds	r3, r0, #1
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	d158      	bne.n	800a476 <_malloc_r+0xf6>
 800a3c4:	f8d8 4000 	ldr.w	r4, [r8]
 800a3c8:	4627      	mov	r7, r4
 800a3ca:	2f00      	cmp	r7, #0
 800a3cc:	d143      	bne.n	800a456 <_malloc_r+0xd6>
 800a3ce:	2c00      	cmp	r4, #0
 800a3d0:	d04b      	beq.n	800a46a <_malloc_r+0xea>
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	4639      	mov	r1, r7
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	eb04 0903 	add.w	r9, r4, r3
 800a3dc:	f000 fb5c 	bl	800aa98 <_sbrk_r>
 800a3e0:	4581      	cmp	r9, r0
 800a3e2:	d142      	bne.n	800a46a <_malloc_r+0xea>
 800a3e4:	6821      	ldr	r1, [r4, #0]
 800a3e6:	1a6d      	subs	r5, r5, r1
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	f7ff ffa6 	bl	800a33c <sbrk_aligned>
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	d03a      	beq.n	800a46a <_malloc_r+0xea>
 800a3f4:	6823      	ldr	r3, [r4, #0]
 800a3f6:	442b      	add	r3, r5
 800a3f8:	6023      	str	r3, [r4, #0]
 800a3fa:	f8d8 3000 	ldr.w	r3, [r8]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	bb62      	cbnz	r2, 800a45c <_malloc_r+0xdc>
 800a402:	f8c8 7000 	str.w	r7, [r8]
 800a406:	e00f      	b.n	800a428 <_malloc_r+0xa8>
 800a408:	6822      	ldr	r2, [r4, #0]
 800a40a:	1b52      	subs	r2, r2, r5
 800a40c:	d420      	bmi.n	800a450 <_malloc_r+0xd0>
 800a40e:	2a0b      	cmp	r2, #11
 800a410:	d917      	bls.n	800a442 <_malloc_r+0xc2>
 800a412:	1961      	adds	r1, r4, r5
 800a414:	42a3      	cmp	r3, r4
 800a416:	6025      	str	r5, [r4, #0]
 800a418:	bf18      	it	ne
 800a41a:	6059      	strne	r1, [r3, #4]
 800a41c:	6863      	ldr	r3, [r4, #4]
 800a41e:	bf08      	it	eq
 800a420:	f8c8 1000 	streq.w	r1, [r8]
 800a424:	5162      	str	r2, [r4, r5]
 800a426:	604b      	str	r3, [r1, #4]
 800a428:	4630      	mov	r0, r6
 800a42a:	f000 f82f 	bl	800a48c <__malloc_unlock>
 800a42e:	f104 000b 	add.w	r0, r4, #11
 800a432:	1d23      	adds	r3, r4, #4
 800a434:	f020 0007 	bic.w	r0, r0, #7
 800a438:	1ac2      	subs	r2, r0, r3
 800a43a:	bf1c      	itt	ne
 800a43c:	1a1b      	subne	r3, r3, r0
 800a43e:	50a3      	strne	r3, [r4, r2]
 800a440:	e7af      	b.n	800a3a2 <_malloc_r+0x22>
 800a442:	6862      	ldr	r2, [r4, #4]
 800a444:	42a3      	cmp	r3, r4
 800a446:	bf0c      	ite	eq
 800a448:	f8c8 2000 	streq.w	r2, [r8]
 800a44c:	605a      	strne	r2, [r3, #4]
 800a44e:	e7eb      	b.n	800a428 <_malloc_r+0xa8>
 800a450:	4623      	mov	r3, r4
 800a452:	6864      	ldr	r4, [r4, #4]
 800a454:	e7ae      	b.n	800a3b4 <_malloc_r+0x34>
 800a456:	463c      	mov	r4, r7
 800a458:	687f      	ldr	r7, [r7, #4]
 800a45a:	e7b6      	b.n	800a3ca <_malloc_r+0x4a>
 800a45c:	461a      	mov	r2, r3
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	42a3      	cmp	r3, r4
 800a462:	d1fb      	bne.n	800a45c <_malloc_r+0xdc>
 800a464:	2300      	movs	r3, #0
 800a466:	6053      	str	r3, [r2, #4]
 800a468:	e7de      	b.n	800a428 <_malloc_r+0xa8>
 800a46a:	230c      	movs	r3, #12
 800a46c:	6033      	str	r3, [r6, #0]
 800a46e:	4630      	mov	r0, r6
 800a470:	f000 f80c 	bl	800a48c <__malloc_unlock>
 800a474:	e794      	b.n	800a3a0 <_malloc_r+0x20>
 800a476:	6005      	str	r5, [r0, #0]
 800a478:	e7d6      	b.n	800a428 <_malloc_r+0xa8>
 800a47a:	bf00      	nop
 800a47c:	20002084 	.word	0x20002084

0800a480 <__malloc_lock>:
 800a480:	4801      	ldr	r0, [pc, #4]	@ (800a488 <__malloc_lock+0x8>)
 800a482:	f7ff bf0f 	b.w	800a2a4 <__retarget_lock_acquire_recursive>
 800a486:	bf00      	nop
 800a488:	2000207c 	.word	0x2000207c

0800a48c <__malloc_unlock>:
 800a48c:	4801      	ldr	r0, [pc, #4]	@ (800a494 <__malloc_unlock+0x8>)
 800a48e:	f7ff bf0a 	b.w	800a2a6 <__retarget_lock_release_recursive>
 800a492:	bf00      	nop
 800a494:	2000207c 	.word	0x2000207c

0800a498 <__ssputs_r>:
 800a498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a49c:	688e      	ldr	r6, [r1, #8]
 800a49e:	461f      	mov	r7, r3
 800a4a0:	42be      	cmp	r6, r7
 800a4a2:	680b      	ldr	r3, [r1, #0]
 800a4a4:	4682      	mov	sl, r0
 800a4a6:	460c      	mov	r4, r1
 800a4a8:	4690      	mov	r8, r2
 800a4aa:	d82d      	bhi.n	800a508 <__ssputs_r+0x70>
 800a4ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a4b4:	d026      	beq.n	800a504 <__ssputs_r+0x6c>
 800a4b6:	6965      	ldr	r5, [r4, #20]
 800a4b8:	6909      	ldr	r1, [r1, #16]
 800a4ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4be:	eba3 0901 	sub.w	r9, r3, r1
 800a4c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4c6:	1c7b      	adds	r3, r7, #1
 800a4c8:	444b      	add	r3, r9
 800a4ca:	106d      	asrs	r5, r5, #1
 800a4cc:	429d      	cmp	r5, r3
 800a4ce:	bf38      	it	cc
 800a4d0:	461d      	movcc	r5, r3
 800a4d2:	0553      	lsls	r3, r2, #21
 800a4d4:	d527      	bpl.n	800a526 <__ssputs_r+0x8e>
 800a4d6:	4629      	mov	r1, r5
 800a4d8:	f7ff ff52 	bl	800a380 <_malloc_r>
 800a4dc:	4606      	mov	r6, r0
 800a4de:	b360      	cbz	r0, 800a53a <__ssputs_r+0xa2>
 800a4e0:	6921      	ldr	r1, [r4, #16]
 800a4e2:	464a      	mov	r2, r9
 800a4e4:	f000 fae8 	bl	800aab8 <memcpy>
 800a4e8:	89a3      	ldrh	r3, [r4, #12]
 800a4ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a4ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4f2:	81a3      	strh	r3, [r4, #12]
 800a4f4:	6126      	str	r6, [r4, #16]
 800a4f6:	6165      	str	r5, [r4, #20]
 800a4f8:	444e      	add	r6, r9
 800a4fa:	eba5 0509 	sub.w	r5, r5, r9
 800a4fe:	6026      	str	r6, [r4, #0]
 800a500:	60a5      	str	r5, [r4, #8]
 800a502:	463e      	mov	r6, r7
 800a504:	42be      	cmp	r6, r7
 800a506:	d900      	bls.n	800a50a <__ssputs_r+0x72>
 800a508:	463e      	mov	r6, r7
 800a50a:	6820      	ldr	r0, [r4, #0]
 800a50c:	4632      	mov	r2, r6
 800a50e:	4641      	mov	r1, r8
 800a510:	f000 faa8 	bl	800aa64 <memmove>
 800a514:	68a3      	ldr	r3, [r4, #8]
 800a516:	1b9b      	subs	r3, r3, r6
 800a518:	60a3      	str	r3, [r4, #8]
 800a51a:	6823      	ldr	r3, [r4, #0]
 800a51c:	4433      	add	r3, r6
 800a51e:	6023      	str	r3, [r4, #0]
 800a520:	2000      	movs	r0, #0
 800a522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a526:	462a      	mov	r2, r5
 800a528:	f000 fad4 	bl	800aad4 <_realloc_r>
 800a52c:	4606      	mov	r6, r0
 800a52e:	2800      	cmp	r0, #0
 800a530:	d1e0      	bne.n	800a4f4 <__ssputs_r+0x5c>
 800a532:	6921      	ldr	r1, [r4, #16]
 800a534:	4650      	mov	r0, sl
 800a536:	f7ff feb7 	bl	800a2a8 <_free_r>
 800a53a:	230c      	movs	r3, #12
 800a53c:	f8ca 3000 	str.w	r3, [sl]
 800a540:	89a3      	ldrh	r3, [r4, #12]
 800a542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a546:	81a3      	strh	r3, [r4, #12]
 800a548:	f04f 30ff 	mov.w	r0, #4294967295
 800a54c:	e7e9      	b.n	800a522 <__ssputs_r+0x8a>
	...

0800a550 <_svfiprintf_r>:
 800a550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	4698      	mov	r8, r3
 800a556:	898b      	ldrh	r3, [r1, #12]
 800a558:	061b      	lsls	r3, r3, #24
 800a55a:	b09d      	sub	sp, #116	@ 0x74
 800a55c:	4607      	mov	r7, r0
 800a55e:	460d      	mov	r5, r1
 800a560:	4614      	mov	r4, r2
 800a562:	d510      	bpl.n	800a586 <_svfiprintf_r+0x36>
 800a564:	690b      	ldr	r3, [r1, #16]
 800a566:	b973      	cbnz	r3, 800a586 <_svfiprintf_r+0x36>
 800a568:	2140      	movs	r1, #64	@ 0x40
 800a56a:	f7ff ff09 	bl	800a380 <_malloc_r>
 800a56e:	6028      	str	r0, [r5, #0]
 800a570:	6128      	str	r0, [r5, #16]
 800a572:	b930      	cbnz	r0, 800a582 <_svfiprintf_r+0x32>
 800a574:	230c      	movs	r3, #12
 800a576:	603b      	str	r3, [r7, #0]
 800a578:	f04f 30ff 	mov.w	r0, #4294967295
 800a57c:	b01d      	add	sp, #116	@ 0x74
 800a57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a582:	2340      	movs	r3, #64	@ 0x40
 800a584:	616b      	str	r3, [r5, #20]
 800a586:	2300      	movs	r3, #0
 800a588:	9309      	str	r3, [sp, #36]	@ 0x24
 800a58a:	2320      	movs	r3, #32
 800a58c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a590:	f8cd 800c 	str.w	r8, [sp, #12]
 800a594:	2330      	movs	r3, #48	@ 0x30
 800a596:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a734 <_svfiprintf_r+0x1e4>
 800a59a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a59e:	f04f 0901 	mov.w	r9, #1
 800a5a2:	4623      	mov	r3, r4
 800a5a4:	469a      	mov	sl, r3
 800a5a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5aa:	b10a      	cbz	r2, 800a5b0 <_svfiprintf_r+0x60>
 800a5ac:	2a25      	cmp	r2, #37	@ 0x25
 800a5ae:	d1f9      	bne.n	800a5a4 <_svfiprintf_r+0x54>
 800a5b0:	ebba 0b04 	subs.w	fp, sl, r4
 800a5b4:	d00b      	beq.n	800a5ce <_svfiprintf_r+0x7e>
 800a5b6:	465b      	mov	r3, fp
 800a5b8:	4622      	mov	r2, r4
 800a5ba:	4629      	mov	r1, r5
 800a5bc:	4638      	mov	r0, r7
 800a5be:	f7ff ff6b 	bl	800a498 <__ssputs_r>
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	f000 80a7 	beq.w	800a716 <_svfiprintf_r+0x1c6>
 800a5c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5ca:	445a      	add	r2, fp
 800a5cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f000 809f 	beq.w	800a716 <_svfiprintf_r+0x1c6>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	f04f 32ff 	mov.w	r2, #4294967295
 800a5de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5e2:	f10a 0a01 	add.w	sl, sl, #1
 800a5e6:	9304      	str	r3, [sp, #16]
 800a5e8:	9307      	str	r3, [sp, #28]
 800a5ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a5ee:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5f0:	4654      	mov	r4, sl
 800a5f2:	2205      	movs	r2, #5
 800a5f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5f8:	484e      	ldr	r0, [pc, #312]	@ (800a734 <_svfiprintf_r+0x1e4>)
 800a5fa:	f7f5 fdf1 	bl	80001e0 <memchr>
 800a5fe:	9a04      	ldr	r2, [sp, #16]
 800a600:	b9d8      	cbnz	r0, 800a63a <_svfiprintf_r+0xea>
 800a602:	06d0      	lsls	r0, r2, #27
 800a604:	bf44      	itt	mi
 800a606:	2320      	movmi	r3, #32
 800a608:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a60c:	0711      	lsls	r1, r2, #28
 800a60e:	bf44      	itt	mi
 800a610:	232b      	movmi	r3, #43	@ 0x2b
 800a612:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a616:	f89a 3000 	ldrb.w	r3, [sl]
 800a61a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a61c:	d015      	beq.n	800a64a <_svfiprintf_r+0xfa>
 800a61e:	9a07      	ldr	r2, [sp, #28]
 800a620:	4654      	mov	r4, sl
 800a622:	2000      	movs	r0, #0
 800a624:	f04f 0c0a 	mov.w	ip, #10
 800a628:	4621      	mov	r1, r4
 800a62a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a62e:	3b30      	subs	r3, #48	@ 0x30
 800a630:	2b09      	cmp	r3, #9
 800a632:	d94b      	bls.n	800a6cc <_svfiprintf_r+0x17c>
 800a634:	b1b0      	cbz	r0, 800a664 <_svfiprintf_r+0x114>
 800a636:	9207      	str	r2, [sp, #28]
 800a638:	e014      	b.n	800a664 <_svfiprintf_r+0x114>
 800a63a:	eba0 0308 	sub.w	r3, r0, r8
 800a63e:	fa09 f303 	lsl.w	r3, r9, r3
 800a642:	4313      	orrs	r3, r2
 800a644:	9304      	str	r3, [sp, #16]
 800a646:	46a2      	mov	sl, r4
 800a648:	e7d2      	b.n	800a5f0 <_svfiprintf_r+0xa0>
 800a64a:	9b03      	ldr	r3, [sp, #12]
 800a64c:	1d19      	adds	r1, r3, #4
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	9103      	str	r1, [sp, #12]
 800a652:	2b00      	cmp	r3, #0
 800a654:	bfbb      	ittet	lt
 800a656:	425b      	neglt	r3, r3
 800a658:	f042 0202 	orrlt.w	r2, r2, #2
 800a65c:	9307      	strge	r3, [sp, #28]
 800a65e:	9307      	strlt	r3, [sp, #28]
 800a660:	bfb8      	it	lt
 800a662:	9204      	strlt	r2, [sp, #16]
 800a664:	7823      	ldrb	r3, [r4, #0]
 800a666:	2b2e      	cmp	r3, #46	@ 0x2e
 800a668:	d10a      	bne.n	800a680 <_svfiprintf_r+0x130>
 800a66a:	7863      	ldrb	r3, [r4, #1]
 800a66c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a66e:	d132      	bne.n	800a6d6 <_svfiprintf_r+0x186>
 800a670:	9b03      	ldr	r3, [sp, #12]
 800a672:	1d1a      	adds	r2, r3, #4
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	9203      	str	r2, [sp, #12]
 800a678:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a67c:	3402      	adds	r4, #2
 800a67e:	9305      	str	r3, [sp, #20]
 800a680:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a744 <_svfiprintf_r+0x1f4>
 800a684:	7821      	ldrb	r1, [r4, #0]
 800a686:	2203      	movs	r2, #3
 800a688:	4650      	mov	r0, sl
 800a68a:	f7f5 fda9 	bl	80001e0 <memchr>
 800a68e:	b138      	cbz	r0, 800a6a0 <_svfiprintf_r+0x150>
 800a690:	9b04      	ldr	r3, [sp, #16]
 800a692:	eba0 000a 	sub.w	r0, r0, sl
 800a696:	2240      	movs	r2, #64	@ 0x40
 800a698:	4082      	lsls	r2, r0
 800a69a:	4313      	orrs	r3, r2
 800a69c:	3401      	adds	r4, #1
 800a69e:	9304      	str	r3, [sp, #16]
 800a6a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6a4:	4824      	ldr	r0, [pc, #144]	@ (800a738 <_svfiprintf_r+0x1e8>)
 800a6a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a6aa:	2206      	movs	r2, #6
 800a6ac:	f7f5 fd98 	bl	80001e0 <memchr>
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	d036      	beq.n	800a722 <_svfiprintf_r+0x1d2>
 800a6b4:	4b21      	ldr	r3, [pc, #132]	@ (800a73c <_svfiprintf_r+0x1ec>)
 800a6b6:	bb1b      	cbnz	r3, 800a700 <_svfiprintf_r+0x1b0>
 800a6b8:	9b03      	ldr	r3, [sp, #12]
 800a6ba:	3307      	adds	r3, #7
 800a6bc:	f023 0307 	bic.w	r3, r3, #7
 800a6c0:	3308      	adds	r3, #8
 800a6c2:	9303      	str	r3, [sp, #12]
 800a6c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6c6:	4433      	add	r3, r6
 800a6c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6ca:	e76a      	b.n	800a5a2 <_svfiprintf_r+0x52>
 800a6cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6d0:	460c      	mov	r4, r1
 800a6d2:	2001      	movs	r0, #1
 800a6d4:	e7a8      	b.n	800a628 <_svfiprintf_r+0xd8>
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	3401      	adds	r4, #1
 800a6da:	9305      	str	r3, [sp, #20]
 800a6dc:	4619      	mov	r1, r3
 800a6de:	f04f 0c0a 	mov.w	ip, #10
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6e8:	3a30      	subs	r2, #48	@ 0x30
 800a6ea:	2a09      	cmp	r2, #9
 800a6ec:	d903      	bls.n	800a6f6 <_svfiprintf_r+0x1a6>
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d0c6      	beq.n	800a680 <_svfiprintf_r+0x130>
 800a6f2:	9105      	str	r1, [sp, #20]
 800a6f4:	e7c4      	b.n	800a680 <_svfiprintf_r+0x130>
 800a6f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6fa:	4604      	mov	r4, r0
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e7f0      	b.n	800a6e2 <_svfiprintf_r+0x192>
 800a700:	ab03      	add	r3, sp, #12
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	462a      	mov	r2, r5
 800a706:	4b0e      	ldr	r3, [pc, #56]	@ (800a740 <_svfiprintf_r+0x1f0>)
 800a708:	a904      	add	r1, sp, #16
 800a70a:	4638      	mov	r0, r7
 800a70c:	f3af 8000 	nop.w
 800a710:	1c42      	adds	r2, r0, #1
 800a712:	4606      	mov	r6, r0
 800a714:	d1d6      	bne.n	800a6c4 <_svfiprintf_r+0x174>
 800a716:	89ab      	ldrh	r3, [r5, #12]
 800a718:	065b      	lsls	r3, r3, #25
 800a71a:	f53f af2d 	bmi.w	800a578 <_svfiprintf_r+0x28>
 800a71e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a720:	e72c      	b.n	800a57c <_svfiprintf_r+0x2c>
 800a722:	ab03      	add	r3, sp, #12
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	462a      	mov	r2, r5
 800a728:	4b05      	ldr	r3, [pc, #20]	@ (800a740 <_svfiprintf_r+0x1f0>)
 800a72a:	a904      	add	r1, sp, #16
 800a72c:	4638      	mov	r0, r7
 800a72e:	f000 f879 	bl	800a824 <_printf_i>
 800a732:	e7ed      	b.n	800a710 <_svfiprintf_r+0x1c0>
 800a734:	0800abbc 	.word	0x0800abbc
 800a738:	0800abc6 	.word	0x0800abc6
 800a73c:	00000000 	.word	0x00000000
 800a740:	0800a499 	.word	0x0800a499
 800a744:	0800abc2 	.word	0x0800abc2

0800a748 <_printf_common>:
 800a748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a74c:	4616      	mov	r6, r2
 800a74e:	4698      	mov	r8, r3
 800a750:	688a      	ldr	r2, [r1, #8]
 800a752:	690b      	ldr	r3, [r1, #16]
 800a754:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a758:	4293      	cmp	r3, r2
 800a75a:	bfb8      	it	lt
 800a75c:	4613      	movlt	r3, r2
 800a75e:	6033      	str	r3, [r6, #0]
 800a760:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a764:	4607      	mov	r7, r0
 800a766:	460c      	mov	r4, r1
 800a768:	b10a      	cbz	r2, 800a76e <_printf_common+0x26>
 800a76a:	3301      	adds	r3, #1
 800a76c:	6033      	str	r3, [r6, #0]
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	0699      	lsls	r1, r3, #26
 800a772:	bf42      	ittt	mi
 800a774:	6833      	ldrmi	r3, [r6, #0]
 800a776:	3302      	addmi	r3, #2
 800a778:	6033      	strmi	r3, [r6, #0]
 800a77a:	6825      	ldr	r5, [r4, #0]
 800a77c:	f015 0506 	ands.w	r5, r5, #6
 800a780:	d106      	bne.n	800a790 <_printf_common+0x48>
 800a782:	f104 0a19 	add.w	sl, r4, #25
 800a786:	68e3      	ldr	r3, [r4, #12]
 800a788:	6832      	ldr	r2, [r6, #0]
 800a78a:	1a9b      	subs	r3, r3, r2
 800a78c:	42ab      	cmp	r3, r5
 800a78e:	dc26      	bgt.n	800a7de <_printf_common+0x96>
 800a790:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a794:	6822      	ldr	r2, [r4, #0]
 800a796:	3b00      	subs	r3, #0
 800a798:	bf18      	it	ne
 800a79a:	2301      	movne	r3, #1
 800a79c:	0692      	lsls	r2, r2, #26
 800a79e:	d42b      	bmi.n	800a7f8 <_printf_common+0xb0>
 800a7a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a7a4:	4641      	mov	r1, r8
 800a7a6:	4638      	mov	r0, r7
 800a7a8:	47c8      	blx	r9
 800a7aa:	3001      	adds	r0, #1
 800a7ac:	d01e      	beq.n	800a7ec <_printf_common+0xa4>
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	6922      	ldr	r2, [r4, #16]
 800a7b2:	f003 0306 	and.w	r3, r3, #6
 800a7b6:	2b04      	cmp	r3, #4
 800a7b8:	bf02      	ittt	eq
 800a7ba:	68e5      	ldreq	r5, [r4, #12]
 800a7bc:	6833      	ldreq	r3, [r6, #0]
 800a7be:	1aed      	subeq	r5, r5, r3
 800a7c0:	68a3      	ldr	r3, [r4, #8]
 800a7c2:	bf0c      	ite	eq
 800a7c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7c8:	2500      	movne	r5, #0
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	bfc4      	itt	gt
 800a7ce:	1a9b      	subgt	r3, r3, r2
 800a7d0:	18ed      	addgt	r5, r5, r3
 800a7d2:	2600      	movs	r6, #0
 800a7d4:	341a      	adds	r4, #26
 800a7d6:	42b5      	cmp	r5, r6
 800a7d8:	d11a      	bne.n	800a810 <_printf_common+0xc8>
 800a7da:	2000      	movs	r0, #0
 800a7dc:	e008      	b.n	800a7f0 <_printf_common+0xa8>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	4652      	mov	r2, sl
 800a7e2:	4641      	mov	r1, r8
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	47c8      	blx	r9
 800a7e8:	3001      	adds	r0, #1
 800a7ea:	d103      	bne.n	800a7f4 <_printf_common+0xac>
 800a7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7f4:	3501      	adds	r5, #1
 800a7f6:	e7c6      	b.n	800a786 <_printf_common+0x3e>
 800a7f8:	18e1      	adds	r1, r4, r3
 800a7fa:	1c5a      	adds	r2, r3, #1
 800a7fc:	2030      	movs	r0, #48	@ 0x30
 800a7fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a802:	4422      	add	r2, r4
 800a804:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a808:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a80c:	3302      	adds	r3, #2
 800a80e:	e7c7      	b.n	800a7a0 <_printf_common+0x58>
 800a810:	2301      	movs	r3, #1
 800a812:	4622      	mov	r2, r4
 800a814:	4641      	mov	r1, r8
 800a816:	4638      	mov	r0, r7
 800a818:	47c8      	blx	r9
 800a81a:	3001      	adds	r0, #1
 800a81c:	d0e6      	beq.n	800a7ec <_printf_common+0xa4>
 800a81e:	3601      	adds	r6, #1
 800a820:	e7d9      	b.n	800a7d6 <_printf_common+0x8e>
	...

0800a824 <_printf_i>:
 800a824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a828:	7e0f      	ldrb	r7, [r1, #24]
 800a82a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a82c:	2f78      	cmp	r7, #120	@ 0x78
 800a82e:	4691      	mov	r9, r2
 800a830:	4680      	mov	r8, r0
 800a832:	460c      	mov	r4, r1
 800a834:	469a      	mov	sl, r3
 800a836:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a83a:	d807      	bhi.n	800a84c <_printf_i+0x28>
 800a83c:	2f62      	cmp	r7, #98	@ 0x62
 800a83e:	d80a      	bhi.n	800a856 <_printf_i+0x32>
 800a840:	2f00      	cmp	r7, #0
 800a842:	f000 80d2 	beq.w	800a9ea <_printf_i+0x1c6>
 800a846:	2f58      	cmp	r7, #88	@ 0x58
 800a848:	f000 80b9 	beq.w	800a9be <_printf_i+0x19a>
 800a84c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a850:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a854:	e03a      	b.n	800a8cc <_printf_i+0xa8>
 800a856:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a85a:	2b15      	cmp	r3, #21
 800a85c:	d8f6      	bhi.n	800a84c <_printf_i+0x28>
 800a85e:	a101      	add	r1, pc, #4	@ (adr r1, 800a864 <_printf_i+0x40>)
 800a860:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a864:	0800a8bd 	.word	0x0800a8bd
 800a868:	0800a8d1 	.word	0x0800a8d1
 800a86c:	0800a84d 	.word	0x0800a84d
 800a870:	0800a84d 	.word	0x0800a84d
 800a874:	0800a84d 	.word	0x0800a84d
 800a878:	0800a84d 	.word	0x0800a84d
 800a87c:	0800a8d1 	.word	0x0800a8d1
 800a880:	0800a84d 	.word	0x0800a84d
 800a884:	0800a84d 	.word	0x0800a84d
 800a888:	0800a84d 	.word	0x0800a84d
 800a88c:	0800a84d 	.word	0x0800a84d
 800a890:	0800a9d1 	.word	0x0800a9d1
 800a894:	0800a8fb 	.word	0x0800a8fb
 800a898:	0800a98b 	.word	0x0800a98b
 800a89c:	0800a84d 	.word	0x0800a84d
 800a8a0:	0800a84d 	.word	0x0800a84d
 800a8a4:	0800a9f3 	.word	0x0800a9f3
 800a8a8:	0800a84d 	.word	0x0800a84d
 800a8ac:	0800a8fb 	.word	0x0800a8fb
 800a8b0:	0800a84d 	.word	0x0800a84d
 800a8b4:	0800a84d 	.word	0x0800a84d
 800a8b8:	0800a993 	.word	0x0800a993
 800a8bc:	6833      	ldr	r3, [r6, #0]
 800a8be:	1d1a      	adds	r2, r3, #4
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	6032      	str	r2, [r6, #0]
 800a8c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e09d      	b.n	800aa0c <_printf_i+0x1e8>
 800a8d0:	6833      	ldr	r3, [r6, #0]
 800a8d2:	6820      	ldr	r0, [r4, #0]
 800a8d4:	1d19      	adds	r1, r3, #4
 800a8d6:	6031      	str	r1, [r6, #0]
 800a8d8:	0606      	lsls	r6, r0, #24
 800a8da:	d501      	bpl.n	800a8e0 <_printf_i+0xbc>
 800a8dc:	681d      	ldr	r5, [r3, #0]
 800a8de:	e003      	b.n	800a8e8 <_printf_i+0xc4>
 800a8e0:	0645      	lsls	r5, r0, #25
 800a8e2:	d5fb      	bpl.n	800a8dc <_printf_i+0xb8>
 800a8e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a8e8:	2d00      	cmp	r5, #0
 800a8ea:	da03      	bge.n	800a8f4 <_printf_i+0xd0>
 800a8ec:	232d      	movs	r3, #45	@ 0x2d
 800a8ee:	426d      	negs	r5, r5
 800a8f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8f4:	4859      	ldr	r0, [pc, #356]	@ (800aa5c <_printf_i+0x238>)
 800a8f6:	230a      	movs	r3, #10
 800a8f8:	e011      	b.n	800a91e <_printf_i+0xfa>
 800a8fa:	6821      	ldr	r1, [r4, #0]
 800a8fc:	6833      	ldr	r3, [r6, #0]
 800a8fe:	0608      	lsls	r0, r1, #24
 800a900:	f853 5b04 	ldr.w	r5, [r3], #4
 800a904:	d402      	bmi.n	800a90c <_printf_i+0xe8>
 800a906:	0649      	lsls	r1, r1, #25
 800a908:	bf48      	it	mi
 800a90a:	b2ad      	uxthmi	r5, r5
 800a90c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a90e:	4853      	ldr	r0, [pc, #332]	@ (800aa5c <_printf_i+0x238>)
 800a910:	6033      	str	r3, [r6, #0]
 800a912:	bf14      	ite	ne
 800a914:	230a      	movne	r3, #10
 800a916:	2308      	moveq	r3, #8
 800a918:	2100      	movs	r1, #0
 800a91a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a91e:	6866      	ldr	r6, [r4, #4]
 800a920:	60a6      	str	r6, [r4, #8]
 800a922:	2e00      	cmp	r6, #0
 800a924:	bfa2      	ittt	ge
 800a926:	6821      	ldrge	r1, [r4, #0]
 800a928:	f021 0104 	bicge.w	r1, r1, #4
 800a92c:	6021      	strge	r1, [r4, #0]
 800a92e:	b90d      	cbnz	r5, 800a934 <_printf_i+0x110>
 800a930:	2e00      	cmp	r6, #0
 800a932:	d04b      	beq.n	800a9cc <_printf_i+0x1a8>
 800a934:	4616      	mov	r6, r2
 800a936:	fbb5 f1f3 	udiv	r1, r5, r3
 800a93a:	fb03 5711 	mls	r7, r3, r1, r5
 800a93e:	5dc7      	ldrb	r7, [r0, r7]
 800a940:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a944:	462f      	mov	r7, r5
 800a946:	42bb      	cmp	r3, r7
 800a948:	460d      	mov	r5, r1
 800a94a:	d9f4      	bls.n	800a936 <_printf_i+0x112>
 800a94c:	2b08      	cmp	r3, #8
 800a94e:	d10b      	bne.n	800a968 <_printf_i+0x144>
 800a950:	6823      	ldr	r3, [r4, #0]
 800a952:	07df      	lsls	r7, r3, #31
 800a954:	d508      	bpl.n	800a968 <_printf_i+0x144>
 800a956:	6923      	ldr	r3, [r4, #16]
 800a958:	6861      	ldr	r1, [r4, #4]
 800a95a:	4299      	cmp	r1, r3
 800a95c:	bfde      	ittt	le
 800a95e:	2330      	movle	r3, #48	@ 0x30
 800a960:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a964:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a968:	1b92      	subs	r2, r2, r6
 800a96a:	6122      	str	r2, [r4, #16]
 800a96c:	f8cd a000 	str.w	sl, [sp]
 800a970:	464b      	mov	r3, r9
 800a972:	aa03      	add	r2, sp, #12
 800a974:	4621      	mov	r1, r4
 800a976:	4640      	mov	r0, r8
 800a978:	f7ff fee6 	bl	800a748 <_printf_common>
 800a97c:	3001      	adds	r0, #1
 800a97e:	d14a      	bne.n	800aa16 <_printf_i+0x1f2>
 800a980:	f04f 30ff 	mov.w	r0, #4294967295
 800a984:	b004      	add	sp, #16
 800a986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a98a:	6823      	ldr	r3, [r4, #0]
 800a98c:	f043 0320 	orr.w	r3, r3, #32
 800a990:	6023      	str	r3, [r4, #0]
 800a992:	4833      	ldr	r0, [pc, #204]	@ (800aa60 <_printf_i+0x23c>)
 800a994:	2778      	movs	r7, #120	@ 0x78
 800a996:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a99a:	6823      	ldr	r3, [r4, #0]
 800a99c:	6831      	ldr	r1, [r6, #0]
 800a99e:	061f      	lsls	r7, r3, #24
 800a9a0:	f851 5b04 	ldr.w	r5, [r1], #4
 800a9a4:	d402      	bmi.n	800a9ac <_printf_i+0x188>
 800a9a6:	065f      	lsls	r7, r3, #25
 800a9a8:	bf48      	it	mi
 800a9aa:	b2ad      	uxthmi	r5, r5
 800a9ac:	6031      	str	r1, [r6, #0]
 800a9ae:	07d9      	lsls	r1, r3, #31
 800a9b0:	bf44      	itt	mi
 800a9b2:	f043 0320 	orrmi.w	r3, r3, #32
 800a9b6:	6023      	strmi	r3, [r4, #0]
 800a9b8:	b11d      	cbz	r5, 800a9c2 <_printf_i+0x19e>
 800a9ba:	2310      	movs	r3, #16
 800a9bc:	e7ac      	b.n	800a918 <_printf_i+0xf4>
 800a9be:	4827      	ldr	r0, [pc, #156]	@ (800aa5c <_printf_i+0x238>)
 800a9c0:	e7e9      	b.n	800a996 <_printf_i+0x172>
 800a9c2:	6823      	ldr	r3, [r4, #0]
 800a9c4:	f023 0320 	bic.w	r3, r3, #32
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	e7f6      	b.n	800a9ba <_printf_i+0x196>
 800a9cc:	4616      	mov	r6, r2
 800a9ce:	e7bd      	b.n	800a94c <_printf_i+0x128>
 800a9d0:	6833      	ldr	r3, [r6, #0]
 800a9d2:	6825      	ldr	r5, [r4, #0]
 800a9d4:	6961      	ldr	r1, [r4, #20]
 800a9d6:	1d18      	adds	r0, r3, #4
 800a9d8:	6030      	str	r0, [r6, #0]
 800a9da:	062e      	lsls	r6, r5, #24
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	d501      	bpl.n	800a9e4 <_printf_i+0x1c0>
 800a9e0:	6019      	str	r1, [r3, #0]
 800a9e2:	e002      	b.n	800a9ea <_printf_i+0x1c6>
 800a9e4:	0668      	lsls	r0, r5, #25
 800a9e6:	d5fb      	bpl.n	800a9e0 <_printf_i+0x1bc>
 800a9e8:	8019      	strh	r1, [r3, #0]
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	6123      	str	r3, [r4, #16]
 800a9ee:	4616      	mov	r6, r2
 800a9f0:	e7bc      	b.n	800a96c <_printf_i+0x148>
 800a9f2:	6833      	ldr	r3, [r6, #0]
 800a9f4:	1d1a      	adds	r2, r3, #4
 800a9f6:	6032      	str	r2, [r6, #0]
 800a9f8:	681e      	ldr	r6, [r3, #0]
 800a9fa:	6862      	ldr	r2, [r4, #4]
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	4630      	mov	r0, r6
 800aa00:	f7f5 fbee 	bl	80001e0 <memchr>
 800aa04:	b108      	cbz	r0, 800aa0a <_printf_i+0x1e6>
 800aa06:	1b80      	subs	r0, r0, r6
 800aa08:	6060      	str	r0, [r4, #4]
 800aa0a:	6863      	ldr	r3, [r4, #4]
 800aa0c:	6123      	str	r3, [r4, #16]
 800aa0e:	2300      	movs	r3, #0
 800aa10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa14:	e7aa      	b.n	800a96c <_printf_i+0x148>
 800aa16:	6923      	ldr	r3, [r4, #16]
 800aa18:	4632      	mov	r2, r6
 800aa1a:	4649      	mov	r1, r9
 800aa1c:	4640      	mov	r0, r8
 800aa1e:	47d0      	blx	sl
 800aa20:	3001      	adds	r0, #1
 800aa22:	d0ad      	beq.n	800a980 <_printf_i+0x15c>
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	079b      	lsls	r3, r3, #30
 800aa28:	d413      	bmi.n	800aa52 <_printf_i+0x22e>
 800aa2a:	68e0      	ldr	r0, [r4, #12]
 800aa2c:	9b03      	ldr	r3, [sp, #12]
 800aa2e:	4298      	cmp	r0, r3
 800aa30:	bfb8      	it	lt
 800aa32:	4618      	movlt	r0, r3
 800aa34:	e7a6      	b.n	800a984 <_printf_i+0x160>
 800aa36:	2301      	movs	r3, #1
 800aa38:	4632      	mov	r2, r6
 800aa3a:	4649      	mov	r1, r9
 800aa3c:	4640      	mov	r0, r8
 800aa3e:	47d0      	blx	sl
 800aa40:	3001      	adds	r0, #1
 800aa42:	d09d      	beq.n	800a980 <_printf_i+0x15c>
 800aa44:	3501      	adds	r5, #1
 800aa46:	68e3      	ldr	r3, [r4, #12]
 800aa48:	9903      	ldr	r1, [sp, #12]
 800aa4a:	1a5b      	subs	r3, r3, r1
 800aa4c:	42ab      	cmp	r3, r5
 800aa4e:	dcf2      	bgt.n	800aa36 <_printf_i+0x212>
 800aa50:	e7eb      	b.n	800aa2a <_printf_i+0x206>
 800aa52:	2500      	movs	r5, #0
 800aa54:	f104 0619 	add.w	r6, r4, #25
 800aa58:	e7f5      	b.n	800aa46 <_printf_i+0x222>
 800aa5a:	bf00      	nop
 800aa5c:	0800abcd 	.word	0x0800abcd
 800aa60:	0800abde 	.word	0x0800abde

0800aa64 <memmove>:
 800aa64:	4288      	cmp	r0, r1
 800aa66:	b510      	push	{r4, lr}
 800aa68:	eb01 0402 	add.w	r4, r1, r2
 800aa6c:	d902      	bls.n	800aa74 <memmove+0x10>
 800aa6e:	4284      	cmp	r4, r0
 800aa70:	4623      	mov	r3, r4
 800aa72:	d807      	bhi.n	800aa84 <memmove+0x20>
 800aa74:	1e43      	subs	r3, r0, #1
 800aa76:	42a1      	cmp	r1, r4
 800aa78:	d008      	beq.n	800aa8c <memmove+0x28>
 800aa7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa82:	e7f8      	b.n	800aa76 <memmove+0x12>
 800aa84:	4402      	add	r2, r0
 800aa86:	4601      	mov	r1, r0
 800aa88:	428a      	cmp	r2, r1
 800aa8a:	d100      	bne.n	800aa8e <memmove+0x2a>
 800aa8c:	bd10      	pop	{r4, pc}
 800aa8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa96:	e7f7      	b.n	800aa88 <memmove+0x24>

0800aa98 <_sbrk_r>:
 800aa98:	b538      	push	{r3, r4, r5, lr}
 800aa9a:	4d06      	ldr	r5, [pc, #24]	@ (800aab4 <_sbrk_r+0x1c>)
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	4604      	mov	r4, r0
 800aaa0:	4608      	mov	r0, r1
 800aaa2:	602b      	str	r3, [r5, #0]
 800aaa4:	f7f6 fd30 	bl	8001508 <_sbrk>
 800aaa8:	1c43      	adds	r3, r0, #1
 800aaaa:	d102      	bne.n	800aab2 <_sbrk_r+0x1a>
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	b103      	cbz	r3, 800aab2 <_sbrk_r+0x1a>
 800aab0:	6023      	str	r3, [r4, #0]
 800aab2:	bd38      	pop	{r3, r4, r5, pc}
 800aab4:	20002078 	.word	0x20002078

0800aab8 <memcpy>:
 800aab8:	440a      	add	r2, r1
 800aaba:	4291      	cmp	r1, r2
 800aabc:	f100 33ff 	add.w	r3, r0, #4294967295
 800aac0:	d100      	bne.n	800aac4 <memcpy+0xc>
 800aac2:	4770      	bx	lr
 800aac4:	b510      	push	{r4, lr}
 800aac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aace:	4291      	cmp	r1, r2
 800aad0:	d1f9      	bne.n	800aac6 <memcpy+0xe>
 800aad2:	bd10      	pop	{r4, pc}

0800aad4 <_realloc_r>:
 800aad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aad8:	4680      	mov	r8, r0
 800aada:	4615      	mov	r5, r2
 800aadc:	460c      	mov	r4, r1
 800aade:	b921      	cbnz	r1, 800aaea <_realloc_r+0x16>
 800aae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aae4:	4611      	mov	r1, r2
 800aae6:	f7ff bc4b 	b.w	800a380 <_malloc_r>
 800aaea:	b92a      	cbnz	r2, 800aaf8 <_realloc_r+0x24>
 800aaec:	f7ff fbdc 	bl	800a2a8 <_free_r>
 800aaf0:	2400      	movs	r4, #0
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaf8:	f000 f81a 	bl	800ab30 <_malloc_usable_size_r>
 800aafc:	4285      	cmp	r5, r0
 800aafe:	4606      	mov	r6, r0
 800ab00:	d802      	bhi.n	800ab08 <_realloc_r+0x34>
 800ab02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ab06:	d8f4      	bhi.n	800aaf2 <_realloc_r+0x1e>
 800ab08:	4629      	mov	r1, r5
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	f7ff fc38 	bl	800a380 <_malloc_r>
 800ab10:	4607      	mov	r7, r0
 800ab12:	2800      	cmp	r0, #0
 800ab14:	d0ec      	beq.n	800aaf0 <_realloc_r+0x1c>
 800ab16:	42b5      	cmp	r5, r6
 800ab18:	462a      	mov	r2, r5
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	bf28      	it	cs
 800ab1e:	4632      	movcs	r2, r6
 800ab20:	f7ff ffca 	bl	800aab8 <memcpy>
 800ab24:	4621      	mov	r1, r4
 800ab26:	4640      	mov	r0, r8
 800ab28:	f7ff fbbe 	bl	800a2a8 <_free_r>
 800ab2c:	463c      	mov	r4, r7
 800ab2e:	e7e0      	b.n	800aaf2 <_realloc_r+0x1e>

0800ab30 <_malloc_usable_size_r>:
 800ab30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab34:	1f18      	subs	r0, r3, #4
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	bfbc      	itt	lt
 800ab3a:	580b      	ldrlt	r3, [r1, r0]
 800ab3c:	18c0      	addlt	r0, r0, r3
 800ab3e:	4770      	bx	lr

0800ab40 <_init>:
 800ab40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab42:	bf00      	nop
 800ab44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab46:	bc08      	pop	{r3}
 800ab48:	469e      	mov	lr, r3
 800ab4a:	4770      	bx	lr

0800ab4c <_fini>:
 800ab4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab4e:	bf00      	nop
 800ab50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab52:	bc08      	pop	{r3}
 800ab54:	469e      	mov	lr, r3
 800ab56:	4770      	bx	lr
