
STM32Utils.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae10  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800afa0  0800afa0  0000bfa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b040  0800b040  0000d14c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b040  0800b040  0000c040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b048  0800b048  0000d14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b048  0800b048  0000c048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b04c  0800b04c  0000c04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  0800b050  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d14c  2**0
                  CONTENTS
 10 .bss          00001f94  2000014c  2000014c  0000d14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200020e0  200020e0  0000d14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019e56  00000000  00000000  0000d17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043ea  00000000  00000000  00026fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001750  00000000  00000000  0002b3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011e4  00000000  00000000  0002cb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026945  00000000  00000000  0002dcf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fc07  00000000  00000000  00054639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcc5e  00000000  00000000  00074240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00150e9e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006640  00000000  00000000  00150ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003c  00000000  00000000  00157524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af88 	.word	0x0800af88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	0800af88 	.word	0x0800af88

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <status_led_init>:
// status led config >> for four leds
void status_led_init(Status_led_s *status_led, GPIO_TypeDef * Led1_GPIOx, uint16_t Led1_GPIO_pin,
		GPIO_TypeDef * Led2_GPIOx, uint16_t Led2_GPIO_pin,
		GPIO_TypeDef * Led3_GPIOx, uint16_t Led3_GPIO_pin,
		GPIO_TypeDef * Led4_GPIOx, uint16_t Led4_GPIO_pin)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4613      	mov	r3, r2
 800057e:	80fb      	strh	r3, [r7, #6]
	status_led->Led1_GPIOx = Led1_GPIOx;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	601a      	str	r2, [r3, #0]
	status_led->Led1_GPIO_pin = Led1_GPIO_pin;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	88fa      	ldrh	r2, [r7, #6]
 800058a:	809a      	strh	r2, [r3, #4]

	status_led->Led2_GPIOx = Led2_GPIOx;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	683a      	ldr	r2, [r7, #0]
 8000590:	609a      	str	r2, [r3, #8]
	status_led->Led2_GPIO_pin = Led2_GPIO_pin;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	8b3a      	ldrh	r2, [r7, #24]
 8000596:	819a      	strh	r2, [r3, #12]

	status_led->Led3_GPIOx = Led3_GPIOx;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	69fa      	ldr	r2, [r7, #28]
 800059c:	611a      	str	r2, [r3, #16]
	status_led->Led3_GPIO_pin = Led3_GPIO_pin;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	8c3a      	ldrh	r2, [r7, #32]
 80005a2:	829a      	strh	r2, [r3, #20]

	status_led->Led4_GPIOx = Led4_GPIOx;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005a8:	619a      	str	r2, [r3, #24]
	status_led->Led4_GPIO_pin = Led4_GPIO_pin;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80005ae:	839a      	strh	r2, [r3, #28]

}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <status_led_process>:

// led 1 -- kırmızı
// led 2 -- yeşil
// led 3 -- 2. yeşil
// led 4 -- sarı
void status_led_process(Status_led_s* status_led, Status_led_mode_e Mode){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	70fb      	strb	r3, [r7, #3]
	switch (Mode) {
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	2b04      	cmp	r3, #4
 80005cc:	f200 80a4 	bhi.w	8000718 <status_led_process+0x15c>
 80005d0:	a201      	add	r2, pc, #4	@ (adr r2, 80005d8 <status_led_process+0x1c>)
 80005d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d6:	bf00      	nop
 80005d8:	080005ed 	.word	0x080005ed
 80005dc:	0800061b 	.word	0x0800061b
 80005e0:	080006eb 	.word	0x080006eb
 80005e4:	08000677 	.word	0x08000677
 80005e8:	08000649 	.word	0x08000649
		case LED_STOP :
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 1);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6818      	ldr	r0, [r3, #0]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	889b      	ldrh	r3, [r3, #4]
 80005f4:	2201      	movs	r2, #1
 80005f6:	4619      	mov	r1, r3
 80005f8:	f002 fda0 	bl	800313c <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80005fc:	20c8      	movs	r0, #200	@ 0xc8
 80005fe:	f001 f933 	bl	8001868 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 0);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6818      	ldr	r0, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	889b      	ldrh	r3, [r3, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	4619      	mov	r1, r3
 800060e:	f002 fd95 	bl	800313c <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000612:	20c8      	movs	r0, #200	@ 0xc8
 8000614:	f001 f928 	bl	8001868 <HAL_Delay>
			break;
 8000618:	e095      	b.n	8000746 <status_led_process+0x18a>
		case LED_START :
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 1);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6898      	ldr	r0, [r3, #8]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	899b      	ldrh	r3, [r3, #12]
 8000622:	2201      	movs	r2, #1
 8000624:	4619      	mov	r1, r3
 8000626:	f002 fd89 	bl	800313c <HAL_GPIO_WritePin>
			HAL_Delay(200);
 800062a:	20c8      	movs	r0, #200	@ 0xc8
 800062c:	f001 f91c 	bl	8001868 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 0);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6898      	ldr	r0, [r3, #8]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	899b      	ldrh	r3, [r3, #12]
 8000638:	2200      	movs	r2, #0
 800063a:	4619      	mov	r1, r3
 800063c:	f002 fd7e 	bl	800313c <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000640:	20c8      	movs	r0, #200	@ 0xc8
 8000642:	f001 f911 	bl	8001868 <HAL_Delay>
			break;
 8000646:	e07e      	b.n	8000746 <status_led_process+0x18a>
		case LED_OKAY :
			HAL_GPIO_WritePin(status_led->Led3_GPIOx, status_led->Led3_GPIO_pin, 1);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	6918      	ldr	r0, [r3, #16]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	8a9b      	ldrh	r3, [r3, #20]
 8000650:	2201      	movs	r2, #1
 8000652:	4619      	mov	r1, r3
 8000654:	f002 fd72 	bl	800313c <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000658:	20c8      	movs	r0, #200	@ 0xc8
 800065a:	f001 f905 	bl	8001868 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led3_GPIOx, status_led->Led3_GPIO_pin, 0);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6918      	ldr	r0, [r3, #16]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	8a9b      	ldrh	r3, [r3, #20]
 8000666:	2200      	movs	r2, #0
 8000668:	4619      	mov	r1, r3
 800066a:	f002 fd67 	bl	800313c <HAL_GPIO_WritePin>
			HAL_Delay(200);
 800066e:	20c8      	movs	r0, #200	@ 0xc8
 8000670:	f001 f8fa 	bl	8001868 <HAL_Delay>
			break;
 8000674:	e067      	b.n	8000746 <status_led_process+0x18a>
		case LED_GO :
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 0);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6898      	ldr	r0, [r3, #8]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	899b      	ldrh	r3, [r3, #12]
 800067e:	2200      	movs	r2, #0
 8000680:	4619      	mov	r1, r3
 8000682:	f002 fd5b 	bl	800313c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 1);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6818      	ldr	r0, [r3, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	889b      	ldrh	r3, [r3, #4]
 800068e:	2201      	movs	r2, #1
 8000690:	4619      	mov	r1, r3
 8000692:	f002 fd53 	bl	800313c <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000696:	20c8      	movs	r0, #200	@ 0xc8
 8000698:	f001 f8e6 	bl	8001868 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 0);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6818      	ldr	r0, [r3, #0]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	889b      	ldrh	r3, [r3, #4]
 80006a4:	2200      	movs	r2, #0
 80006a6:	4619      	mov	r1, r3
 80006a8:	f002 fd48 	bl	800313c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 1);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6998      	ldr	r0, [r3, #24]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	8b9b      	ldrh	r3, [r3, #28]
 80006b4:	2201      	movs	r2, #1
 80006b6:	4619      	mov	r1, r3
 80006b8:	f002 fd40 	bl	800313c <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80006bc:	20c8      	movs	r0, #200	@ 0xc8
 80006be:	f001 f8d3 	bl	8001868 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 0);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6998      	ldr	r0, [r3, #24]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	8b9b      	ldrh	r3, [r3, #28]
 80006ca:	2200      	movs	r2, #0
 80006cc:	4619      	mov	r1, r3
 80006ce:	f002 fd35 	bl	800313c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(status_led->Led2_GPIOx, status_led->Led2_GPIO_pin, 1);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6898      	ldr	r0, [r3, #8]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	899b      	ldrh	r3, [r3, #12]
 80006da:	2201      	movs	r2, #1
 80006dc:	4619      	mov	r1, r3
 80006de:	f002 fd2d 	bl	800313c <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80006e2:	20c8      	movs	r0, #200	@ 0xc8
 80006e4:	f001 f8c0 	bl	8001868 <HAL_Delay>
			break;
 80006e8:	e02d      	b.n	8000746 <status_led_process+0x18a>
		case LED_STAY :
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 1);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6998      	ldr	r0, [r3, #24]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	8b9b      	ldrh	r3, [r3, #28]
 80006f2:	2201      	movs	r2, #1
 80006f4:	4619      	mov	r1, r3
 80006f6:	f002 fd21 	bl	800313c <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80006fa:	20c8      	movs	r0, #200	@ 0xc8
 80006fc:	f001 f8b4 	bl	8001868 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led4_GPIOx, status_led->Led4_GPIO_pin, 0);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6998      	ldr	r0, [r3, #24]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	8b9b      	ldrh	r3, [r3, #28]
 8000708:	2200      	movs	r2, #0
 800070a:	4619      	mov	r1, r3
 800070c:	f002 fd16 	bl	800313c <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000710:	20c8      	movs	r0, #200	@ 0xc8
 8000712:	f001 f8a9 	bl	8001868 <HAL_Delay>
			break;
 8000716:	e016      	b.n	8000746 <status_led_process+0x18a>

		default:
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 1);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6818      	ldr	r0, [r3, #0]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	889b      	ldrh	r3, [r3, #4]
 8000720:	2201      	movs	r2, #1
 8000722:	4619      	mov	r1, r3
 8000724:	f002 fd0a 	bl	800313c <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000728:	2064      	movs	r0, #100	@ 0x64
 800072a:	f001 f89d 	bl	8001868 <HAL_Delay>
			HAL_GPIO_WritePin(status_led->Led1_GPIOx, status_led->Led1_GPIO_pin, 0);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	889b      	ldrh	r3, [r3, #4]
 8000736:	2200      	movs	r2, #0
 8000738:	4619      	mov	r1, r3
 800073a:	f002 fcff 	bl	800313c <HAL_GPIO_WritePin>
			HAL_Delay(100);
 800073e:	2064      	movs	r0, #100	@ 0x64
 8000740:	f001 f892 	bl	8001868 <HAL_Delay>
			break;
 8000744:	bf00      	nop
	}
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop

08000750 <Flash_WR>:
 *      Author: ilbeyli
 */

#include "FLASH_PROCESS_lib.h"

void Flash_WR(uint32_t Flash_Address, uint32_t Flash_WR_Data){
 8000750:	b5b0      	push	{r4, r5, r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 800075a:	f002 f991 	bl	8002a80 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);  // add sector usage
 800075e:	2102      	movs	r1, #2
 8000760:	200b      	movs	r0, #11
 8000762:	f002 faef 	bl	8002d44 <FLASH_Erase_Sector>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Flash_Address, Flash_WR_Data);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2200      	movs	r2, #0
 800076a:	461c      	mov	r4, r3
 800076c:	4615      	mov	r5, r2
 800076e:	4622      	mov	r2, r4
 8000770:	462b      	mov	r3, r5
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	2002      	movs	r0, #2
 8000776:	f002 f92f 	bl	80029d8 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 800077a:	f002 f9a3 	bl	8002ac4 <HAL_FLASH_Lock>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bdb0      	pop	{r4, r5, r7, pc}

08000786 <Flash_RD>:

uint32_t Flash_RD(uint32_t Flash_Address){
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
	return *((uint32_t*)Flash_Address);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <init_servo>:
void init_servo(	servo_config* 		servo_config,
					GPIO_TypeDef*		servo_GPIOx,
					uint32_t 			servo_GPIO_pin,
					TIM_HandleTypeDef*	Timer_Handle,
					uint32_t			Timer_Channel)
{
 800079e:	b480      	push	{r7}
 80007a0:	b085      	sub	sp, #20
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	60f8      	str	r0, [r7, #12]
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	603b      	str	r3, [r7, #0]
	servo_config->servo_GPIOx 			=servo_GPIOx;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	601a      	str	r2, [r3, #0]
	servo_config->servo_GPIO_pin 		=servo_GPIO_pin;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	605a      	str	r2, [r3, #4]
	servo_config->Timer_Handle 			=Timer_Handle;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	609a      	str	r2, [r3, #8]
	servo_config->Timer_Channel			=Timer_Channel;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	69ba      	ldr	r2, [r7, #24]
 80007c2:	60da      	str	r2, [r3, #12]
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <map>:


uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	69b9      	ldr	r1, [r7, #24]
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	1a8a      	subs	r2, r1, r2
 80007ea:	fb03 f202 	mul.w	r2, r3, r2
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	1acb      	subs	r3, r1, r3
 80007f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	4413      	add	r3, r2
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <servo_angle>:


void servo_angle(servo_config* servo_config, uint32_t angle)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b085      	sub	sp, #20
 800080c:	af02      	add	r7, sp, #8
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
	if(0!= angle)
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d052      	beq.n	80008be <servo_angle+0xb6>
	{
		HAL_TIM_PWM_Start(servo_config->Timer_Handle, servo_config->Timer_Channel);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	689a      	ldr	r2, [r3, #8]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	4619      	mov	r1, r3
 8000822:	4610      	mov	r0, r2
 8000824:	f004 fd7e 	bl	8005324 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map(angle,0,180,1000,2000));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d10f      	bne.n	8000850 <servo_angle+0x48>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	681c      	ldr	r4, [r3, #0]
 8000836:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000840:	22b4      	movs	r2, #180	@ 0xb4
 8000842:	2100      	movs	r1, #0
 8000844:	6838      	ldr	r0, [r7, #0]
 8000846:	f7ff ffc3 	bl	80007d0 <map>
 800084a:	4603      	mov	r3, r0
 800084c:	6363      	str	r3, [r4, #52]	@ 0x34
	}

}
 800084e:	e036      	b.n	80008be <servo_angle+0xb6>
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map(angle,0,180,1000,2000));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	2b04      	cmp	r3, #4
 8000856:	d10f      	bne.n	8000878 <servo_angle+0x70>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	681c      	ldr	r4, [r3, #0]
 800085e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000868:	22b4      	movs	r2, #180	@ 0xb4
 800086a:	2100      	movs	r1, #0
 800086c:	6838      	ldr	r0, [r7, #0]
 800086e:	f7ff ffaf 	bl	80007d0 <map>
 8000872:	4603      	mov	r3, r0
 8000874:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8000876:	e022      	b.n	80008be <servo_angle+0xb6>
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map(angle,0,180,1000,2000));
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	2b08      	cmp	r3, #8
 800087e:	d10f      	bne.n	80008a0 <servo_angle+0x98>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	681c      	ldr	r4, [r3, #0]
 8000886:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000890:	22b4      	movs	r2, #180	@ 0xb4
 8000892:	2100      	movs	r1, #0
 8000894:	6838      	ldr	r0, [r7, #0]
 8000896:	f7ff ff9b 	bl	80007d0 <map>
 800089a:	4603      	mov	r3, r0
 800089c:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 800089e:	e00e      	b.n	80008be <servo_angle+0xb6>
		__HAL_TIM_SET_COMPARE(servo_config->Timer_Handle,servo_config->Timer_Channel, map(angle,0,180,1000,2000));
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	681c      	ldr	r4, [r3, #0]
 80008a6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008b0:	22b4      	movs	r2, #180	@ 0xb4
 80008b2:	2100      	movs	r1, #0
 80008b4:	6838      	ldr	r0, [r7, #0]
 80008b6:	f7ff ff8b 	bl	80007d0 <map>
 80008ba:	4603      	mov	r3, r0
 80008bc:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd90      	pop	{r4, r7, pc}

080008c6 <step_init>:
void step_init(	step_config* step_config,
					TIM_HandleTypeDef*	Timer_handle,
					uint32_t			Timer_channel,
					GPIO_TypeDef*		dir_GPIOx,
					uint16_t			dir_GPIO_Pin)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b085      	sub	sp, #20
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	60f8      	str	r0, [r7, #12]
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
 80008d2:	603b      	str	r3, [r7, #0]
		step_config->Timer_handle 	= Timer_handle;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	601a      	str	r2, [r3, #0]
		step_config->Timer_channel 	= Timer_channel;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	605a      	str	r2, [r3, #4]
		step_config->dir_GPIOx		= dir_GPIOx;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	683a      	ldr	r2, [r7, #0]
 80008e4:	609a      	str	r2, [r3, #8]
		step_config->dir_GPIO_Pin	= dir_GPIO_Pin;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	8b3a      	ldrh	r2, [r7, #24]
 80008ea:	819a      	strh	r2, [r3, #12]

}
 80008ec:	bf00      	nop
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <step>:

void step(step_config* step_config, uint32_t adim, uint32_t yon)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	if (step_config->step_set.durum == Step_DURDU){
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d147      	bne.n	800099c <step+0xa4>
		step_config->step_set.adim = adim;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	615a      	str	r2, [r3, #20]
		step_config->step_set.durum = Step_BASLADI;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2201      	movs	r2, #1
 8000916:	619a      	str	r2, [r3, #24]
		if(yon == Step_ILERI ){
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d108      	bne.n	8000930 <step+0x38>
			HAL_GPIO_WritePin(step_config->dir_GPIOx, step_config->dir_GPIO_Pin, 1);
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	6898      	ldr	r0, [r3, #8]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	899b      	ldrh	r3, [r3, #12]
 8000926:	2201      	movs	r2, #1
 8000928:	4619      	mov	r1, r3
 800092a:	f002 fc07 	bl	800313c <HAL_GPIO_WritePin>
 800092e:	e007      	b.n	8000940 <step+0x48>

		}
		else {
			HAL_GPIO_WritePin(step_config->dir_GPIOx, step_config->dir_GPIO_Pin, 0);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	6898      	ldr	r0, [r3, #8]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	899b      	ldrh	r3, [r3, #12]
 8000938:	2200      	movs	r2, #0
 800093a:	4619      	mov	r1, r3
 800093c:	f002 fbfe 	bl	800313c <HAL_GPIO_WritePin>

		}

		if (0 != adim){
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d02a      	beq.n	800099c <step+0xa4>
			HAL_TIM_PWM_Start_IT(step_config->Timer_handle, step_config->Timer_channel);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	4619      	mov	r1, r3
 8000950:	4610      	mov	r0, r2
 8000952:	f004 fdaf 	bl	80054b4 <HAL_TIM_PWM_Start_IT>
			__HAL_TIM_SET_COMPARE(step_config->Timer_handle, step_config->Timer_channel, 100);
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d105      	bne.n	800096a <step+0x72>
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2264      	movs	r2, #100	@ 0x64
 8000966:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
}
 8000968:	e018      	b.n	800099c <step+0xa4>
			__HAL_TIM_SET_COMPARE(step_config->Timer_handle, step_config->Timer_channel, 100);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	2b04      	cmp	r3, #4
 8000970:	d105      	bne.n	800097e <step+0x86>
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	2364      	movs	r3, #100	@ 0x64
 800097a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800097c:	e00e      	b.n	800099c <step+0xa4>
			__HAL_TIM_SET_COMPARE(step_config->Timer_handle, step_config->Timer_channel, 100);
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	2b08      	cmp	r3, #8
 8000984:	d105      	bne.n	8000992 <step+0x9a>
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	2364      	movs	r3, #100	@ 0x64
 800098e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000990:	e004      	b.n	800099c <step+0xa4>
			__HAL_TIM_SET_COMPARE(step_config->Timer_handle, step_config->Timer_channel, 100);
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	2364      	movs	r3, #100	@ 0x64
 800099a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <step_durdur>:

void step_durdur(step_config* step_config){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	if (step_config->step_set.sayac == step_config->step_set.adim){
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	691a      	ldr	r2, [r3, #16]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	695b      	ldr	r3, [r3, #20]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d10d      	bne.n	80009d4 <step_durdur+0x30>
		HAL_TIM_PWM_Stop_IT(step_config->Timer_handle, step_config->Timer_channel);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	4619      	mov	r1, r3
 80009c2:	4610      	mov	r0, r2
 80009c4:	f004 fe8c 	bl	80056e0 <HAL_TIM_PWM_Stop_IT>
		step_config->step_set.durum = Step_DURDU;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
		step_config->step_set.sayac =0;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
	}

}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef * htim)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	if (htim-> Instance == TIM1){
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a09      	ldr	r2, [pc, #36]	@ (8000a10 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d10b      	bne.n	8000a06 <HAL_TIM_PWM_PulseFinishedCallback+0x2a>

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	7f1b      	ldrb	r3, [r3, #28]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d104      	bne.n	8000a00 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
		{
			step1.step_set.sayac++;
 80009f6:	4b07      	ldr	r3, [pc, #28]	@ (8000a14 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 80009f8:	691b      	ldr	r3, [r3, #16]
 80009fa:	3301      	adds	r3, #1
 80009fc:	4a05      	ldr	r2, [pc, #20]	@ (8000a14 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 80009fe:	6113      	str	r3, [r2, #16]
		}

		step_durdur(&step1);
 8000a00:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000a02:	f7ff ffcf 	bl	80009a4 <step_durdur>

		}

}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40010000 	.word	0x40010000
 8000a14:	200002f4 	.word	0x200002f4

08000a18 <HAL_GPIO_EXTI_Callback>:


// Yapilan ayarlari kaydetmek icin
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 8000a22:	88fb      	ldrh	r3, [r7, #6]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d105      	bne.n	8000a34 <HAL_GPIO_EXTI_Callback+0x1c>
    {
    	Flash_WR(0x080E0000, flash_ref);
 8000a28:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <HAL_GPIO_EXTI_Callback+0x24>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4804      	ldr	r0, [pc, #16]	@ (8000a40 <HAL_GPIO_EXTI_Callback+0x28>)
 8000a30:	f7ff fe8e 	bl	8000750 <Flash_WR>
    }

}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2000034c 	.word	0x2000034c
 8000a40:	080e0000 	.word	0x080e0000

08000a44 <flag_check>:

void flag_check(){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) == GPIO_PIN_RESET){
 8000a48:	2102      	movs	r1, #2
 8000a4a:	4810      	ldr	r0, [pc, #64]	@ (8000a8c <flag_check+0x48>)
 8000a4c:	f002 fb5e 	bl	800310c <HAL_GPIO_ReadPin>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d103      	bne.n	8000a5e <flag_check+0x1a>
    	currentAction = PARAMETER_NEXT_SET;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <flag_check+0x4c>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
    	currentAction = PARAMETER_PREV_SET;
    }
    else if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_RESET){
    	currentAction = PARAMETER_APPLY;
    }
}
 8000a5c:	e014      	b.n	8000a88 <flag_check+0x44>
    else if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_RESET){
 8000a5e:	2104      	movs	r1, #4
 8000a60:	480a      	ldr	r0, [pc, #40]	@ (8000a8c <flag_check+0x48>)
 8000a62:	f002 fb53 	bl	800310c <HAL_GPIO_ReadPin>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d103      	bne.n	8000a74 <flag_check+0x30>
    	currentAction = PARAMETER_PREV_SET;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <flag_check+0x4c>)
 8000a6e:	2202      	movs	r2, #2
 8000a70:	701a      	strb	r2, [r3, #0]
}
 8000a72:	e009      	b.n	8000a88 <flag_check+0x44>
    else if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_RESET){
 8000a74:	2108      	movs	r1, #8
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <flag_check+0x48>)
 8000a78:	f002 fb48 	bl	800310c <HAL_GPIO_ReadPin>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d102      	bne.n	8000a88 <flag_check+0x44>
    	currentAction = PARAMETER_APPLY;
 8000a82:	4b03      	ldr	r3, [pc, #12]	@ (8000a90 <flag_check+0x4c>)
 8000a84:	2203      	movs	r2, #3
 8000a86:	701a      	strb	r2, [r3, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40020c00 	.word	0x40020c00
 8000a90:	2000038a 	.word	0x2000038a

08000a94 <process>:

void process(int currentAction, int value){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
	switch(currentAction){
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b03      	cmp	r3, #3
 8000aa2:	d025      	beq.n	8000af0 <process+0x5c>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	dc31      	bgt.n	8000b0e <process+0x7a>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d003      	beq.n	8000ab8 <process+0x24>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d00b      	beq.n	8000ace <process+0x3a>
			status_led_process(&statusLED,LED_START);
			step(&step1, value, yon);
			step_durdur(&step1);
			break;
	}
}
 8000ab6:	e02a      	b.n	8000b0e <process+0x7a>
			adim = value;
 8000ab8:	4a17      	ldr	r2, [pc, #92]	@ (8000b18 <process+0x84>)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	6013      	str	r3, [r2, #0]
			status_led_process(&statusLED,LED_STAY);
 8000abe:	2102      	movs	r1, #2
 8000ac0:	4816      	ldr	r0, [pc, #88]	@ (8000b1c <process+0x88>)
 8000ac2:	f7ff fd7b 	bl	80005bc <status_led_process>
			flash_ref = value;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	4a15      	ldr	r2, [pc, #84]	@ (8000b20 <process+0x8c>)
 8000aca:	6013      	str	r3, [r2, #0]
			break;
 8000acc:	e01f      	b.n	8000b0e <process+0x7a>
			if(value < adim){
 8000ace:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <process+0x84>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	683a      	ldr	r2, [r7, #0]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	da03      	bge.n	8000ae0 <process+0x4c>
				yon = Step_GERI;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <process+0x90>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	e002      	b.n	8000ae6 <process+0x52>
				yon = Step_ILERI;
 8000ae0:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <process+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
			status_led_process(&statusLED,LED_STAY);
 8000ae6:	2102      	movs	r1, #2
 8000ae8:	480c      	ldr	r0, [pc, #48]	@ (8000b1c <process+0x88>)
 8000aea:	f7ff fd67 	bl	80005bc <status_led_process>
			break;
 8000aee:	e00e      	b.n	8000b0e <process+0x7a>
			status_led_process(&statusLED,LED_START);
 8000af0:	2101      	movs	r1, #1
 8000af2:	480a      	ldr	r0, [pc, #40]	@ (8000b1c <process+0x88>)
 8000af4:	f7ff fd62 	bl	80005bc <status_led_process>
			step(&step1, value, yon);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <process+0x90>)
 8000afc:	6812      	ldr	r2, [r2, #0]
 8000afe:	4619      	mov	r1, r3
 8000b00:	4809      	ldr	r0, [pc, #36]	@ (8000b28 <process+0x94>)
 8000b02:	f7ff fef9 	bl	80008f8 <step>
			step_durdur(&step1);
 8000b06:	4808      	ldr	r0, [pc, #32]	@ (8000b28 <process+0x94>)
 8000b08:	f7ff ff4c 	bl	80009a4 <step_durdur>
			break;
 8000b0c:	bf00      	nop
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000310 	.word	0x20000310
 8000b1c:	2000032c 	.word	0x2000032c
 8000b20:	2000034c 	.word	0x2000034c
 8000b24:	20000314 	.word	0x20000314
 8000b28:	200002f4 	.word	0x200002f4

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b32:	f000 fe27 	bl	8001784 <HAL_Init>

  /* USER CODE BEGIN Init */
//Led
  status_led_init(&statusLED, GPIOD, GPIO_PIN_13, GPIOD, GPIO_PIN_14, GPIOD, GPIO_PIN_15, GPIOD, GPIO_PIN_12);
 8000b36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b3a:	9304      	str	r3, [sp, #16]
 8000b3c:	4b58      	ldr	r3, [pc, #352]	@ (8000ca0 <main+0x174>)
 8000b3e:	9303      	str	r3, [sp, #12]
 8000b40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b44:	9302      	str	r3, [sp, #8]
 8000b46:	4b56      	ldr	r3, [pc, #344]	@ (8000ca0 <main+0x174>)
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	4b53      	ldr	r3, [pc, #332]	@ (8000ca0 <main+0x174>)
 8000b52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b56:	4952      	ldr	r1, [pc, #328]	@ (8000ca0 <main+0x174>)
 8000b58:	4852      	ldr	r0, [pc, #328]	@ (8000ca4 <main+0x178>)
 8000b5a:	f7ff fd09 	bl	8000570 <status_led_init>
//StepMotor
  step_init(&step1, &htim1, TIM_CHANNEL_1, dir_GPIO_Port, dir_Pin);
 8000b5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	4b4e      	ldr	r3, [pc, #312]	@ (8000ca0 <main+0x174>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	494f      	ldr	r1, [pc, #316]	@ (8000ca8 <main+0x17c>)
 8000b6a:	4850      	ldr	r0, [pc, #320]	@ (8000cac <main+0x180>)
 8000b6c:	f7ff feab 	bl	80008c6 <step_init>
//Servo
  init_servo(&servo1, GPIOA, GPIO_PIN_15, &htim2, TIM_CHANNEL_1);
 8000b70:	2300      	movs	r3, #0
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	4b4e      	ldr	r3, [pc, #312]	@ (8000cb0 <main+0x184>)
 8000b76:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b7a:	494e      	ldr	r1, [pc, #312]	@ (8000cb4 <main+0x188>)
 8000b7c:	484e      	ldr	r0, [pc, #312]	@ (8000cb8 <main+0x18c>)
 8000b7e:	f7ff fe0e 	bl	800079e <init_servo>
//Lcd
//  LCD_Init(&hi2c1);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b82:	f000 f8ad 	bl	8000ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b86:	f000 facb 	bl	8001120 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b8a:	f000 faa9 	bl	80010e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b8e:	f000 f911 	bl	8000db4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000b92:	f000 f98f 	bl	8000eb4 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000b96:	f009 f81b 	bl	8009bd0 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000b9a:	f000 fa2b 	bl	8000ff4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000b9e:	f000 f95b 	bl	8000e58 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4945      	ldr	r1, [pc, #276]	@ (8000cbc <main+0x190>)
 8000ba6:	4846      	ldr	r0, [pc, #280]	@ (8000cc0 <main+0x194>)
 8000ba8:	f000 fec6 	bl	8001938 <HAL_ADC_Start_DMA>
  status_led_process(&statusLED, LED_GO);
 8000bac:	2103      	movs	r1, #3
 8000bae:	483d      	ldr	r0, [pc, #244]	@ (8000ca4 <main+0x178>)
 8000bb0:	f7ff fd04 	bl	80005bc <status_led_process>
  HAL_Delay(2000);
 8000bb4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000bb8:	f000 fe56 	bl	8001868 <HAL_Delay>

  read_step_value = Flash_RD(0x080E0000);
 8000bbc:	4841      	ldr	r0, [pc, #260]	@ (8000cc4 <main+0x198>)
 8000bbe:	f7ff fde2 	bl	8000786 <Flash_RD>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b40      	ldr	r3, [pc, #256]	@ (8000cc8 <main+0x19c>)
 8000bc8:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(currentAction == 0){
 8000bca:	4b40      	ldr	r3, [pc, #256]	@ (8000ccc <main+0x1a0>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d115      	bne.n	8000bfe <main+0xd2>
		flag_check();
 8000bd2:	f7ff ff37 	bl	8000a44 <flag_check>
		process(currentAction, read_step_value);
 8000bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ccc <main+0x1a0>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b3a      	ldr	r3, [pc, #232]	@ (8000cc8 <main+0x19c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	4610      	mov	r0, r2
 8000be4:	f7ff ff56 	bl	8000a94 <process>
		servo_angle(&servo1, read_step_value);
 8000be8:	4b37      	ldr	r3, [pc, #220]	@ (8000cc8 <main+0x19c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4619      	mov	r1, r3
 8000bee:	4832      	ldr	r0, [pc, #200]	@ (8000cb8 <main+0x18c>)
 8000bf0:	f7ff fe0a 	bl	8000808 <servo_angle>
		HAL_Delay(1000);
 8000bf4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bf8:	f000 fe36 	bl	8001868 <HAL_Delay>
 8000bfc:	e030      	b.n	8000c60 <main+0x134>
	}

	else{
		read_step_value = map(adc_buffer[0], 0, 4095, 0, 180);
 8000bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8000cbc <main+0x190>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	23b4      	movs	r3, #180	@ 0xb4
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000c0e:	2100      	movs	r1, #0
 8000c10:	f7ff fdde 	bl	80007d0 <map>
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc8 <main+0x19c>)
 8000c1a:	601a      	str	r2, [r3, #0]
		snprintf((char*)send_data, sizeof(send_data), "%d\n", read_step_value);
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc8 <main+0x19c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a2b      	ldr	r2, [pc, #172]	@ (8000cd0 <main+0x1a4>)
 8000c22:	2132      	movs	r1, #50	@ 0x32
 8000c24:	482b      	ldr	r0, [pc, #172]	@ (8000cd4 <main+0x1a8>)
 8000c26:	f009 fcfb 	bl	800a620 <sniprintf>
		while (CDC_Transmit_FS((uint8_t*)send_data, strlen((char*)send_data)) == USBD_BUSY) {
 8000c2a:	e002      	b.n	8000c32 <main+0x106>
			HAL_Delay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f000 fe1b 	bl	8001868 <HAL_Delay>
		while (CDC_Transmit_FS((uint8_t*)send_data, strlen((char*)send_data)) == USBD_BUSY) {
 8000c32:	4828      	ldr	r0, [pc, #160]	@ (8000cd4 <main+0x1a8>)
 8000c34:	f7ff facc 	bl	80001d0 <strlen>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4825      	ldr	r0, [pc, #148]	@ (8000cd4 <main+0x1a8>)
 8000c40:	f009 f884 	bl	8009d4c <CDC_Transmit_FS>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d0f0      	beq.n	8000c2c <main+0x100>
		}

		flag_check();
 8000c4a:	f7ff fefb 	bl	8000a44 <flag_check>
		process(currentAction, read_step_value);
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <main+0x1a0>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc8 <main+0x19c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4610      	mov	r0, r2
 8000c5c:	f7ff ff1a 	bl	8000a94 <process>
	}
	angle = map(adc_buffer[0],0,4095,0,180);
 8000c60:	4b16      	ldr	r3, [pc, #88]	@ (8000cbc <main+0x190>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	23b4      	movs	r3, #180	@ 0xb4
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000c70:	2100      	movs	r1, #0
 8000c72:	f7ff fdad 	bl	80007d0 <map>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b17      	ldr	r3, [pc, #92]	@ (8000cd8 <main+0x1ac>)
 8000c7c:	601a      	str	r2, [r3, #0]
	flash_ref = angle;
 8000c7e:	4b16      	ldr	r3, [pc, #88]	@ (8000cd8 <main+0x1ac>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <main+0x1b0>)
 8000c86:	601a      	str	r2, [r3, #0]
	servo_angle(&servo1, angle);
 8000c88:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <main+0x1ac>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480a      	ldr	r0, [pc, #40]	@ (8000cb8 <main+0x18c>)
 8000c90:	f7ff fdba 	bl	8000808 <servo_angle>
	HAL_Delay(1000);
 8000c94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c98:	f000 fde6 	bl	8001868 <HAL_Delay>
	if(currentAction == 0){
 8000c9c:	e795      	b.n	8000bca <main+0x9e>
 8000c9e:	bf00      	nop
 8000ca0:	40020c00 	.word	0x40020c00
 8000ca4:	2000032c 	.word	0x2000032c
 8000ca8:	20000264 	.word	0x20000264
 8000cac:	200002f4 	.word	0x200002f4
 8000cb0:	200002ac 	.word	0x200002ac
 8000cb4:	40020000 	.word	0x40020000
 8000cb8:	20000318 	.word	0x20000318
 8000cbc:	20000350 	.word	0x20000350
 8000cc0:	20000168 	.word	0x20000168
 8000cc4:	080e0000 	.word	0x080e0000
 8000cc8:	20000354 	.word	0x20000354
 8000ccc:	2000038a 	.word	0x2000038a
 8000cd0:	0800afa0 	.word	0x0800afa0
 8000cd4:	20000358 	.word	0x20000358
 8000cd8:	20000328 	.word	0x20000328
 8000cdc:	2000034c 	.word	0x2000034c

08000ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b094      	sub	sp, #80	@ 0x50
 8000ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 0320 	add.w	r3, r7, #32
 8000cea:	2230      	movs	r2, #48	@ 0x30
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f009 fcca 	bl	800a688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	4b28      	ldr	r3, [pc, #160]	@ (8000dac <SystemClock_Config+0xcc>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0c:	4a27      	ldr	r2, [pc, #156]	@ (8000dac <SystemClock_Config+0xcc>)
 8000d0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d14:	4b25      	ldr	r3, [pc, #148]	@ (8000dac <SystemClock_Config+0xcc>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d20:	2300      	movs	r3, #0
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	4b22      	ldr	r3, [pc, #136]	@ (8000db0 <SystemClock_Config+0xd0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a21      	ldr	r2, [pc, #132]	@ (8000db0 <SystemClock_Config+0xd0>)
 8000d2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	4b1f      	ldr	r3, [pc, #124]	@ (8000db0 <SystemClock_Config+0xd0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d40:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d46:	2302      	movs	r3, #2
 8000d48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d50:	2304      	movs	r3, #4
 8000d52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000d54:	2348      	movs	r3, #72	@ 0x48
 8000d56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d60:	f107 0320 	add.w	r3, r7, #32
 8000d64:	4618      	mov	r0, r3
 8000d66:	f003 fdb1 	bl	80048cc <HAL_RCC_OscConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d70:	f000 fab6 	bl	80012e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d74:	230f      	movs	r3, #15
 8000d76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	2102      	movs	r1, #2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f004 f812 	bl	8004dbc <HAL_RCC_ClockConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d9e:	f000 fa9f 	bl	80012e0 <Error_Handler>
  }
}
 8000da2:	bf00      	nop
 8000da4:	3750      	adds	r7, #80	@ 0x50
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40007000 	.word	0x40007000

08000db4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dba:	463b      	mov	r3, r7
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dc6:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <MX_ADC1_Init+0x98>)
 8000dc8:	4a21      	ldr	r2, [pc, #132]	@ (8000e50 <MX_ADC1_Init+0x9c>)
 8000dca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e4c <MX_ADC1_Init+0x98>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e4c <MX_ADC1_Init+0x98>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <MX_ADC1_Init+0x98>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000dde:	4b1b      	ldr	r3, [pc, #108]	@ (8000e4c <MX_ADC1_Init+0x98>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000de4:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <MX_ADC1_Init+0x98>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dec:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <MX_ADC1_Init+0x98>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df2:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <MX_ADC1_Init+0x98>)
 8000df4:	4a17      	ldr	r2, [pc, #92]	@ (8000e54 <MX_ADC1_Init+0xa0>)
 8000df6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000df8:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <MX_ADC1_Init+0x98>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <MX_ADC1_Init+0x98>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e04:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <MX_ADC1_Init+0x98>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <MX_ADC1_Init+0x98>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e12:	480e      	ldr	r0, [pc, #56]	@ (8000e4c <MX_ADC1_Init+0x98>)
 8000e14:	f000 fd4c 	bl	80018b0 <HAL_ADC_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e1e:	f000 fa5f 	bl	80012e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e26:	2301      	movs	r3, #1
 8000e28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4619      	mov	r1, r3
 8000e32:	4806      	ldr	r0, [pc, #24]	@ (8000e4c <MX_ADC1_Init+0x98>)
 8000e34:	f000 feae 	bl	8001b94 <HAL_ADC_ConfigChannel>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e3e:	f000 fa4f 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000168 	.word	0x20000168
 8000e50:	40012000 	.word	0x40012000
 8000e54:	0f000001 	.word	0x0f000001

08000e58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <MX_I2C1_Init+0x50>)
 8000e5e:	4a13      	ldr	r2, [pc, #76]	@ (8000eac <MX_I2C1_Init+0x54>)
 8000e60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <MX_I2C1_Init+0x50>)
 8000e64:	4a12      	ldr	r2, [pc, #72]	@ (8000eb0 <MX_I2C1_Init+0x58>)
 8000e66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <MX_I2C1_Init+0x50>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <MX_I2C1_Init+0x50>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <MX_I2C1_Init+0x50>)
 8000e76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <MX_I2C1_Init+0x50>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e82:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <MX_I2C1_Init+0x50>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e88:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <MX_I2C1_Init+0x50>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <MX_I2C1_Init+0x50>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e94:	4804      	ldr	r0, [pc, #16]	@ (8000ea8 <MX_I2C1_Init+0x50>)
 8000e96:	f002 f983 	bl	80031a0 <HAL_I2C_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ea0:	f000 fa1e 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000210 	.word	0x20000210
 8000eac:	40005400 	.word	0x40005400
 8000eb0:	000186a0 	.word	0x000186a0

08000eb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b096      	sub	sp, #88	@ 0x58
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]
 8000ee2:	615a      	str	r2, [r3, #20]
 8000ee4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2220      	movs	r2, #32
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f009 fbcb 	bl	800a688 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ef2:	4b3e      	ldr	r3, [pc, #248]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000ef4:	4a3e      	ldr	r2, [pc, #248]	@ (8000ff0 <MX_TIM1_Init+0x13c>)
 8000ef6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000ef8:	4b3c      	ldr	r3, [pc, #240]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000efa:	2247      	movs	r2, #71	@ 0x47
 8000efc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efe:	4b3b      	ldr	r3, [pc, #236]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000f04:	4b39      	ldr	r3, [pc, #228]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0c:	4b37      	ldr	r3, [pc, #220]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f12:	4b36      	ldr	r3, [pc, #216]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f18:	4b34      	ldr	r3, [pc, #208]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f1e:	4833      	ldr	r0, [pc, #204]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f20:	f004 f958 	bl	80051d4 <HAL_TIM_Base_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f2a:	f000 f9d9 	bl	80012e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f32:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f34:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f38:	4619      	mov	r1, r3
 8000f3a:	482c      	ldr	r0, [pc, #176]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f3c:	f004 fe40 	bl	8005bc0 <HAL_TIM_ConfigClockSource>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f46:	f000 f9cb 	bl	80012e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f4a:	4828      	ldr	r0, [pc, #160]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f4c:	f004 f991 	bl	8005272 <HAL_TIM_PWM_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f56:	f000 f9c3 	bl	80012e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f62:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f66:	4619      	mov	r1, r3
 8000f68:	4820      	ldr	r0, [pc, #128]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f6a:	f005 fa35 	bl	80063d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f74:	f000 f9b4 	bl	80012e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f78:	2360      	movs	r3, #96	@ 0x60
 8000f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f84:	2300      	movs	r3, #0
 8000f86:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f90:	2300      	movs	r3, #0
 8000f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f98:	2200      	movs	r2, #0
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4813      	ldr	r0, [pc, #76]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f9e:	f004 fd4d 	bl	8005a3c <HAL_TIM_PWM_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000fa8:	f000 f99a 	bl	80012e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fc4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4807      	ldr	r0, [pc, #28]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000fd0:	f005 fa7e 	bl	80064d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000fda:	f000 f981 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fde:	4803      	ldr	r0, [pc, #12]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000fe0:	f000 faa8 	bl	8001534 <HAL_TIM_MspPostInit>

}
 8000fe4:	bf00      	nop
 8000fe6:	3758      	adds	r7, #88	@ 0x58
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000264 	.word	0x20000264
 8000ff0:	40010000 	.word	0x40010000

08000ff4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08e      	sub	sp, #56	@ 0x38
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	f107 0320 	add.w	r3, r7, #32
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]
 8001022:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001024:	4b2d      	ldr	r3, [pc, #180]	@ (80010dc <MX_TIM2_Init+0xe8>)
 8001026:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800102a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800102c:	4b2b      	ldr	r3, [pc, #172]	@ (80010dc <MX_TIM2_Init+0xe8>)
 800102e:	2248      	movs	r2, #72	@ 0x48
 8001030:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001032:	4b2a      	ldr	r3, [pc, #168]	@ (80010dc <MX_TIM2_Init+0xe8>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001038:	4b28      	ldr	r3, [pc, #160]	@ (80010dc <MX_TIM2_Init+0xe8>)
 800103a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800103e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001040:	4b26      	ldr	r3, [pc, #152]	@ (80010dc <MX_TIM2_Init+0xe8>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001046:	4b25      	ldr	r3, [pc, #148]	@ (80010dc <MX_TIM2_Init+0xe8>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800104c:	4823      	ldr	r0, [pc, #140]	@ (80010dc <MX_TIM2_Init+0xe8>)
 800104e:	f004 f8c1 	bl	80051d4 <HAL_TIM_Base_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001058:	f000 f942 	bl	80012e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001060:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001062:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001066:	4619      	mov	r1, r3
 8001068:	481c      	ldr	r0, [pc, #112]	@ (80010dc <MX_TIM2_Init+0xe8>)
 800106a:	f004 fda9 	bl	8005bc0 <HAL_TIM_ConfigClockSource>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001074:	f000 f934 	bl	80012e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001078:	4818      	ldr	r0, [pc, #96]	@ (80010dc <MX_TIM2_Init+0xe8>)
 800107a:	f004 f8fa 	bl	8005272 <HAL_TIM_PWM_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001084:	f000 f92c 	bl	80012e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001090:	f107 0320 	add.w	r3, r7, #32
 8001094:	4619      	mov	r1, r3
 8001096:	4811      	ldr	r0, [pc, #68]	@ (80010dc <MX_TIM2_Init+0xe8>)
 8001098:	f005 f99e 	bl	80063d8 <HAL_TIMEx_MasterConfigSynchronization>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80010a2:	f000 f91d 	bl	80012e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a6:	2360      	movs	r3, #96	@ 0x60
 80010a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2200      	movs	r2, #0
 80010ba:	4619      	mov	r1, r3
 80010bc:	4807      	ldr	r0, [pc, #28]	@ (80010dc <MX_TIM2_Init+0xe8>)
 80010be:	f004 fcbd 	bl	8005a3c <HAL_TIM_PWM_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80010c8:	f000 f90a 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010cc:	4803      	ldr	r0, [pc, #12]	@ (80010dc <MX_TIM2_Init+0xe8>)
 80010ce:	f000 fa31 	bl	8001534 <HAL_TIM_MspPostInit>

}
 80010d2:	bf00      	nop
 80010d4:	3738      	adds	r7, #56	@ 0x38
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200002ac 	.word	0x200002ac

080010e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <MX_DMA_Init+0x3c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	4a0b      	ldr	r2, [pc, #44]	@ (800111c <MX_DMA_Init+0x3c>)
 80010f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <MX_DMA_Init+0x3c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	2038      	movs	r0, #56	@ 0x38
 8001108:	f001 f8bf 	bl	800228a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800110c:	2038      	movs	r0, #56	@ 0x38
 800110e:	f001 f8d8 	bl	80022c2 <HAL_NVIC_EnableIRQ>

}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800

08001120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	@ 0x30
 8001124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	4b63      	ldr	r3, [pc, #396]	@ (80012c8 <MX_GPIO_Init+0x1a8>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a62      	ldr	r2, [pc, #392]	@ (80012c8 <MX_GPIO_Init+0x1a8>)
 8001140:	f043 0310 	orr.w	r3, r3, #16
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b60      	ldr	r3, [pc, #384]	@ (80012c8 <MX_GPIO_Init+0x1a8>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	4b5c      	ldr	r3, [pc, #368]	@ (80012c8 <MX_GPIO_Init+0x1a8>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a5b      	ldr	r2, [pc, #364]	@ (80012c8 <MX_GPIO_Init+0x1a8>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b59      	ldr	r3, [pc, #356]	@ (80012c8 <MX_GPIO_Init+0x1a8>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b55      	ldr	r3, [pc, #340]	@ (80012c8 <MX_GPIO_Init+0x1a8>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a54      	ldr	r2, [pc, #336]	@ (80012c8 <MX_GPIO_Init+0x1a8>)
 8001178:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b52      	ldr	r3, [pc, #328]	@ (80012c8 <MX_GPIO_Init+0x1a8>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b4e      	ldr	r3, [pc, #312]	@ (80012c8 <MX_GPIO_Init+0x1a8>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	4a4d      	ldr	r2, [pc, #308]	@ (80012c8 <MX_GPIO_Init+0x1a8>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	@ 0x30
 800119a:	4b4b      	ldr	r3, [pc, #300]	@ (80012c8 <MX_GPIO_Init+0x1a8>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	4b47      	ldr	r3, [pc, #284]	@ (80012c8 <MX_GPIO_Init+0x1a8>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a46      	ldr	r2, [pc, #280]	@ (80012c8 <MX_GPIO_Init+0x1a8>)
 80011b0:	f043 0308 	orr.w	r3, r3, #8
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b44      	ldr	r3, [pc, #272]	@ (80012c8 <MX_GPIO_Init+0x1a8>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b40      	ldr	r3, [pc, #256]	@ (80012c8 <MX_GPIO_Init+0x1a8>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	4a3f      	ldr	r2, [pc, #252]	@ (80012c8 <MX_GPIO_Init+0x1a8>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d2:	4b3d      	ldr	r3, [pc, #244]	@ (80012c8 <MX_GPIO_Init+0x1a8>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, lcd_d5_Pin|lcd_d6_Pin|lcd_d7_Pin|GPIO_PIN_10
 80011de:	2200      	movs	r2, #0
 80011e0:	f240 413a 	movw	r1, #1082	@ 0x43a
 80011e4:	4839      	ldr	r0, [pc, #228]	@ (80012cc <MX_GPIO_Init+0x1ac>)
 80011e6:	f001 ffa9 	bl	800313c <HAL_GPIO_WritePin>
                          |lcd_d4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2130      	movs	r1, #48	@ 0x30
 80011ee:	4838      	ldr	r0, [pc, #224]	@ (80012d0 <MX_GPIO_Init+0x1b0>)
 80011f0:	f001 ffa4 	bl	800313c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, dir_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 80011fa:	4836      	ldr	r0, [pc, #216]	@ (80012d4 <MX_GPIO_Init+0x1b4>)
 80011fc:	f001 ff9e 	bl	800313c <HAL_GPIO_WritePin>
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, lcd_rs_Pin|lcd_e_Pin, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	2128      	movs	r1, #40	@ 0x28
 8001204:	4834      	ldr	r0, [pc, #208]	@ (80012d8 <MX_GPIO_Init+0x1b8>)
 8001206:	f001 ff99 	bl	800313c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : lcd_d5_Pin lcd_d6_Pin lcd_d7_Pin PE10
                           lcd_d4_Pin */
  GPIO_InitStruct.Pin = lcd_d5_Pin|lcd_d6_Pin|lcd_d7_Pin|GPIO_PIN_10
 800120a:	f240 433a 	movw	r3, #1082	@ 0x43a
 800120e:	61fb      	str	r3, [r7, #28]
                          |lcd_d4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	482a      	ldr	r0, [pc, #168]	@ (80012cc <MX_GPIO_Init+0x1ac>)
 8001224:	f001 fdd6 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001228:	2301      	movs	r3, #1
 800122a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800122c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001230:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	4827      	ldr	r0, [pc, #156]	@ (80012dc <MX_GPIO_Init+0x1bc>)
 800123e:	f001 fdc9 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001242:	2330      	movs	r3, #48	@ 0x30
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2301      	movs	r3, #1
 8001248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	4619      	mov	r1, r3
 8001258:	481d      	ldr	r0, [pc, #116]	@ (80012d0 <MX_GPIO_Init+0x1b0>)
 800125a:	f001 fdbb 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : dir_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = dir_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800125e:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8001262:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	4619      	mov	r1, r3
 8001276:	4817      	ldr	r0, [pc, #92]	@ (80012d4 <MX_GPIO_Init+0x1b4>)
 8001278:	f001 fdac 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800127c:	230e      	movs	r3, #14
 800127e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001284:	2301      	movs	r3, #1
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	4811      	ldr	r0, [pc, #68]	@ (80012d4 <MX_GPIO_Init+0x1b4>)
 8001290:	f001 fda0 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_rs_Pin lcd_e_Pin */
  GPIO_InitStruct.Pin = lcd_rs_Pin|lcd_e_Pin;
 8001294:	2328      	movs	r3, #40	@ 0x28
 8001296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4619      	mov	r1, r3
 80012aa:	480b      	ldr	r0, [pc, #44]	@ (80012d8 <MX_GPIO_Init+0x1b8>)
 80012ac:	f001 fd92 	bl	8002dd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2100      	movs	r1, #0
 80012b4:	2006      	movs	r0, #6
 80012b6:	f000 ffe8 	bl	800228a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012ba:	2006      	movs	r0, #6
 80012bc:	f001 f801 	bl	80022c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c0:	bf00      	nop
 80012c2:	3730      	adds	r7, #48	@ 0x30
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020c00 	.word	0x40020c00
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40020000 	.word	0x40020000

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <Error_Handler+0x8>

080012ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <HAL_MspInit+0x4c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001338 <HAL_MspInit+0x4c>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001300:	6453      	str	r3, [r2, #68]	@ 0x44
 8001302:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <HAL_MspInit+0x4c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <HAL_MspInit+0x4c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	4a08      	ldr	r2, [pc, #32]	@ (8001338 <HAL_MspInit+0x4c>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800131c:	6413      	str	r3, [r2, #64]	@ 0x40
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_MspInit+0x4c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800132a:	2007      	movs	r0, #7
 800132c:	f000 ffa2 	bl	8002274 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800

0800133c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	@ 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a2f      	ldr	r2, [pc, #188]	@ (8001418 <HAL_ADC_MspInit+0xdc>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d158      	bne.n	8001410 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	4b2e      	ldr	r3, [pc, #184]	@ (800141c <HAL_ADC_MspInit+0xe0>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001366:	4a2d      	ldr	r2, [pc, #180]	@ (800141c <HAL_ADC_MspInit+0xe0>)
 8001368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800136c:	6453      	str	r3, [r2, #68]	@ 0x44
 800136e:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <HAL_ADC_MspInit+0xe0>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b27      	ldr	r3, [pc, #156]	@ (800141c <HAL_ADC_MspInit+0xe0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a26      	ldr	r2, [pc, #152]	@ (800141c <HAL_ADC_MspInit+0xe0>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b24      	ldr	r3, [pc, #144]	@ (800141c <HAL_ADC_MspInit+0xe0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001396:	2302      	movs	r3, #2
 8001398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139a:	2303      	movs	r3, #3
 800139c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	481d      	ldr	r0, [pc, #116]	@ (8001420 <HAL_ADC_MspInit+0xe4>)
 80013aa:	f001 fd13 	bl	8002dd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80013ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001428 <HAL_ADC_MspInit+0xec>)
 80013b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c0:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013c6:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013d6:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013d8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013de:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013e8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013ec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013f4:	480b      	ldr	r0, [pc, #44]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013f6:	f000 ff7f 	bl	80022f8 <HAL_DMA_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001400:	f7ff ff6e 	bl	80012e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a07      	ldr	r2, [pc, #28]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 8001408:	639a      	str	r2, [r3, #56]	@ 0x38
 800140a:	4a06      	ldr	r2, [pc, #24]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001410:	bf00      	nop
 8001412:	3728      	adds	r7, #40	@ 0x28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40012000 	.word	0x40012000
 800141c:	40023800 	.word	0x40023800
 8001420:	40020000 	.word	0x40020000
 8001424:	200001b0 	.word	0x200001b0
 8001428:	40026410 	.word	0x40026410

0800142c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	@ 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a19      	ldr	r2, [pc, #100]	@ (80014b0 <HAL_I2C_MspInit+0x84>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d12b      	bne.n	80014a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <HAL_I2C_MspInit+0x88>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a17      	ldr	r2, [pc, #92]	@ (80014b4 <HAL_I2C_MspInit+0x88>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <HAL_I2C_MspInit+0x88>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800146a:	23c0      	movs	r3, #192	@ 0xc0
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800146e:	2312      	movs	r3, #18
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800147a:	2304      	movs	r3, #4
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	480c      	ldr	r0, [pc, #48]	@ (80014b8 <HAL_I2C_MspInit+0x8c>)
 8001486:	f001 fca5 	bl	8002dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <HAL_I2C_MspInit+0x88>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	4a08      	ldr	r2, [pc, #32]	@ (80014b4 <HAL_I2C_MspInit+0x88>)
 8001494:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001498:	6413      	str	r3, [r2, #64]	@ 0x40
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_I2C_MspInit+0x88>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014a6:	bf00      	nop
 80014a8:	3728      	adds	r7, #40	@ 0x28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40005400 	.word	0x40005400
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020400 	.word	0x40020400

080014bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a18      	ldr	r2, [pc, #96]	@ (800152c <HAL_TIM_Base_MspInit+0x70>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d116      	bne.n	80014fc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <HAL_TIM_Base_MspInit+0x74>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	4a16      	ldr	r2, [pc, #88]	@ (8001530 <HAL_TIM_Base_MspInit+0x74>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <HAL_TIM_Base_MspInit+0x74>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	201b      	movs	r0, #27
 80014f0:	f000 fecb 	bl	800228a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80014f4:	201b      	movs	r0, #27
 80014f6:	f000 fee4 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014fa:	e012      	b.n	8001522 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001504:	d10d      	bne.n	8001522 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <HAL_TIM_Base_MspInit+0x74>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	4a08      	ldr	r2, [pc, #32]	@ (8001530 <HAL_TIM_Base_MspInit+0x74>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6413      	str	r3, [r2, #64]	@ 0x40
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_TIM_Base_MspInit+0x74>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40010000 	.word	0x40010000
 8001530:	40023800 	.word	0x40023800

08001534 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	@ 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a25      	ldr	r2, [pc, #148]	@ (80015e8 <HAL_TIM_MspPostInit+0xb4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d11f      	bne.n	8001596 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	4b24      	ldr	r3, [pc, #144]	@ (80015ec <HAL_TIM_MspPostInit+0xb8>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	4a23      	ldr	r2, [pc, #140]	@ (80015ec <HAL_TIM_MspPostInit+0xb8>)
 8001560:	f043 0310 	orr.w	r3, r3, #16
 8001564:	6313      	str	r3, [r2, #48]	@ 0x30
 8001566:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <HAL_TIM_MspPostInit+0xb8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001572:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001584:	2301      	movs	r3, #1
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	4818      	ldr	r0, [pc, #96]	@ (80015f0 <HAL_TIM_MspPostInit+0xbc>)
 8001590:	f001 fc20 	bl	8002dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001594:	e023      	b.n	80015de <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800159e:	d11e      	bne.n	80015de <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <HAL_TIM_MspPostInit+0xb8>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a8:	4a10      	ldr	r2, [pc, #64]	@ (80015ec <HAL_TIM_MspPostInit+0xb8>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b0:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <HAL_TIM_MspPostInit+0xb8>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015ce:	2301      	movs	r3, #1
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4806      	ldr	r0, [pc, #24]	@ (80015f4 <HAL_TIM_MspPostInit+0xc0>)
 80015da:	f001 fbfb 	bl	8002dd4 <HAL_GPIO_Init>
}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	@ 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40010000 	.word	0x40010000
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40020000 	.word	0x40020000

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <NMI_Handler+0x4>

08001600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <MemManage_Handler+0x4>

08001610 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <UsageFault_Handler+0x4>

08001620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164e:	f000 f8eb 	bl	8001828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}

08001656 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800165a:	2001      	movs	r0, #1
 800165c:	f001 fd88 	bl	8003170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001668:	4802      	ldr	r0, [pc, #8]	@ (8001674 <TIM1_CC_IRQHandler+0x10>)
 800166a:	f004 f8f7 	bl	800585c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000264 	.word	0x20000264

08001678 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800167c:	4802      	ldr	r0, [pc, #8]	@ (8001688 <DMA2_Stream0_IRQHandler+0x10>)
 800167e:	f000 ff41 	bl	8002504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200001b0 	.word	0x200001b0

0800168c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <OTG_FS_IRQHandler+0x10>)
 8001692:	f002 f80d 	bl	80036b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20001894 	.word	0x20001894

080016a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a8:	4a14      	ldr	r2, [pc, #80]	@ (80016fc <_sbrk+0x5c>)
 80016aa:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <_sbrk+0x60>)
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b4:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <_sbrk+0x64>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d102      	bne.n	80016c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016bc:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <_sbrk+0x64>)
 80016be:	4a12      	ldr	r2, [pc, #72]	@ (8001708 <_sbrk+0x68>)
 80016c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016c2:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <_sbrk+0x64>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d207      	bcs.n	80016e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d0:	f008 ffe2 	bl	800a698 <__errno>
 80016d4:	4603      	mov	r3, r0
 80016d6:	220c      	movs	r2, #12
 80016d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
 80016de:	e009      	b.n	80016f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e0:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <_sbrk+0x64>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e6:	4b07      	ldr	r3, [pc, #28]	@ (8001704 <_sbrk+0x64>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	4a05      	ldr	r2, [pc, #20]	@ (8001704 <_sbrk+0x64>)
 80016f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016f2:	68fb      	ldr	r3, [r7, #12]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20020000 	.word	0x20020000
 8001700:	00000400 	.word	0x00000400
 8001704:	2000038c 	.word	0x2000038c
 8001708:	200020e0 	.word	0x200020e0

0800170c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <SystemInit+0x20>)
 8001712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001716:	4a05      	ldr	r2, [pc, #20]	@ (800172c <SystemInit+0x20>)
 8001718:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800171c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001730:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001768 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001734:	f7ff ffea 	bl	800170c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001738:	480c      	ldr	r0, [pc, #48]	@ (800176c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800173a:	490d      	ldr	r1, [pc, #52]	@ (8001770 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800173c:	4a0d      	ldr	r2, [pc, #52]	@ (8001774 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001740:	e002      	b.n	8001748 <LoopCopyDataInit>

08001742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001746:	3304      	adds	r3, #4

08001748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800174c:	d3f9      	bcc.n	8001742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174e:	4a0a      	ldr	r2, [pc, #40]	@ (8001778 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001750:	4c0a      	ldr	r4, [pc, #40]	@ (800177c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001754:	e001      	b.n	800175a <LoopFillZerobss>

08001756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001758:	3204      	adds	r2, #4

0800175a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800175c:	d3fb      	bcc.n	8001756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175e:	f008 ffa1 	bl	800a6a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001762:	f7ff f9e3 	bl	8000b2c <main>
  bx  lr    
 8001766:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001768:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800176c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001770:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001774:	0800b050 	.word	0x0800b050
  ldr r2, =_sbss
 8001778:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 800177c:	200020e0 	.word	0x200020e0

08001780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001780:	e7fe      	b.n	8001780 <ADC_IRQHandler>
	...

08001784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001788:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <HAL_Init+0x40>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0d      	ldr	r2, [pc, #52]	@ (80017c4 <HAL_Init+0x40>)
 800178e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001792:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001794:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <HAL_Init+0x40>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0a      	ldr	r2, [pc, #40]	@ (80017c4 <HAL_Init+0x40>)
 800179a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800179e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a0:	4b08      	ldr	r3, [pc, #32]	@ (80017c4 <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a07      	ldr	r2, [pc, #28]	@ (80017c4 <HAL_Init+0x40>)
 80017a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ac:	2003      	movs	r0, #3
 80017ae:	f000 fd61 	bl	8002274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b2:	2000      	movs	r0, #0
 80017b4:	f000 f808 	bl	80017c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b8:	f7ff fd98 	bl	80012ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023c00 	.word	0x40023c00

080017c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d0:	4b12      	ldr	r3, [pc, #72]	@ (800181c <HAL_InitTick+0x54>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <HAL_InitTick+0x58>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017de:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fd79 	bl	80022de <HAL_SYSTICK_Config>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00e      	b.n	8001814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b0f      	cmp	r3, #15
 80017fa:	d80a      	bhi.n	8001812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fc:	2200      	movs	r2, #0
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f000 fd41 	bl	800228a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001808:	4a06      	ldr	r2, [pc, #24]	@ (8001824 <HAL_InitTick+0x5c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000000 	.word	0x20000000
 8001820:	20000008 	.word	0x20000008
 8001824:	20000004 	.word	0x20000004

08001828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_IncTick+0x20>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b06      	ldr	r3, [pc, #24]	@ (800184c <HAL_IncTick+0x24>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4413      	add	r3, r2
 8001838:	4a04      	ldr	r2, [pc, #16]	@ (800184c <HAL_IncTick+0x24>)
 800183a:	6013      	str	r3, [r2, #0]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000008 	.word	0x20000008
 800184c:	20000390 	.word	0x20000390

08001850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return uwTick;
 8001854:	4b03      	ldr	r3, [pc, #12]	@ (8001864 <HAL_GetTick+0x14>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000390 	.word	0x20000390

08001868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001870:	f7ff ffee 	bl	8001850 <HAL_GetTick>
 8001874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001880:	d005      	beq.n	800188e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001882:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <HAL_Delay+0x44>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4413      	add	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800188e:	bf00      	nop
 8001890:	f7ff ffde 	bl	8001850 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	429a      	cmp	r2, r3
 800189e:	d8f7      	bhi.n	8001890 <HAL_Delay+0x28>
  {
  }
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000008 	.word	0x20000008

080018b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e033      	b.n	800192e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d109      	bne.n	80018e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff fd34 	bl	800133c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d118      	bne.n	8001920 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018f6:	f023 0302 	bic.w	r3, r3, #2
 80018fa:	f043 0202 	orr.w	r2, r3, #2
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 fa68 	bl	8001dd8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	f023 0303 	bic.w	r3, r3, #3
 8001916:	f043 0201 	orr.w	r2, r3, #1
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	641a      	str	r2, [r3, #64]	@ 0x40
 800191e:	e001      	b.n	8001924 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800192c:	7bfb      	ldrb	r3, [r7, #15]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800194e:	2b01      	cmp	r3, #1
 8001950:	d101      	bne.n	8001956 <HAL_ADC_Start_DMA+0x1e>
 8001952:	2302      	movs	r3, #2
 8001954:	e0e9      	b.n	8001b2a <HAL_ADC_Start_DMA+0x1f2>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b01      	cmp	r3, #1
 800196a:	d018      	beq.n	800199e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0201 	orr.w	r2, r2, #1
 800197a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800197c:	4b6d      	ldr	r3, [pc, #436]	@ (8001b34 <HAL_ADC_Start_DMA+0x1fc>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a6d      	ldr	r2, [pc, #436]	@ (8001b38 <HAL_ADC_Start_DMA+0x200>)
 8001982:	fba2 2303 	umull	r2, r3, r2, r3
 8001986:	0c9a      	lsrs	r2, r3, #18
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001990:	e002      	b.n	8001998 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	3b01      	subs	r3, #1
 8001996:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f9      	bne.n	8001992 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019ac:	d107      	bne.n	80019be <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019bc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	f040 80a1 	bne.w	8001b10 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80019d6:	f023 0301 	bic.w	r3, r3, #1
 80019da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d007      	beq.n	8001a00 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a0c:	d106      	bne.n	8001a1c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	f023 0206 	bic.w	r2, r3, #6
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a1a:	e002      	b.n	8001a22 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a2a:	4b44      	ldr	r3, [pc, #272]	@ (8001b3c <HAL_ADC_Start_DMA+0x204>)
 8001a2c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a32:	4a43      	ldr	r2, [pc, #268]	@ (8001b40 <HAL_ADC_Start_DMA+0x208>)
 8001a34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a3a:	4a42      	ldr	r2, [pc, #264]	@ (8001b44 <HAL_ADC_Start_DMA+0x20c>)
 8001a3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a42:	4a41      	ldr	r2, [pc, #260]	@ (8001b48 <HAL_ADC_Start_DMA+0x210>)
 8001a44:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a4e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001a5e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a6e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	334c      	adds	r3, #76	@ 0x4c
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f000 fce8 	bl	8002454 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 031f 	and.w	r3, r3, #31
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d12a      	bne.n	8001ae6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a2d      	ldr	r2, [pc, #180]	@ (8001b4c <HAL_ADC_Start_DMA+0x214>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d015      	beq.n	8001ac6 <HAL_ADC_Start_DMA+0x18e>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8001b50 <HAL_ADC_Start_DMA+0x218>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d105      	bne.n	8001ab0 <HAL_ADC_Start_DMA+0x178>
 8001aa4:	4b25      	ldr	r3, [pc, #148]	@ (8001b3c <HAL_ADC_Start_DMA+0x204>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00a      	beq.n	8001ac6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a27      	ldr	r2, [pc, #156]	@ (8001b54 <HAL_ADC_Start_DMA+0x21c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d136      	bne.n	8001b28 <HAL_ADC_Start_DMA+0x1f0>
 8001aba:	4b20      	ldr	r3, [pc, #128]	@ (8001b3c <HAL_ADC_Start_DMA+0x204>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d130      	bne.n	8001b28 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d129      	bne.n	8001b28 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	e020      	b.n	8001b28 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a18      	ldr	r2, [pc, #96]	@ (8001b4c <HAL_ADC_Start_DMA+0x214>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d11b      	bne.n	8001b28 <HAL_ADC_Start_DMA+0x1f0>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d114      	bne.n	8001b28 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	e00b      	b.n	8001b28 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b14:	f043 0210 	orr.w	r2, r3, #16
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b20:	f043 0201 	orr.w	r2, r3, #1
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000000 	.word	0x20000000
 8001b38:	431bde83 	.word	0x431bde83
 8001b3c:	40012300 	.word	0x40012300
 8001b40:	08001fd1 	.word	0x08001fd1
 8001b44:	0800208b 	.word	0x0800208b
 8001b48:	080020a7 	.word	0x080020a7
 8001b4c:	40012000 	.word	0x40012000
 8001b50:	40012100 	.word	0x40012100
 8001b54:	40012200 	.word	0x40012200

08001b58 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1c>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e105      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x228>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b09      	cmp	r3, #9
 8001bbe:	d925      	bls.n	8001c0c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68d9      	ldr	r1, [r3, #12]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3b1e      	subs	r3, #30
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43da      	mvns	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	400a      	ands	r2, r1
 8001be4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68d9      	ldr	r1, [r3, #12]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4403      	add	r3, r0
 8001bfe:	3b1e      	subs	r3, #30
 8001c00:	409a      	lsls	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	e022      	b.n	8001c52 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6919      	ldr	r1, [r3, #16]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	2207      	movs	r2, #7
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6919      	ldr	r1, [r3, #16]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	4618      	mov	r0, r3
 8001c42:	4603      	mov	r3, r0
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4403      	add	r3, r0
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d824      	bhi.n	8001ca4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	3b05      	subs	r3, #5
 8001c6c:	221f      	movs	r2, #31
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43da      	mvns	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	400a      	ands	r2, r1
 8001c7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	4618      	mov	r0, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	3b05      	subs	r3, #5
 8001c96:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ca2:	e04c      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b0c      	cmp	r3, #12
 8001caa:	d824      	bhi.n	8001cf6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	3b23      	subs	r3, #35	@ 0x23
 8001cbe:	221f      	movs	r2, #31
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43da      	mvns	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	400a      	ands	r2, r1
 8001ccc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3b23      	subs	r3, #35	@ 0x23
 8001ce8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cf4:	e023      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	3b41      	subs	r3, #65	@ 0x41
 8001d08:	221f      	movs	r2, #31
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	400a      	ands	r2, r1
 8001d16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	3b41      	subs	r3, #65	@ 0x41
 8001d32:	fa00 f203 	lsl.w	r2, r0, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d3e:	4b22      	ldr	r3, [pc, #136]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x234>)
 8001d40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a21      	ldr	r2, [pc, #132]	@ (8001dcc <HAL_ADC_ConfigChannel+0x238>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d109      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x1cc>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b12      	cmp	r3, #18
 8001d52:	d105      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a19      	ldr	r2, [pc, #100]	@ (8001dcc <HAL_ADC_ConfigChannel+0x238>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d123      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x21e>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b10      	cmp	r3, #16
 8001d70:	d003      	beq.n	8001d7a <HAL_ADC_ConfigChannel+0x1e6>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b11      	cmp	r3, #17
 8001d78:	d11b      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b10      	cmp	r3, #16
 8001d8c:	d111      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d8e:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x23c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a10      	ldr	r2, [pc, #64]	@ (8001dd4 <HAL_ADC_ConfigChannel+0x240>)
 8001d94:	fba2 2303 	umull	r2, r3, r2, r3
 8001d98:	0c9a      	lsrs	r2, r3, #18
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001da4:	e002      	b.n	8001dac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	3b01      	subs	r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f9      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	40012300 	.word	0x40012300
 8001dcc:	40012000 	.word	0x40012000
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	431bde83 	.word	0x431bde83

08001dd8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001de0:	4b79      	ldr	r3, [pc, #484]	@ (8001fc8 <ADC_Init+0x1f0>)
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	021a      	lsls	r2, r3, #8
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6859      	ldr	r1, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6899      	ldr	r1, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6a:	4a58      	ldr	r2, [pc, #352]	@ (8001fcc <ADC_Init+0x1f4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d022      	beq.n	8001eb6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6899      	ldr	r1, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ea0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6899      	ldr	r1, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	e00f      	b.n	8001ed6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ec4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ed4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0202 	bic.w	r2, r2, #2
 8001ee4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6899      	ldr	r1, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7e1b      	ldrb	r3, [r3, #24]
 8001ef0:	005a      	lsls	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01b      	beq.n	8001f3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f12:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6859      	ldr	r1, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	035a      	lsls	r2, r3, #13
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	e007      	b.n	8001f4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f4a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	051a      	lsls	r2, r3, #20
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6899      	ldr	r1, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f8e:	025a      	lsls	r2, r3, #9
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6899      	ldr	r1, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	029a      	lsls	r2, r3, #10
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	609a      	str	r2, [r3, #8]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	40012300 	.word	0x40012300
 8001fcc:	0f000001 	.word	0x0f000001

08001fd0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d13c      	bne.n	8002064 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d12b      	bne.n	800205c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002008:	2b00      	cmp	r3, #0
 800200a:	d127      	bne.n	800205c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002012:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002016:	2b00      	cmp	r3, #0
 8002018:	d006      	beq.n	8002028 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002024:	2b00      	cmp	r3, #0
 8002026:	d119      	bne.n	800205c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0220 	bic.w	r2, r2, #32
 8002036:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d105      	bne.n	800205c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	f043 0201 	orr.w	r2, r3, #1
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f7ff fd7b 	bl	8001b58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002062:	e00e      	b.n	8002082 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002068:	f003 0310 	and.w	r3, r3, #16
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f7ff fd85 	bl	8001b80 <HAL_ADC_ErrorCallback>
}
 8002076:	e004      	b.n	8002082 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800207c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	4798      	blx	r3
}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002096:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f7ff fd67 	bl	8001b6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020b2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2240      	movs	r2, #64	@ 0x40
 80020b8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020be:	f043 0204 	orr.w	r2, r3, #4
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f7ff fd5a 	bl	8001b80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020f0:	4013      	ands	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002106:	4a04      	ldr	r2, [pc, #16]	@ (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	60d3      	str	r3, [r2, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002120:	4b04      	ldr	r3, [pc, #16]	@ (8002134 <__NVIC_GetPriorityGrouping+0x18>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	f003 0307 	and.w	r3, r3, #7
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	2b00      	cmp	r3, #0
 8002148:	db0b      	blt.n	8002162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	f003 021f 	and.w	r2, r3, #31
 8002150:	4907      	ldr	r1, [pc, #28]	@ (8002170 <__NVIC_EnableIRQ+0x38>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	2001      	movs	r0, #1
 800215a:	fa00 f202 	lsl.w	r2, r0, r2
 800215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000e100 	.word	0xe000e100

08002174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	2b00      	cmp	r3, #0
 8002186:	db0a      	blt.n	800219e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	490c      	ldr	r1, [pc, #48]	@ (80021c0 <__NVIC_SetPriority+0x4c>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	0112      	lsls	r2, r2, #4
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	440b      	add	r3, r1
 8002198:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800219c:	e00a      	b.n	80021b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4908      	ldr	r1, [pc, #32]	@ (80021c4 <__NVIC_SetPriority+0x50>)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3b04      	subs	r3, #4
 80021ac:	0112      	lsls	r2, r2, #4
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	440b      	add	r3, r1
 80021b2:	761a      	strb	r2, [r3, #24]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000e100 	.word	0xe000e100
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	@ 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f1c3 0307 	rsb	r3, r3, #7
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	bf28      	it	cs
 80021e6:	2304      	movcs	r3, #4
 80021e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d902      	bls.n	80021f8 <NVIC_EncodePriority+0x30>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3b03      	subs	r3, #3
 80021f6:	e000      	b.n	80021fa <NVIC_EncodePriority+0x32>
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	401a      	ands	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002210:	f04f 31ff 	mov.w	r1, #4294967295
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43d9      	mvns	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	4313      	orrs	r3, r2
         );
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	@ 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002240:	d301      	bcc.n	8002246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002242:	2301      	movs	r3, #1
 8002244:	e00f      	b.n	8002266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002246:	4a0a      	ldr	r2, [pc, #40]	@ (8002270 <SysTick_Config+0x40>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224e:	210f      	movs	r1, #15
 8002250:	f04f 30ff 	mov.w	r0, #4294967295
 8002254:	f7ff ff8e 	bl	8002174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002258:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <SysTick_Config+0x40>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225e:	4b04      	ldr	r3, [pc, #16]	@ (8002270 <SysTick_Config+0x40>)
 8002260:	2207      	movs	r2, #7
 8002262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	e000e010 	.word	0xe000e010

08002274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ff29 	bl	80020d4 <__NVIC_SetPriorityGrouping>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800229c:	f7ff ff3e 	bl	800211c <__NVIC_GetPriorityGrouping>
 80022a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	6978      	ldr	r0, [r7, #20]
 80022a8:	f7ff ff8e 	bl	80021c8 <NVIC_EncodePriority>
 80022ac:	4602      	mov	r2, r0
 80022ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff5d 	bl	8002174 <__NVIC_SetPriority>
}
 80022ba:	bf00      	nop
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff31 	bl	8002138 <__NVIC_EnableIRQ>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ffa2 	bl	8002230 <SysTick_Config>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff faa4 	bl	8001850 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e099      	b.n	8002448 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2202      	movs	r2, #2
 8002318:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002334:	e00f      	b.n	8002356 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002336:	f7ff fa8b 	bl	8001850 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b05      	cmp	r3, #5
 8002342:	d908      	bls.n	8002356 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2220      	movs	r2, #32
 8002348:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2203      	movs	r2, #3
 800234e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e078      	b.n	8002448 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1e8      	bne.n	8002336 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	4b38      	ldr	r3, [pc, #224]	@ (8002450 <HAL_DMA_Init+0x158>)
 8002370:	4013      	ands	r3, r2
 8002372:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002382:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800238e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800239a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d107      	bne.n	80023c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b8:	4313      	orrs	r3, r2
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4313      	orrs	r3, r2
 80023be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f023 0307 	bic.w	r3, r3, #7
 80023d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	4313      	orrs	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d117      	bne.n	800241a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00e      	beq.n	800241a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 fa6f 	bl	80028e0 <DMA_CheckFifoParam>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2240      	movs	r2, #64	@ 0x40
 800240c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002416:	2301      	movs	r3, #1
 8002418:	e016      	b.n	8002448 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fa26 	bl	8002874 <DMA_CalcBaseAndBitshift>
 8002428:	4603      	mov	r3, r0
 800242a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002430:	223f      	movs	r2, #63	@ 0x3f
 8002432:	409a      	lsls	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	f010803f 	.word	0xf010803f

08002454 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_DMA_Start_IT+0x26>
 8002476:	2302      	movs	r3, #2
 8002478:	e040      	b.n	80024fc <HAL_DMA_Start_IT+0xa8>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b01      	cmp	r3, #1
 800248c:	d12f      	bne.n	80024ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2202      	movs	r2, #2
 8002492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f9b8 	bl	8002818 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ac:	223f      	movs	r2, #63	@ 0x3f
 80024ae:	409a      	lsls	r2, r3
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0216 	orr.w	r2, r2, #22
 80024c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d007      	beq.n	80024dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0208 	orr.w	r2, r2, #8
 80024da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	e005      	b.n	80024fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024f6:	2302      	movs	r3, #2
 80024f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002510:	4b8e      	ldr	r3, [pc, #568]	@ (800274c <HAL_DMA_IRQHandler+0x248>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a8e      	ldr	r2, [pc, #568]	@ (8002750 <HAL_DMA_IRQHandler+0x24c>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	0a9b      	lsrs	r3, r3, #10
 800251c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002522:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252e:	2208      	movs	r2, #8
 8002530:	409a      	lsls	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d01a      	beq.n	8002570 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	d013      	beq.n	8002570 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0204 	bic.w	r2, r2, #4
 8002556:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255c:	2208      	movs	r2, #8
 800255e:	409a      	lsls	r2, r3
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002568:	f043 0201 	orr.w	r2, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002574:	2201      	movs	r2, #1
 8002576:	409a      	lsls	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d012      	beq.n	80025a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00b      	beq.n	80025a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002592:	2201      	movs	r2, #1
 8002594:	409a      	lsls	r2, r3
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259e:	f043 0202 	orr.w	r2, r3, #2
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025aa:	2204      	movs	r2, #4
 80025ac:	409a      	lsls	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d012      	beq.n	80025dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00b      	beq.n	80025dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c8:	2204      	movs	r2, #4
 80025ca:	409a      	lsls	r2, r3
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d4:	f043 0204 	orr.w	r2, r3, #4
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e0:	2210      	movs	r2, #16
 80025e2:	409a      	lsls	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d043      	beq.n	8002674 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d03c      	beq.n	8002674 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fe:	2210      	movs	r2, #16
 8002600:	409a      	lsls	r2, r3
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d018      	beq.n	8002646 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d108      	bne.n	8002634 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	2b00      	cmp	r3, #0
 8002628:	d024      	beq.n	8002674 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	4798      	blx	r3
 8002632:	e01f      	b.n	8002674 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002638:	2b00      	cmp	r3, #0
 800263a:	d01b      	beq.n	8002674 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	4798      	blx	r3
 8002644:	e016      	b.n	8002674 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d107      	bne.n	8002664 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0208 	bic.w	r2, r2, #8
 8002662:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002678:	2220      	movs	r2, #32
 800267a:	409a      	lsls	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 808f 	beq.w	80027a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 8087 	beq.w	80027a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269a:	2220      	movs	r2, #32
 800269c:	409a      	lsls	r2, r3
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b05      	cmp	r3, #5
 80026ac:	d136      	bne.n	800271c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0216 	bic.w	r2, r2, #22
 80026bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d103      	bne.n	80026de <HAL_DMA_IRQHandler+0x1da>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0208 	bic.w	r2, r2, #8
 80026ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f2:	223f      	movs	r2, #63	@ 0x3f
 80026f4:	409a      	lsls	r2, r3
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800270e:	2b00      	cmp	r3, #0
 8002710:	d07e      	beq.n	8002810 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	4798      	blx	r3
        }
        return;
 800271a:	e079      	b.n	8002810 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d01d      	beq.n	8002766 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10d      	bne.n	8002754 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273c:	2b00      	cmp	r3, #0
 800273e:	d031      	beq.n	80027a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4798      	blx	r3
 8002748:	e02c      	b.n	80027a4 <HAL_DMA_IRQHandler+0x2a0>
 800274a:	bf00      	nop
 800274c:	20000000 	.word	0x20000000
 8002750:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002758:	2b00      	cmp	r3, #0
 800275a:	d023      	beq.n	80027a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4798      	blx	r3
 8002764:	e01e      	b.n	80027a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10f      	bne.n	8002794 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0210 	bic.w	r2, r2, #16
 8002782:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d032      	beq.n	8002812 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d022      	beq.n	80027fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2205      	movs	r2, #5
 80027bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0201 	bic.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	3301      	adds	r3, #1
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d307      	bcc.n	80027ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f2      	bne.n	80027d0 <HAL_DMA_IRQHandler+0x2cc>
 80027ea:	e000      	b.n	80027ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	4798      	blx	r3
 800280e:	e000      	b.n	8002812 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002810:	bf00      	nop
    }
  }
}
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002834:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b40      	cmp	r3, #64	@ 0x40
 8002844:	d108      	bne.n	8002858 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002856:	e007      	b.n	8002868 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	60da      	str	r2, [r3, #12]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	3b10      	subs	r3, #16
 8002884:	4a14      	ldr	r2, [pc, #80]	@ (80028d8 <DMA_CalcBaseAndBitshift+0x64>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	091b      	lsrs	r3, r3, #4
 800288c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800288e:	4a13      	ldr	r2, [pc, #76]	@ (80028dc <DMA_CalcBaseAndBitshift+0x68>)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d909      	bls.n	80028b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80028aa:	f023 0303 	bic.w	r3, r3, #3
 80028ae:	1d1a      	adds	r2, r3, #4
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80028b4:	e007      	b.n	80028c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80028be:	f023 0303 	bic.w	r3, r3, #3
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	aaaaaaab 	.word	0xaaaaaaab
 80028dc:	0800b004 	.word	0x0800b004

080028e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d11f      	bne.n	800293a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d856      	bhi.n	80029ae <DMA_CheckFifoParam+0xce>
 8002900:	a201      	add	r2, pc, #4	@ (adr r2, 8002908 <DMA_CheckFifoParam+0x28>)
 8002902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002906:	bf00      	nop
 8002908:	08002919 	.word	0x08002919
 800290c:	0800292b 	.word	0x0800292b
 8002910:	08002919 	.word	0x08002919
 8002914:	080029af 	.word	0x080029af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d046      	beq.n	80029b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002928:	e043      	b.n	80029b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002932:	d140      	bne.n	80029b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002938:	e03d      	b.n	80029b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002942:	d121      	bne.n	8002988 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b03      	cmp	r3, #3
 8002948:	d837      	bhi.n	80029ba <DMA_CheckFifoParam+0xda>
 800294a:	a201      	add	r2, pc, #4	@ (adr r2, 8002950 <DMA_CheckFifoParam+0x70>)
 800294c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002950:	08002961 	.word	0x08002961
 8002954:	08002967 	.word	0x08002967
 8002958:	08002961 	.word	0x08002961
 800295c:	08002979 	.word	0x08002979
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
      break;
 8002964:	e030      	b.n	80029c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d025      	beq.n	80029be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002976:	e022      	b.n	80029be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002980:	d11f      	bne.n	80029c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002986:	e01c      	b.n	80029c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d903      	bls.n	8002996 <DMA_CheckFifoParam+0xb6>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b03      	cmp	r3, #3
 8002992:	d003      	beq.n	800299c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002994:	e018      	b.n	80029c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	73fb      	strb	r3, [r7, #15]
      break;
 800299a:	e015      	b.n	80029c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00e      	beq.n	80029c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
      break;
 80029ac:	e00b      	b.n	80029c6 <DMA_CheckFifoParam+0xe6>
      break;
 80029ae:	bf00      	nop
 80029b0:	e00a      	b.n	80029c8 <DMA_CheckFifoParam+0xe8>
      break;
 80029b2:	bf00      	nop
 80029b4:	e008      	b.n	80029c8 <DMA_CheckFifoParam+0xe8>
      break;
 80029b6:	bf00      	nop
 80029b8:	e006      	b.n	80029c8 <DMA_CheckFifoParam+0xe8>
      break;
 80029ba:	bf00      	nop
 80029bc:	e004      	b.n	80029c8 <DMA_CheckFifoParam+0xe8>
      break;
 80029be:	bf00      	nop
 80029c0:	e002      	b.n	80029c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80029c2:	bf00      	nop
 80029c4:	e000      	b.n	80029c8 <DMA_CheckFifoParam+0xe8>
      break;
 80029c6:	bf00      	nop
    }
  } 
  
  return status; 
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop

080029d8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80029ea:	4b23      	ldr	r3, [pc, #140]	@ (8002a78 <HAL_FLASH_Program+0xa0>)
 80029ec:	7e1b      	ldrb	r3, [r3, #24]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_FLASH_Program+0x1e>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e03b      	b.n	8002a6e <HAL_FLASH_Program+0x96>
 80029f6:	4b20      	ldr	r3, [pc, #128]	@ (8002a78 <HAL_FLASH_Program+0xa0>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002a00:	f000 f870 	bl	8002ae4 <FLASH_WaitForLastOperation>
 8002a04:	4603      	mov	r3, r0
 8002a06:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d12b      	bne.n	8002a66 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d105      	bne.n	8002a20 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002a14:	783b      	ldrb	r3, [r7, #0]
 8002a16:	4619      	mov	r1, r3
 8002a18:	68b8      	ldr	r0, [r7, #8]
 8002a1a:	f000 f91b 	bl	8002c54 <FLASH_Program_Byte>
 8002a1e:	e016      	b.n	8002a4e <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d105      	bne.n	8002a32 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002a26:	883b      	ldrh	r3, [r7, #0]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	68b8      	ldr	r0, [r7, #8]
 8002a2c:	f000 f8ee 	bl	8002c0c <FLASH_Program_HalfWord>
 8002a30:	e00d      	b.n	8002a4e <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d105      	bne.n	8002a44 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	68b8      	ldr	r0, [r7, #8]
 8002a3e:	f000 f8c3 	bl	8002bc8 <FLASH_Program_Word>
 8002a42:	e004      	b.n	8002a4e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002a44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a48:	68b8      	ldr	r0, [r7, #8]
 8002a4a:	f000 f88b 	bl	8002b64 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a4e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002a52:	f000 f847 	bl	8002ae4 <FLASH_WaitForLastOperation>
 8002a56:	4603      	mov	r3, r0
 8002a58:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002a5a:	4b08      	ldr	r3, [pc, #32]	@ (8002a7c <HAL_FLASH_Program+0xa4>)
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	4a07      	ldr	r2, [pc, #28]	@ (8002a7c <HAL_FLASH_Program+0xa4>)
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002a66:	4b04      	ldr	r3, [pc, #16]	@ (8002a78 <HAL_FLASH_Program+0xa0>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	761a      	strb	r2, [r3, #24]

  return status;
 8002a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000394 	.word	0x20000394
 8002a7c:	40023c00 	.word	0x40023c00

08002a80 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab8 <HAL_FLASH_Unlock+0x38>)
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	da0b      	bge.n	8002aaa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002a92:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <HAL_FLASH_Unlock+0x38>)
 8002a94:	4a09      	ldr	r2, [pc, #36]	@ (8002abc <HAL_FLASH_Unlock+0x3c>)
 8002a96:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002a98:	4b07      	ldr	r3, [pc, #28]	@ (8002ab8 <HAL_FLASH_Unlock+0x38>)
 8002a9a:	4a09      	ldr	r2, [pc, #36]	@ (8002ac0 <HAL_FLASH_Unlock+0x40>)
 8002a9c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002a9e:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <HAL_FLASH_Unlock+0x38>)
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	da01      	bge.n	8002aaa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	40023c00 	.word	0x40023c00
 8002abc:	45670123 	.word	0x45670123
 8002ac0:	cdef89ab 	.word	0xcdef89ab

08002ac4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002ac8:	4b05      	ldr	r3, [pc, #20]	@ (8002ae0 <HAL_FLASH_Lock+0x1c>)
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	4a04      	ldr	r2, [pc, #16]	@ (8002ae0 <HAL_FLASH_Lock+0x1c>)
 8002ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ad2:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	40023c00 	.word	0x40023c00

08002ae4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002af0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b5c <FLASH_WaitForLastOperation+0x78>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002af6:	f7fe feab 	bl	8001850 <HAL_GetTick>
 8002afa:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002afc:	e010      	b.n	8002b20 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d00c      	beq.n	8002b20 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d007      	beq.n	8002b1c <FLASH_WaitForLastOperation+0x38>
 8002b0c:	f7fe fea0 	bl	8001850 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d201      	bcs.n	8002b20 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e019      	b.n	8002b54 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002b20:	4b0f      	ldr	r3, [pc, #60]	@ (8002b60 <FLASH_WaitForLastOperation+0x7c>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1e8      	bne.n	8002afe <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b60 <FLASH_WaitForLastOperation+0x7c>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002b38:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <FLASH_WaitForLastOperation+0x7c>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002b3e:	4b08      	ldr	r3, [pc, #32]	@ (8002b60 <FLASH_WaitForLastOperation+0x7c>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002b4a:	f000 f8a5 	bl	8002c98 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0

}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000394 	.word	0x20000394
 8002b60:	40023c00 	.word	0x40023c00

08002b64 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002b70:	4b14      	ldr	r3, [pc, #80]	@ (8002bc4 <FLASH_Program_DoubleWord+0x60>)
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	4a13      	ldr	r2, [pc, #76]	@ (8002bc4 <FLASH_Program_DoubleWord+0x60>)
 8002b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	@ (8002bc4 <FLASH_Program_DoubleWord+0x60>)
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	4a10      	ldr	r2, [pc, #64]	@ (8002bc4 <FLASH_Program_DoubleWord+0x60>)
 8002b82:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002b86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002b88:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc4 <FLASH_Program_DoubleWord+0x60>)
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc4 <FLASH_Program_DoubleWord+0x60>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002b9a:	f3bf 8f6f 	isb	sy
}
 8002b9e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8002ba0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	000a      	movs	r2, r1
 8002bae:	2300      	movs	r3, #0
 8002bb0:	68f9      	ldr	r1, [r7, #12]
 8002bb2:	3104      	adds	r1, #4
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	600b      	str	r3, [r1, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	40023c00 	.word	0x40023c00

08002bc8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c08 <FLASH_Program_Word+0x40>)
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8002c08 <FLASH_Program_Word+0x40>)
 8002bd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bdc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002bde:	4b0a      	ldr	r3, [pc, #40]	@ (8002c08 <FLASH_Program_Word+0x40>)
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	4a09      	ldr	r2, [pc, #36]	@ (8002c08 <FLASH_Program_Word+0x40>)
 8002be4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002be8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002bea:	4b07      	ldr	r3, [pc, #28]	@ (8002c08 <FLASH_Program_Word+0x40>)
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	4a06      	ldr	r2, [pc, #24]	@ (8002c08 <FLASH_Program_Word+0x40>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	601a      	str	r2, [r3, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	40023c00 	.word	0x40023c00

08002c0c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c18:	4b0d      	ldr	r3, [pc, #52]	@ (8002c50 <FLASH_Program_HalfWord+0x44>)
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002c50 <FLASH_Program_HalfWord+0x44>)
 8002c1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002c24:	4b0a      	ldr	r3, [pc, #40]	@ (8002c50 <FLASH_Program_HalfWord+0x44>)
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	4a09      	ldr	r2, [pc, #36]	@ (8002c50 <FLASH_Program_HalfWord+0x44>)
 8002c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002c30:	4b07      	ldr	r3, [pc, #28]	@ (8002c50 <FLASH_Program_HalfWord+0x44>)
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	4a06      	ldr	r2, [pc, #24]	@ (8002c50 <FLASH_Program_HalfWord+0x44>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	887a      	ldrh	r2, [r7, #2]
 8002c40:	801a      	strh	r2, [r3, #0]
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40023c00 	.word	0x40023c00

08002c54 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c60:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <FLASH_Program_Byte+0x40>)
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	4a0b      	ldr	r2, [pc, #44]	@ (8002c94 <FLASH_Program_Byte+0x40>)
 8002c66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002c6c:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <FLASH_Program_Byte+0x40>)
 8002c6e:	4a09      	ldr	r2, [pc, #36]	@ (8002c94 <FLASH_Program_Byte+0x40>)
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002c74:	4b07      	ldr	r3, [pc, #28]	@ (8002c94 <FLASH_Program_Byte+0x40>)
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	4a06      	ldr	r2, [pc, #24]	@ (8002c94 <FLASH_Program_Byte+0x40>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	701a      	strb	r2, [r3, #0]
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40023c00 	.word	0x40023c00

08002c98 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002c9c:	4b27      	ldr	r3, [pc, #156]	@ (8002d3c <FLASH_SetErrorCode+0xa4>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002ca8:	4b25      	ldr	r3, [pc, #148]	@ (8002d40 <FLASH_SetErrorCode+0xa8>)
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	f043 0310 	orr.w	r3, r3, #16
 8002cb0:	4a23      	ldr	r2, [pc, #140]	@ (8002d40 <FLASH_SetErrorCode+0xa8>)
 8002cb2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002cb4:	4b21      	ldr	r3, [pc, #132]	@ (8002d3c <FLASH_SetErrorCode+0xa4>)
 8002cb6:	2210      	movs	r2, #16
 8002cb8:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002cba:	4b20      	ldr	r3, [pc, #128]	@ (8002d3c <FLASH_SetErrorCode+0xa4>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d008      	beq.n	8002cd8 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d40 <FLASH_SetErrorCode+0xa8>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f043 0308 	orr.w	r3, r3, #8
 8002cce:	4a1c      	ldr	r2, [pc, #112]	@ (8002d40 <FLASH_SetErrorCode+0xa8>)
 8002cd0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d3c <FLASH_SetErrorCode+0xa4>)
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002cd8:	4b18      	ldr	r3, [pc, #96]	@ (8002d3c <FLASH_SetErrorCode+0xa4>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002ce4:	4b16      	ldr	r3, [pc, #88]	@ (8002d40 <FLASH_SetErrorCode+0xa8>)
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	f043 0304 	orr.w	r3, r3, #4
 8002cec:	4a14      	ldr	r2, [pc, #80]	@ (8002d40 <FLASH_SetErrorCode+0xa8>)
 8002cee:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002cf0:	4b12      	ldr	r3, [pc, #72]	@ (8002d3c <FLASH_SetErrorCode+0xa4>)
 8002cf2:	2240      	movs	r2, #64	@ 0x40
 8002cf4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002cf6:	4b11      	ldr	r3, [pc, #68]	@ (8002d3c <FLASH_SetErrorCode+0xa4>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d008      	beq.n	8002d14 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002d02:	4b0f      	ldr	r3, [pc, #60]	@ (8002d40 <FLASH_SetErrorCode+0xa8>)
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f043 0302 	orr.w	r3, r3, #2
 8002d0a:	4a0d      	ldr	r2, [pc, #52]	@ (8002d40 <FLASH_SetErrorCode+0xa8>)
 8002d0c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <FLASH_SetErrorCode+0xa4>)
 8002d10:	2280      	movs	r2, #128	@ 0x80
 8002d12:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002d14:	4b09      	ldr	r3, [pc, #36]	@ (8002d3c <FLASH_SetErrorCode+0xa4>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002d20:	4b07      	ldr	r3, [pc, #28]	@ (8002d40 <FLASH_SetErrorCode+0xa8>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	f043 0320 	orr.w	r3, r3, #32
 8002d28:	4a05      	ldr	r2, [pc, #20]	@ (8002d40 <FLASH_SetErrorCode+0xa8>)
 8002d2a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002d2c:	4b03      	ldr	r3, [pc, #12]	@ (8002d3c <FLASH_SetErrorCode+0xa4>)
 8002d2e:	2202      	movs	r2, #2
 8002d30:	60da      	str	r2, [r3, #12]
  }
}
 8002d32:	bf00      	nop
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	40023c00 	.word	0x40023c00
 8002d40:	20000394 	.word	0x20000394

08002d44 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	e010      	b.n	8002d82 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d103      	bne.n	8002d6e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002d66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	e009      	b.n	8002d82 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d103      	bne.n	8002d7c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002d74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	e002      	b.n	8002d82 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002d7c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d80:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002d82:	4b13      	ldr	r3, [pc, #76]	@ (8002dd0 <FLASH_Erase_Sector+0x8c>)
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	4a12      	ldr	r2, [pc, #72]	@ (8002dd0 <FLASH_Erase_Sector+0x8c>)
 8002d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d8c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002d8e:	4b10      	ldr	r3, [pc, #64]	@ (8002dd0 <FLASH_Erase_Sector+0x8c>)
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	490f      	ldr	r1, [pc, #60]	@ (8002dd0 <FLASH_Erase_Sector+0x8c>)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd0 <FLASH_Erase_Sector+0x8c>)
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002dd0 <FLASH_Erase_Sector+0x8c>)
 8002da0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002da4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002da6:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd0 <FLASH_Erase_Sector+0x8c>)
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4313      	orrs	r3, r2
 8002db0:	4a07      	ldr	r2, [pc, #28]	@ (8002dd0 <FLASH_Erase_Sector+0x8c>)
 8002db2:	f043 0302 	orr.w	r3, r3, #2
 8002db6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002db8:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <FLASH_Erase_Sector+0x8c>)
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	4a04      	ldr	r2, [pc, #16]	@ (8002dd0 <FLASH_Erase_Sector+0x8c>)
 8002dbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc2:	6113      	str	r3, [r2, #16]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	40023c00 	.word	0x40023c00

08002dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	@ 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	e16b      	b.n	80030c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002df0:	2201      	movs	r2, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4013      	ands	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	f040 815a 	bne.w	80030c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d005      	beq.n	8002e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d130      	bne.n	8002e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	2203      	movs	r2, #3
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 0201 	and.w	r2, r3, #1
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d017      	beq.n	8002ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d123      	bne.n	8002f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	08da      	lsrs	r2, r3, #3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3208      	adds	r2, #8
 8002ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	220f      	movs	r2, #15
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	08da      	lsrs	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3208      	adds	r2, #8
 8002f12:	69b9      	ldr	r1, [r7, #24]
 8002f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	2203      	movs	r2, #3
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0203 	and.w	r2, r3, #3
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80b4 	beq.w	80030c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	4b60      	ldr	r3, [pc, #384]	@ (80030e0 <HAL_GPIO_Init+0x30c>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	4a5f      	ldr	r2, [pc, #380]	@ (80030e0 <HAL_GPIO_Init+0x30c>)
 8002f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f6a:	4b5d      	ldr	r3, [pc, #372]	@ (80030e0 <HAL_GPIO_Init+0x30c>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f76:	4a5b      	ldr	r2, [pc, #364]	@ (80030e4 <HAL_GPIO_Init+0x310>)
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	220f      	movs	r2, #15
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a52      	ldr	r2, [pc, #328]	@ (80030e8 <HAL_GPIO_Init+0x314>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d02b      	beq.n	8002ffa <HAL_GPIO_Init+0x226>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a51      	ldr	r2, [pc, #324]	@ (80030ec <HAL_GPIO_Init+0x318>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d025      	beq.n	8002ff6 <HAL_GPIO_Init+0x222>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a50      	ldr	r2, [pc, #320]	@ (80030f0 <HAL_GPIO_Init+0x31c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01f      	beq.n	8002ff2 <HAL_GPIO_Init+0x21e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a4f      	ldr	r2, [pc, #316]	@ (80030f4 <HAL_GPIO_Init+0x320>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d019      	beq.n	8002fee <HAL_GPIO_Init+0x21a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a4e      	ldr	r2, [pc, #312]	@ (80030f8 <HAL_GPIO_Init+0x324>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d013      	beq.n	8002fea <HAL_GPIO_Init+0x216>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a4d      	ldr	r2, [pc, #308]	@ (80030fc <HAL_GPIO_Init+0x328>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00d      	beq.n	8002fe6 <HAL_GPIO_Init+0x212>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a4c      	ldr	r2, [pc, #304]	@ (8003100 <HAL_GPIO_Init+0x32c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d007      	beq.n	8002fe2 <HAL_GPIO_Init+0x20e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a4b      	ldr	r2, [pc, #300]	@ (8003104 <HAL_GPIO_Init+0x330>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d101      	bne.n	8002fde <HAL_GPIO_Init+0x20a>
 8002fda:	2307      	movs	r3, #7
 8002fdc:	e00e      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002fde:	2308      	movs	r3, #8
 8002fe0:	e00c      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002fe2:	2306      	movs	r3, #6
 8002fe4:	e00a      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002fe6:	2305      	movs	r3, #5
 8002fe8:	e008      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002fea:	2304      	movs	r3, #4
 8002fec:	e006      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e004      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e002      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	f002 0203 	and.w	r2, r2, #3
 8003002:	0092      	lsls	r2, r2, #2
 8003004:	4093      	lsls	r3, r2
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800300c:	4935      	ldr	r1, [pc, #212]	@ (80030e4 <HAL_GPIO_Init+0x310>)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	3302      	adds	r3, #2
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800301a:	4b3b      	ldr	r3, [pc, #236]	@ (8003108 <HAL_GPIO_Init+0x334>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800303e:	4a32      	ldr	r2, [pc, #200]	@ (8003108 <HAL_GPIO_Init+0x334>)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003044:	4b30      	ldr	r3, [pc, #192]	@ (8003108 <HAL_GPIO_Init+0x334>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003068:	4a27      	ldr	r2, [pc, #156]	@ (8003108 <HAL_GPIO_Init+0x334>)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800306e:	4b26      	ldr	r3, [pc, #152]	@ (8003108 <HAL_GPIO_Init+0x334>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003092:	4a1d      	ldr	r2, [pc, #116]	@ (8003108 <HAL_GPIO_Init+0x334>)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003098:	4b1b      	ldr	r3, [pc, #108]	@ (8003108 <HAL_GPIO_Init+0x334>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030bc:	4a12      	ldr	r2, [pc, #72]	@ (8003108 <HAL_GPIO_Init+0x334>)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3301      	adds	r3, #1
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	2b0f      	cmp	r3, #15
 80030cc:	f67f ae90 	bls.w	8002df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	3724      	adds	r7, #36	@ 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40013800 	.word	0x40013800
 80030e8:	40020000 	.word	0x40020000
 80030ec:	40020400 	.word	0x40020400
 80030f0:	40020800 	.word	0x40020800
 80030f4:	40020c00 	.word	0x40020c00
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40021400 	.word	0x40021400
 8003100:	40021800 	.word	0x40021800
 8003104:	40021c00 	.word	0x40021c00
 8003108:	40013c00 	.word	0x40013c00

0800310c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	4013      	ands	r3, r2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003124:	2301      	movs	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
 8003128:	e001      	b.n	800312e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800312a:	2300      	movs	r3, #0
 800312c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800312e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	807b      	strh	r3, [r7, #2]
 8003148:	4613      	mov	r3, r2
 800314a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800314c:	787b      	ldrb	r3, [r7, #1]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003158:	e003      	b.n	8003162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800315a:	887b      	ldrh	r3, [r7, #2]
 800315c:	041a      	lsls	r2, r3, #16
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	619a      	str	r2, [r3, #24]
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800317a:	4b08      	ldr	r3, [pc, #32]	@ (800319c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d006      	beq.n	8003194 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003186:	4a05      	ldr	r2, [pc, #20]	@ (800319c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003188:	88fb      	ldrh	r3, [r7, #6]
 800318a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800318c:	88fb      	ldrh	r3, [r7, #6]
 800318e:	4618      	mov	r0, r3
 8003190:	f7fd fc42 	bl	8000a18 <HAL_GPIO_EXTI_Callback>
  }
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40013c00 	.word	0x40013c00

080031a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e12b      	b.n	800340a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fe f930 	bl	800142c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2224      	movs	r2, #36	@ 0x24
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003202:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003204:	f001 ffd2 	bl	80051ac <HAL_RCC_GetPCLK1Freq>
 8003208:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4a81      	ldr	r2, [pc, #516]	@ (8003414 <HAL_I2C_Init+0x274>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d807      	bhi.n	8003224 <HAL_I2C_Init+0x84>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4a80      	ldr	r2, [pc, #512]	@ (8003418 <HAL_I2C_Init+0x278>)
 8003218:	4293      	cmp	r3, r2
 800321a:	bf94      	ite	ls
 800321c:	2301      	movls	r3, #1
 800321e:	2300      	movhi	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	e006      	b.n	8003232 <HAL_I2C_Init+0x92>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4a7d      	ldr	r2, [pc, #500]	@ (800341c <HAL_I2C_Init+0x27c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	bf94      	ite	ls
 800322c:	2301      	movls	r3, #1
 800322e:	2300      	movhi	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0e7      	b.n	800340a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4a78      	ldr	r2, [pc, #480]	@ (8003420 <HAL_I2C_Init+0x280>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	0c9b      	lsrs	r3, r3, #18
 8003244:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	4a6a      	ldr	r2, [pc, #424]	@ (8003414 <HAL_I2C_Init+0x274>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d802      	bhi.n	8003274 <HAL_I2C_Init+0xd4>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	3301      	adds	r3, #1
 8003272:	e009      	b.n	8003288 <HAL_I2C_Init+0xe8>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	4a69      	ldr	r2, [pc, #420]	@ (8003424 <HAL_I2C_Init+0x284>)
 8003280:	fba2 2303 	umull	r2, r3, r2, r3
 8003284:	099b      	lsrs	r3, r3, #6
 8003286:	3301      	adds	r3, #1
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	430b      	orrs	r3, r1
 800328e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800329a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	495c      	ldr	r1, [pc, #368]	@ (8003414 <HAL_I2C_Init+0x274>)
 80032a4:	428b      	cmp	r3, r1
 80032a6:	d819      	bhi.n	80032dc <HAL_I2C_Init+0x13c>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1e59      	subs	r1, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80032b6:	1c59      	adds	r1, r3, #1
 80032b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80032bc:	400b      	ands	r3, r1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <HAL_I2C_Init+0x138>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1e59      	subs	r1, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80032d0:	3301      	adds	r3, #1
 80032d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d6:	e051      	b.n	800337c <HAL_I2C_Init+0x1dc>
 80032d8:	2304      	movs	r3, #4
 80032da:	e04f      	b.n	800337c <HAL_I2C_Init+0x1dc>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d111      	bne.n	8003308 <HAL_I2C_Init+0x168>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1e58      	subs	r0, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6859      	ldr	r1, [r3, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	440b      	add	r3, r1
 80032f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f6:	3301      	adds	r3, #1
 80032f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	bf0c      	ite	eq
 8003300:	2301      	moveq	r3, #1
 8003302:	2300      	movne	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	e012      	b.n	800332e <HAL_I2C_Init+0x18e>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1e58      	subs	r0, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6859      	ldr	r1, [r3, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	0099      	lsls	r1, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	fbb0 f3f3 	udiv	r3, r0, r3
 800331e:	3301      	adds	r3, #1
 8003320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf0c      	ite	eq
 8003328:	2301      	moveq	r3, #1
 800332a:	2300      	movne	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_I2C_Init+0x196>
 8003332:	2301      	movs	r3, #1
 8003334:	e022      	b.n	800337c <HAL_I2C_Init+0x1dc>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10e      	bne.n	800335c <HAL_I2C_Init+0x1bc>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1e58      	subs	r0, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	440b      	add	r3, r1
 800334c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003350:	3301      	adds	r3, #1
 8003352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800335a:	e00f      	b.n	800337c <HAL_I2C_Init+0x1dc>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1e58      	subs	r0, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6859      	ldr	r1, [r3, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	0099      	lsls	r1, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003372:	3301      	adds	r3, #1
 8003374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003378:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	6809      	ldr	r1, [r1, #0]
 8003380:	4313      	orrs	r3, r2
 8003382:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69da      	ldr	r2, [r3, #28]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80033aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6911      	ldr	r1, [r2, #16]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68d2      	ldr	r2, [r2, #12]
 80033b6:	4311      	orrs	r1, r2
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	430b      	orrs	r3, r1
 80033be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695a      	ldr	r2, [r3, #20]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	000186a0 	.word	0x000186a0
 8003418:	001e847f 	.word	0x001e847f
 800341c:	003d08ff 	.word	0x003d08ff
 8003420:	431bde83 	.word	0x431bde83
 8003424:	10624dd3 	.word	0x10624dd3

08003428 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af02      	add	r7, sp, #8
 800342e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e101      	b.n	800363e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d106      	bne.n	800345a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f006 fdc1 	bl	8009fdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2203      	movs	r2, #3
 800345e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003468:	d102      	bne.n	8003470 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f003 f9a8 	bl	80067ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7c1a      	ldrb	r2, [r3, #16]
 8003482:	f88d 2000 	strb.w	r2, [sp]
 8003486:	3304      	adds	r3, #4
 8003488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800348a:	f003 f887 	bl	800659c <USB_CoreInit>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0ce      	b.n	800363e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f003 f9a0 	bl	80067ec <USB_SetCurrentMode>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e0bf      	b.n	800363e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034be:	2300      	movs	r3, #0
 80034c0:	73fb      	strb	r3, [r7, #15]
 80034c2:	e04a      	b.n	800355a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034c4:	7bfa      	ldrb	r2, [r7, #15]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	3315      	adds	r3, #21
 80034d4:	2201      	movs	r2, #1
 80034d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034d8:	7bfa      	ldrb	r2, [r7, #15]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	3314      	adds	r3, #20
 80034e8:	7bfa      	ldrb	r2, [r7, #15]
 80034ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034ec:	7bfa      	ldrb	r2, [r7, #15]
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	b298      	uxth	r0, r3
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	332e      	adds	r3, #46	@ 0x2e
 8003500:	4602      	mov	r2, r0
 8003502:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	3318      	adds	r3, #24
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003518:	7bfa      	ldrb	r2, [r7, #15]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	331c      	adds	r3, #28
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	3320      	adds	r3, #32
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003540:	7bfa      	ldrb	r2, [r7, #15]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	3324      	adds	r3, #36	@ 0x24
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	3301      	adds	r3, #1
 8003558:	73fb      	strb	r3, [r7, #15]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	791b      	ldrb	r3, [r3, #4]
 800355e:	7bfa      	ldrb	r2, [r7, #15]
 8003560:	429a      	cmp	r2, r3
 8003562:	d3af      	bcc.n	80034c4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003564:	2300      	movs	r3, #0
 8003566:	73fb      	strb	r3, [r7, #15]
 8003568:	e044      	b.n	80035f4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003592:	7bfa      	ldrb	r2, [r7, #15]
 8003594:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003596:	7bfa      	ldrb	r2, [r7, #15]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80035a8:	2200      	movs	r2, #0
 80035aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035ac:	7bfa      	ldrb	r2, [r7, #15]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	3301      	adds	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	791b      	ldrb	r3, [r3, #4]
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d3b5      	bcc.n	800356a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	7c1a      	ldrb	r2, [r3, #16]
 8003606:	f88d 2000 	strb.w	r2, [sp]
 800360a:	3304      	adds	r3, #4
 800360c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800360e:	f003 f939 	bl	8006884 <USB_DevInit>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e00c      	b.n	800363e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f004 f983 	bl	8007942 <USB_DevDisconnect>

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_PCD_Start+0x1c>
 800365e:	2302      	movs	r3, #2
 8003660:	e022      	b.n	80036a8 <HAL_PCD_Start+0x62>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800367a:	2b01      	cmp	r3, #1
 800367c:	d105      	bne.n	800368a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003682:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f003 f88a 	bl	80067a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f004 f931 	bl	8007900 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036b0:	b590      	push	{r4, r7, lr}
 80036b2:	b08d      	sub	sp, #52	@ 0x34
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f004 f9ef 	bl	8007aaa <USB_GetMode>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f040 848c 	bne.w	8003fec <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f004 f953 	bl	8007984 <USB_ReadInterrupts>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 8482 	beq.w	8003fea <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	0a1b      	lsrs	r3, r3, #8
 80036f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f004 f940 	bl	8007984 <USB_ReadInterrupts>
 8003704:	4603      	mov	r3, r0
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b02      	cmp	r3, #2
 800370c:	d107      	bne.n	800371e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f002 0202 	and.w	r2, r2, #2
 800371c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f004 f92e 	bl	8007984 <USB_ReadInterrupts>
 8003728:	4603      	mov	r3, r0
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b10      	cmp	r3, #16
 8003730:	d161      	bne.n	80037f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699a      	ldr	r2, [r3, #24]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0210 	bic.w	r2, r2, #16
 8003740:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	f003 020f 	and.w	r2, r3, #15
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	3304      	adds	r3, #4
 8003760:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	0c5b      	lsrs	r3, r3, #17
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	2b02      	cmp	r3, #2
 800376c:	d124      	bne.n	80037b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003774:	4013      	ands	r3, r2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d035      	beq.n	80037e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003784:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003788:	b29b      	uxth	r3, r3
 800378a:	461a      	mov	r2, r3
 800378c:	6a38      	ldr	r0, [r7, #32]
 800378e:	f003 ff65 	bl	800765c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800379e:	441a      	add	r2, r3
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	695a      	ldr	r2, [r3, #20]
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	091b      	lsrs	r3, r3, #4
 80037ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037b0:	441a      	add	r2, r3
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	615a      	str	r2, [r3, #20]
 80037b6:	e016      	b.n	80037e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	0c5b      	lsrs	r3, r3, #17
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	2b06      	cmp	r3, #6
 80037c2:	d110      	bne.n	80037e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037ca:	2208      	movs	r2, #8
 80037cc:	4619      	mov	r1, r3
 80037ce:	6a38      	ldr	r0, [r7, #32]
 80037d0:	f003 ff44 	bl	800765c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	091b      	lsrs	r3, r3, #4
 80037dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037e0:	441a      	add	r2, r3
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699a      	ldr	r2, [r3, #24]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f042 0210 	orr.w	r2, r2, #16
 80037f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f004 f8c2 	bl	8007984 <USB_ReadInterrupts>
 8003800:	4603      	mov	r3, r0
 8003802:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003806:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800380a:	f040 80a7 	bne.w	800395c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f004 f8c7 	bl	80079aa <USB_ReadDevAllOutEpInterrupt>
 800381c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800381e:	e099      	b.n	8003954 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 808e 	beq.w	8003948 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	4611      	mov	r1, r2
 8003836:	4618      	mov	r0, r3
 8003838:	f004 f8eb 	bl	8007a12 <USB_ReadDevOutEPInterrupt>
 800383c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00c      	beq.n	8003862 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003854:	461a      	mov	r2, r3
 8003856:	2301      	movs	r3, #1
 8003858:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800385a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fea3 	bl	80045a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00c      	beq.n	8003886 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	4413      	add	r3, r2
 8003874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003878:	461a      	mov	r2, r3
 800387a:	2308      	movs	r3, #8
 800387c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800387e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 ff79 	bl	8004778 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800389c:	461a      	mov	r2, r3
 800389e:	2310      	movs	r3, #16
 80038a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d030      	beq.n	800390e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b4:	2b80      	cmp	r3, #128	@ 0x80
 80038b6:	d109      	bne.n	80038cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80038cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ce:	4613      	mov	r3, r2
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	3304      	adds	r3, #4
 80038e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	78db      	ldrb	r3, [r3, #3]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d108      	bne.n	80038fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2200      	movs	r2, #0
 80038ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	4619      	mov	r1, r3
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f006 fc84 	bl	800a204 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003908:	461a      	mov	r2, r3
 800390a:	2302      	movs	r3, #2
 800390c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003924:	461a      	mov	r2, r3
 8003926:	2320      	movs	r3, #32
 8003928:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d009      	beq.n	8003948 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003940:	461a      	mov	r2, r3
 8003942:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003946:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	3301      	adds	r3, #1
 800394c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800394e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003950:	085b      	lsrs	r3, r3, #1
 8003952:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003956:	2b00      	cmp	r3, #0
 8003958:	f47f af62 	bne.w	8003820 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f004 f80f 	bl	8007984 <USB_ReadInterrupts>
 8003966:	4603      	mov	r3, r0
 8003968:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800396c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003970:	f040 80db 	bne.w	8003b2a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f004 f830 	bl	80079de <USB_ReadDevAllInEpInterrupt>
 800397e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003984:	e0cd      	b.n	8003b22 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 80c2 	beq.w	8003b16 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	4611      	mov	r1, r2
 800399c:	4618      	mov	r0, r3
 800399e:	f004 f856 	bl	8007a4e <USB_ReadDevInEPInterrupt>
 80039a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d057      	beq.n	8003a5e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	2201      	movs	r2, #1
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	43db      	mvns	r3, r3
 80039c8:	69f9      	ldr	r1, [r7, #28]
 80039ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039ce:	4013      	ands	r3, r2
 80039d0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039de:	461a      	mov	r2, r3
 80039e0:	2301      	movs	r3, #1
 80039e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	799b      	ldrb	r3, [r3, #6]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d132      	bne.n	8003a52 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f0:	4613      	mov	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4413      	add	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	3320      	adds	r3, #32
 80039fc:	6819      	ldr	r1, [r3, #0]
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a02:	4613      	mov	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4403      	add	r3, r0
 8003a0c:	331c      	adds	r3, #28
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4419      	add	r1, r3
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a16:	4613      	mov	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4403      	add	r3, r0
 8003a20:	3320      	adds	r3, #32
 8003a22:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d113      	bne.n	8003a52 <HAL_PCD_IRQHandler+0x3a2>
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	3324      	adds	r3, #36	@ 0x24
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d108      	bne.n	8003a52 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	f004 f85d 	bl	8007b0c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	4619      	mov	r1, r3
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f006 fb4e 	bl	800a0fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a74:	461a      	mov	r2, r3
 8003a76:	2308      	movs	r3, #8
 8003a78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a90:	461a      	mov	r2, r3
 8003a92:	2310      	movs	r3, #16
 8003a94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aac:	461a      	mov	r2, r3
 8003aae:	2340      	movs	r3, #64	@ 0x40
 8003ab0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d023      	beq.n	8003b04 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003abc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003abe:	6a38      	ldr	r0, [r7, #32]
 8003ac0:	f003 f844 	bl	8006b4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	3310      	adds	r3, #16
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	78db      	ldrb	r3, [r3, #3]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d108      	bne.n	8003af2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	4619      	mov	r1, r3
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f006 fb9b 	bl	800a228 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003afe:	461a      	mov	r2, r3
 8003b00:	2302      	movs	r3, #2
 8003b02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fcbd 	bl	8004490 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	3301      	adds	r3, #1
 8003b1a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b1e:	085b      	lsrs	r3, r3, #1
 8003b20:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f47f af2e 	bne.w	8003986 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f003 ff28 	bl	8007984 <USB_ReadInterrupts>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b3e:	d122      	bne.n	8003b86 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	69fa      	ldr	r2, [r7, #28]
 8003b4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b4e:	f023 0301 	bic.w	r3, r3, #1
 8003b52:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d108      	bne.n	8003b70 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b66:	2100      	movs	r1, #0
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fea3 	bl	80048b4 <HAL_PCDEx_LPM_Callback>
 8003b6e:	e002      	b.n	8003b76 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f006 fb39 	bl	800a1e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695a      	ldr	r2, [r3, #20]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f003 fefa 	bl	8007984 <USB_ReadInterrupts>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b9a:	d112      	bne.n	8003bc2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d102      	bne.n	8003bb2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f006 faf5 	bl	800a19c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695a      	ldr	r2, [r3, #20]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003bc0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f003 fedc 	bl	8007984 <USB_ReadInterrupts>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bd6:	f040 80b7 	bne.w	8003d48 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2110      	movs	r1, #16
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f002 ffa9 	bl	8006b4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bfe:	e046      	b.n	8003c8e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c12:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c24:	0151      	lsls	r1, r2, #5
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	440a      	add	r2, r1
 8003c2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c40:	461a      	mov	r2, r3
 8003c42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c46:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c58:	0151      	lsls	r1, r2, #5
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	440a      	add	r2, r1
 8003c5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c78:	0151      	lsls	r1, r2, #5
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	440a      	add	r2, r1
 8003c7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c86:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	791b      	ldrb	r3, [r3, #4]
 8003c92:	461a      	mov	r2, r3
 8003c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d3b2      	bcc.n	8003c00 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ca8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003cac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	7bdb      	ldrb	r3, [r3, #15]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d016      	beq.n	8003ce4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cc6:	f043 030b 	orr.w	r3, r3, #11
 8003cca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cdc:	f043 030b 	orr.w	r3, r3, #11
 8003ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ce2:	e015      	b.n	8003d10 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cf2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003cf6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003cfa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d0a:	f043 030b 	orr.w	r3, r3, #11
 8003d0e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d1e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003d22:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d32:	461a      	mov	r2, r3
 8003d34:	f003 feea 	bl	8007b0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003d46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f003 fe19 	bl	8007984 <USB_ReadInterrupts>
 8003d52:	4603      	mov	r3, r0
 8003d54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d5c:	d123      	bne.n	8003da6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f003 feaf 	bl	8007ac6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f002 ff66 	bl	8006c3e <USB_GetDevSpeed>
 8003d72:	4603      	mov	r3, r0
 8003d74:	461a      	mov	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681c      	ldr	r4, [r3, #0]
 8003d7e:	f001 fa09 	bl	8005194 <HAL_RCC_GetHCLKFreq>
 8003d82:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f002 fc6a 	bl	8006664 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f006 f9da 	bl	800a14a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003da4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f003 fdea 	bl	8007984 <USB_ReadInterrupts>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d10a      	bne.n	8003dd0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f006 f9b7 	bl	800a12e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f002 0208 	and.w	r2, r2, #8
 8003dce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f003 fdd5 	bl	8007984 <USB_ReadInterrupts>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de0:	2b80      	cmp	r3, #128	@ 0x80
 8003de2:	d123      	bne.n	8003e2c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003df0:	2301      	movs	r3, #1
 8003df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003df4:	e014      	b.n	8003e20 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d105      	bne.n	8003e1a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	4619      	mov	r1, r3
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fb0a 	bl	800442e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	791b      	ldrb	r3, [r3, #4]
 8003e24:	461a      	mov	r2, r3
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d3e4      	bcc.n	8003df6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f003 fda7 	bl	8007984 <USB_ReadInterrupts>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e40:	d13c      	bne.n	8003ebc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e42:	2301      	movs	r3, #1
 8003e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e46:	e02b      	b.n	8003ea0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	3318      	adds	r3, #24
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d115      	bne.n	8003e9a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003e6e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	da12      	bge.n	8003e9a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e78:	4613      	mov	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	3317      	adds	r3, #23
 8003e84:	2201      	movs	r2, #1
 8003e86:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	4619      	mov	r1, r3
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 faca 	bl	800442e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	791b      	ldrb	r3, [r3, #4]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d3cd      	bcc.n	8003e48 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f003 fd5f 	bl	8007984 <USB_ReadInterrupts>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ecc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ed0:	d156      	bne.n	8003f80 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed6:	e045      	b.n	8003f64 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eec:	4613      	mov	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d12e      	bne.n	8003f5e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	da2b      	bge.n	8003f5e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003f12:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d121      	bne.n	8003f5e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f1e:	4613      	mov	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	69fa      	ldr	r2, [r7, #28]
 8003f52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f5a:	6053      	str	r3, [r2, #4]
            break;
 8003f5c:	e008      	b.n	8003f70 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f60:	3301      	adds	r3, #1
 8003f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	791b      	ldrb	r3, [r3, #4]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d3b3      	bcc.n	8003ed8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f003 fcfd 	bl	8007984 <USB_ReadInterrupts>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f94:	d10a      	bne.n	8003fac <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f006 f958 	bl	800a24c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695a      	ldr	r2, [r3, #20]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003faa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f003 fce7 	bl	8007984 <USB_ReadInterrupts>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d115      	bne.n	8003fec <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f006 f948 	bl	800a268 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6859      	ldr	r1, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	605a      	str	r2, [r3, #4]
 8003fe8:	e000      	b.n	8003fec <HAL_PCD_IRQHandler+0x93c>
      return;
 8003fea:	bf00      	nop
    }
  }
}
 8003fec:	3734      	adds	r7, #52	@ 0x34
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd90      	pop	{r4, r7, pc}

08003ff2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_PCD_SetAddress+0x1a>
 8004008:	2302      	movs	r3, #2
 800400a:	e012      	b.n	8004032 <HAL_PCD_SetAddress+0x40>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	78fa      	ldrb	r2, [r7, #3]
 8004018:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	78fa      	ldrb	r2, [r7, #3]
 8004020:	4611      	mov	r1, r2
 8004022:	4618      	mov	r0, r3
 8004024:	f003 fc46 	bl	80078b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	4608      	mov	r0, r1
 8004044:	4611      	mov	r1, r2
 8004046:	461a      	mov	r2, r3
 8004048:	4603      	mov	r3, r0
 800404a:	70fb      	strb	r3, [r7, #3]
 800404c:	460b      	mov	r3, r1
 800404e:	803b      	strh	r3, [r7, #0]
 8004050:	4613      	mov	r3, r2
 8004052:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004058:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800405c:	2b00      	cmp	r3, #0
 800405e:	da0f      	bge.n	8004080 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	f003 020f 	and.w	r2, r3, #15
 8004066:	4613      	mov	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	4413      	add	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	3310      	adds	r3, #16
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	4413      	add	r3, r2
 8004074:	3304      	adds	r3, #4
 8004076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	705a      	strb	r2, [r3, #1]
 800407e:	e00f      	b.n	80040a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	f003 020f 	and.w	r2, r3, #15
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	4413      	add	r3, r2
 8004096:	3304      	adds	r3, #4
 8004098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80040ac:	883b      	ldrh	r3, [r7, #0]
 80040ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	78ba      	ldrb	r2, [r7, #2]
 80040ba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	785b      	ldrb	r3, [r3, #1]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d004      	beq.n	80040ce <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040ce:	78bb      	ldrb	r3, [r7, #2]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d102      	bne.n	80040da <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_PCD_EP_Open+0xae>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e00e      	b.n	8004106 <HAL_PCD_EP_Open+0xcc>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68f9      	ldr	r1, [r7, #12]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f002 fdc6 	bl	8006c88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004104:	7afb      	ldrb	r3, [r7, #11]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	460b      	mov	r3, r1
 8004118:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800411a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800411e:	2b00      	cmp	r3, #0
 8004120:	da0f      	bge.n	8004142 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	f003 020f 	and.w	r2, r3, #15
 8004128:	4613      	mov	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	3310      	adds	r3, #16
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	4413      	add	r3, r2
 8004136:	3304      	adds	r3, #4
 8004138:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	705a      	strb	r2, [r3, #1]
 8004140:	e00f      	b.n	8004162 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004142:	78fb      	ldrb	r3, [r7, #3]
 8004144:	f003 020f 	and.w	r2, r3, #15
 8004148:	4613      	mov	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	4413      	add	r3, r2
 8004158:	3304      	adds	r3, #4
 800415a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	b2da      	uxtb	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_PCD_EP_Close+0x6e>
 8004178:	2302      	movs	r3, #2
 800417a:	e00e      	b.n	800419a <HAL_PCD_EP_Close+0x8c>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68f9      	ldr	r1, [r7, #12]
 800418a:	4618      	mov	r0, r3
 800418c:	f002 fe04 	bl	8006d98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b086      	sub	sp, #24
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
 80041ae:	460b      	mov	r3, r1
 80041b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041b2:	7afb      	ldrb	r3, [r7, #11]
 80041b4:	f003 020f 	and.w	r2, r3, #15
 80041b8:	4613      	mov	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4413      	add	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	3304      	adds	r3, #4
 80041ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2200      	movs	r2, #0
 80041dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2200      	movs	r2, #0
 80041e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041e4:	7afb      	ldrb	r3, [r7, #11]
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	799b      	ldrb	r3, [r3, #6]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d102      	bne.n	80041fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	799b      	ldrb	r3, [r3, #6]
 8004206:	461a      	mov	r2, r3
 8004208:	6979      	ldr	r1, [r7, #20]
 800420a:	f002 fea1 	bl	8006f50 <USB_EPStartXfer>

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	f003 020f 	and.w	r2, r3, #15
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	4613      	mov	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800423a:	681b      	ldr	r3, [r3, #0]
}
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	607a      	str	r2, [r7, #4]
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	460b      	mov	r3, r1
 8004256:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004258:	7afb      	ldrb	r3, [r7, #11]
 800425a:	f003 020f 	and.w	r2, r3, #15
 800425e:	4613      	mov	r3, r2
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	3310      	adds	r3, #16
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	3304      	adds	r3, #4
 800426e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2200      	movs	r2, #0
 8004280:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2201      	movs	r2, #1
 8004286:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004288:	7afb      	ldrb	r3, [r7, #11]
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	b2da      	uxtb	r2, r3
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	799b      	ldrb	r3, [r3, #6]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d102      	bne.n	80042a2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	799b      	ldrb	r3, [r3, #6]
 80042aa:	461a      	mov	r2, r3
 80042ac:	6979      	ldr	r1, [r7, #20]
 80042ae:	f002 fe4f 	bl	8006f50 <USB_EPStartXfer>

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042c8:	78fb      	ldrb	r3, [r7, #3]
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	7912      	ldrb	r2, [r2, #4]
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e04f      	b.n	800437a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	da0f      	bge.n	8004302 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	f003 020f 	and.w	r2, r3, #15
 80042e8:	4613      	mov	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	4413      	add	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	3310      	adds	r3, #16
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4413      	add	r3, r2
 80042f6:	3304      	adds	r3, #4
 80042f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	705a      	strb	r2, [r3, #1]
 8004300:	e00d      	b.n	800431e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004302:	78fa      	ldrb	r2, [r7, #3]
 8004304:	4613      	mov	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	4413      	add	r3, r2
 8004314:	3304      	adds	r3, #4
 8004316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	b2da      	uxtb	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_PCD_EP_SetStall+0x82>
 800433a:	2302      	movs	r3, #2
 800433c:	e01d      	b.n	800437a <HAL_PCD_EP_SetStall+0xbe>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68f9      	ldr	r1, [r7, #12]
 800434c:	4618      	mov	r0, r3
 800434e:	f003 f9dd 	bl	800770c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	2b00      	cmp	r3, #0
 800435a:	d109      	bne.n	8004370 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	7999      	ldrb	r1, [r3, #6]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800436a:	461a      	mov	r2, r3
 800436c:	f003 fbce 	bl	8007b0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	460b      	mov	r3, r1
 800438c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	7912      	ldrb	r2, [r2, #4]
 8004398:	4293      	cmp	r3, r2
 800439a:	d901      	bls.n	80043a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e042      	b.n	8004426 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	da0f      	bge.n	80043c8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a8:	78fb      	ldrb	r3, [r7, #3]
 80043aa:	f003 020f 	and.w	r2, r3, #15
 80043ae:	4613      	mov	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	3310      	adds	r3, #16
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	4413      	add	r3, r2
 80043bc:	3304      	adds	r3, #4
 80043be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2201      	movs	r2, #1
 80043c4:	705a      	strb	r2, [r3, #1]
 80043c6:	e00f      	b.n	80043e8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	f003 020f 	and.w	r2, r3, #15
 80043ce:	4613      	mov	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	4413      	add	r3, r2
 80043de:	3304      	adds	r3, #4
 80043e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043ee:	78fb      	ldrb	r3, [r7, #3]
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_PCD_EP_ClrStall+0x86>
 8004404:	2302      	movs	r3, #2
 8004406:	e00e      	b.n	8004426 <HAL_PCD_EP_ClrStall+0xa4>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68f9      	ldr	r1, [r7, #12]
 8004416:	4618      	mov	r0, r3
 8004418:	f003 f9e6 	bl	80077e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	460b      	mov	r3, r1
 8004438:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800443a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800443e:	2b00      	cmp	r3, #0
 8004440:	da0c      	bge.n	800445c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	f003 020f 	and.w	r2, r3, #15
 8004448:	4613      	mov	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	3310      	adds	r3, #16
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	4413      	add	r3, r2
 8004456:	3304      	adds	r3, #4
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	e00c      	b.n	8004476 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	f003 020f 	and.w	r2, r3, #15
 8004462:	4613      	mov	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	4413      	add	r3, r2
 8004472:	3304      	adds	r3, #4
 8004474:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68f9      	ldr	r1, [r7, #12]
 800447c:	4618      	mov	r0, r3
 800447e:	f003 f805 	bl	800748c <USB_EPStopXfer>
 8004482:	4603      	mov	r3, r0
 8004484:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004486:	7afb      	ldrb	r3, [r7, #11]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	@ 0x28
 8004494:	af02      	add	r7, sp, #8
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	4613      	mov	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	4413      	add	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	3310      	adds	r3, #16
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	4413      	add	r3, r2
 80044b4:	3304      	adds	r3, #4
 80044b6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	695a      	ldr	r2, [r3, #20]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d901      	bls.n	80044c8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e06b      	b.n	80045a0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d902      	bls.n	80044e4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	3303      	adds	r3, #3
 80044e8:	089b      	lsrs	r3, r3, #2
 80044ea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044ec:	e02a      	b.n	8004544 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	429a      	cmp	r2, r3
 8004502:	d902      	bls.n	800450a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	3303      	adds	r3, #3
 800450e:	089b      	lsrs	r3, r3, #2
 8004510:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	68d9      	ldr	r1, [r3, #12]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	b2da      	uxtb	r2, r3
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	4603      	mov	r3, r0
 8004526:	6978      	ldr	r0, [r7, #20]
 8004528:	f003 f85a 	bl	80075e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	441a      	add	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	695a      	ldr	r2, [r3, #20]
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	441a      	add	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	429a      	cmp	r2, r3
 8004558:	d809      	bhi.n	800456e <PCD_WriteEmptyTxFifo+0xde>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	695a      	ldr	r2, [r3, #20]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004562:	429a      	cmp	r2, r3
 8004564:	d203      	bcs.n	800456e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1bf      	bne.n	80044ee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	429a      	cmp	r2, r3
 8004578:	d811      	bhi.n	800459e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	2201      	movs	r2, #1
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800458e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	43db      	mvns	r3, r3
 8004594:	6939      	ldr	r1, [r7, #16]
 8004596:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800459a:	4013      	ands	r3, r2
 800459c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	333c      	adds	r3, #60	@ 0x3c
 80045c0:	3304      	adds	r3, #4
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	799b      	ldrb	r3, [r3, #6]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d17b      	bne.n	80046d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d015      	beq.n	8004614 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	4a61      	ldr	r2, [pc, #388]	@ (8004770 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	f240 80b9 	bls.w	8004764 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80b3 	beq.w	8004764 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800460a:	461a      	mov	r2, r3
 800460c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004610:	6093      	str	r3, [r2, #8]
 8004612:	e0a7      	b.n	8004764 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800462a:	461a      	mov	r2, r3
 800462c:	2320      	movs	r3, #32
 800462e:	6093      	str	r3, [r2, #8]
 8004630:	e098      	b.n	8004764 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004638:	2b00      	cmp	r3, #0
 800463a:	f040 8093 	bne.w	8004764 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	4a4b      	ldr	r2, [pc, #300]	@ (8004770 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d90f      	bls.n	8004666 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800465c:	461a      	mov	r2, r3
 800465e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004662:	6093      	str	r3, [r2, #8]
 8004664:	e07e      	b.n	8004764 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	4613      	mov	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4413      	add	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	4413      	add	r3, r2
 8004678:	3304      	adds	r3, #4
 800467a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a1a      	ldr	r2, [r3, #32]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	0159      	lsls	r1, r3, #5
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	440b      	add	r3, r1
 8004688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004692:	1ad2      	subs	r2, r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d114      	bne.n	80046c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d109      	bne.n	80046ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046b0:	461a      	mov	r2, r3
 80046b2:	2101      	movs	r1, #1
 80046b4:	f003 fa2a 	bl	8007b0c <USB_EP0_OutStart>
 80046b8:	e006      	b.n	80046c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	441a      	add	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	4619      	mov	r1, r3
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f005 fcf8 	bl	800a0c4 <HAL_PCD_DataOutStageCallback>
 80046d4:	e046      	b.n	8004764 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	4a26      	ldr	r2, [pc, #152]	@ (8004774 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d124      	bne.n	8004728 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046f4:	461a      	mov	r2, r3
 80046f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046fa:	6093      	str	r3, [r2, #8]
 80046fc:	e032      	b.n	8004764 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004714:	461a      	mov	r2, r3
 8004716:	2320      	movs	r3, #32
 8004718:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	4619      	mov	r1, r3
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f005 fccf 	bl	800a0c4 <HAL_PCD_DataOutStageCallback>
 8004726:	e01d      	b.n	8004764 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d114      	bne.n	8004758 <PCD_EP_OutXfrComplete_int+0x1b0>
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	4613      	mov	r3, r2
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	440b      	add	r3, r1
 800473c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d108      	bne.n	8004758 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004750:	461a      	mov	r2, r3
 8004752:	2100      	movs	r1, #0
 8004754:	f003 f9da 	bl	8007b0c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	4619      	mov	r1, r3
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f005 fcb0 	bl	800a0c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3720      	adds	r7, #32
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	4f54300a 	.word	0x4f54300a
 8004774:	4f54310a 	.word	0x4f54310a

08004778 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	333c      	adds	r3, #60	@ 0x3c
 8004790:	3304      	adds	r3, #4
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4a15      	ldr	r2, [pc, #84]	@ (8004800 <PCD_EP_OutSetupPacket_int+0x88>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d90e      	bls.n	80047cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d009      	beq.n	80047cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047c4:	461a      	mov	r2, r3
 80047c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f005 fc67 	bl	800a0a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004800 <PCD_EP_OutSetupPacket_int+0x88>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d90c      	bls.n	80047f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	799b      	ldrb	r3, [r3, #6]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d108      	bne.n	80047f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6818      	ldr	r0, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047ec:	461a      	mov	r2, r3
 80047ee:	2101      	movs	r1, #1
 80047f0:	f003 f98c 	bl	8007b0c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	4f54300a 	.word	0x4f54300a

08004804 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
 8004810:	4613      	mov	r3, r2
 8004812:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800481c:	78fb      	ldrb	r3, [r7, #3]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d107      	bne.n	8004832 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004822:	883b      	ldrh	r3, [r7, #0]
 8004824:	0419      	lsls	r1, r3, #16
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	430a      	orrs	r2, r1
 800482e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004830:	e028      	b.n	8004884 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004838:	0c1b      	lsrs	r3, r3, #16
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	4413      	add	r3, r2
 800483e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004840:	2300      	movs	r3, #0
 8004842:	73fb      	strb	r3, [r7, #15]
 8004844:	e00d      	b.n	8004862 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	7bfb      	ldrb	r3, [r7, #15]
 800484c:	3340      	adds	r3, #64	@ 0x40
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	0c1b      	lsrs	r3, r3, #16
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	4413      	add	r3, r2
 800485a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	3301      	adds	r3, #1
 8004860:	73fb      	strb	r3, [r7, #15]
 8004862:	7bfa      	ldrb	r2, [r7, #15]
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	3b01      	subs	r3, #1
 8004868:	429a      	cmp	r2, r3
 800486a:	d3ec      	bcc.n	8004846 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800486c:	883b      	ldrh	r3, [r7, #0]
 800486e:	0418      	lsls	r0, r3, #16
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6819      	ldr	r1, [r3, #0]
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	3b01      	subs	r3, #1
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	4302      	orrs	r2, r0
 800487c:	3340      	adds	r3, #64	@ 0x40
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	440b      	add	r3, r1
 8004882:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	460b      	mov	r3, r1
 800489c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	887a      	ldrh	r2, [r7, #2]
 80048a4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e267      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d075      	beq.n	80049d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048ea:	4b88      	ldr	r3, [pc, #544]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d00c      	beq.n	8004910 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048f6:	4b85      	ldr	r3, [pc, #532]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d112      	bne.n	8004928 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004902:	4b82      	ldr	r3, [pc, #520]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800490a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800490e:	d10b      	bne.n	8004928 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004910:	4b7e      	ldr	r3, [pc, #504]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d05b      	beq.n	80049d4 <HAL_RCC_OscConfig+0x108>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d157      	bne.n	80049d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e242      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004930:	d106      	bne.n	8004940 <HAL_RCC_OscConfig+0x74>
 8004932:	4b76      	ldr	r3, [pc, #472]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a75      	ldr	r2, [pc, #468]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	e01d      	b.n	800497c <HAL_RCC_OscConfig+0xb0>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004948:	d10c      	bne.n	8004964 <HAL_RCC_OscConfig+0x98>
 800494a:	4b70      	ldr	r3, [pc, #448]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a6f      	ldr	r2, [pc, #444]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004950:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	4b6d      	ldr	r3, [pc, #436]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a6c      	ldr	r2, [pc, #432]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 800495c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	e00b      	b.n	800497c <HAL_RCC_OscConfig+0xb0>
 8004964:	4b69      	ldr	r3, [pc, #420]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a68      	ldr	r2, [pc, #416]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 800496a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	4b66      	ldr	r3, [pc, #408]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a65      	ldr	r2, [pc, #404]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800497a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d013      	beq.n	80049ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004984:	f7fc ff64 	bl	8001850 <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800498c:	f7fc ff60 	bl	8001850 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b64      	cmp	r3, #100	@ 0x64
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e207      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499e:	4b5b      	ldr	r3, [pc, #364]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCC_OscConfig+0xc0>
 80049aa:	e014      	b.n	80049d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ac:	f7fc ff50 	bl	8001850 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049b4:	f7fc ff4c 	bl	8001850 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b64      	cmp	r3, #100	@ 0x64
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e1f3      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049c6:	4b51      	ldr	r3, [pc, #324]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0xe8>
 80049d2:	e000      	b.n	80049d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d063      	beq.n	8004aaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049e2:	4b4a      	ldr	r3, [pc, #296]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00b      	beq.n	8004a06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ee:	4b47      	ldr	r3, [pc, #284]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	d11c      	bne.n	8004a34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049fa:	4b44      	ldr	r3, [pc, #272]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d116      	bne.n	8004a34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a06:	4b41      	ldr	r3, [pc, #260]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d005      	beq.n	8004a1e <HAL_RCC_OscConfig+0x152>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d001      	beq.n	8004a1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e1c7      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4937      	ldr	r1, [pc, #220]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a32:	e03a      	b.n	8004aaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d020      	beq.n	8004a7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a3c:	4b34      	ldr	r3, [pc, #208]	@ (8004b10 <HAL_RCC_OscConfig+0x244>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a42:	f7fc ff05 	bl	8001850 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a4a:	f7fc ff01 	bl	8001850 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e1a8      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f0      	beq.n	8004a4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a68:	4b28      	ldr	r3, [pc, #160]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	4925      	ldr	r1, [pc, #148]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	600b      	str	r3, [r1, #0]
 8004a7c:	e015      	b.n	8004aaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a7e:	4b24      	ldr	r3, [pc, #144]	@ (8004b10 <HAL_RCC_OscConfig+0x244>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a84:	f7fc fee4 	bl	8001850 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a8c:	f7fc fee0 	bl	8001850 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e187      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f0      	bne.n	8004a8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d036      	beq.n	8004b24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d016      	beq.n	8004aec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004abe:	4b15      	ldr	r3, [pc, #84]	@ (8004b14 <HAL_RCC_OscConfig+0x248>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac4:	f7fc fec4 	bl	8001850 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004acc:	f7fc fec0 	bl	8001850 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e167      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ade:	4b0b      	ldr	r3, [pc, #44]	@ (8004b0c <HAL_RCC_OscConfig+0x240>)
 8004ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f0      	beq.n	8004acc <HAL_RCC_OscConfig+0x200>
 8004aea:	e01b      	b.n	8004b24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aec:	4b09      	ldr	r3, [pc, #36]	@ (8004b14 <HAL_RCC_OscConfig+0x248>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004af2:	f7fc fead 	bl	8001850 <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af8:	e00e      	b.n	8004b18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004afa:	f7fc fea9 	bl	8001850 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d907      	bls.n	8004b18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e150      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	42470000 	.word	0x42470000
 8004b14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b18:	4b88      	ldr	r3, [pc, #544]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1ea      	bne.n	8004afa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8097 	beq.w	8004c60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b32:	2300      	movs	r3, #0
 8004b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b36:	4b81      	ldr	r3, [pc, #516]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10f      	bne.n	8004b62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b42:	2300      	movs	r3, #0
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	4b7d      	ldr	r3, [pc, #500]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4a:	4a7c      	ldr	r2, [pc, #496]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b52:	4b7a      	ldr	r3, [pc, #488]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b5a:	60bb      	str	r3, [r7, #8]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b62:	4b77      	ldr	r3, [pc, #476]	@ (8004d40 <HAL_RCC_OscConfig+0x474>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d118      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b6e:	4b74      	ldr	r3, [pc, #464]	@ (8004d40 <HAL_RCC_OscConfig+0x474>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a73      	ldr	r2, [pc, #460]	@ (8004d40 <HAL_RCC_OscConfig+0x474>)
 8004b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b7a:	f7fc fe69 	bl	8001850 <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b82:	f7fc fe65 	bl	8001850 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e10c      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b94:	4b6a      	ldr	r3, [pc, #424]	@ (8004d40 <HAL_RCC_OscConfig+0x474>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0f0      	beq.n	8004b82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d106      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x2ea>
 8004ba8:	4b64      	ldr	r3, [pc, #400]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bac:	4a63      	ldr	r2, [pc, #396]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb4:	e01c      	b.n	8004bf0 <HAL_RCC_OscConfig+0x324>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2b05      	cmp	r3, #5
 8004bbc:	d10c      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x30c>
 8004bbe:	4b5f      	ldr	r3, [pc, #380]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc2:	4a5e      	ldr	r2, [pc, #376]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bc4:	f043 0304 	orr.w	r3, r3, #4
 8004bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bca:	4b5c      	ldr	r3, [pc, #368]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bce:	4a5b      	ldr	r2, [pc, #364]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bd6:	e00b      	b.n	8004bf0 <HAL_RCC_OscConfig+0x324>
 8004bd8:	4b58      	ldr	r3, [pc, #352]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bdc:	4a57      	ldr	r2, [pc, #348]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bde:	f023 0301 	bic.w	r3, r3, #1
 8004be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004be4:	4b55      	ldr	r3, [pc, #340]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be8:	4a54      	ldr	r2, [pc, #336]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004bea:	f023 0304 	bic.w	r3, r3, #4
 8004bee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d015      	beq.n	8004c24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf8:	f7fc fe2a 	bl	8001850 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfe:	e00a      	b.n	8004c16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c00:	f7fc fe26 	bl	8001850 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e0cb      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c16:	4b49      	ldr	r3, [pc, #292]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0ee      	beq.n	8004c00 <HAL_RCC_OscConfig+0x334>
 8004c22:	e014      	b.n	8004c4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c24:	f7fc fe14 	bl	8001850 <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c2a:	e00a      	b.n	8004c42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c2c:	f7fc fe10 	bl	8001850 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e0b5      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c42:	4b3e      	ldr	r3, [pc, #248]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1ee      	bne.n	8004c2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d105      	bne.n	8004c60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c54:	4b39      	ldr	r3, [pc, #228]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c58:	4a38      	ldr	r2, [pc, #224]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004c5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 80a1 	beq.w	8004dac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c6a:	4b34      	ldr	r3, [pc, #208]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 030c 	and.w	r3, r3, #12
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d05c      	beq.n	8004d30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d141      	bne.n	8004d02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c7e:	4b31      	ldr	r3, [pc, #196]	@ (8004d44 <HAL_RCC_OscConfig+0x478>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c84:	f7fc fde4 	bl	8001850 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c8c:	f7fc fde0 	bl	8001850 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e087      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c9e:	4b27      	ldr	r3, [pc, #156]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb8:	019b      	lsls	r3, r3, #6
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc0:	085b      	lsrs	r3, r3, #1
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	041b      	lsls	r3, r3, #16
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ccc:	061b      	lsls	r3, r3, #24
 8004cce:	491b      	ldr	r1, [pc, #108]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d44 <HAL_RCC_OscConfig+0x478>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cda:	f7fc fdb9 	bl	8001850 <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce2:	f7fc fdb5 	bl	8001850 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e05c      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf4:	4b11      	ldr	r3, [pc, #68]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f0      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x416>
 8004d00:	e054      	b.n	8004dac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d02:	4b10      	ldr	r3, [pc, #64]	@ (8004d44 <HAL_RCC_OscConfig+0x478>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d08:	f7fc fda2 	bl	8001850 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d10:	f7fc fd9e 	bl	8001850 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e045      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d22:	4b06      	ldr	r3, [pc, #24]	@ (8004d3c <HAL_RCC_OscConfig+0x470>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f0      	bne.n	8004d10 <HAL_RCC_OscConfig+0x444>
 8004d2e:	e03d      	b.n	8004dac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d107      	bne.n	8004d48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e038      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	40007000 	.word	0x40007000
 8004d44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d48:	4b1b      	ldr	r3, [pc, #108]	@ (8004db8 <HAL_RCC_OscConfig+0x4ec>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d028      	beq.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d121      	bne.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d11a      	bne.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d78:	4013      	ands	r3, r2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d111      	bne.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	3b01      	subs	r3, #1
 8004d92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d107      	bne.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d001      	beq.n	8004dac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e000      	b.n	8004dae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40023800 	.word	0x40023800

08004dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e0cc      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd0:	4b68      	ldr	r3, [pc, #416]	@ (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d90c      	bls.n	8004df8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dde:	4b65      	ldr	r3, [pc, #404]	@ (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de6:	4b63      	ldr	r3, [pc, #396]	@ (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d001      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e0b8      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d020      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e10:	4b59      	ldr	r3, [pc, #356]	@ (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	4a58      	ldr	r2, [pc, #352]	@ (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e28:	4b53      	ldr	r3, [pc, #332]	@ (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	4a52      	ldr	r2, [pc, #328]	@ (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e34:	4b50      	ldr	r3, [pc, #320]	@ (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	494d      	ldr	r1, [pc, #308]	@ (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d044      	beq.n	8004edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d107      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5a:	4b47      	ldr	r3, [pc, #284]	@ (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d119      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e07f      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d003      	beq.n	8004e7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d107      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e06f      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e067      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e9a:	4b37      	ldr	r3, [pc, #220]	@ (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f023 0203 	bic.w	r2, r3, #3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	4934      	ldr	r1, [pc, #208]	@ (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004eac:	f7fc fcd0 	bl	8001850 <HAL_GetTick>
 8004eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb2:	e00a      	b.n	8004eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb4:	f7fc fccc 	bl	8001850 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e04f      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eca:	4b2b      	ldr	r3, [pc, #172]	@ (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 020c 	and.w	r2, r3, #12
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d1eb      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004edc:	4b25      	ldr	r3, [pc, #148]	@ (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d20c      	bcs.n	8004f04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eea:	4b22      	ldr	r3, [pc, #136]	@ (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef2:	4b20      	ldr	r3, [pc, #128]	@ (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d001      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e032      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d008      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f10:	4b19      	ldr	r3, [pc, #100]	@ (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4916      	ldr	r1, [pc, #88]	@ (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f2e:	4b12      	ldr	r3, [pc, #72]	@ (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	490e      	ldr	r1, [pc, #56]	@ (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f42:	f000 f821 	bl	8004f88 <HAL_RCC_GetSysClockFreq>
 8004f46:	4602      	mov	r2, r0
 8004f48:	4b0b      	ldr	r3, [pc, #44]	@ (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	091b      	lsrs	r3, r3, #4
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	490a      	ldr	r1, [pc, #40]	@ (8004f7c <HAL_RCC_ClockConfig+0x1c0>)
 8004f54:	5ccb      	ldrb	r3, [r1, r3]
 8004f56:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5a:	4a09      	ldr	r2, [pc, #36]	@ (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004f5e:	4b09      	ldr	r3, [pc, #36]	@ (8004f84 <HAL_RCC_ClockConfig+0x1c8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fc fc30 	bl	80017c8 <HAL_InitTick>

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40023c00 	.word	0x40023c00
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	0800afec 	.word	0x0800afec
 8004f80:	20000000 	.word	0x20000000
 8004f84:	20000004 	.word	0x20000004

08004f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f8c:	b094      	sub	sp, #80	@ 0x50
 8004f8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fa0:	4b79      	ldr	r3, [pc, #484]	@ (8005188 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f003 030c 	and.w	r3, r3, #12
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d00d      	beq.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	f200 80e1 	bhi.w	8005174 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <HAL_RCC_GetSysClockFreq+0x34>
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d003      	beq.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fba:	e0db      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fbc:	4b73      	ldr	r3, [pc, #460]	@ (800518c <HAL_RCC_GetSysClockFreq+0x204>)
 8004fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fc0:	e0db      	b.n	800517a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fc2:	4b73      	ldr	r3, [pc, #460]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x208>)
 8004fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fc6:	e0d8      	b.n	800517a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8005188 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fd0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fd2:	4b6d      	ldr	r3, [pc, #436]	@ (8005188 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d063      	beq.n	80050a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fde:	4b6a      	ldr	r3, [pc, #424]	@ (8005188 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	099b      	lsrs	r3, r3, #6
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fe8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ff6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	462b      	mov	r3, r5
 8004ffe:	f04f 0000 	mov.w	r0, #0
 8005002:	f04f 0100 	mov.w	r1, #0
 8005006:	0159      	lsls	r1, r3, #5
 8005008:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800500c:	0150      	lsls	r0, r2, #5
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	4621      	mov	r1, r4
 8005014:	1a51      	subs	r1, r2, r1
 8005016:	6139      	str	r1, [r7, #16]
 8005018:	4629      	mov	r1, r5
 800501a:	eb63 0301 	sbc.w	r3, r3, r1
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800502c:	4659      	mov	r1, fp
 800502e:	018b      	lsls	r3, r1, #6
 8005030:	4651      	mov	r1, sl
 8005032:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005036:	4651      	mov	r1, sl
 8005038:	018a      	lsls	r2, r1, #6
 800503a:	4651      	mov	r1, sl
 800503c:	ebb2 0801 	subs.w	r8, r2, r1
 8005040:	4659      	mov	r1, fp
 8005042:	eb63 0901 	sbc.w	r9, r3, r1
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	f04f 0300 	mov.w	r3, #0
 800504e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800505a:	4690      	mov	r8, r2
 800505c:	4699      	mov	r9, r3
 800505e:	4623      	mov	r3, r4
 8005060:	eb18 0303 	adds.w	r3, r8, r3
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	462b      	mov	r3, r5
 8005068:	eb49 0303 	adc.w	r3, r9, r3
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800507a:	4629      	mov	r1, r5
 800507c:	024b      	lsls	r3, r1, #9
 800507e:	4621      	mov	r1, r4
 8005080:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005084:	4621      	mov	r1, r4
 8005086:	024a      	lsls	r2, r1, #9
 8005088:	4610      	mov	r0, r2
 800508a:	4619      	mov	r1, r3
 800508c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800508e:	2200      	movs	r2, #0
 8005090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005092:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005094:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005098:	f7fb f8f2 	bl	8000280 <__aeabi_uldivmod>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4613      	mov	r3, r2
 80050a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050a4:	e058      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050a6:	4b38      	ldr	r3, [pc, #224]	@ (8005188 <HAL_RCC_GetSysClockFreq+0x200>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	099b      	lsrs	r3, r3, #6
 80050ac:	2200      	movs	r2, #0
 80050ae:	4618      	mov	r0, r3
 80050b0:	4611      	mov	r1, r2
 80050b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050b6:	623b      	str	r3, [r7, #32]
 80050b8:	2300      	movs	r3, #0
 80050ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80050bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050c0:	4642      	mov	r2, r8
 80050c2:	464b      	mov	r3, r9
 80050c4:	f04f 0000 	mov.w	r0, #0
 80050c8:	f04f 0100 	mov.w	r1, #0
 80050cc:	0159      	lsls	r1, r3, #5
 80050ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050d2:	0150      	lsls	r0, r2, #5
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4641      	mov	r1, r8
 80050da:	ebb2 0a01 	subs.w	sl, r2, r1
 80050de:	4649      	mov	r1, r9
 80050e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050f8:	ebb2 040a 	subs.w	r4, r2, sl
 80050fc:	eb63 050b 	sbc.w	r5, r3, fp
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	00eb      	lsls	r3, r5, #3
 800510a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800510e:	00e2      	lsls	r2, r4, #3
 8005110:	4614      	mov	r4, r2
 8005112:	461d      	mov	r5, r3
 8005114:	4643      	mov	r3, r8
 8005116:	18e3      	adds	r3, r4, r3
 8005118:	603b      	str	r3, [r7, #0]
 800511a:	464b      	mov	r3, r9
 800511c:	eb45 0303 	adc.w	r3, r5, r3
 8005120:	607b      	str	r3, [r7, #4]
 8005122:	f04f 0200 	mov.w	r2, #0
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800512e:	4629      	mov	r1, r5
 8005130:	028b      	lsls	r3, r1, #10
 8005132:	4621      	mov	r1, r4
 8005134:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005138:	4621      	mov	r1, r4
 800513a:	028a      	lsls	r2, r1, #10
 800513c:	4610      	mov	r0, r2
 800513e:	4619      	mov	r1, r3
 8005140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005142:	2200      	movs	r2, #0
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	61fa      	str	r2, [r7, #28]
 8005148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800514c:	f7fb f898 	bl	8000280 <__aeabi_uldivmod>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4613      	mov	r3, r2
 8005156:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005158:	4b0b      	ldr	r3, [pc, #44]	@ (8005188 <HAL_RCC_GetSysClockFreq+0x200>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	0c1b      	lsrs	r3, r3, #16
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	3301      	adds	r3, #1
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005168:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800516a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800516c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005170:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005172:	e002      	b.n	800517a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005174:	4b05      	ldr	r3, [pc, #20]	@ (800518c <HAL_RCC_GetSysClockFreq+0x204>)
 8005176:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800517a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800517c:	4618      	mov	r0, r3
 800517e:	3750      	adds	r7, #80	@ 0x50
 8005180:	46bd      	mov	sp, r7
 8005182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005186:	bf00      	nop
 8005188:	40023800 	.word	0x40023800
 800518c:	00f42400 	.word	0x00f42400
 8005190:	007a1200 	.word	0x007a1200

08005194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005198:	4b03      	ldr	r3, [pc, #12]	@ (80051a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800519a:	681b      	ldr	r3, [r3, #0]
}
 800519c:	4618      	mov	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	20000000 	.word	0x20000000

080051ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051b0:	f7ff fff0 	bl	8005194 <HAL_RCC_GetHCLKFreq>
 80051b4:	4602      	mov	r2, r0
 80051b6:	4b05      	ldr	r3, [pc, #20]	@ (80051cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	0a9b      	lsrs	r3, r3, #10
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	4903      	ldr	r1, [pc, #12]	@ (80051d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051c2:	5ccb      	ldrb	r3, [r1, r3]
 80051c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40023800 	.word	0x40023800
 80051d0:	0800affc 	.word	0x0800affc

080051d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e041      	b.n	800526a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7fc f95e 	bl	80014bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3304      	adds	r3, #4
 8005210:	4619      	mov	r1, r3
 8005212:	4610      	mov	r0, r2
 8005214:	f000 fdc4 	bl	8005da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b082      	sub	sp, #8
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e041      	b.n	8005308 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d106      	bne.n	800529e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f839 	bl	8005310 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2202      	movs	r2, #2
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3304      	adds	r3, #4
 80052ae:	4619      	mov	r1, r3
 80052b0:	4610      	mov	r0, r2
 80052b2:	f000 fd75 	bl	8005da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d109      	bne.n	8005348 <HAL_TIM_PWM_Start+0x24>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b01      	cmp	r3, #1
 800533e:	bf14      	ite	ne
 8005340:	2301      	movne	r3, #1
 8005342:	2300      	moveq	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	e022      	b.n	800538e <HAL_TIM_PWM_Start+0x6a>
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b04      	cmp	r3, #4
 800534c:	d109      	bne.n	8005362 <HAL_TIM_PWM_Start+0x3e>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b01      	cmp	r3, #1
 8005358:	bf14      	ite	ne
 800535a:	2301      	movne	r3, #1
 800535c:	2300      	moveq	r3, #0
 800535e:	b2db      	uxtb	r3, r3
 8005360:	e015      	b.n	800538e <HAL_TIM_PWM_Start+0x6a>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b08      	cmp	r3, #8
 8005366:	d109      	bne.n	800537c <HAL_TIM_PWM_Start+0x58>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b01      	cmp	r3, #1
 8005372:	bf14      	ite	ne
 8005374:	2301      	movne	r3, #1
 8005376:	2300      	moveq	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	e008      	b.n	800538e <HAL_TIM_PWM_Start+0x6a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b01      	cmp	r3, #1
 8005386:	bf14      	ite	ne
 8005388:	2301      	movne	r3, #1
 800538a:	2300      	moveq	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e07c      	b.n	8005490 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d104      	bne.n	80053a6 <HAL_TIM_PWM_Start+0x82>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053a4:	e013      	b.n	80053ce <HAL_TIM_PWM_Start+0xaa>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d104      	bne.n	80053b6 <HAL_TIM_PWM_Start+0x92>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053b4:	e00b      	b.n	80053ce <HAL_TIM_PWM_Start+0xaa>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d104      	bne.n	80053c6 <HAL_TIM_PWM_Start+0xa2>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053c4:	e003      	b.n	80053ce <HAL_TIM_PWM_Start+0xaa>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2202      	movs	r2, #2
 80053ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2201      	movs	r2, #1
 80053d4:	6839      	ldr	r1, [r7, #0]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 ffd8 	bl	800638c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005498 <HAL_TIM_PWM_Start+0x174>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d004      	beq.n	80053f0 <HAL_TIM_PWM_Start+0xcc>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a2c      	ldr	r2, [pc, #176]	@ (800549c <HAL_TIM_PWM_Start+0x178>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d101      	bne.n	80053f4 <HAL_TIM_PWM_Start+0xd0>
 80053f0:	2301      	movs	r3, #1
 80053f2:	e000      	b.n	80053f6 <HAL_TIM_PWM_Start+0xd2>
 80053f4:	2300      	movs	r3, #0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d007      	beq.n	800540a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005408:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a22      	ldr	r2, [pc, #136]	@ (8005498 <HAL_TIM_PWM_Start+0x174>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d022      	beq.n	800545a <HAL_TIM_PWM_Start+0x136>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800541c:	d01d      	beq.n	800545a <HAL_TIM_PWM_Start+0x136>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1f      	ldr	r2, [pc, #124]	@ (80054a0 <HAL_TIM_PWM_Start+0x17c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d018      	beq.n	800545a <HAL_TIM_PWM_Start+0x136>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1d      	ldr	r2, [pc, #116]	@ (80054a4 <HAL_TIM_PWM_Start+0x180>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d013      	beq.n	800545a <HAL_TIM_PWM_Start+0x136>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1c      	ldr	r2, [pc, #112]	@ (80054a8 <HAL_TIM_PWM_Start+0x184>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00e      	beq.n	800545a <HAL_TIM_PWM_Start+0x136>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a16      	ldr	r2, [pc, #88]	@ (800549c <HAL_TIM_PWM_Start+0x178>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d009      	beq.n	800545a <HAL_TIM_PWM_Start+0x136>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a18      	ldr	r2, [pc, #96]	@ (80054ac <HAL_TIM_PWM_Start+0x188>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d004      	beq.n	800545a <HAL_TIM_PWM_Start+0x136>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a16      	ldr	r2, [pc, #88]	@ (80054b0 <HAL_TIM_PWM_Start+0x18c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d111      	bne.n	800547e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b06      	cmp	r3, #6
 800546a:	d010      	beq.n	800548e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547c:	e007      	b.n	800548e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f042 0201 	orr.w	r2, r2, #1
 800548c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40010000 	.word	0x40010000
 800549c:	40010400 	.word	0x40010400
 80054a0:	40000400 	.word	0x40000400
 80054a4:	40000800 	.word	0x40000800
 80054a8:	40000c00 	.word	0x40000c00
 80054ac:	40014000 	.word	0x40014000
 80054b0:	40001800 	.word	0x40001800

080054b4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <HAL_TIM_PWM_Start_IT+0x28>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	bf14      	ite	ne
 80054d4:	2301      	movne	r3, #1
 80054d6:	2300      	moveq	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	e022      	b.n	8005522 <HAL_TIM_PWM_Start_IT+0x6e>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d109      	bne.n	80054f6 <HAL_TIM_PWM_Start_IT+0x42>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	bf14      	ite	ne
 80054ee:	2301      	movne	r3, #1
 80054f0:	2300      	moveq	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	e015      	b.n	8005522 <HAL_TIM_PWM_Start_IT+0x6e>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d109      	bne.n	8005510 <HAL_TIM_PWM_Start_IT+0x5c>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b01      	cmp	r3, #1
 8005506:	bf14      	ite	ne
 8005508:	2301      	movne	r3, #1
 800550a:	2300      	moveq	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	e008      	b.n	8005522 <HAL_TIM_PWM_Start_IT+0x6e>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	bf14      	ite	ne
 800551c:	2301      	movne	r3, #1
 800551e:	2300      	moveq	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e0c7      	b.n	80056ba <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d104      	bne.n	800553a <HAL_TIM_PWM_Start_IT+0x86>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005538:	e013      	b.n	8005562 <HAL_TIM_PWM_Start_IT+0xae>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b04      	cmp	r3, #4
 800553e:	d104      	bne.n	800554a <HAL_TIM_PWM_Start_IT+0x96>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005548:	e00b      	b.n	8005562 <HAL_TIM_PWM_Start_IT+0xae>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b08      	cmp	r3, #8
 800554e:	d104      	bne.n	800555a <HAL_TIM_PWM_Start_IT+0xa6>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005558:	e003      	b.n	8005562 <HAL_TIM_PWM_Start_IT+0xae>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2202      	movs	r2, #2
 800555e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b0c      	cmp	r3, #12
 8005566:	d841      	bhi.n	80055ec <HAL_TIM_PWM_Start_IT+0x138>
 8005568:	a201      	add	r2, pc, #4	@ (adr r2, 8005570 <HAL_TIM_PWM_Start_IT+0xbc>)
 800556a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556e:	bf00      	nop
 8005570:	080055a5 	.word	0x080055a5
 8005574:	080055ed 	.word	0x080055ed
 8005578:	080055ed 	.word	0x080055ed
 800557c:	080055ed 	.word	0x080055ed
 8005580:	080055b7 	.word	0x080055b7
 8005584:	080055ed 	.word	0x080055ed
 8005588:	080055ed 	.word	0x080055ed
 800558c:	080055ed 	.word	0x080055ed
 8005590:	080055c9 	.word	0x080055c9
 8005594:	080055ed 	.word	0x080055ed
 8005598:	080055ed 	.word	0x080055ed
 800559c:	080055ed 	.word	0x080055ed
 80055a0:	080055db 	.word	0x080055db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0202 	orr.w	r2, r2, #2
 80055b2:	60da      	str	r2, [r3, #12]
      break;
 80055b4:	e01d      	b.n	80055f2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0204 	orr.w	r2, r2, #4
 80055c4:	60da      	str	r2, [r3, #12]
      break;
 80055c6:	e014      	b.n	80055f2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0208 	orr.w	r2, r2, #8
 80055d6:	60da      	str	r2, [r3, #12]
      break;
 80055d8:	e00b      	b.n	80055f2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0210 	orr.w	r2, r2, #16
 80055e8:	60da      	str	r2, [r3, #12]
      break;
 80055ea:	e002      	b.n	80055f2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	73fb      	strb	r3, [r7, #15]
      break;
 80055f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d15f      	bne.n	80056b8 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2201      	movs	r2, #1
 80055fe:	6839      	ldr	r1, [r7, #0]
 8005600:	4618      	mov	r0, r3
 8005602:	f000 fec3 	bl	800638c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a2e      	ldr	r2, [pc, #184]	@ (80056c4 <HAL_TIM_PWM_Start_IT+0x210>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d004      	beq.n	800561a <HAL_TIM_PWM_Start_IT+0x166>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a2c      	ldr	r2, [pc, #176]	@ (80056c8 <HAL_TIM_PWM_Start_IT+0x214>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d101      	bne.n	800561e <HAL_TIM_PWM_Start_IT+0x16a>
 800561a:	2301      	movs	r3, #1
 800561c:	e000      	b.n	8005620 <HAL_TIM_PWM_Start_IT+0x16c>
 800561e:	2300      	movs	r3, #0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005632:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a22      	ldr	r2, [pc, #136]	@ (80056c4 <HAL_TIM_PWM_Start_IT+0x210>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d022      	beq.n	8005684 <HAL_TIM_PWM_Start_IT+0x1d0>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005646:	d01d      	beq.n	8005684 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a1f      	ldr	r2, [pc, #124]	@ (80056cc <HAL_TIM_PWM_Start_IT+0x218>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d018      	beq.n	8005684 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a1e      	ldr	r2, [pc, #120]	@ (80056d0 <HAL_TIM_PWM_Start_IT+0x21c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d013      	beq.n	8005684 <HAL_TIM_PWM_Start_IT+0x1d0>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a1c      	ldr	r2, [pc, #112]	@ (80056d4 <HAL_TIM_PWM_Start_IT+0x220>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00e      	beq.n	8005684 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a17      	ldr	r2, [pc, #92]	@ (80056c8 <HAL_TIM_PWM_Start_IT+0x214>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d009      	beq.n	8005684 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a18      	ldr	r2, [pc, #96]	@ (80056d8 <HAL_TIM_PWM_Start_IT+0x224>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d004      	beq.n	8005684 <HAL_TIM_PWM_Start_IT+0x1d0>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a17      	ldr	r2, [pc, #92]	@ (80056dc <HAL_TIM_PWM_Start_IT+0x228>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d111      	bne.n	80056a8 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b06      	cmp	r3, #6
 8005694:	d010      	beq.n	80056b8 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f042 0201 	orr.w	r2, r2, #1
 80056a4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a6:	e007      	b.n	80056b8 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0201 	orr.w	r2, r2, #1
 80056b6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40010000 	.word	0x40010000
 80056c8:	40010400 	.word	0x40010400
 80056cc:	40000400 	.word	0x40000400
 80056d0:	40000800 	.word	0x40000800
 80056d4:	40000c00 	.word	0x40000c00
 80056d8:	40014000 	.word	0x40014000
 80056dc:	40001800 	.word	0x40001800

080056e0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b0c      	cmp	r3, #12
 80056f2:	d841      	bhi.n	8005778 <HAL_TIM_PWM_Stop_IT+0x98>
 80056f4:	a201      	add	r2, pc, #4	@ (adr r2, 80056fc <HAL_TIM_PWM_Stop_IT+0x1c>)
 80056f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fa:	bf00      	nop
 80056fc:	08005731 	.word	0x08005731
 8005700:	08005779 	.word	0x08005779
 8005704:	08005779 	.word	0x08005779
 8005708:	08005779 	.word	0x08005779
 800570c:	08005743 	.word	0x08005743
 8005710:	08005779 	.word	0x08005779
 8005714:	08005779 	.word	0x08005779
 8005718:	08005779 	.word	0x08005779
 800571c:	08005755 	.word	0x08005755
 8005720:	08005779 	.word	0x08005779
 8005724:	08005779 	.word	0x08005779
 8005728:	08005779 	.word	0x08005779
 800572c:	08005767 	.word	0x08005767
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0202 	bic.w	r2, r2, #2
 800573e:	60da      	str	r2, [r3, #12]
      break;
 8005740:	e01d      	b.n	800577e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0204 	bic.w	r2, r2, #4
 8005750:	60da      	str	r2, [r3, #12]
      break;
 8005752:	e014      	b.n	800577e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0208 	bic.w	r2, r2, #8
 8005762:	60da      	str	r2, [r3, #12]
      break;
 8005764:	e00b      	b.n	800577e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0210 	bic.w	r2, r2, #16
 8005774:	60da      	str	r2, [r3, #12]
      break;
 8005776:	e002      	b.n	800577e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	73fb      	strb	r3, [r7, #15]
      break;
 800577c:	bf00      	nop
  }

  if (status == HAL_OK)
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d161      	bne.n	8005848 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2200      	movs	r2, #0
 800578a:	6839      	ldr	r1, [r7, #0]
 800578c:	4618      	mov	r0, r3
 800578e:	f000 fdfd 	bl	800638c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a2f      	ldr	r2, [pc, #188]	@ (8005854 <HAL_TIM_PWM_Stop_IT+0x174>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d004      	beq.n	80057a6 <HAL_TIM_PWM_Stop_IT+0xc6>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005858 <HAL_TIM_PWM_Stop_IT+0x178>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d101      	bne.n	80057aa <HAL_TIM_PWM_Stop_IT+0xca>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <HAL_TIM_PWM_Stop_IT+0xcc>
 80057aa:	2300      	movs	r3, #0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d017      	beq.n	80057e0 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6a1a      	ldr	r2, [r3, #32]
 80057b6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80057ba:	4013      	ands	r3, r2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10f      	bne.n	80057e0 <HAL_TIM_PWM_Stop_IT+0x100>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6a1a      	ldr	r2, [r3, #32]
 80057c6:	f240 4344 	movw	r3, #1092	@ 0x444
 80057ca:	4013      	ands	r3, r2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d107      	bne.n	80057e0 <HAL_TIM_PWM_Stop_IT+0x100>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6a1a      	ldr	r2, [r3, #32]
 80057e6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80057ea:	4013      	ands	r3, r2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10f      	bne.n	8005810 <HAL_TIM_PWM_Stop_IT+0x130>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6a1a      	ldr	r2, [r3, #32]
 80057f6:	f240 4344 	movw	r3, #1092	@ 0x444
 80057fa:	4013      	ands	r3, r2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d107      	bne.n	8005810 <HAL_TIM_PWM_Stop_IT+0x130>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0201 	bic.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d104      	bne.n	8005820 <HAL_TIM_PWM_Stop_IT+0x140>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800581e:	e013      	b.n	8005848 <HAL_TIM_PWM_Stop_IT+0x168>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b04      	cmp	r3, #4
 8005824:	d104      	bne.n	8005830 <HAL_TIM_PWM_Stop_IT+0x150>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800582e:	e00b      	b.n	8005848 <HAL_TIM_PWM_Stop_IT+0x168>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2b08      	cmp	r3, #8
 8005834:	d104      	bne.n	8005840 <HAL_TIM_PWM_Stop_IT+0x160>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800583e:	e003      	b.n	8005848 <HAL_TIM_PWM_Stop_IT+0x168>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8005848:	7bfb      	ldrb	r3, [r7, #15]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40010000 	.word	0x40010000
 8005858:	40010400 	.word	0x40010400

0800585c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d020      	beq.n	80058c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01b      	beq.n	80058c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f06f 0202 	mvn.w	r2, #2
 8005890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fa65 	bl	8005d76 <HAL_TIM_IC_CaptureCallback>
 80058ac:	e005      	b.n	80058ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fa57 	bl	8005d62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7fb f891 	bl	80009dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d020      	beq.n	800590c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01b      	beq.n	800590c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f06f 0204 	mvn.w	r2, #4
 80058dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2202      	movs	r2, #2
 80058e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fa3f 	bl	8005d76 <HAL_TIM_IC_CaptureCallback>
 80058f8:	e005      	b.n	8005906 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fa31 	bl	8005d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7fb f86b 	bl	80009dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d020      	beq.n	8005958 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01b      	beq.n	8005958 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0208 	mvn.w	r2, #8
 8005928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2204      	movs	r2, #4
 800592e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fa19 	bl	8005d76 <HAL_TIM_IC_CaptureCallback>
 8005944:	e005      	b.n	8005952 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fa0b 	bl	8005d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7fb f845 	bl	80009dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2b00      	cmp	r3, #0
 8005960:	d020      	beq.n	80059a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f003 0310 	and.w	r3, r3, #16
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01b      	beq.n	80059a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f06f 0210 	mvn.w	r2, #16
 8005974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2208      	movs	r2, #8
 800597a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f9f3 	bl	8005d76 <HAL_TIM_IC_CaptureCallback>
 8005990:	e005      	b.n	800599e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f9e5 	bl	8005d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7fb f81f 	bl	80009dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00c      	beq.n	80059c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d007      	beq.n	80059c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0201 	mvn.w	r2, #1
 80059c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f9c3 	bl	8005d4e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00c      	beq.n	80059ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d007      	beq.n	80059ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80059e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fdce 	bl	8006588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00c      	beq.n	8005a10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d007      	beq.n	8005a10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f9bd 	bl	8005d8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 0320 	and.w	r3, r3, #32
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00c      	beq.n	8005a34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f003 0320 	and.w	r3, r3, #32
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d007      	beq.n	8005a34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0220 	mvn.w	r2, #32
 8005a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fda0 	bl	8006574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a34:	bf00      	nop
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e0ae      	b.n	8005bb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b0c      	cmp	r3, #12
 8005a66:	f200 809f 	bhi.w	8005ba8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a70:	08005aa5 	.word	0x08005aa5
 8005a74:	08005ba9 	.word	0x08005ba9
 8005a78:	08005ba9 	.word	0x08005ba9
 8005a7c:	08005ba9 	.word	0x08005ba9
 8005a80:	08005ae5 	.word	0x08005ae5
 8005a84:	08005ba9 	.word	0x08005ba9
 8005a88:	08005ba9 	.word	0x08005ba9
 8005a8c:	08005ba9 	.word	0x08005ba9
 8005a90:	08005b27 	.word	0x08005b27
 8005a94:	08005ba9 	.word	0x08005ba9
 8005a98:	08005ba9 	.word	0x08005ba9
 8005a9c:	08005ba9 	.word	0x08005ba9
 8005aa0:	08005b67 	.word	0x08005b67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68b9      	ldr	r1, [r7, #8]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fa24 	bl	8005ef8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	699a      	ldr	r2, [r3, #24]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0208 	orr.w	r2, r2, #8
 8005abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0204 	bic.w	r2, r2, #4
 8005ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6999      	ldr	r1, [r3, #24]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	691a      	ldr	r2, [r3, #16]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	619a      	str	r2, [r3, #24]
      break;
 8005ae2:	e064      	b.n	8005bae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 fa74 	bl	8005fd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699a      	ldr	r2, [r3, #24]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699a      	ldr	r2, [r3, #24]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6999      	ldr	r1, [r3, #24]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	021a      	lsls	r2, r3, #8
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	619a      	str	r2, [r3, #24]
      break;
 8005b24:	e043      	b.n	8005bae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 fac9 	bl	80060c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69da      	ldr	r2, [r3, #28]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f042 0208 	orr.w	r2, r2, #8
 8005b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0204 	bic.w	r2, r2, #4
 8005b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69d9      	ldr	r1, [r3, #28]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	61da      	str	r2, [r3, #28]
      break;
 8005b64:	e023      	b.n	8005bae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 fb1d 	bl	80061ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	69da      	ldr	r2, [r3, #28]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69da      	ldr	r2, [r3, #28]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69d9      	ldr	r1, [r3, #28]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	021a      	lsls	r2, r3, #8
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	61da      	str	r2, [r3, #28]
      break;
 8005ba6:	e002      	b.n	8005bae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	75fb      	strb	r3, [r7, #23]
      break;
 8005bac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d101      	bne.n	8005bdc <HAL_TIM_ConfigClockSource+0x1c>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e0b4      	b.n	8005d46 <HAL_TIM_ConfigClockSource+0x186>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005bfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c14:	d03e      	beq.n	8005c94 <HAL_TIM_ConfigClockSource+0xd4>
 8005c16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c1a:	f200 8087 	bhi.w	8005d2c <HAL_TIM_ConfigClockSource+0x16c>
 8005c1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c22:	f000 8086 	beq.w	8005d32 <HAL_TIM_ConfigClockSource+0x172>
 8005c26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c2a:	d87f      	bhi.n	8005d2c <HAL_TIM_ConfigClockSource+0x16c>
 8005c2c:	2b70      	cmp	r3, #112	@ 0x70
 8005c2e:	d01a      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0xa6>
 8005c30:	2b70      	cmp	r3, #112	@ 0x70
 8005c32:	d87b      	bhi.n	8005d2c <HAL_TIM_ConfigClockSource+0x16c>
 8005c34:	2b60      	cmp	r3, #96	@ 0x60
 8005c36:	d050      	beq.n	8005cda <HAL_TIM_ConfigClockSource+0x11a>
 8005c38:	2b60      	cmp	r3, #96	@ 0x60
 8005c3a:	d877      	bhi.n	8005d2c <HAL_TIM_ConfigClockSource+0x16c>
 8005c3c:	2b50      	cmp	r3, #80	@ 0x50
 8005c3e:	d03c      	beq.n	8005cba <HAL_TIM_ConfigClockSource+0xfa>
 8005c40:	2b50      	cmp	r3, #80	@ 0x50
 8005c42:	d873      	bhi.n	8005d2c <HAL_TIM_ConfigClockSource+0x16c>
 8005c44:	2b40      	cmp	r3, #64	@ 0x40
 8005c46:	d058      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x13a>
 8005c48:	2b40      	cmp	r3, #64	@ 0x40
 8005c4a:	d86f      	bhi.n	8005d2c <HAL_TIM_ConfigClockSource+0x16c>
 8005c4c:	2b30      	cmp	r3, #48	@ 0x30
 8005c4e:	d064      	beq.n	8005d1a <HAL_TIM_ConfigClockSource+0x15a>
 8005c50:	2b30      	cmp	r3, #48	@ 0x30
 8005c52:	d86b      	bhi.n	8005d2c <HAL_TIM_ConfigClockSource+0x16c>
 8005c54:	2b20      	cmp	r3, #32
 8005c56:	d060      	beq.n	8005d1a <HAL_TIM_ConfigClockSource+0x15a>
 8005c58:	2b20      	cmp	r3, #32
 8005c5a:	d867      	bhi.n	8005d2c <HAL_TIM_ConfigClockSource+0x16c>
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d05c      	beq.n	8005d1a <HAL_TIM_ConfigClockSource+0x15a>
 8005c60:	2b10      	cmp	r3, #16
 8005c62:	d05a      	beq.n	8005d1a <HAL_TIM_ConfigClockSource+0x15a>
 8005c64:	e062      	b.n	8005d2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c76:	f000 fb69 	bl	800634c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	609a      	str	r2, [r3, #8]
      break;
 8005c92:	e04f      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ca4:	f000 fb52 	bl	800634c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cb6:	609a      	str	r2, [r3, #8]
      break;
 8005cb8:	e03c      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f000 fac6 	bl	8006258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2150      	movs	r1, #80	@ 0x50
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fb1f 	bl	8006316 <TIM_ITRx_SetConfig>
      break;
 8005cd8:	e02c      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f000 fae5 	bl	80062b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2160      	movs	r1, #96	@ 0x60
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fb0f 	bl	8006316 <TIM_ITRx_SetConfig>
      break;
 8005cf8:	e01c      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d06:	461a      	mov	r2, r3
 8005d08:	f000 faa6 	bl	8006258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2140      	movs	r1, #64	@ 0x40
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 faff 	bl	8006316 <TIM_ITRx_SetConfig>
      break;
 8005d18:	e00c      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4619      	mov	r1, r3
 8005d24:	4610      	mov	r0, r2
 8005d26:	f000 faf6 	bl	8006316 <TIM_ITRx_SetConfig>
      break;
 8005d2a:	e003      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d30:	e000      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
	...

08005da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a46      	ldr	r2, [pc, #280]	@ (8005ecc <TIM_Base_SetConfig+0x12c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d013      	beq.n	8005de0 <TIM_Base_SetConfig+0x40>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dbe:	d00f      	beq.n	8005de0 <TIM_Base_SetConfig+0x40>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a43      	ldr	r2, [pc, #268]	@ (8005ed0 <TIM_Base_SetConfig+0x130>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00b      	beq.n	8005de0 <TIM_Base_SetConfig+0x40>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a42      	ldr	r2, [pc, #264]	@ (8005ed4 <TIM_Base_SetConfig+0x134>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d007      	beq.n	8005de0 <TIM_Base_SetConfig+0x40>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a41      	ldr	r2, [pc, #260]	@ (8005ed8 <TIM_Base_SetConfig+0x138>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d003      	beq.n	8005de0 <TIM_Base_SetConfig+0x40>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a40      	ldr	r2, [pc, #256]	@ (8005edc <TIM_Base_SetConfig+0x13c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d108      	bne.n	8005df2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a35      	ldr	r2, [pc, #212]	@ (8005ecc <TIM_Base_SetConfig+0x12c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d02b      	beq.n	8005e52 <TIM_Base_SetConfig+0xb2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e00:	d027      	beq.n	8005e52 <TIM_Base_SetConfig+0xb2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a32      	ldr	r2, [pc, #200]	@ (8005ed0 <TIM_Base_SetConfig+0x130>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d023      	beq.n	8005e52 <TIM_Base_SetConfig+0xb2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a31      	ldr	r2, [pc, #196]	@ (8005ed4 <TIM_Base_SetConfig+0x134>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d01f      	beq.n	8005e52 <TIM_Base_SetConfig+0xb2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a30      	ldr	r2, [pc, #192]	@ (8005ed8 <TIM_Base_SetConfig+0x138>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d01b      	beq.n	8005e52 <TIM_Base_SetConfig+0xb2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a2f      	ldr	r2, [pc, #188]	@ (8005edc <TIM_Base_SetConfig+0x13c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d017      	beq.n	8005e52 <TIM_Base_SetConfig+0xb2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a2e      	ldr	r2, [pc, #184]	@ (8005ee0 <TIM_Base_SetConfig+0x140>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d013      	beq.n	8005e52 <TIM_Base_SetConfig+0xb2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a2d      	ldr	r2, [pc, #180]	@ (8005ee4 <TIM_Base_SetConfig+0x144>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00f      	beq.n	8005e52 <TIM_Base_SetConfig+0xb2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a2c      	ldr	r2, [pc, #176]	@ (8005ee8 <TIM_Base_SetConfig+0x148>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00b      	beq.n	8005e52 <TIM_Base_SetConfig+0xb2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a2b      	ldr	r2, [pc, #172]	@ (8005eec <TIM_Base_SetConfig+0x14c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d007      	beq.n	8005e52 <TIM_Base_SetConfig+0xb2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a2a      	ldr	r2, [pc, #168]	@ (8005ef0 <TIM_Base_SetConfig+0x150>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d003      	beq.n	8005e52 <TIM_Base_SetConfig+0xb2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a29      	ldr	r2, [pc, #164]	@ (8005ef4 <TIM_Base_SetConfig+0x154>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d108      	bne.n	8005e64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a10      	ldr	r2, [pc, #64]	@ (8005ecc <TIM_Base_SetConfig+0x12c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d003      	beq.n	8005e98 <TIM_Base_SetConfig+0xf8>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a12      	ldr	r2, [pc, #72]	@ (8005edc <TIM_Base_SetConfig+0x13c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d103      	bne.n	8005ea0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	691a      	ldr	r2, [r3, #16]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d105      	bne.n	8005ebe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f023 0201 	bic.w	r2, r3, #1
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	611a      	str	r2, [r3, #16]
  }
}
 8005ebe:	bf00      	nop
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40010000 	.word	0x40010000
 8005ed0:	40000400 	.word	0x40000400
 8005ed4:	40000800 	.word	0x40000800
 8005ed8:	40000c00 	.word	0x40000c00
 8005edc:	40010400 	.word	0x40010400
 8005ee0:	40014000 	.word	0x40014000
 8005ee4:	40014400 	.word	0x40014400
 8005ee8:	40014800 	.word	0x40014800
 8005eec:	40001800 	.word	0x40001800
 8005ef0:	40001c00 	.word	0x40001c00
 8005ef4:	40002000 	.word	0x40002000

08005ef8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	f023 0201 	bic.w	r2, r3, #1
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f023 0302 	bic.w	r3, r3, #2
 8005f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a20      	ldr	r2, [pc, #128]	@ (8005fd0 <TIM_OC1_SetConfig+0xd8>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d003      	beq.n	8005f5c <TIM_OC1_SetConfig+0x64>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a1f      	ldr	r2, [pc, #124]	@ (8005fd4 <TIM_OC1_SetConfig+0xdc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d10c      	bne.n	8005f76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f023 0308 	bic.w	r3, r3, #8
 8005f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f023 0304 	bic.w	r3, r3, #4
 8005f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a15      	ldr	r2, [pc, #84]	@ (8005fd0 <TIM_OC1_SetConfig+0xd8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d003      	beq.n	8005f86 <TIM_OC1_SetConfig+0x8e>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a14      	ldr	r2, [pc, #80]	@ (8005fd4 <TIM_OC1_SetConfig+0xdc>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d111      	bne.n	8005faa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	621a      	str	r2, [r3, #32]
}
 8005fc4:	bf00      	nop
 8005fc6:	371c      	adds	r7, #28
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	40010000 	.word	0x40010000
 8005fd4:	40010400 	.word	0x40010400

08005fd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	f023 0210 	bic.w	r2, r3, #16
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800600e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	021b      	lsls	r3, r3, #8
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f023 0320 	bic.w	r3, r3, #32
 8006022:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	4313      	orrs	r3, r2
 800602e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a22      	ldr	r2, [pc, #136]	@ (80060bc <TIM_OC2_SetConfig+0xe4>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d003      	beq.n	8006040 <TIM_OC2_SetConfig+0x68>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a21      	ldr	r2, [pc, #132]	@ (80060c0 <TIM_OC2_SetConfig+0xe8>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d10d      	bne.n	800605c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	011b      	lsls	r3, r3, #4
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	4313      	orrs	r3, r2
 8006052:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800605a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a17      	ldr	r2, [pc, #92]	@ (80060bc <TIM_OC2_SetConfig+0xe4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d003      	beq.n	800606c <TIM_OC2_SetConfig+0x94>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a16      	ldr	r2, [pc, #88]	@ (80060c0 <TIM_OC2_SetConfig+0xe8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d113      	bne.n	8006094 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006072:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800607a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	4313      	orrs	r3, r2
 8006086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	621a      	str	r2, [r3, #32]
}
 80060ae:	bf00      	nop
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40010400 	.word	0x40010400

080060c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0303 	bic.w	r3, r3, #3
 80060fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800610c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	021b      	lsls	r3, r3, #8
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	4313      	orrs	r3, r2
 8006118:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a21      	ldr	r2, [pc, #132]	@ (80061a4 <TIM_OC3_SetConfig+0xe0>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d003      	beq.n	800612a <TIM_OC3_SetConfig+0x66>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a20      	ldr	r2, [pc, #128]	@ (80061a8 <TIM_OC3_SetConfig+0xe4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d10d      	bne.n	8006146 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006130:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	021b      	lsls	r3, r3, #8
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a16      	ldr	r2, [pc, #88]	@ (80061a4 <TIM_OC3_SetConfig+0xe0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d003      	beq.n	8006156 <TIM_OC3_SetConfig+0x92>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a15      	ldr	r2, [pc, #84]	@ (80061a8 <TIM_OC3_SetConfig+0xe4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d113      	bne.n	800617e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800615c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	4313      	orrs	r3, r2
 800617c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	621a      	str	r2, [r3, #32]
}
 8006198:	bf00      	nop
 800619a:	371c      	adds	r7, #28
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr
 80061a4:	40010000 	.word	0x40010000
 80061a8:	40010400 	.word	0x40010400

080061ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	021b      	lsls	r3, r3, #8
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	031b      	lsls	r3, r3, #12
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	4313      	orrs	r3, r2
 8006202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a12      	ldr	r2, [pc, #72]	@ (8006250 <TIM_OC4_SetConfig+0xa4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d003      	beq.n	8006214 <TIM_OC4_SetConfig+0x68>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a11      	ldr	r2, [pc, #68]	@ (8006254 <TIM_OC4_SetConfig+0xa8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d109      	bne.n	8006228 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800621a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	019b      	lsls	r3, r3, #6
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	621a      	str	r2, [r3, #32]
}
 8006242:	bf00      	nop
 8006244:	371c      	adds	r7, #28
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	40010000 	.word	0x40010000
 8006254:	40010400 	.word	0x40010400

08006258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	f023 0201 	bic.w	r2, r3, #1
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f023 030a 	bic.w	r3, r3, #10
 8006294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	621a      	str	r2, [r3, #32]
}
 80062aa:	bf00      	nop
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b087      	sub	sp, #28
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	f023 0210 	bic.w	r2, r3, #16
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	031b      	lsls	r3, r3, #12
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80062f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	011b      	lsls	r3, r3, #4
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006316:	b480      	push	{r7}
 8006318:	b085      	sub	sp, #20
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800632c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4313      	orrs	r3, r2
 8006334:	f043 0307 	orr.w	r3, r3, #7
 8006338:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	609a      	str	r2, [r3, #8]
}
 8006340:	bf00      	nop
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006366:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	021a      	lsls	r2, r3, #8
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	431a      	orrs	r2, r3
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	4313      	orrs	r3, r2
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	4313      	orrs	r3, r2
 8006378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	609a      	str	r2, [r3, #8]
}
 8006380:	bf00      	nop
 8006382:	371c      	adds	r7, #28
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f003 031f 	and.w	r3, r3, #31
 800639e:	2201      	movs	r2, #1
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6a1a      	ldr	r2, [r3, #32]
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	43db      	mvns	r3, r3
 80063ae:	401a      	ands	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a1a      	ldr	r2, [r3, #32]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f003 031f 	and.w	r3, r3, #31
 80063be:	6879      	ldr	r1, [r7, #4]
 80063c0:	fa01 f303 	lsl.w	r3, r1, r3
 80063c4:	431a      	orrs	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	621a      	str	r2, [r3, #32]
}
 80063ca:	bf00      	nop
 80063cc:	371c      	adds	r7, #28
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
	...

080063d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e05a      	b.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006416:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a21      	ldr	r2, [pc, #132]	@ (80064b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d022      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800643c:	d01d      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1d      	ldr	r2, [pc, #116]	@ (80064b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d018      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a1b      	ldr	r2, [pc, #108]	@ (80064bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d013      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a1a      	ldr	r2, [pc, #104]	@ (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d00e      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a18      	ldr	r2, [pc, #96]	@ (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d009      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a17      	ldr	r2, [pc, #92]	@ (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d004      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a15      	ldr	r2, [pc, #84]	@ (80064cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d10c      	bne.n	8006494 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006480:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	4313      	orrs	r3, r2
 800648a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40010000 	.word	0x40010000
 80064b8:	40000400 	.word	0x40000400
 80064bc:	40000800 	.word	0x40000800
 80064c0:	40000c00 	.word	0x40000c00
 80064c4:	40010400 	.word	0x40010400
 80064c8:	40014000 	.word	0x40014000
 80064cc:	40001800 	.word	0x40001800

080064d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d101      	bne.n	80064ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80064e8:	2302      	movs	r3, #2
 80064ea:	e03d      	b.n	8006568 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	4313      	orrs	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	4313      	orrs	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4313      	orrs	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	4313      	orrs	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800659c:	b084      	sub	sp, #16
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	f107 001c 	add.w	r0, r7, #28
 80065aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d123      	bne.n	80065fe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80065ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d105      	bne.n	80065f2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f001 fae8 	bl	8007bc8 <USB_CoreReset>
 80065f8:	4603      	mov	r3, r0
 80065fa:	73fb      	strb	r3, [r7, #15]
 80065fc:	e01b      	b.n	8006636 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f001 fadc 	bl	8007bc8 <USB_CoreReset>
 8006610:	4603      	mov	r3, r0
 8006612:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006614:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006618:	2b00      	cmp	r3, #0
 800661a:	d106      	bne.n	800662a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006620:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	639a      	str	r2, [r3, #56]	@ 0x38
 8006628:	e005      	b.n	8006636 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800662e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006636:	7fbb      	ldrb	r3, [r7, #30]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d10b      	bne.n	8006654 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f043 0206 	orr.w	r2, r3, #6
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f043 0220 	orr.w	r2, r3, #32
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006654:	7bfb      	ldrb	r3, [r7, #15]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006660:	b004      	add	sp, #16
 8006662:	4770      	bx	lr

08006664 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	4613      	mov	r3, r2
 8006670:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006672:	79fb      	ldrb	r3, [r7, #7]
 8006674:	2b02      	cmp	r3, #2
 8006676:	d165      	bne.n	8006744 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4a41      	ldr	r2, [pc, #260]	@ (8006780 <USB_SetTurnaroundTime+0x11c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d906      	bls.n	800668e <USB_SetTurnaroundTime+0x2a>
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	4a40      	ldr	r2, [pc, #256]	@ (8006784 <USB_SetTurnaroundTime+0x120>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d202      	bcs.n	800668e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006688:	230f      	movs	r3, #15
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	e062      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	4a3c      	ldr	r2, [pc, #240]	@ (8006784 <USB_SetTurnaroundTime+0x120>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d306      	bcc.n	80066a4 <USB_SetTurnaroundTime+0x40>
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	4a3b      	ldr	r2, [pc, #236]	@ (8006788 <USB_SetTurnaroundTime+0x124>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d202      	bcs.n	80066a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800669e:	230e      	movs	r3, #14
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	e057      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4a38      	ldr	r2, [pc, #224]	@ (8006788 <USB_SetTurnaroundTime+0x124>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d306      	bcc.n	80066ba <USB_SetTurnaroundTime+0x56>
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	4a37      	ldr	r2, [pc, #220]	@ (800678c <USB_SetTurnaroundTime+0x128>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d202      	bcs.n	80066ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80066b4:	230d      	movs	r3, #13
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	e04c      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	4a33      	ldr	r2, [pc, #204]	@ (800678c <USB_SetTurnaroundTime+0x128>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d306      	bcc.n	80066d0 <USB_SetTurnaroundTime+0x6c>
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	4a32      	ldr	r2, [pc, #200]	@ (8006790 <USB_SetTurnaroundTime+0x12c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d802      	bhi.n	80066d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80066ca:	230c      	movs	r3, #12
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	e041      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	4a2f      	ldr	r2, [pc, #188]	@ (8006790 <USB_SetTurnaroundTime+0x12c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d906      	bls.n	80066e6 <USB_SetTurnaroundTime+0x82>
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	4a2e      	ldr	r2, [pc, #184]	@ (8006794 <USB_SetTurnaroundTime+0x130>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d802      	bhi.n	80066e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80066e0:	230b      	movs	r3, #11
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	e036      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	4a2a      	ldr	r2, [pc, #168]	@ (8006794 <USB_SetTurnaroundTime+0x130>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d906      	bls.n	80066fc <USB_SetTurnaroundTime+0x98>
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	4a29      	ldr	r2, [pc, #164]	@ (8006798 <USB_SetTurnaroundTime+0x134>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d802      	bhi.n	80066fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80066f6:	230a      	movs	r3, #10
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	e02b      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4a26      	ldr	r2, [pc, #152]	@ (8006798 <USB_SetTurnaroundTime+0x134>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d906      	bls.n	8006712 <USB_SetTurnaroundTime+0xae>
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	4a25      	ldr	r2, [pc, #148]	@ (800679c <USB_SetTurnaroundTime+0x138>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d202      	bcs.n	8006712 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800670c:	2309      	movs	r3, #9
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	e020      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	4a21      	ldr	r2, [pc, #132]	@ (800679c <USB_SetTurnaroundTime+0x138>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d306      	bcc.n	8006728 <USB_SetTurnaroundTime+0xc4>
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	4a20      	ldr	r2, [pc, #128]	@ (80067a0 <USB_SetTurnaroundTime+0x13c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d802      	bhi.n	8006728 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006722:	2308      	movs	r3, #8
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	e015      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	4a1d      	ldr	r2, [pc, #116]	@ (80067a0 <USB_SetTurnaroundTime+0x13c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d906      	bls.n	800673e <USB_SetTurnaroundTime+0xda>
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	4a1c      	ldr	r2, [pc, #112]	@ (80067a4 <USB_SetTurnaroundTime+0x140>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d202      	bcs.n	800673e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006738:	2307      	movs	r3, #7
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	e00a      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800673e:	2306      	movs	r3, #6
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	e007      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006744:	79fb      	ldrb	r3, [r7, #7]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d102      	bne.n	8006750 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800674a:	2309      	movs	r3, #9
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	e001      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006750:	2309      	movs	r3, #9
 8006752:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	029b      	lsls	r3, r3, #10
 8006768:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800676c:	431a      	orrs	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	371c      	adds	r7, #28
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	00d8acbf 	.word	0x00d8acbf
 8006784:	00e4e1c0 	.word	0x00e4e1c0
 8006788:	00f42400 	.word	0x00f42400
 800678c:	01067380 	.word	0x01067380
 8006790:	011a499f 	.word	0x011a499f
 8006794:	01312cff 	.word	0x01312cff
 8006798:	014ca43f 	.word	0x014ca43f
 800679c:	016e3600 	.word	0x016e3600
 80067a0:	01a6ab1f 	.word	0x01a6ab1f
 80067a4:	01e84800 	.word	0x01e84800

080067a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f043 0201 	orr.w	r2, r3, #1
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f023 0201 	bic.w	r2, r3, #1
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006808:	78fb      	ldrb	r3, [r7, #3]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d115      	bne.n	800683a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800681a:	200a      	movs	r0, #10
 800681c:	f7fb f824 	bl	8001868 <HAL_Delay>
      ms += 10U;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	330a      	adds	r3, #10
 8006824:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 f93f 	bl	8007aaa <USB_GetMode>
 800682c:	4603      	mov	r3, r0
 800682e:	2b01      	cmp	r3, #1
 8006830:	d01e      	beq.n	8006870 <USB_SetCurrentMode+0x84>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2bc7      	cmp	r3, #199	@ 0xc7
 8006836:	d9f0      	bls.n	800681a <USB_SetCurrentMode+0x2e>
 8006838:	e01a      	b.n	8006870 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800683a:	78fb      	ldrb	r3, [r7, #3]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d115      	bne.n	800686c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800684c:	200a      	movs	r0, #10
 800684e:	f7fb f80b 	bl	8001868 <HAL_Delay>
      ms += 10U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	330a      	adds	r3, #10
 8006856:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f001 f926 	bl	8007aaa <USB_GetMode>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d005      	beq.n	8006870 <USB_SetCurrentMode+0x84>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2bc7      	cmp	r3, #199	@ 0xc7
 8006868:	d9f0      	bls.n	800684c <USB_SetCurrentMode+0x60>
 800686a:	e001      	b.n	8006870 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e005      	b.n	800687c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2bc8      	cmp	r3, #200	@ 0xc8
 8006874:	d101      	bne.n	800687a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006884:	b084      	sub	sp, #16
 8006886:	b580      	push	{r7, lr}
 8006888:	b086      	sub	sp, #24
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006892:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800689e:	2300      	movs	r3, #0
 80068a0:	613b      	str	r3, [r7, #16]
 80068a2:	e009      	b.n	80068b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	3340      	adds	r3, #64	@ 0x40
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	2200      	movs	r2, #0
 80068b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	3301      	adds	r3, #1
 80068b6:	613b      	str	r3, [r7, #16]
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	2b0e      	cmp	r3, #14
 80068bc:	d9f2      	bls.n	80068a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d11c      	bne.n	8006900 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068d4:	f043 0302 	orr.w	r3, r3, #2
 80068d8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068de:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ea:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80068fe:	e00b      	b.n	8006918 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006904:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006910:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800691e:	461a      	mov	r2, r3
 8006920:	2300      	movs	r3, #0
 8006922:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006924:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006928:	2b01      	cmp	r3, #1
 800692a:	d10d      	bne.n	8006948 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800692c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006930:	2b00      	cmp	r3, #0
 8006932:	d104      	bne.n	800693e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006934:	2100      	movs	r1, #0
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f968 	bl	8006c0c <USB_SetDevSpeed>
 800693c:	e008      	b.n	8006950 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800693e:	2101      	movs	r1, #1
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f963 	bl	8006c0c <USB_SetDevSpeed>
 8006946:	e003      	b.n	8006950 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006948:	2103      	movs	r1, #3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f95e 	bl	8006c0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006950:	2110      	movs	r1, #16
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f8fa 	bl	8006b4c <USB_FlushTxFifo>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f924 	bl	8006bb0 <USB_FlushRxFifo>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006978:	461a      	mov	r2, r3
 800697a:	2300      	movs	r3, #0
 800697c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006984:	461a      	mov	r2, r3
 8006986:	2300      	movs	r3, #0
 8006988:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006990:	461a      	mov	r2, r3
 8006992:	2300      	movs	r3, #0
 8006994:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006996:	2300      	movs	r3, #0
 8006998:	613b      	str	r3, [r7, #16]
 800699a:	e043      	b.n	8006a24 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069b2:	d118      	bne.n	80069e6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10a      	bne.n	80069d0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c6:	461a      	mov	r2, r3
 80069c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80069cc:	6013      	str	r3, [r2, #0]
 80069ce:	e013      	b.n	80069f8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069dc:	461a      	mov	r2, r3
 80069de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80069e2:	6013      	str	r3, [r2, #0]
 80069e4:	e008      	b.n	80069f8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069f2:	461a      	mov	r2, r3
 80069f4:	2300      	movs	r3, #0
 80069f6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a04:	461a      	mov	r2, r3
 8006a06:	2300      	movs	r3, #0
 8006a08:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a16:	461a      	mov	r2, r3
 8006a18:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	3301      	adds	r3, #1
 8006a22:	613b      	str	r3, [r7, #16]
 8006a24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006a28:	461a      	mov	r2, r3
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d3b5      	bcc.n	800699c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a30:	2300      	movs	r3, #0
 8006a32:	613b      	str	r3, [r7, #16]
 8006a34:	e043      	b.n	8006abe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a4c:	d118      	bne.n	8006a80 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10a      	bne.n	8006a6a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a60:	461a      	mov	r2, r3
 8006a62:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006a66:	6013      	str	r3, [r2, #0]
 8006a68:	e013      	b.n	8006a92 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a76:	461a      	mov	r2, r3
 8006a78:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	e008      	b.n	8006a92 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	2300      	movs	r3, #0
 8006a90:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006ab6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	3301      	adds	r3, #1
 8006abc:	613b      	str	r3, [r7, #16]
 8006abe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d3b5      	bcc.n	8006a36 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ad8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006adc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006aea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006aec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d105      	bne.n	8006b00 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	f043 0210 	orr.w	r2, r3, #16
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	699a      	ldr	r2, [r3, #24]
 8006b04:	4b10      	ldr	r3, [pc, #64]	@ (8006b48 <USB_DevInit+0x2c4>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b0c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d005      	beq.n	8006b20 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	f043 0208 	orr.w	r2, r3, #8
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b20:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d107      	bne.n	8006b38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b30:	f043 0304 	orr.w	r3, r3, #4
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b44:	b004      	add	sp, #16
 8006b46:	4770      	bx	lr
 8006b48:	803c3800 	.word	0x803c3800

08006b4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b66:	d901      	bls.n	8006b6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e01b      	b.n	8006ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	daf2      	bge.n	8006b5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	019b      	lsls	r3, r3, #6
 8006b7c:	f043 0220 	orr.w	r2, r3, #32
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3301      	adds	r3, #1
 8006b88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b90:	d901      	bls.n	8006b96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e006      	b.n	8006ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f003 0320 	and.w	r3, r3, #32
 8006b9e:	2b20      	cmp	r3, #32
 8006ba0:	d0f0      	beq.n	8006b84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bc8:	d901      	bls.n	8006bce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e018      	b.n	8006c00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	daf2      	bge.n	8006bbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2210      	movs	r2, #16
 8006bde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3301      	adds	r3, #1
 8006be4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bec:	d901      	bls.n	8006bf2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e006      	b.n	8006c00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f003 0310 	and.w	r3, r3, #16
 8006bfa:	2b10      	cmp	r3, #16
 8006bfc:	d0f0      	beq.n	8006be0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	460b      	mov	r3, r1
 8006c16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	78fb      	ldrb	r3, [r7, #3]
 8006c26:	68f9      	ldr	r1, [r7, #12]
 8006c28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b087      	sub	sp, #28
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 0306 	and.w	r3, r3, #6
 8006c56:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d102      	bne.n	8006c64 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	75fb      	strb	r3, [r7, #23]
 8006c62:	e00a      	b.n	8006c7a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d002      	beq.n	8006c70 <USB_GetDevSpeed+0x32>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2b06      	cmp	r3, #6
 8006c6e:	d102      	bne.n	8006c76 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006c70:	2302      	movs	r3, #2
 8006c72:	75fb      	strb	r3, [r7, #23]
 8006c74:	e001      	b.n	8006c7a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006c76:	230f      	movs	r3, #15
 8006c78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	785b      	ldrb	r3, [r3, #1]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d13a      	bne.n	8006d1a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006caa:	69da      	ldr	r2, [r3, #28]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	f003 030f 	and.w	r3, r3, #15
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	68f9      	ldr	r1, [r7, #12]
 8006cbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d155      	bne.n	8006d88 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	791b      	ldrb	r3, [r3, #4]
 8006cf6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cf8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	059b      	lsls	r3, r3, #22
 8006cfe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d00:	4313      	orrs	r3, r2
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	0151      	lsls	r1, r2, #5
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	440a      	add	r2, r1
 8006d0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	e036      	b.n	8006d88 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d20:	69da      	ldr	r2, [r3, #28]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	f003 030f 	and.w	r3, r3, #15
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d30:	041b      	lsls	r3, r3, #16
 8006d32:	68f9      	ldr	r1, [r7, #12]
 8006d34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d11a      	bne.n	8006d88 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	791b      	ldrb	r3, [r3, #4]
 8006d6c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d6e:	430b      	orrs	r3, r1
 8006d70:	4313      	orrs	r3, r2
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	0151      	lsls	r1, r2, #5
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	440a      	add	r2, r1
 8006d7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d86:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
	...

08006d98 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	785b      	ldrb	r3, [r3, #1]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d161      	bne.n	8006e78 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dca:	d11f      	bne.n	8006e0c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	0151      	lsls	r1, r2, #5
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	440a      	add	r2, r1
 8006de2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006de6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006dea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	0151      	lsls	r1, r2, #5
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	440a      	add	r2, r1
 8006e02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	f003 030f 	and.w	r3, r3, #15
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	43db      	mvns	r3, r3
 8006e26:	68f9      	ldr	r1, [r7, #12]
 8006e28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e36:	69da      	ldr	r2, [r3, #28]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	2101      	movs	r1, #1
 8006e42:	fa01 f303 	lsl.w	r3, r1, r3
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	43db      	mvns	r3, r3
 8006e4a:	68f9      	ldr	r1, [r7, #12]
 8006e4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e50:	4013      	ands	r3, r2
 8006e52:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	0159      	lsls	r1, r3, #5
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	440b      	add	r3, r1
 8006e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4b35      	ldr	r3, [pc, #212]	@ (8006f48 <USB_DeactivateEndpoint+0x1b0>)
 8006e72:	4013      	ands	r3, r2
 8006e74:	600b      	str	r3, [r1, #0]
 8006e76:	e060      	b.n	8006f3a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e8e:	d11f      	bne.n	8006ed0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	0151      	lsls	r1, r2, #5
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	440a      	add	r2, r1
 8006ea6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006eaa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006eae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	0151      	lsls	r1, r2, #5
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	440a      	add	r2, r1
 8006ec6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006eca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ece:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ed6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	f003 030f 	and.w	r3, r3, #15
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee6:	041b      	lsls	r3, r3, #16
 8006ee8:	43db      	mvns	r3, r3
 8006eea:	68f9      	ldr	r1, [r7, #12]
 8006eec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006efa:	69da      	ldr	r2, [r3, #28]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	f003 030f 	and.w	r3, r3, #15
 8006f04:	2101      	movs	r1, #1
 8006f06:	fa01 f303 	lsl.w	r3, r1, r3
 8006f0a:	041b      	lsls	r3, r3, #16
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	68f9      	ldr	r1, [r7, #12]
 8006f10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f14:	4013      	ands	r3, r2
 8006f16:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	0159      	lsls	r1, r3, #5
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	440b      	add	r3, r1
 8006f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f32:	4619      	mov	r1, r3
 8006f34:	4b05      	ldr	r3, [pc, #20]	@ (8006f4c <USB_DeactivateEndpoint+0x1b4>)
 8006f36:	4013      	ands	r3, r2
 8006f38:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3714      	adds	r7, #20
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr
 8006f48:	ec337800 	.word	0xec337800
 8006f4c:	eff37800 	.word	0xeff37800

08006f50 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08a      	sub	sp, #40	@ 0x28
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	785b      	ldrb	r3, [r3, #1]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	f040 817f 	bne.w	8007270 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d132      	bne.n	8006fe0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	0151      	lsls	r1, r2, #5
 8006f8c:	69fa      	ldr	r2, [r7, #28]
 8006f8e:	440a      	add	r2, r1
 8006f90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f94:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006f98:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006f9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	015a      	lsls	r2, r3, #5
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	0151      	lsls	r1, r2, #5
 8006fb0:	69fa      	ldr	r2, [r7, #28]
 8006fb2:	440a      	add	r2, r1
 8006fb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006fbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	69ba      	ldr	r2, [r7, #24]
 8006fce:	0151      	lsls	r1, r2, #5
 8006fd0:	69fa      	ldr	r2, [r7, #28]
 8006fd2:	440a      	add	r2, r1
 8006fd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fd8:	0cdb      	lsrs	r3, r3, #19
 8006fda:	04db      	lsls	r3, r3, #19
 8006fdc:	6113      	str	r3, [r2, #16]
 8006fde:	e097      	b.n	8007110 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	0151      	lsls	r1, r2, #5
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	440a      	add	r2, r1
 8006ff6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ffa:	0cdb      	lsrs	r3, r3, #19
 8006ffc:	04db      	lsls	r3, r3, #19
 8006ffe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	015a      	lsls	r2, r3, #5
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	4413      	add	r3, r2
 8007008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	69ba      	ldr	r2, [r7, #24]
 8007010:	0151      	lsls	r1, r2, #5
 8007012:	69fa      	ldr	r2, [r7, #28]
 8007014:	440a      	add	r2, r1
 8007016:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800701a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800701e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007022:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d11a      	bne.n	8007060 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	691a      	ldr	r2, [r3, #16]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	429a      	cmp	r2, r3
 8007034:	d903      	bls.n	800703e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	4413      	add	r3, r2
 8007046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	0151      	lsls	r1, r2, #5
 8007050:	69fa      	ldr	r2, [r7, #28]
 8007052:	440a      	add	r2, r1
 8007054:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007058:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800705c:	6113      	str	r3, [r2, #16]
 800705e:	e044      	b.n	80070ea <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	691a      	ldr	r2, [r3, #16]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	4413      	add	r3, r2
 800706a:	1e5a      	subs	r2, r3, #1
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	fbb2 f3f3 	udiv	r3, r2, r3
 8007074:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007082:	691a      	ldr	r2, [r3, #16]
 8007084:	8afb      	ldrh	r3, [r7, #22]
 8007086:	04d9      	lsls	r1, r3, #19
 8007088:	4ba4      	ldr	r3, [pc, #656]	@ (800731c <USB_EPStartXfer+0x3cc>)
 800708a:	400b      	ands	r3, r1
 800708c:	69b9      	ldr	r1, [r7, #24]
 800708e:	0148      	lsls	r0, r1, #5
 8007090:	69f9      	ldr	r1, [r7, #28]
 8007092:	4401      	add	r1, r0
 8007094:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007098:	4313      	orrs	r3, r2
 800709a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	791b      	ldrb	r3, [r3, #4]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d122      	bne.n	80070ea <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	0151      	lsls	r1, r2, #5
 80070b6:	69fa      	ldr	r2, [r7, #28]
 80070b8:	440a      	add	r2, r1
 80070ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070be:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80070c2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070d0:	691a      	ldr	r2, [r3, #16]
 80070d2:	8afb      	ldrh	r3, [r7, #22]
 80070d4:	075b      	lsls	r3, r3, #29
 80070d6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80070da:	69b9      	ldr	r1, [r7, #24]
 80070dc:	0148      	lsls	r0, r1, #5
 80070de:	69f9      	ldr	r1, [r7, #28]
 80070e0:	4401      	add	r1, r0
 80070e2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80070e6:	4313      	orrs	r3, r2
 80070e8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070f6:	691a      	ldr	r2, [r3, #16]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007100:	69b9      	ldr	r1, [r7, #24]
 8007102:	0148      	lsls	r0, r1, #5
 8007104:	69f9      	ldr	r1, [r7, #28]
 8007106:	4401      	add	r1, r0
 8007108:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800710c:	4313      	orrs	r3, r2
 800710e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d14b      	bne.n	80071ae <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d009      	beq.n	8007132 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800712a:	461a      	mov	r2, r3
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	791b      	ldrb	r3, [r3, #4]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d128      	bne.n	800718c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007146:	2b00      	cmp	r3, #0
 8007148:	d110      	bne.n	800716c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	0151      	lsls	r1, r2, #5
 800715c:	69fa      	ldr	r2, [r7, #28]
 800715e:	440a      	add	r2, r1
 8007160:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007164:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	e00f      	b.n	800718c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	0151      	lsls	r1, r2, #5
 800717e:	69fa      	ldr	r2, [r7, #28]
 8007180:	440a      	add	r2, r1
 8007182:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007186:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800718a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	0151      	lsls	r1, r2, #5
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	440a      	add	r2, r1
 80071a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071a6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80071aa:	6013      	str	r3, [r2, #0]
 80071ac:	e166      	b.n	800747c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	0151      	lsls	r1, r2, #5
 80071c0:	69fa      	ldr	r2, [r7, #28]
 80071c2:	440a      	add	r2, r1
 80071c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80071cc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	791b      	ldrb	r3, [r3, #4]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d015      	beq.n	8007202 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f000 814e 	beq.w	800747c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	f003 030f 	and.w	r3, r3, #15
 80071f0:	2101      	movs	r1, #1
 80071f2:	fa01 f303 	lsl.w	r3, r1, r3
 80071f6:	69f9      	ldr	r1, [r7, #28]
 80071f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071fc:	4313      	orrs	r3, r2
 80071fe:	634b      	str	r3, [r1, #52]	@ 0x34
 8007200:	e13c      	b.n	800747c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800720e:	2b00      	cmp	r3, #0
 8007210:	d110      	bne.n	8007234 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	4413      	add	r3, r2
 800721a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	0151      	lsls	r1, r2, #5
 8007224:	69fa      	ldr	r2, [r7, #28]
 8007226:	440a      	add	r2, r1
 8007228:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800722c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007230:	6013      	str	r3, [r2, #0]
 8007232:	e00f      	b.n	8007254 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	0151      	lsls	r1, r2, #5
 8007246:	69fa      	ldr	r2, [r7, #28]
 8007248:	440a      	add	r2, r1
 800724a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800724e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007252:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	68d9      	ldr	r1, [r3, #12]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	781a      	ldrb	r2, [r3, #0]
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	b298      	uxth	r0, r3
 8007262:	79fb      	ldrb	r3, [r7, #7]
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	4603      	mov	r3, r0
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 f9b9 	bl	80075e0 <USB_WritePacket>
 800726e:	e105      	b.n	800747c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	69ba      	ldr	r2, [r7, #24]
 8007280:	0151      	lsls	r1, r2, #5
 8007282:	69fa      	ldr	r2, [r7, #28]
 8007284:	440a      	add	r2, r1
 8007286:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800728a:	0cdb      	lsrs	r3, r3, #19
 800728c:	04db      	lsls	r3, r3, #19
 800728e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	4413      	add	r3, r2
 8007298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	0151      	lsls	r1, r2, #5
 80072a2:	69fa      	ldr	r2, [r7, #28]
 80072a4:	440a      	add	r2, r1
 80072a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072aa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80072ae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80072b2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d132      	bne.n	8007320 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	689a      	ldr	r2, [r3, #8]
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072de:	691a      	ldr	r2, [r3, #16]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072e8:	69b9      	ldr	r1, [r7, #24]
 80072ea:	0148      	lsls	r0, r1, #5
 80072ec:	69f9      	ldr	r1, [r7, #28]
 80072ee:	4401      	add	r1, r0
 80072f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80072f4:	4313      	orrs	r3, r2
 80072f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	0151      	lsls	r1, r2, #5
 800730a:	69fa      	ldr	r2, [r7, #28]
 800730c:	440a      	add	r2, r1
 800730e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007312:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007316:	6113      	str	r3, [r2, #16]
 8007318:	e062      	b.n	80073e0 <USB_EPStartXfer+0x490>
 800731a:	bf00      	nop
 800731c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d123      	bne.n	8007370 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	4413      	add	r3, r2
 8007330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007334:	691a      	ldr	r2, [r3, #16]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800733e:	69b9      	ldr	r1, [r7, #24]
 8007340:	0148      	lsls	r0, r1, #5
 8007342:	69f9      	ldr	r1, [r7, #28]
 8007344:	4401      	add	r1, r0
 8007346:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800734a:	4313      	orrs	r3, r2
 800734c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	4413      	add	r3, r2
 8007356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	0151      	lsls	r1, r2, #5
 8007360:	69fa      	ldr	r2, [r7, #28]
 8007362:	440a      	add	r2, r1
 8007364:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007368:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800736c:	6113      	str	r3, [r2, #16]
 800736e:	e037      	b.n	80073e0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	691a      	ldr	r2, [r3, #16]
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	4413      	add	r3, r2
 800737a:	1e5a      	subs	r2, r3, #1
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	fbb2 f3f3 	udiv	r3, r2, r3
 8007384:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	8afa      	ldrh	r2, [r7, #22]
 800738c:	fb03 f202 	mul.w	r2, r3, r2
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a0:	691a      	ldr	r2, [r3, #16]
 80073a2:	8afb      	ldrh	r3, [r7, #22]
 80073a4:	04d9      	lsls	r1, r3, #19
 80073a6:	4b38      	ldr	r3, [pc, #224]	@ (8007488 <USB_EPStartXfer+0x538>)
 80073a8:	400b      	ands	r3, r1
 80073aa:	69b9      	ldr	r1, [r7, #24]
 80073ac:	0148      	lsls	r0, r1, #5
 80073ae:	69f9      	ldr	r1, [r7, #28]
 80073b0:	4401      	add	r1, r0
 80073b2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80073b6:	4313      	orrs	r3, r2
 80073b8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073c6:	691a      	ldr	r2, [r3, #16]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073d0:	69b9      	ldr	r1, [r7, #24]
 80073d2:	0148      	lsls	r0, r1, #5
 80073d4:	69f9      	ldr	r1, [r7, #28]
 80073d6:	4401      	add	r1, r0
 80073d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80073dc:	4313      	orrs	r3, r2
 80073de:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80073e0:	79fb      	ldrb	r3, [r7, #7]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d10d      	bne.n	8007402 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d009      	beq.n	8007402 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	68d9      	ldr	r1, [r3, #12]
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073fe:	460a      	mov	r2, r1
 8007400:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	791b      	ldrb	r3, [r3, #4]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d128      	bne.n	800745c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007416:	2b00      	cmp	r3, #0
 8007418:	d110      	bne.n	800743c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	0151      	lsls	r1, r2, #5
 800742c:	69fa      	ldr	r2, [r7, #28]
 800742e:	440a      	add	r2, r1
 8007430:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007434:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	e00f      	b.n	800745c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	4413      	add	r3, r2
 8007444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	0151      	lsls	r1, r2, #5
 800744e:	69fa      	ldr	r2, [r7, #28]
 8007450:	440a      	add	r2, r1
 8007452:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800745a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	015a      	lsls	r2, r3, #5
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	4413      	add	r3, r2
 8007464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	0151      	lsls	r1, r2, #5
 800746e:	69fa      	ldr	r2, [r7, #28]
 8007470:	440a      	add	r2, r1
 8007472:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007476:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800747a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3720      	adds	r7, #32
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	1ff80000 	.word	0x1ff80000

0800748c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	785b      	ldrb	r3, [r3, #1]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d14a      	bne.n	8007540 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074c2:	f040 8086 	bne.w	80075d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	7812      	ldrb	r2, [r2, #0]
 80074da:	0151      	lsls	r1, r2, #5
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	440a      	add	r2, r1
 80074e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80074e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	683a      	ldr	r2, [r7, #0]
 80074fc:	7812      	ldrb	r2, [r2, #0]
 80074fe:	0151      	lsls	r1, r2, #5
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	440a      	add	r2, r1
 8007504:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007508:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800750c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3301      	adds	r3, #1
 8007512:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f242 7210 	movw	r2, #10000	@ 0x2710
 800751a:	4293      	cmp	r3, r2
 800751c:	d902      	bls.n	8007524 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	75fb      	strb	r3, [r7, #23]
          break;
 8007522:	e056      	b.n	80075d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	015a      	lsls	r2, r3, #5
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	4413      	add	r3, r2
 800752e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007538:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800753c:	d0e7      	beq.n	800750e <USB_EPStopXfer+0x82>
 800753e:	e048      	b.n	80075d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007554:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007558:	d13b      	bne.n	80075d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	4413      	add	r3, r2
 8007564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	7812      	ldrb	r2, [r2, #0]
 800756e:	0151      	lsls	r1, r2, #5
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	440a      	add	r2, r1
 8007574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007578:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800757c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	7812      	ldrb	r2, [r2, #0]
 8007592:	0151      	lsls	r1, r2, #5
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	440a      	add	r2, r1
 8007598:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800759c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80075a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3301      	adds	r3, #1
 80075a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d902      	bls.n	80075b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	75fb      	strb	r3, [r7, #23]
          break;
 80075b6:	e00c      	b.n	80075d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075d0:	d0e7      	beq.n	80075a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80075d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	371c      	adds	r7, #28
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b089      	sub	sp, #36	@ 0x24
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	4611      	mov	r1, r2
 80075ec:	461a      	mov	r2, r3
 80075ee:	460b      	mov	r3, r1
 80075f0:	71fb      	strb	r3, [r7, #7]
 80075f2:	4613      	mov	r3, r2
 80075f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80075fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007602:	2b00      	cmp	r3, #0
 8007604:	d123      	bne.n	800764e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007606:	88bb      	ldrh	r3, [r7, #4]
 8007608:	3303      	adds	r3, #3
 800760a:	089b      	lsrs	r3, r3, #2
 800760c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800760e:	2300      	movs	r3, #0
 8007610:	61bb      	str	r3, [r7, #24]
 8007612:	e018      	b.n	8007646 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007614:	79fb      	ldrb	r3, [r7, #7]
 8007616:	031a      	lsls	r2, r3, #12
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	4413      	add	r3, r2
 800761c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007620:	461a      	mov	r2, r3
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	3301      	adds	r3, #1
 800762c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	3301      	adds	r3, #1
 8007632:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	3301      	adds	r3, #1
 8007638:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	3301      	adds	r3, #1
 800763e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	3301      	adds	r3, #1
 8007644:	61bb      	str	r3, [r7, #24]
 8007646:	69ba      	ldr	r2, [r7, #24]
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	429a      	cmp	r2, r3
 800764c:	d3e2      	bcc.n	8007614 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3724      	adds	r7, #36	@ 0x24
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800765c:	b480      	push	{r7}
 800765e:	b08b      	sub	sp, #44	@ 0x2c
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	4613      	mov	r3, r2
 8007668:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007672:	88fb      	ldrh	r3, [r7, #6]
 8007674:	089b      	lsrs	r3, r3, #2
 8007676:	b29b      	uxth	r3, r3
 8007678:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800767a:	88fb      	ldrh	r3, [r7, #6]
 800767c:	f003 0303 	and.w	r3, r3, #3
 8007680:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007682:	2300      	movs	r3, #0
 8007684:	623b      	str	r3, [r7, #32]
 8007686:	e014      	b.n	80076b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007692:	601a      	str	r2, [r3, #0]
    pDest++;
 8007694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007696:	3301      	adds	r3, #1
 8007698:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800769a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769c:	3301      	adds	r3, #1
 800769e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80076a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a2:	3301      	adds	r3, #1
 80076a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80076a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a8:	3301      	adds	r3, #1
 80076aa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	3301      	adds	r3, #1
 80076b0:	623b      	str	r3, [r7, #32]
 80076b2:	6a3a      	ldr	r2, [r7, #32]
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d3e6      	bcc.n	8007688 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80076ba:	8bfb      	ldrh	r3, [r7, #30]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d01e      	beq.n	80076fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076ca:	461a      	mov	r2, r3
 80076cc:	f107 0310 	add.w	r3, r7, #16
 80076d0:	6812      	ldr	r2, [r2, #0]
 80076d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	00db      	lsls	r3, r3, #3
 80076dc:	fa22 f303 	lsr.w	r3, r2, r3
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e4:	701a      	strb	r2, [r3, #0]
      i++;
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	3301      	adds	r3, #1
 80076ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80076ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ee:	3301      	adds	r3, #1
 80076f0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80076f2:	8bfb      	ldrh	r3, [r7, #30]
 80076f4:	3b01      	subs	r3, #1
 80076f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80076f8:	8bfb      	ldrh	r3, [r7, #30]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1ea      	bne.n	80076d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80076fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007700:	4618      	mov	r0, r3
 8007702:	372c      	adds	r7, #44	@ 0x2c
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	785b      	ldrb	r3, [r3, #1]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d12c      	bne.n	8007782 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	db12      	blt.n	8007760 <USB_EPSetStall+0x54>
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00f      	beq.n	8007760 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	0151      	lsls	r1, r2, #5
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	440a      	add	r2, r1
 8007756:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800775a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800775e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	0151      	lsls	r1, r2, #5
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	440a      	add	r2, r1
 8007776:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800777a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800777e:	6013      	str	r3, [r2, #0]
 8007780:	e02b      	b.n	80077da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	4413      	add	r3, r2
 800778a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	db12      	blt.n	80077ba <USB_EPSetStall+0xae>
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00f      	beq.n	80077ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	0151      	lsls	r1, r2, #5
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	440a      	add	r2, r1
 80077b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80077b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	015a      	lsls	r2, r3, #5
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	4413      	add	r3, r2
 80077c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	0151      	lsls	r1, r2, #5
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	440a      	add	r2, r1
 80077d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80077d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	785b      	ldrb	r3, [r3, #1]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d128      	bne.n	8007856 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	0151      	lsls	r1, r2, #5
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	440a      	add	r2, r1
 800781a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800781e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007822:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	791b      	ldrb	r3, [r3, #4]
 8007828:	2b03      	cmp	r3, #3
 800782a:	d003      	beq.n	8007834 <USB_EPClearStall+0x4c>
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	791b      	ldrb	r3, [r3, #4]
 8007830:	2b02      	cmp	r3, #2
 8007832:	d138      	bne.n	80078a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	0151      	lsls	r1, r2, #5
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	440a      	add	r2, r1
 800784a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800784e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007852:	6013      	str	r3, [r2, #0]
 8007854:	e027      	b.n	80078a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	015a      	lsls	r2, r3, #5
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4413      	add	r3, r2
 800785e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	0151      	lsls	r1, r2, #5
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	440a      	add	r2, r1
 800786c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007870:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007874:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	791b      	ldrb	r3, [r3, #4]
 800787a:	2b03      	cmp	r3, #3
 800787c:	d003      	beq.n	8007886 <USB_EPClearStall+0x9e>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	791b      	ldrb	r3, [r3, #4]
 8007882:	2b02      	cmp	r3, #2
 8007884:	d10f      	bne.n	80078a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	4413      	add	r3, r2
 800788e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	0151      	lsls	r1, r2, #5
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	440a      	add	r2, r1
 800789c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80078d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	011b      	lsls	r3, r3, #4
 80078e4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80078e8:	68f9      	ldr	r1, [r7, #12]
 80078ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078ee:	4313      	orrs	r3, r2
 80078f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800791a:	f023 0303 	bic.w	r3, r3, #3
 800791e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800792e:	f023 0302 	bic.w	r3, r3, #2
 8007932:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3714      	adds	r7, #20
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007942:	b480      	push	{r7}
 8007944:	b085      	sub	sp, #20
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800795c:	f023 0303 	bic.w	r3, r3, #3
 8007960:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007970:	f043 0302 	orr.w	r3, r3, #2
 8007974:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	4013      	ands	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800799c:	68fb      	ldr	r3, [r7, #12]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b085      	sub	sp, #20
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	4013      	ands	r3, r2
 80079cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	0c1b      	lsrs	r3, r3, #16
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80079de:	b480      	push	{r7}
 80079e0:	b085      	sub	sp, #20
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	4013      	ands	r3, r2
 8007a00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	b29b      	uxth	r3, r3
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3714      	adds	r7, #20
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b085      	sub	sp, #20
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007a22:	78fb      	ldrb	r3, [r7, #3]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a40:	68bb      	ldr	r3, [r7, #8]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b087      	sub	sp, #28
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	460b      	mov	r3, r1
 8007a58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a70:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007a72:	78fb      	ldrb	r3, [r7, #3]
 8007a74:	f003 030f 	and.w	r3, r3, #15
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a7e:	01db      	lsls	r3, r3, #7
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007a88:	78fb      	ldrb	r3, [r7, #3]
 8007a8a:	015a      	lsls	r2, r3, #5
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	4013      	ands	r3, r2
 8007a9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b083      	sub	sp, #12
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b085      	sub	sp, #20
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ae0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007ae4:	f023 0307 	bic.w	r3, r3, #7
 8007ae8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007afc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b087      	sub	sp, #28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	460b      	mov	r3, r1
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	333c      	adds	r3, #60	@ 0x3c
 8007b22:	3304      	adds	r3, #4
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	4a26      	ldr	r2, [pc, #152]	@ (8007bc4 <USB_EP0_OutStart+0xb8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d90a      	bls.n	8007b46 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b40:	d101      	bne.n	8007b46 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	e037      	b.n	8007bb6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	2300      	movs	r3, #0
 8007b50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b74:	f043 0318 	orr.w	r3, r3, #24
 8007b78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b88:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007b8c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007b8e:	7afb      	ldrb	r3, [r7, #11]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d10f      	bne.n	8007bb4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007bb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	371c      	adds	r7, #28
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	4f54300a 	.word	0x4f54300a

08007bc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007be0:	d901      	bls.n	8007be6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e01b      	b.n	8007c1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	daf2      	bge.n	8007bd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	f043 0201 	orr.w	r2, r3, #1
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	3301      	adds	r3, #1
 8007c02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c0a:	d901      	bls.n	8007c10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e006      	b.n	8007c1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d0f0      	beq.n	8007bfe <USB_CoreReset+0x36>

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
	...

08007c2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007c38:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007c3c:	f002 fcac 	bl	800a598 <USBD_static_malloc>
 8007c40:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d109      	bne.n	8007c5c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	32b0      	adds	r2, #176	@ 0xb0
 8007c52:	2100      	movs	r1, #0
 8007c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007c58:	2302      	movs	r3, #2
 8007c5a:	e0d4      	b.n	8007e06 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007c5c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007c60:	2100      	movs	r1, #0
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f002 fd10 	bl	800a688 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	32b0      	adds	r2, #176	@ 0xb0
 8007c72:	68f9      	ldr	r1, [r7, #12]
 8007c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	32b0      	adds	r2, #176	@ 0xb0
 8007c82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	7c1b      	ldrb	r3, [r3, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d138      	bne.n	8007d06 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007c94:	4b5e      	ldr	r3, [pc, #376]	@ (8007e10 <USBD_CDC_Init+0x1e4>)
 8007c96:	7819      	ldrb	r1, [r3, #0]
 8007c98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f002 fb57 	bl	800a352 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ca4:	4b5a      	ldr	r3, [pc, #360]	@ (8007e10 <USBD_CDC_Init+0x1e4>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	f003 020f 	and.w	r2, r3, #15
 8007cac:	6879      	ldr	r1, [r7, #4]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4413      	add	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	440b      	add	r3, r1
 8007cb8:	3324      	adds	r3, #36	@ 0x24
 8007cba:	2201      	movs	r2, #1
 8007cbc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007cbe:	4b55      	ldr	r3, [pc, #340]	@ (8007e14 <USBD_CDC_Init+0x1e8>)
 8007cc0:	7819      	ldrb	r1, [r3, #0]
 8007cc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f002 fb42 	bl	800a352 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007cce:	4b51      	ldr	r3, [pc, #324]	@ (8007e14 <USBD_CDC_Init+0x1e8>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	f003 020f 	and.w	r2, r3, #15
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	440b      	add	r3, r1
 8007ce2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007cea:	4b4b      	ldr	r3, [pc, #300]	@ (8007e18 <USBD_CDC_Init+0x1ec>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	f003 020f 	and.w	r2, r3, #15
 8007cf2:	6879      	ldr	r1, [r7, #4]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	440b      	add	r3, r1
 8007cfe:	3326      	adds	r3, #38	@ 0x26
 8007d00:	2210      	movs	r2, #16
 8007d02:	801a      	strh	r2, [r3, #0]
 8007d04:	e035      	b.n	8007d72 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007d06:	4b42      	ldr	r3, [pc, #264]	@ (8007e10 <USBD_CDC_Init+0x1e4>)
 8007d08:	7819      	ldrb	r1, [r3, #0]
 8007d0a:	2340      	movs	r3, #64	@ 0x40
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f002 fb1f 	bl	800a352 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007d14:	4b3e      	ldr	r3, [pc, #248]	@ (8007e10 <USBD_CDC_Init+0x1e4>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	f003 020f 	and.w	r2, r3, #15
 8007d1c:	6879      	ldr	r1, [r7, #4]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	440b      	add	r3, r1
 8007d28:	3324      	adds	r3, #36	@ 0x24
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007d2e:	4b39      	ldr	r3, [pc, #228]	@ (8007e14 <USBD_CDC_Init+0x1e8>)
 8007d30:	7819      	ldrb	r1, [r3, #0]
 8007d32:	2340      	movs	r3, #64	@ 0x40
 8007d34:	2202      	movs	r2, #2
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f002 fb0b 	bl	800a352 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007d3c:	4b35      	ldr	r3, [pc, #212]	@ (8007e14 <USBD_CDC_Init+0x1e8>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	f003 020f 	and.w	r2, r3, #15
 8007d44:	6879      	ldr	r1, [r7, #4]
 8007d46:	4613      	mov	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	440b      	add	r3, r1
 8007d50:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007d54:	2201      	movs	r2, #1
 8007d56:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007d58:	4b2f      	ldr	r3, [pc, #188]	@ (8007e18 <USBD_CDC_Init+0x1ec>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	f003 020f 	and.w	r2, r3, #15
 8007d60:	6879      	ldr	r1, [r7, #4]
 8007d62:	4613      	mov	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4413      	add	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	440b      	add	r3, r1
 8007d6c:	3326      	adds	r3, #38	@ 0x26
 8007d6e:	2210      	movs	r2, #16
 8007d70:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007d72:	4b29      	ldr	r3, [pc, #164]	@ (8007e18 <USBD_CDC_Init+0x1ec>)
 8007d74:	7819      	ldrb	r1, [r3, #0]
 8007d76:	2308      	movs	r3, #8
 8007d78:	2203      	movs	r2, #3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f002 fae9 	bl	800a352 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007d80:	4b25      	ldr	r3, [pc, #148]	@ (8007e18 <USBD_CDC_Init+0x1ec>)
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	f003 020f 	and.w	r2, r3, #15
 8007d88:	6879      	ldr	r1, [r7, #4]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	440b      	add	r3, r1
 8007d94:	3324      	adds	r3, #36	@ 0x24
 8007d96:	2201      	movs	r2, #1
 8007d98:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	33b0      	adds	r3, #176	@ 0xb0
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4413      	add	r3, r2
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e018      	b.n	8007e06 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	7c1b      	ldrb	r3, [r3, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10a      	bne.n	8007df2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8007e14 <USBD_CDC_Init+0x1e8>)
 8007dde:	7819      	ldrb	r1, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007de6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f002 fba0 	bl	800a530 <USBD_LL_PrepareReceive>
 8007df0:	e008      	b.n	8007e04 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007df2:	4b08      	ldr	r3, [pc, #32]	@ (8007e14 <USBD_CDC_Init+0x1e8>)
 8007df4:	7819      	ldrb	r1, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007dfc:	2340      	movs	r3, #64	@ 0x40
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f002 fb96 	bl	800a530 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	20000093 	.word	0x20000093
 8007e14:	20000094 	.word	0x20000094
 8007e18:	20000095 	.word	0x20000095

08007e1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007e28:	4b3a      	ldr	r3, [pc, #232]	@ (8007f14 <USBD_CDC_DeInit+0xf8>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f002 fab5 	bl	800a39e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007e34:	4b37      	ldr	r3, [pc, #220]	@ (8007f14 <USBD_CDC_DeInit+0xf8>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	f003 020f 	and.w	r2, r3, #15
 8007e3c:	6879      	ldr	r1, [r7, #4]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	440b      	add	r3, r1
 8007e48:	3324      	adds	r3, #36	@ 0x24
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007e4e:	4b32      	ldr	r3, [pc, #200]	@ (8007f18 <USBD_CDC_DeInit+0xfc>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f002 faa2 	bl	800a39e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8007f18 <USBD_CDC_DeInit+0xfc>)
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	f003 020f 	and.w	r2, r3, #15
 8007e62:	6879      	ldr	r1, [r7, #4]
 8007e64:	4613      	mov	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	440b      	add	r3, r1
 8007e6e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007e72:	2200      	movs	r2, #0
 8007e74:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007e76:	4b29      	ldr	r3, [pc, #164]	@ (8007f1c <USBD_CDC_DeInit+0x100>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f002 fa8e 	bl	800a39e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007e82:	4b26      	ldr	r3, [pc, #152]	@ (8007f1c <USBD_CDC_DeInit+0x100>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	f003 020f 	and.w	r2, r3, #15
 8007e8a:	6879      	ldr	r1, [r7, #4]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	440b      	add	r3, r1
 8007e96:	3324      	adds	r3, #36	@ 0x24
 8007e98:	2200      	movs	r2, #0
 8007e9a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8007f1c <USBD_CDC_DeInit+0x100>)
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	f003 020f 	and.w	r2, r3, #15
 8007ea4:	6879      	ldr	r1, [r7, #4]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	440b      	add	r3, r1
 8007eb0:	3326      	adds	r3, #38	@ 0x26
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	32b0      	adds	r2, #176	@ 0xb0
 8007ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d01f      	beq.n	8007f08 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	33b0      	adds	r3, #176	@ 0xb0
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	32b0      	adds	r2, #176	@ 0xb0
 8007ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f002 fb62 	bl	800a5b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	32b0      	adds	r2, #176	@ 0xb0
 8007efa:	2100      	movs	r1, #0
 8007efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	20000093 	.word	0x20000093
 8007f18:	20000094 	.word	0x20000094
 8007f1c:	20000095 	.word	0x20000095

08007f20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	32b0      	adds	r2, #176	@ 0xb0
 8007f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f38:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e0bf      	b.n	80080d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d050      	beq.n	8007ffe <USBD_CDC_Setup+0xde>
 8007f5c:	2b20      	cmp	r3, #32
 8007f5e:	f040 80af 	bne.w	80080c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	88db      	ldrh	r3, [r3, #6]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d03a      	beq.n	8007fe0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	b25b      	sxtb	r3, r3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	da1b      	bge.n	8007fac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	33b0      	adds	r3, #176	@ 0xb0
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007f8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	88d2      	ldrh	r2, [r2, #6]
 8007f90:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	88db      	ldrh	r3, [r3, #6]
 8007f96:	2b07      	cmp	r3, #7
 8007f98:	bf28      	it	cs
 8007f9a:	2307      	movcs	r3, #7
 8007f9c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	89fa      	ldrh	r2, [r7, #14]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f001 fd93 	bl	8009ad0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007faa:	e090      	b.n	80080ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	785a      	ldrb	r2, [r3, #1]
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	88db      	ldrh	r3, [r3, #6]
 8007fba:	2b3f      	cmp	r3, #63	@ 0x3f
 8007fbc:	d803      	bhi.n	8007fc6 <USBD_CDC_Setup+0xa6>
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	88db      	ldrh	r3, [r3, #6]
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	e000      	b.n	8007fc8 <USBD_CDC_Setup+0xa8>
 8007fc6:	2240      	movs	r2, #64	@ 0x40
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007fce:	6939      	ldr	r1, [r7, #16]
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f001 fda5 	bl	8009b28 <USBD_CtlPrepareRx>
      break;
 8007fde:	e076      	b.n	80080ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	33b0      	adds	r3, #176	@ 0xb0
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	7850      	ldrb	r0, [r2, #1]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	4798      	blx	r3
      break;
 8007ffc:	e067      	b.n	80080ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	785b      	ldrb	r3, [r3, #1]
 8008002:	2b0b      	cmp	r3, #11
 8008004:	d851      	bhi.n	80080aa <USBD_CDC_Setup+0x18a>
 8008006:	a201      	add	r2, pc, #4	@ (adr r2, 800800c <USBD_CDC_Setup+0xec>)
 8008008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800c:	0800803d 	.word	0x0800803d
 8008010:	080080b9 	.word	0x080080b9
 8008014:	080080ab 	.word	0x080080ab
 8008018:	080080ab 	.word	0x080080ab
 800801c:	080080ab 	.word	0x080080ab
 8008020:	080080ab 	.word	0x080080ab
 8008024:	080080ab 	.word	0x080080ab
 8008028:	080080ab 	.word	0x080080ab
 800802c:	080080ab 	.word	0x080080ab
 8008030:	080080ab 	.word	0x080080ab
 8008034:	08008067 	.word	0x08008067
 8008038:	08008091 	.word	0x08008091
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b03      	cmp	r3, #3
 8008046:	d107      	bne.n	8008058 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008048:	f107 030a 	add.w	r3, r7, #10
 800804c:	2202      	movs	r2, #2
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f001 fd3d 	bl	8009ad0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008056:	e032      	b.n	80080be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f001 fcbb 	bl	80099d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008060:	2303      	movs	r3, #3
 8008062:	75fb      	strb	r3, [r7, #23]
          break;
 8008064:	e02b      	b.n	80080be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b03      	cmp	r3, #3
 8008070:	d107      	bne.n	8008082 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008072:	f107 030d 	add.w	r3, r7, #13
 8008076:	2201      	movs	r2, #1
 8008078:	4619      	mov	r1, r3
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f001 fd28 	bl	8009ad0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008080:	e01d      	b.n	80080be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f001 fca6 	bl	80099d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800808a:	2303      	movs	r3, #3
 800808c:	75fb      	strb	r3, [r7, #23]
          break;
 800808e:	e016      	b.n	80080be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b03      	cmp	r3, #3
 800809a:	d00f      	beq.n	80080bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f001 fc99 	bl	80099d6 <USBD_CtlError>
            ret = USBD_FAIL;
 80080a4:	2303      	movs	r3, #3
 80080a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80080a8:	e008      	b.n	80080bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f001 fc92 	bl	80099d6 <USBD_CtlError>
          ret = USBD_FAIL;
 80080b2:	2303      	movs	r3, #3
 80080b4:	75fb      	strb	r3, [r7, #23]
          break;
 80080b6:	e002      	b.n	80080be <USBD_CDC_Setup+0x19e>
          break;
 80080b8:	bf00      	nop
 80080ba:	e008      	b.n	80080ce <USBD_CDC_Setup+0x1ae>
          break;
 80080bc:	bf00      	nop
      }
      break;
 80080be:	e006      	b.n	80080ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f001 fc87 	bl	80099d6 <USBD_CtlError>
      ret = USBD_FAIL;
 80080c8:	2303      	movs	r3, #3
 80080ca:	75fb      	strb	r3, [r7, #23]
      break;
 80080cc:	bf00      	nop
  }

  return (uint8_t)ret;
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3718      	adds	r7, #24
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	32b0      	adds	r2, #176	@ 0xb0
 80080f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80080fe:	2303      	movs	r3, #3
 8008100:	e065      	b.n	80081ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	32b0      	adds	r2, #176	@ 0xb0
 800810c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008110:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008112:	78fb      	ldrb	r3, [r7, #3]
 8008114:	f003 020f 	and.w	r2, r3, #15
 8008118:	6879      	ldr	r1, [r7, #4]
 800811a:	4613      	mov	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	440b      	add	r3, r1
 8008124:	3318      	adds	r3, #24
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d02f      	beq.n	800818c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800812c:	78fb      	ldrb	r3, [r7, #3]
 800812e:	f003 020f 	and.w	r2, r3, #15
 8008132:	6879      	ldr	r1, [r7, #4]
 8008134:	4613      	mov	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	440b      	add	r3, r1
 800813e:	3318      	adds	r3, #24
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	78fb      	ldrb	r3, [r7, #3]
 8008144:	f003 010f 	and.w	r1, r3, #15
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	460b      	mov	r3, r1
 800814c:	00db      	lsls	r3, r3, #3
 800814e:	440b      	add	r3, r1
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4403      	add	r3, r0
 8008154:	331c      	adds	r3, #28
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	fbb2 f1f3 	udiv	r1, r2, r3
 800815c:	fb01 f303 	mul.w	r3, r1, r3
 8008160:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008162:	2b00      	cmp	r3, #0
 8008164:	d112      	bne.n	800818c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008166:	78fb      	ldrb	r3, [r7, #3]
 8008168:	f003 020f 	and.w	r2, r3, #15
 800816c:	6879      	ldr	r1, [r7, #4]
 800816e:	4613      	mov	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4413      	add	r3, r2
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	440b      	add	r3, r1
 8008178:	3318      	adds	r3, #24
 800817a:	2200      	movs	r2, #0
 800817c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800817e:	78f9      	ldrb	r1, [r7, #3]
 8008180:	2300      	movs	r3, #0
 8008182:	2200      	movs	r2, #0
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f002 f9b2 	bl	800a4ee <USBD_LL_Transmit>
 800818a:	e01f      	b.n	80081cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2200      	movs	r2, #0
 8008190:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	33b0      	adds	r3, #176	@ 0xb0
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d010      	beq.n	80081cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	33b0      	adds	r3, #176	@ 0xb0
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4413      	add	r3, r2
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80081c8:	78fa      	ldrb	r2, [r7, #3]
 80081ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	460b      	mov	r3, r1
 80081e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	32b0      	adds	r2, #176	@ 0xb0
 80081ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	32b0      	adds	r2, #176	@ 0xb0
 80081fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008204:	2303      	movs	r3, #3
 8008206:	e01a      	b.n	800823e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008208:	78fb      	ldrb	r3, [r7, #3]
 800820a:	4619      	mov	r1, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f002 f9b0 	bl	800a572 <USBD_LL_GetRxDataSize>
 8008212:	4602      	mov	r2, r0
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	33b0      	adds	r3, #176	@ 0xb0
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008238:	4611      	mov	r1, r2
 800823a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b084      	sub	sp, #16
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	32b0      	adds	r2, #176	@ 0xb0
 8008258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800825c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008264:	2303      	movs	r3, #3
 8008266:	e024      	b.n	80082b2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	33b0      	adds	r3, #176	@ 0xb0
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d019      	beq.n	80082b0 <USBD_CDC_EP0_RxReady+0x6a>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008282:	2bff      	cmp	r3, #255	@ 0xff
 8008284:	d014      	beq.n	80082b0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	33b0      	adds	r3, #176	@ 0xb0
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800829e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80082a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	22ff      	movs	r2, #255	@ 0xff
 80082ac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80082c4:	2182      	movs	r1, #130	@ 0x82
 80082c6:	4818      	ldr	r0, [pc, #96]	@ (8008328 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80082c8:	f000 fd4f 	bl	8008d6a <USBD_GetEpDesc>
 80082cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80082ce:	2101      	movs	r1, #1
 80082d0:	4815      	ldr	r0, [pc, #84]	@ (8008328 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80082d2:	f000 fd4a 	bl	8008d6a <USBD_GetEpDesc>
 80082d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80082d8:	2181      	movs	r1, #129	@ 0x81
 80082da:	4813      	ldr	r0, [pc, #76]	@ (8008328 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80082dc:	f000 fd45 	bl	8008d6a <USBD_GetEpDesc>
 80082e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	2210      	movs	r2, #16
 80082ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d006      	beq.n	8008302 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082fc:	711a      	strb	r2, [r3, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d006      	beq.n	8008316 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008310:	711a      	strb	r2, [r3, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2243      	movs	r2, #67	@ 0x43
 800831a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800831c:	4b02      	ldr	r3, [pc, #8]	@ (8008328 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800831e:	4618      	mov	r0, r3
 8008320:	3718      	adds	r7, #24
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	20000050 	.word	0x20000050

0800832c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008334:	2182      	movs	r1, #130	@ 0x82
 8008336:	4818      	ldr	r0, [pc, #96]	@ (8008398 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008338:	f000 fd17 	bl	8008d6a <USBD_GetEpDesc>
 800833c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800833e:	2101      	movs	r1, #1
 8008340:	4815      	ldr	r0, [pc, #84]	@ (8008398 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008342:	f000 fd12 	bl	8008d6a <USBD_GetEpDesc>
 8008346:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008348:	2181      	movs	r1, #129	@ 0x81
 800834a:	4813      	ldr	r0, [pc, #76]	@ (8008398 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800834c:	f000 fd0d 	bl	8008d6a <USBD_GetEpDesc>
 8008350:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	2210      	movs	r2, #16
 800835c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d006      	beq.n	8008372 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	2200      	movs	r2, #0
 8008368:	711a      	strb	r2, [r3, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	f042 0202 	orr.w	r2, r2, #2
 8008370:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d006      	beq.n	8008386 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	711a      	strb	r2, [r3, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f042 0202 	orr.w	r2, r2, #2
 8008384:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2243      	movs	r2, #67	@ 0x43
 800838a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800838c:	4b02      	ldr	r3, [pc, #8]	@ (8008398 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800838e:	4618      	mov	r0, r3
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20000050 	.word	0x20000050

0800839c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80083a4:	2182      	movs	r1, #130	@ 0x82
 80083a6:	4818      	ldr	r0, [pc, #96]	@ (8008408 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80083a8:	f000 fcdf 	bl	8008d6a <USBD_GetEpDesc>
 80083ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80083ae:	2101      	movs	r1, #1
 80083b0:	4815      	ldr	r0, [pc, #84]	@ (8008408 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80083b2:	f000 fcda 	bl	8008d6a <USBD_GetEpDesc>
 80083b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80083b8:	2181      	movs	r1, #129	@ 0x81
 80083ba:	4813      	ldr	r0, [pc, #76]	@ (8008408 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80083bc:	f000 fcd5 	bl	8008d6a <USBD_GetEpDesc>
 80083c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	2210      	movs	r2, #16
 80083cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d006      	beq.n	80083e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083dc:	711a      	strb	r2, [r3, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d006      	beq.n	80083f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083f0:	711a      	strb	r2, [r3, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2243      	movs	r2, #67	@ 0x43
 80083fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80083fc:	4b02      	ldr	r3, [pc, #8]	@ (8008408 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20000050 	.word	0x20000050

0800840c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	220a      	movs	r2, #10
 8008418:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800841a:	4b03      	ldr	r3, [pc, #12]	@ (8008428 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800841c:	4618      	mov	r0, r3
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr
 8008428:	2000000c 	.word	0x2000000c

0800842c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800843c:	2303      	movs	r3, #3
 800843e:	e009      	b.n	8008454 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	33b0      	adds	r3, #176	@ 0xb0
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	4413      	add	r3, r2
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008460:	b480      	push	{r7}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	32b0      	adds	r2, #176	@ 0xb0
 8008476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800847a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008482:	2303      	movs	r3, #3
 8008484:	e008      	b.n	8008498 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	371c      	adds	r7, #28
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	32b0      	adds	r2, #176	@ 0xb0
 80084b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d101      	bne.n	80084c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e004      	b.n	80084d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	683a      	ldr	r2, [r7, #0]
 80084cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
	...

080084e0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	32b0      	adds	r2, #176	@ 0xb0
 80084f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80084f8:	2301      	movs	r3, #1
 80084fa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008502:	2303      	movs	r3, #3
 8008504:	e025      	b.n	8008552 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800850c:	2b00      	cmp	r3, #0
 800850e:	d11f      	bne.n	8008550 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	2201      	movs	r2, #1
 8008514:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008518:	4b10      	ldr	r3, [pc, #64]	@ (800855c <USBD_CDC_TransmitPacket+0x7c>)
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	f003 020f 	and.w	r2, r3, #15
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	4613      	mov	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4403      	add	r3, r0
 8008532:	3318      	adds	r3, #24
 8008534:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008536:	4b09      	ldr	r3, [pc, #36]	@ (800855c <USBD_CDC_TransmitPacket+0x7c>)
 8008538:	7819      	ldrb	r1, [r3, #0]
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f001 ffd1 	bl	800a4ee <USBD_LL_Transmit>

    ret = USBD_OK;
 800854c:	2300      	movs	r3, #0
 800854e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008550:	7bfb      	ldrb	r3, [r7, #15]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	20000093 	.word	0x20000093

08008560 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	32b0      	adds	r2, #176	@ 0xb0
 8008572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008576:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	32b0      	adds	r2, #176	@ 0xb0
 8008582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800858a:	2303      	movs	r3, #3
 800858c:	e018      	b.n	80085c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	7c1b      	ldrb	r3, [r3, #16]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10a      	bne.n	80085ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008596:	4b0c      	ldr	r3, [pc, #48]	@ (80085c8 <USBD_CDC_ReceivePacket+0x68>)
 8008598:	7819      	ldrb	r1, [r3, #0]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80085a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f001 ffc3 	bl	800a530 <USBD_LL_PrepareReceive>
 80085aa:	e008      	b.n	80085be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80085ac:	4b06      	ldr	r3, [pc, #24]	@ (80085c8 <USBD_CDC_ReceivePacket+0x68>)
 80085ae:	7819      	ldrb	r1, [r3, #0]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80085b6:	2340      	movs	r3, #64	@ 0x40
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f001 ffb9 	bl	800a530 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	20000094 	.word	0x20000094

080085cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	4613      	mov	r3, r2
 80085d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e01f      	b.n	8008624 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	79fa      	ldrb	r2, [r7, #7]
 8008616:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f001 fe33 	bl	800a284 <USBD_LL_Init>
 800861e:	4603      	mov	r3, r0
 8008620:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008622:	7dfb      	ldrb	r3, [r7, #23]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3718      	adds	r7, #24
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008636:	2300      	movs	r3, #0
 8008638:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d101      	bne.n	8008644 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008640:	2303      	movs	r3, #3
 8008642:	e025      	b.n	8008690 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	32ae      	adds	r2, #174	@ 0xae
 8008656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00f      	beq.n	8008680 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	32ae      	adds	r2, #174	@ 0xae
 800866a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800866e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008670:	f107 020e 	add.w	r2, r7, #14
 8008674:	4610      	mov	r0, r2
 8008676:	4798      	blx	r3
 8008678:	4602      	mov	r2, r0
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008686:	1c5a      	adds	r2, r3, #1
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f001 fe3b 	bl	800a31c <USBD_LL_Start>
 80086a6:	4603      	mov	r3, r0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80086b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b084      	sub	sp, #16
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	460b      	mov	r3, r1
 80086d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d009      	beq.n	80086f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	78fa      	ldrb	r2, [r7, #3]
 80086ea:	4611      	mov	r1, r2
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	4798      	blx	r3
 80086f0:	4603      	mov	r3, r0
 80086f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	460b      	mov	r3, r1
 8008708:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	78fa      	ldrb	r2, [r7, #3]
 8008718:	4611      	mov	r1, r2
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	4798      	blx	r3
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008724:	2303      	movs	r3, #3
 8008726:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008728:	7bfb      	ldrb	r3, [r7, #15]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b084      	sub	sp, #16
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	4618      	mov	r0, r3
 8008746:	f001 f90c 	bl	8009962 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008758:	461a      	mov	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008766:	f003 031f 	and.w	r3, r3, #31
 800876a:	2b02      	cmp	r3, #2
 800876c:	d01a      	beq.n	80087a4 <USBD_LL_SetupStage+0x72>
 800876e:	2b02      	cmp	r3, #2
 8008770:	d822      	bhi.n	80087b8 <USBD_LL_SetupStage+0x86>
 8008772:	2b00      	cmp	r3, #0
 8008774:	d002      	beq.n	800877c <USBD_LL_SetupStage+0x4a>
 8008776:	2b01      	cmp	r3, #1
 8008778:	d00a      	beq.n	8008790 <USBD_LL_SetupStage+0x5e>
 800877a:	e01d      	b.n	80087b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008782:	4619      	mov	r1, r3
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fb63 	bl	8008e50 <USBD_StdDevReq>
 800878a:	4603      	mov	r3, r0
 800878c:	73fb      	strb	r3, [r7, #15]
      break;
 800878e:	e020      	b.n	80087d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008796:	4619      	mov	r1, r3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fbcb 	bl	8008f34 <USBD_StdItfReq>
 800879e:	4603      	mov	r3, r0
 80087a0:	73fb      	strb	r3, [r7, #15]
      break;
 80087a2:	e016      	b.n	80087d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80087aa:	4619      	mov	r1, r3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fc2d 	bl	800900c <USBD_StdEPReq>
 80087b2:	4603      	mov	r3, r0
 80087b4:	73fb      	strb	r3, [r7, #15]
      break;
 80087b6:	e00c      	b.n	80087d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80087be:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	4619      	mov	r1, r3
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f001 fe08 	bl	800a3dc <USBD_LL_StallEP>
 80087cc:	4603      	mov	r3, r0
 80087ce:	73fb      	strb	r3, [r7, #15]
      break;
 80087d0:	bf00      	nop
  }

  return ret;
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	460b      	mov	r3, r1
 80087e6:	607a      	str	r2, [r7, #4]
 80087e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80087ee:	7afb      	ldrb	r3, [r7, #11]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d16e      	bne.n	80088d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80087fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008802:	2b03      	cmp	r3, #3
 8008804:	f040 8098 	bne.w	8008938 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	689a      	ldr	r2, [r3, #8]
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	429a      	cmp	r2, r3
 8008812:	d913      	bls.n	800883c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	689a      	ldr	r2, [r3, #8]
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	1ad2      	subs	r2, r2, r3
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	4293      	cmp	r3, r2
 800882c:	bf28      	it	cs
 800882e:	4613      	movcs	r3, r2
 8008830:	461a      	mov	r2, r3
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f001 f994 	bl	8009b62 <USBD_CtlContinueRx>
 800883a:	e07d      	b.n	8008938 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008842:	f003 031f 	and.w	r3, r3, #31
 8008846:	2b02      	cmp	r3, #2
 8008848:	d014      	beq.n	8008874 <USBD_LL_DataOutStage+0x98>
 800884a:	2b02      	cmp	r3, #2
 800884c:	d81d      	bhi.n	800888a <USBD_LL_DataOutStage+0xae>
 800884e:	2b00      	cmp	r3, #0
 8008850:	d002      	beq.n	8008858 <USBD_LL_DataOutStage+0x7c>
 8008852:	2b01      	cmp	r3, #1
 8008854:	d003      	beq.n	800885e <USBD_LL_DataOutStage+0x82>
 8008856:	e018      	b.n	800888a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	75bb      	strb	r3, [r7, #22]
            break;
 800885c:	e018      	b.n	8008890 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008864:	b2db      	uxtb	r3, r3
 8008866:	4619      	mov	r1, r3
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f000 fa64 	bl	8008d36 <USBD_CoreFindIF>
 800886e:	4603      	mov	r3, r0
 8008870:	75bb      	strb	r3, [r7, #22]
            break;
 8008872:	e00d      	b.n	8008890 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800887a:	b2db      	uxtb	r3, r3
 800887c:	4619      	mov	r1, r3
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f000 fa66 	bl	8008d50 <USBD_CoreFindEP>
 8008884:	4603      	mov	r3, r0
 8008886:	75bb      	strb	r3, [r7, #22]
            break;
 8008888:	e002      	b.n	8008890 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800888a:	2300      	movs	r3, #0
 800888c:	75bb      	strb	r3, [r7, #22]
            break;
 800888e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008890:	7dbb      	ldrb	r3, [r7, #22]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d119      	bne.n	80088ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d113      	bne.n	80088ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80088a2:	7dba      	ldrb	r2, [r7, #22]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	32ae      	adds	r2, #174	@ 0xae
 80088a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00b      	beq.n	80088ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80088b2:	7dba      	ldrb	r2, [r7, #22]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80088ba:	7dba      	ldrb	r2, [r7, #22]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	32ae      	adds	r2, #174	@ 0xae
 80088c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f001 f95a 	bl	8009b84 <USBD_CtlSendStatus>
 80088d0:	e032      	b.n	8008938 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80088d2:	7afb      	ldrb	r3, [r7, #11]
 80088d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	4619      	mov	r1, r3
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f000 fa37 	bl	8008d50 <USBD_CoreFindEP>
 80088e2:	4603      	mov	r3, r0
 80088e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088e6:	7dbb      	ldrb	r3, [r7, #22]
 80088e8:	2bff      	cmp	r3, #255	@ 0xff
 80088ea:	d025      	beq.n	8008938 <USBD_LL_DataOutStage+0x15c>
 80088ec:	7dbb      	ldrb	r3, [r7, #22]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d122      	bne.n	8008938 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b03      	cmp	r3, #3
 80088fc:	d117      	bne.n	800892e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80088fe:	7dba      	ldrb	r2, [r7, #22]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	32ae      	adds	r2, #174	@ 0xae
 8008904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00f      	beq.n	800892e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800890e:	7dba      	ldrb	r2, [r7, #22]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008916:	7dba      	ldrb	r2, [r7, #22]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	32ae      	adds	r2, #174	@ 0xae
 800891c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	7afa      	ldrb	r2, [r7, #11]
 8008924:	4611      	mov	r1, r2
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	4798      	blx	r3
 800892a:	4603      	mov	r3, r0
 800892c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008934:	7dfb      	ldrb	r3, [r7, #23]
 8008936:	e000      	b.n	800893a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b086      	sub	sp, #24
 8008946:	af00      	add	r7, sp, #0
 8008948:	60f8      	str	r0, [r7, #12]
 800894a:	460b      	mov	r3, r1
 800894c:	607a      	str	r2, [r7, #4]
 800894e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008950:	7afb      	ldrb	r3, [r7, #11]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d16f      	bne.n	8008a36 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	3314      	adds	r3, #20
 800895a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008962:	2b02      	cmp	r3, #2
 8008964:	d15a      	bne.n	8008a1c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	689a      	ldr	r2, [r3, #8]
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	429a      	cmp	r2, r3
 8008970:	d914      	bls.n	800899c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	689a      	ldr	r2, [r3, #8]
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	1ad2      	subs	r2, r2, r3
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	461a      	mov	r2, r3
 8008986:	6879      	ldr	r1, [r7, #4]
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f001 f8bc 	bl	8009b06 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800898e:	2300      	movs	r3, #0
 8008990:	2200      	movs	r2, #0
 8008992:	2100      	movs	r1, #0
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f001 fdcb 	bl	800a530 <USBD_LL_PrepareReceive>
 800899a:	e03f      	b.n	8008a1c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	68da      	ldr	r2, [r3, #12]
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d11c      	bne.n	80089e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d316      	bcc.n	80089e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80089be:	429a      	cmp	r2, r3
 80089c0:	d20f      	bcs.n	80089e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80089c2:	2200      	movs	r2, #0
 80089c4:	2100      	movs	r1, #0
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f001 f89d 	bl	8009b06 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089d4:	2300      	movs	r3, #0
 80089d6:	2200      	movs	r2, #0
 80089d8:	2100      	movs	r1, #0
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f001 fda8 	bl	800a530 <USBD_LL_PrepareReceive>
 80089e0:	e01c      	b.n	8008a1c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	2b03      	cmp	r3, #3
 80089ec:	d10f      	bne.n	8008a0e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d009      	beq.n	8008a0e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a0e:	2180      	movs	r1, #128	@ 0x80
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f001 fce3 	bl	800a3dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f001 f8c7 	bl	8009baa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d03a      	beq.n	8008a9c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f7ff fe42 	bl	80086b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008a34:	e032      	b.n	8008a9c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008a36:	7afb      	ldrb	r3, [r7, #11]
 8008a38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	4619      	mov	r1, r3
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 f985 	bl	8008d50 <USBD_CoreFindEP>
 8008a46:	4603      	mov	r3, r0
 8008a48:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a4a:	7dfb      	ldrb	r3, [r7, #23]
 8008a4c:	2bff      	cmp	r3, #255	@ 0xff
 8008a4e:	d025      	beq.n	8008a9c <USBD_LL_DataInStage+0x15a>
 8008a50:	7dfb      	ldrb	r3, [r7, #23]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d122      	bne.n	8008a9c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d11c      	bne.n	8008a9c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008a62:	7dfa      	ldrb	r2, [r7, #23]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	32ae      	adds	r2, #174	@ 0xae
 8008a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d014      	beq.n	8008a9c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008a72:	7dfa      	ldrb	r2, [r7, #23]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008a7a:	7dfa      	ldrb	r2, [r7, #23]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	32ae      	adds	r2, #174	@ 0xae
 8008a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	7afa      	ldrb	r2, [r7, #11]
 8008a88:	4611      	mov	r1, r2
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	4798      	blx	r3
 8008a8e:	4603      	mov	r3, r0
 8008a90:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008a92:	7dbb      	ldrb	r3, [r7, #22]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008a98:	7dbb      	ldrb	r3, [r7, #22]
 8008a9a:	e000      	b.n	8008a9e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3718      	adds	r7, #24
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d014      	beq.n	8008b0c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00e      	beq.n	8008b0c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	6852      	ldr	r2, [r2, #4]
 8008afa:	b2d2      	uxtb	r2, r2
 8008afc:	4611      	mov	r1, r2
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	4798      	blx	r3
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d001      	beq.n	8008b0c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b0c:	2340      	movs	r3, #64	@ 0x40
 8008b0e:	2200      	movs	r2, #0
 8008b10:	2100      	movs	r1, #0
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f001 fc1d 	bl	800a352 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2240      	movs	r2, #64	@ 0x40
 8008b24:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b28:	2340      	movs	r3, #64	@ 0x40
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	2180      	movs	r1, #128	@ 0x80
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f001 fc0f 	bl	800a352 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2240      	movs	r2, #64	@ 0x40
 8008b3e:	621a      	str	r2, [r3, #32]

  return ret;
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b083      	sub	sp, #12
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	460b      	mov	r3, r1
 8008b54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	78fa      	ldrb	r2, [r7, #3]
 8008b5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b083      	sub	sp, #12
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b04      	cmp	r3, #4
 8008b7c:	d006      	beq.n	8008b8c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2204      	movs	r2, #4
 8008b90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	370c      	adds	r7, #12
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b083      	sub	sp, #12
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b04      	cmp	r3, #4
 8008bb4:	d106      	bne.n	8008bc4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008bbc:	b2da      	uxtb	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b082      	sub	sp, #8
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	d110      	bne.n	8008c08 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00b      	beq.n	8008c08 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bf6:	69db      	ldr	r3, [r3, #28]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d005      	beq.n	8008c08 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c02:	69db      	ldr	r3, [r3, #28]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b082      	sub	sp, #8
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	32ae      	adds	r2, #174	@ 0xae
 8008c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d101      	bne.n	8008c34 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e01c      	b.n	8008c6e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b03      	cmp	r3, #3
 8008c3e:	d115      	bne.n	8008c6c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	32ae      	adds	r2, #174	@ 0xae
 8008c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c4e:	6a1b      	ldr	r3, [r3, #32]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00b      	beq.n	8008c6c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	32ae      	adds	r2, #174	@ 0xae
 8008c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c62:	6a1b      	ldr	r3, [r3, #32]
 8008c64:	78fa      	ldrb	r2, [r7, #3]
 8008c66:	4611      	mov	r1, r2
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b082      	sub	sp, #8
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
 8008c7e:	460b      	mov	r3, r1
 8008c80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	32ae      	adds	r2, #174	@ 0xae
 8008c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d101      	bne.n	8008c98 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e01c      	b.n	8008cd2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d115      	bne.n	8008cd0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	32ae      	adds	r2, #174	@ 0xae
 8008cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00b      	beq.n	8008cd0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	32ae      	adds	r2, #174	@ 0xae
 8008cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cc8:	78fa      	ldrb	r2, [r7, #3]
 8008cca:	4611      	mov	r1, r2
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008cda:	b480      	push	{r7}
 8008cdc:	b083      	sub	sp, #12
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00e      	beq.n	8008d2c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	6852      	ldr	r2, [r2, #4]
 8008d1a:	b2d2      	uxtb	r2, r2
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	4798      	blx	r3
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b083      	sub	sp, #12
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	460b      	mov	r3, r1
 8008d40:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008d42:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008d5c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b086      	sub	sp, #24
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	460b      	mov	r3, r1
 8008d74:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	885b      	ldrh	r3, [r3, #2]
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	7812      	ldrb	r2, [r2, #0]
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d91f      	bls.n	8008dd0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008d96:	e013      	b.n	8008dc0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008d98:	f107 030a 	add.w	r3, r7, #10
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6978      	ldr	r0, [r7, #20]
 8008da0:	f000 f81b 	bl	8008dda <USBD_GetNextDesc>
 8008da4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	785b      	ldrb	r3, [r3, #1]
 8008daa:	2b05      	cmp	r3, #5
 8008dac:	d108      	bne.n	8008dc0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	789b      	ldrb	r3, [r3, #2]
 8008db6:	78fa      	ldrb	r2, [r7, #3]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d008      	beq.n	8008dce <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	885b      	ldrh	r3, [r3, #2]
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	897b      	ldrh	r3, [r7, #10]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d8e5      	bhi.n	8008d98 <USBD_GetEpDesc+0x2e>
 8008dcc:	e000      	b.n	8008dd0 <USBD_GetEpDesc+0x66>
          break;
 8008dce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008dd0:	693b      	ldr	r3, [r7, #16]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008dda:	b480      	push	{r7}
 8008ddc:	b085      	sub	sp, #20
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	881b      	ldrh	r3, [r3, #0]
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	7812      	ldrb	r2, [r2, #0]
 8008df0:	4413      	add	r3, r2
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4413      	add	r3, r2
 8008e02:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e04:	68fb      	ldr	r3, [r7, #12]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3714      	adds	r7, #20
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b087      	sub	sp, #28
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	3301      	adds	r3, #1
 8008e28:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008e30:	8a3b      	ldrh	r3, [r7, #16]
 8008e32:	021b      	lsls	r3, r3, #8
 8008e34:	b21a      	sxth	r2, r3
 8008e36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	b21b      	sxth	r3, r3
 8008e3e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008e40:	89fb      	ldrh	r3, [r7, #14]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	371c      	adds	r7, #28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
	...

08008e50 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e66:	2b40      	cmp	r3, #64	@ 0x40
 8008e68:	d005      	beq.n	8008e76 <USBD_StdDevReq+0x26>
 8008e6a:	2b40      	cmp	r3, #64	@ 0x40
 8008e6c:	d857      	bhi.n	8008f1e <USBD_StdDevReq+0xce>
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00f      	beq.n	8008e92 <USBD_StdDevReq+0x42>
 8008e72:	2b20      	cmp	r3, #32
 8008e74:	d153      	bne.n	8008f1e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	32ae      	adds	r2, #174	@ 0xae
 8008e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	6839      	ldr	r1, [r7, #0]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	4798      	blx	r3
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e90:	e04a      	b.n	8008f28 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	785b      	ldrb	r3, [r3, #1]
 8008e96:	2b09      	cmp	r3, #9
 8008e98:	d83b      	bhi.n	8008f12 <USBD_StdDevReq+0xc2>
 8008e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8008ea0 <USBD_StdDevReq+0x50>)
 8008e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea0:	08008ef5 	.word	0x08008ef5
 8008ea4:	08008f09 	.word	0x08008f09
 8008ea8:	08008f13 	.word	0x08008f13
 8008eac:	08008eff 	.word	0x08008eff
 8008eb0:	08008f13 	.word	0x08008f13
 8008eb4:	08008ed3 	.word	0x08008ed3
 8008eb8:	08008ec9 	.word	0x08008ec9
 8008ebc:	08008f13 	.word	0x08008f13
 8008ec0:	08008eeb 	.word	0x08008eeb
 8008ec4:	08008edd 	.word	0x08008edd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ec8:	6839      	ldr	r1, [r7, #0]
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fa3c 	bl	8009348 <USBD_GetDescriptor>
          break;
 8008ed0:	e024      	b.n	8008f1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ed2:	6839      	ldr	r1, [r7, #0]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fba1 	bl	800961c <USBD_SetAddress>
          break;
 8008eda:	e01f      	b.n	8008f1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fbe0 	bl	80096a4 <USBD_SetConfig>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73fb      	strb	r3, [r7, #15]
          break;
 8008ee8:	e018      	b.n	8008f1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008eea:	6839      	ldr	r1, [r7, #0]
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fc83 	bl	80097f8 <USBD_GetConfig>
          break;
 8008ef2:	e013      	b.n	8008f1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fcb4 	bl	8009864 <USBD_GetStatus>
          break;
 8008efc:	e00e      	b.n	8008f1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008efe:	6839      	ldr	r1, [r7, #0]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fce3 	bl	80098cc <USBD_SetFeature>
          break;
 8008f06:	e009      	b.n	8008f1c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f08:	6839      	ldr	r1, [r7, #0]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fd07 	bl	800991e <USBD_ClrFeature>
          break;
 8008f10:	e004      	b.n	8008f1c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fd5e 	bl	80099d6 <USBD_CtlError>
          break;
 8008f1a:	bf00      	nop
      }
      break;
 8008f1c:	e004      	b.n	8008f28 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fd58 	bl	80099d6 <USBD_CtlError>
      break;
 8008f26:	bf00      	nop
  }

  return ret;
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop

08008f34 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f4a:	2b40      	cmp	r3, #64	@ 0x40
 8008f4c:	d005      	beq.n	8008f5a <USBD_StdItfReq+0x26>
 8008f4e:	2b40      	cmp	r3, #64	@ 0x40
 8008f50:	d852      	bhi.n	8008ff8 <USBD_StdItfReq+0xc4>
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <USBD_StdItfReq+0x26>
 8008f56:	2b20      	cmp	r3, #32
 8008f58:	d14e      	bne.n	8008ff8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	3b01      	subs	r3, #1
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d840      	bhi.n	8008fea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	889b      	ldrh	r3, [r3, #4]
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d836      	bhi.n	8008fe0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	889b      	ldrh	r3, [r3, #4]
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7ff fedb 	bl	8008d36 <USBD_CoreFindIF>
 8008f80:	4603      	mov	r3, r0
 8008f82:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	2bff      	cmp	r3, #255	@ 0xff
 8008f88:	d01d      	beq.n	8008fc6 <USBD_StdItfReq+0x92>
 8008f8a:	7bbb      	ldrb	r3, [r7, #14]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d11a      	bne.n	8008fc6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008f90:	7bba      	ldrb	r2, [r7, #14]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	32ae      	adds	r2, #174	@ 0xae
 8008f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00f      	beq.n	8008fc0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008fa0:	7bba      	ldrb	r2, [r7, #14]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008fa8:	7bba      	ldrb	r2, [r7, #14]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	32ae      	adds	r2, #174	@ 0xae
 8008fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	4798      	blx	r3
 8008fba:	4603      	mov	r3, r0
 8008fbc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008fbe:	e004      	b.n	8008fca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008fc4:	e001      	b.n	8008fca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	88db      	ldrh	r3, [r3, #6]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d110      	bne.n	8008ff4 <USBD_StdItfReq+0xc0>
 8008fd2:	7bfb      	ldrb	r3, [r7, #15]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10d      	bne.n	8008ff4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fdd3 	bl	8009b84 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008fde:	e009      	b.n	8008ff4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fcf7 	bl	80099d6 <USBD_CtlError>
          break;
 8008fe8:	e004      	b.n	8008ff4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008fea:	6839      	ldr	r1, [r7, #0]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fcf2 	bl	80099d6 <USBD_CtlError>
          break;
 8008ff2:	e000      	b.n	8008ff6 <USBD_StdItfReq+0xc2>
          break;
 8008ff4:	bf00      	nop
      }
      break;
 8008ff6:	e004      	b.n	8009002 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008ff8:	6839      	ldr	r1, [r7, #0]
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fceb 	bl	80099d6 <USBD_CtlError>
      break;
 8009000:	bf00      	nop
  }

  return ret;
 8009002:	7bfb      	ldrb	r3, [r7, #15]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	889b      	ldrh	r3, [r3, #4]
 800901e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009028:	2b40      	cmp	r3, #64	@ 0x40
 800902a:	d007      	beq.n	800903c <USBD_StdEPReq+0x30>
 800902c:	2b40      	cmp	r3, #64	@ 0x40
 800902e:	f200 817f 	bhi.w	8009330 <USBD_StdEPReq+0x324>
 8009032:	2b00      	cmp	r3, #0
 8009034:	d02a      	beq.n	800908c <USBD_StdEPReq+0x80>
 8009036:	2b20      	cmp	r3, #32
 8009038:	f040 817a 	bne.w	8009330 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800903c:	7bbb      	ldrb	r3, [r7, #14]
 800903e:	4619      	mov	r1, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7ff fe85 	bl	8008d50 <USBD_CoreFindEP>
 8009046:	4603      	mov	r3, r0
 8009048:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800904a:	7b7b      	ldrb	r3, [r7, #13]
 800904c:	2bff      	cmp	r3, #255	@ 0xff
 800904e:	f000 8174 	beq.w	800933a <USBD_StdEPReq+0x32e>
 8009052:	7b7b      	ldrb	r3, [r7, #13]
 8009054:	2b00      	cmp	r3, #0
 8009056:	f040 8170 	bne.w	800933a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800905a:	7b7a      	ldrb	r2, [r7, #13]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009062:	7b7a      	ldrb	r2, [r7, #13]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	32ae      	adds	r2, #174	@ 0xae
 8009068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 8163 	beq.w	800933a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009074:	7b7a      	ldrb	r2, [r7, #13]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	32ae      	adds	r2, #174	@ 0xae
 800907a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	4798      	blx	r3
 8009086:	4603      	mov	r3, r0
 8009088:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800908a:	e156      	b.n	800933a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	785b      	ldrb	r3, [r3, #1]
 8009090:	2b03      	cmp	r3, #3
 8009092:	d008      	beq.n	80090a6 <USBD_StdEPReq+0x9a>
 8009094:	2b03      	cmp	r3, #3
 8009096:	f300 8145 	bgt.w	8009324 <USBD_StdEPReq+0x318>
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 809b 	beq.w	80091d6 <USBD_StdEPReq+0x1ca>
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d03c      	beq.n	800911e <USBD_StdEPReq+0x112>
 80090a4:	e13e      	b.n	8009324 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d002      	beq.n	80090b8 <USBD_StdEPReq+0xac>
 80090b2:	2b03      	cmp	r3, #3
 80090b4:	d016      	beq.n	80090e4 <USBD_StdEPReq+0xd8>
 80090b6:	e02c      	b.n	8009112 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090b8:	7bbb      	ldrb	r3, [r7, #14]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00d      	beq.n	80090da <USBD_StdEPReq+0xce>
 80090be:	7bbb      	ldrb	r3, [r7, #14]
 80090c0:	2b80      	cmp	r3, #128	@ 0x80
 80090c2:	d00a      	beq.n	80090da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80090c4:	7bbb      	ldrb	r3, [r7, #14]
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f001 f987 	bl	800a3dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80090ce:	2180      	movs	r1, #128	@ 0x80
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f001 f983 	bl	800a3dc <USBD_LL_StallEP>
 80090d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80090d8:	e020      	b.n	800911c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 fc7a 	bl	80099d6 <USBD_CtlError>
              break;
 80090e2:	e01b      	b.n	800911c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	885b      	ldrh	r3, [r3, #2]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10e      	bne.n	800910a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80090ec:	7bbb      	ldrb	r3, [r7, #14]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00b      	beq.n	800910a <USBD_StdEPReq+0xfe>
 80090f2:	7bbb      	ldrb	r3, [r7, #14]
 80090f4:	2b80      	cmp	r3, #128	@ 0x80
 80090f6:	d008      	beq.n	800910a <USBD_StdEPReq+0xfe>
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	88db      	ldrh	r3, [r3, #6]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d104      	bne.n	800910a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009100:	7bbb      	ldrb	r3, [r7, #14]
 8009102:	4619      	mov	r1, r3
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f001 f969 	bl	800a3dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fd3a 	bl	8009b84 <USBD_CtlSendStatus>

              break;
 8009110:	e004      	b.n	800911c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fc5e 	bl	80099d6 <USBD_CtlError>
              break;
 800911a:	bf00      	nop
          }
          break;
 800911c:	e107      	b.n	800932e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b02      	cmp	r3, #2
 8009128:	d002      	beq.n	8009130 <USBD_StdEPReq+0x124>
 800912a:	2b03      	cmp	r3, #3
 800912c:	d016      	beq.n	800915c <USBD_StdEPReq+0x150>
 800912e:	e04b      	b.n	80091c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009130:	7bbb      	ldrb	r3, [r7, #14]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00d      	beq.n	8009152 <USBD_StdEPReq+0x146>
 8009136:	7bbb      	ldrb	r3, [r7, #14]
 8009138:	2b80      	cmp	r3, #128	@ 0x80
 800913a:	d00a      	beq.n	8009152 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800913c:	7bbb      	ldrb	r3, [r7, #14]
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f001 f94b 	bl	800a3dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009146:	2180      	movs	r1, #128	@ 0x80
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f001 f947 	bl	800a3dc <USBD_LL_StallEP>
 800914e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009150:	e040      	b.n	80091d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009152:	6839      	ldr	r1, [r7, #0]
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fc3e 	bl	80099d6 <USBD_CtlError>
              break;
 800915a:	e03b      	b.n	80091d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	885b      	ldrh	r3, [r3, #2]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d136      	bne.n	80091d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009164:	7bbb      	ldrb	r3, [r7, #14]
 8009166:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800916a:	2b00      	cmp	r3, #0
 800916c:	d004      	beq.n	8009178 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800916e:	7bbb      	ldrb	r3, [r7, #14]
 8009170:	4619      	mov	r1, r3
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f001 f951 	bl	800a41a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fd03 	bl	8009b84 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800917e:	7bbb      	ldrb	r3, [r7, #14]
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff fde4 	bl	8008d50 <USBD_CoreFindEP>
 8009188:	4603      	mov	r3, r0
 800918a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800918c:	7b7b      	ldrb	r3, [r7, #13]
 800918e:	2bff      	cmp	r3, #255	@ 0xff
 8009190:	d01f      	beq.n	80091d2 <USBD_StdEPReq+0x1c6>
 8009192:	7b7b      	ldrb	r3, [r7, #13]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d11c      	bne.n	80091d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009198:	7b7a      	ldrb	r2, [r7, #13]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80091a0:	7b7a      	ldrb	r2, [r7, #13]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	32ae      	adds	r2, #174	@ 0xae
 80091a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d010      	beq.n	80091d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80091b0:	7b7a      	ldrb	r2, [r7, #13]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	32ae      	adds	r2, #174	@ 0xae
 80091b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	4798      	blx	r3
 80091c2:	4603      	mov	r3, r0
 80091c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80091c6:	e004      	b.n	80091d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80091c8:	6839      	ldr	r1, [r7, #0]
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fc03 	bl	80099d6 <USBD_CtlError>
              break;
 80091d0:	e000      	b.n	80091d4 <USBD_StdEPReq+0x1c8>
              break;
 80091d2:	bf00      	nop
          }
          break;
 80091d4:	e0ab      	b.n	800932e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d002      	beq.n	80091e8 <USBD_StdEPReq+0x1dc>
 80091e2:	2b03      	cmp	r3, #3
 80091e4:	d032      	beq.n	800924c <USBD_StdEPReq+0x240>
 80091e6:	e097      	b.n	8009318 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091e8:	7bbb      	ldrb	r3, [r7, #14]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d007      	beq.n	80091fe <USBD_StdEPReq+0x1f2>
 80091ee:	7bbb      	ldrb	r3, [r7, #14]
 80091f0:	2b80      	cmp	r3, #128	@ 0x80
 80091f2:	d004      	beq.n	80091fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80091f4:	6839      	ldr	r1, [r7, #0]
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fbed 	bl	80099d6 <USBD_CtlError>
                break;
 80091fc:	e091      	b.n	8009322 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009202:	2b00      	cmp	r3, #0
 8009204:	da0b      	bge.n	800921e <USBD_StdEPReq+0x212>
 8009206:	7bbb      	ldrb	r3, [r7, #14]
 8009208:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800920c:	4613      	mov	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	3310      	adds	r3, #16
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	4413      	add	r3, r2
 800921a:	3304      	adds	r3, #4
 800921c:	e00b      	b.n	8009236 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800921e:	7bbb      	ldrb	r3, [r7, #14]
 8009220:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009224:	4613      	mov	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	4413      	add	r3, r2
 8009234:	3304      	adds	r3, #4
 8009236:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	2200      	movs	r2, #0
 800923c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	2202      	movs	r2, #2
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 fc43 	bl	8009ad0 <USBD_CtlSendData>
              break;
 800924a:	e06a      	b.n	8009322 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800924c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009250:	2b00      	cmp	r3, #0
 8009252:	da11      	bge.n	8009278 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009254:	7bbb      	ldrb	r3, [r7, #14]
 8009256:	f003 020f 	and.w	r2, r3, #15
 800925a:	6879      	ldr	r1, [r7, #4]
 800925c:	4613      	mov	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	440b      	add	r3, r1
 8009266:	3324      	adds	r3, #36	@ 0x24
 8009268:	881b      	ldrh	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d117      	bne.n	800929e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fbb0 	bl	80099d6 <USBD_CtlError>
                  break;
 8009276:	e054      	b.n	8009322 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009278:	7bbb      	ldrb	r3, [r7, #14]
 800927a:	f003 020f 	and.w	r2, r3, #15
 800927e:	6879      	ldr	r1, [r7, #4]
 8009280:	4613      	mov	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4413      	add	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	440b      	add	r3, r1
 800928a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800928e:	881b      	ldrh	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d104      	bne.n	800929e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009294:	6839      	ldr	r1, [r7, #0]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fb9d 	bl	80099d6 <USBD_CtlError>
                  break;
 800929c:	e041      	b.n	8009322 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800929e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	da0b      	bge.n	80092be <USBD_StdEPReq+0x2b2>
 80092a6:	7bbb      	ldrb	r3, [r7, #14]
 80092a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80092ac:	4613      	mov	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4413      	add	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	3310      	adds	r3, #16
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	4413      	add	r3, r2
 80092ba:	3304      	adds	r3, #4
 80092bc:	e00b      	b.n	80092d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80092be:	7bbb      	ldrb	r3, [r7, #14]
 80092c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092c4:	4613      	mov	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	4413      	add	r3, r2
 80092d4:	3304      	adds	r3, #4
 80092d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d002      	beq.n	80092e4 <USBD_StdEPReq+0x2d8>
 80092de:	7bbb      	ldrb	r3, [r7, #14]
 80092e0:	2b80      	cmp	r3, #128	@ 0x80
 80092e2:	d103      	bne.n	80092ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	2200      	movs	r2, #0
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	e00e      	b.n	800930a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80092ec:	7bbb      	ldrb	r3, [r7, #14]
 80092ee:	4619      	mov	r1, r3
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f001 f8b1 	bl	800a458 <USBD_LL_IsStallEP>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d003      	beq.n	8009304 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	2201      	movs	r2, #1
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	e002      	b.n	800930a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	2200      	movs	r2, #0
 8009308:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	2202      	movs	r2, #2
 800930e:	4619      	mov	r1, r3
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 fbdd 	bl	8009ad0 <USBD_CtlSendData>
              break;
 8009316:	e004      	b.n	8009322 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fb5b 	bl	80099d6 <USBD_CtlError>
              break;
 8009320:	bf00      	nop
          }
          break;
 8009322:	e004      	b.n	800932e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009324:	6839      	ldr	r1, [r7, #0]
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fb55 	bl	80099d6 <USBD_CtlError>
          break;
 800932c:	bf00      	nop
      }
      break;
 800932e:	e005      	b.n	800933c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fb4f 	bl	80099d6 <USBD_CtlError>
      break;
 8009338:	e000      	b.n	800933c <USBD_StdEPReq+0x330>
      break;
 800933a:	bf00      	nop
  }

  return ret;
 800933c:	7bfb      	ldrb	r3, [r7, #15]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
	...

08009348 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009352:	2300      	movs	r3, #0
 8009354:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009356:	2300      	movs	r3, #0
 8009358:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800935a:	2300      	movs	r3, #0
 800935c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	885b      	ldrh	r3, [r3, #2]
 8009362:	0a1b      	lsrs	r3, r3, #8
 8009364:	b29b      	uxth	r3, r3
 8009366:	3b01      	subs	r3, #1
 8009368:	2b06      	cmp	r3, #6
 800936a:	f200 8128 	bhi.w	80095be <USBD_GetDescriptor+0x276>
 800936e:	a201      	add	r2, pc, #4	@ (adr r2, 8009374 <USBD_GetDescriptor+0x2c>)
 8009370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009374:	08009391 	.word	0x08009391
 8009378:	080093a9 	.word	0x080093a9
 800937c:	080093e9 	.word	0x080093e9
 8009380:	080095bf 	.word	0x080095bf
 8009384:	080095bf 	.word	0x080095bf
 8009388:	0800955f 	.word	0x0800955f
 800938c:	0800958b 	.word	0x0800958b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	7c12      	ldrb	r2, [r2, #16]
 800939c:	f107 0108 	add.w	r1, r7, #8
 80093a0:	4610      	mov	r0, r2
 80093a2:	4798      	blx	r3
 80093a4:	60f8      	str	r0, [r7, #12]
      break;
 80093a6:	e112      	b.n	80095ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	7c1b      	ldrb	r3, [r3, #16]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10d      	bne.n	80093cc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093b8:	f107 0208 	add.w	r2, r7, #8
 80093bc:	4610      	mov	r0, r2
 80093be:	4798      	blx	r3
 80093c0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	3301      	adds	r3, #1
 80093c6:	2202      	movs	r2, #2
 80093c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80093ca:	e100      	b.n	80095ce <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d4:	f107 0208 	add.w	r2, r7, #8
 80093d8:	4610      	mov	r0, r2
 80093da:	4798      	blx	r3
 80093dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	3301      	adds	r3, #1
 80093e2:	2202      	movs	r2, #2
 80093e4:	701a      	strb	r2, [r3, #0]
      break;
 80093e6:	e0f2      	b.n	80095ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	885b      	ldrh	r3, [r3, #2]
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b05      	cmp	r3, #5
 80093f0:	f200 80ac 	bhi.w	800954c <USBD_GetDescriptor+0x204>
 80093f4:	a201      	add	r2, pc, #4	@ (adr r2, 80093fc <USBD_GetDescriptor+0xb4>)
 80093f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fa:	bf00      	nop
 80093fc:	08009415 	.word	0x08009415
 8009400:	08009449 	.word	0x08009449
 8009404:	0800947d 	.word	0x0800947d
 8009408:	080094b1 	.word	0x080094b1
 800940c:	080094e5 	.word	0x080094e5
 8009410:	08009519 	.word	0x08009519
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00b      	beq.n	8009438 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	7c12      	ldrb	r2, [r2, #16]
 800942c:	f107 0108 	add.w	r1, r7, #8
 8009430:	4610      	mov	r0, r2
 8009432:	4798      	blx	r3
 8009434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009436:	e091      	b.n	800955c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009438:	6839      	ldr	r1, [r7, #0]
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 facb 	bl	80099d6 <USBD_CtlError>
            err++;
 8009440:	7afb      	ldrb	r3, [r7, #11]
 8009442:	3301      	adds	r3, #1
 8009444:	72fb      	strb	r3, [r7, #11]
          break;
 8009446:	e089      	b.n	800955c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00b      	beq.n	800946c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	7c12      	ldrb	r2, [r2, #16]
 8009460:	f107 0108 	add.w	r1, r7, #8
 8009464:	4610      	mov	r0, r2
 8009466:	4798      	blx	r3
 8009468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800946a:	e077      	b.n	800955c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800946c:	6839      	ldr	r1, [r7, #0]
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fab1 	bl	80099d6 <USBD_CtlError>
            err++;
 8009474:	7afb      	ldrb	r3, [r7, #11]
 8009476:	3301      	adds	r3, #1
 8009478:	72fb      	strb	r3, [r7, #11]
          break;
 800947a:	e06f      	b.n	800955c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00b      	beq.n	80094a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	7c12      	ldrb	r2, [r2, #16]
 8009494:	f107 0108 	add.w	r1, r7, #8
 8009498:	4610      	mov	r0, r2
 800949a:	4798      	blx	r3
 800949c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800949e:	e05d      	b.n	800955c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 fa97 	bl	80099d6 <USBD_CtlError>
            err++;
 80094a8:	7afb      	ldrb	r3, [r7, #11]
 80094aa:	3301      	adds	r3, #1
 80094ac:	72fb      	strb	r3, [r7, #11]
          break;
 80094ae:	e055      	b.n	800955c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00b      	beq.n	80094d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	7c12      	ldrb	r2, [r2, #16]
 80094c8:	f107 0108 	add.w	r1, r7, #8
 80094cc:	4610      	mov	r0, r2
 80094ce:	4798      	blx	r3
 80094d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094d2:	e043      	b.n	800955c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fa7d 	bl	80099d6 <USBD_CtlError>
            err++;
 80094dc:	7afb      	ldrb	r3, [r7, #11]
 80094de:	3301      	adds	r3, #1
 80094e0:	72fb      	strb	r3, [r7, #11]
          break;
 80094e2:	e03b      	b.n	800955c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00b      	beq.n	8009508 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094f6:	695b      	ldr	r3, [r3, #20]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	7c12      	ldrb	r2, [r2, #16]
 80094fc:	f107 0108 	add.w	r1, r7, #8
 8009500:	4610      	mov	r0, r2
 8009502:	4798      	blx	r3
 8009504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009506:	e029      	b.n	800955c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fa63 	bl	80099d6 <USBD_CtlError>
            err++;
 8009510:	7afb      	ldrb	r3, [r7, #11]
 8009512:	3301      	adds	r3, #1
 8009514:	72fb      	strb	r3, [r7, #11]
          break;
 8009516:	e021      	b.n	800955c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00b      	beq.n	800953c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	7c12      	ldrb	r2, [r2, #16]
 8009530:	f107 0108 	add.w	r1, r7, #8
 8009534:	4610      	mov	r0, r2
 8009536:	4798      	blx	r3
 8009538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800953a:	e00f      	b.n	800955c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fa49 	bl	80099d6 <USBD_CtlError>
            err++;
 8009544:	7afb      	ldrb	r3, [r7, #11]
 8009546:	3301      	adds	r3, #1
 8009548:	72fb      	strb	r3, [r7, #11]
          break;
 800954a:	e007      	b.n	800955c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 fa41 	bl	80099d6 <USBD_CtlError>
          err++;
 8009554:	7afb      	ldrb	r3, [r7, #11]
 8009556:	3301      	adds	r3, #1
 8009558:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800955a:	bf00      	nop
      }
      break;
 800955c:	e037      	b.n	80095ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	7c1b      	ldrb	r3, [r3, #16]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d109      	bne.n	800957a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800956c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800956e:	f107 0208 	add.w	r2, r7, #8
 8009572:	4610      	mov	r0, r2
 8009574:	4798      	blx	r3
 8009576:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009578:	e029      	b.n	80095ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fa2a 	bl	80099d6 <USBD_CtlError>
        err++;
 8009582:	7afb      	ldrb	r3, [r7, #11]
 8009584:	3301      	adds	r3, #1
 8009586:	72fb      	strb	r3, [r7, #11]
      break;
 8009588:	e021      	b.n	80095ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	7c1b      	ldrb	r3, [r3, #16]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10d      	bne.n	80095ae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800959a:	f107 0208 	add.w	r2, r7, #8
 800959e:	4610      	mov	r0, r2
 80095a0:	4798      	blx	r3
 80095a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	3301      	adds	r3, #1
 80095a8:	2207      	movs	r2, #7
 80095aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095ac:	e00f      	b.n	80095ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80095ae:	6839      	ldr	r1, [r7, #0]
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fa10 	bl	80099d6 <USBD_CtlError>
        err++;
 80095b6:	7afb      	ldrb	r3, [r7, #11]
 80095b8:	3301      	adds	r3, #1
 80095ba:	72fb      	strb	r3, [r7, #11]
      break;
 80095bc:	e007      	b.n	80095ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80095be:	6839      	ldr	r1, [r7, #0]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fa08 	bl	80099d6 <USBD_CtlError>
      err++;
 80095c6:	7afb      	ldrb	r3, [r7, #11]
 80095c8:	3301      	adds	r3, #1
 80095ca:	72fb      	strb	r3, [r7, #11]
      break;
 80095cc:	bf00      	nop
  }

  if (err != 0U)
 80095ce:	7afb      	ldrb	r3, [r7, #11]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d11e      	bne.n	8009612 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	88db      	ldrh	r3, [r3, #6]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d016      	beq.n	800960a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80095dc:	893b      	ldrh	r3, [r7, #8]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00e      	beq.n	8009600 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	88da      	ldrh	r2, [r3, #6]
 80095e6:	893b      	ldrh	r3, [r7, #8]
 80095e8:	4293      	cmp	r3, r2
 80095ea:	bf28      	it	cs
 80095ec:	4613      	movcs	r3, r2
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80095f2:	893b      	ldrh	r3, [r7, #8]
 80095f4:	461a      	mov	r2, r3
 80095f6:	68f9      	ldr	r1, [r7, #12]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fa69 	bl	8009ad0 <USBD_CtlSendData>
 80095fe:	e009      	b.n	8009614 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 f9e7 	bl	80099d6 <USBD_CtlError>
 8009608:	e004      	b.n	8009614 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 faba 	bl	8009b84 <USBD_CtlSendStatus>
 8009610:	e000      	b.n	8009614 <USBD_GetDescriptor+0x2cc>
    return;
 8009612:	bf00      	nop
  }
}
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop

0800961c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	889b      	ldrh	r3, [r3, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d131      	bne.n	8009692 <USBD_SetAddress+0x76>
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	88db      	ldrh	r3, [r3, #6]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d12d      	bne.n	8009692 <USBD_SetAddress+0x76>
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	885b      	ldrh	r3, [r3, #2]
 800963a:	2b7f      	cmp	r3, #127	@ 0x7f
 800963c:	d829      	bhi.n	8009692 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	885b      	ldrh	r3, [r3, #2]
 8009642:	b2db      	uxtb	r3, r3
 8009644:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009648:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009650:	b2db      	uxtb	r3, r3
 8009652:	2b03      	cmp	r3, #3
 8009654:	d104      	bne.n	8009660 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009656:	6839      	ldr	r1, [r7, #0]
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 f9bc 	bl	80099d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800965e:	e01d      	b.n	800969c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	7bfa      	ldrb	r2, [r7, #15]
 8009664:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009668:	7bfb      	ldrb	r3, [r7, #15]
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 ff1f 	bl	800a4b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 fa86 	bl	8009b84 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d004      	beq.n	8009688 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2202      	movs	r2, #2
 8009682:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009686:	e009      	b.n	800969c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009690:	e004      	b.n	800969c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 f99e 	bl	80099d6 <USBD_CtlError>
  }
}
 800969a:	bf00      	nop
 800969c:	bf00      	nop
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	885b      	ldrh	r3, [r3, #2]
 80096b6:	b2da      	uxtb	r2, r3
 80096b8:	4b4e      	ldr	r3, [pc, #312]	@ (80097f4 <USBD_SetConfig+0x150>)
 80096ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80096bc:	4b4d      	ldr	r3, [pc, #308]	@ (80097f4 <USBD_SetConfig+0x150>)
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d905      	bls.n	80096d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80096c4:	6839      	ldr	r1, [r7, #0]
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f985 	bl	80099d6 <USBD_CtlError>
    return USBD_FAIL;
 80096cc:	2303      	movs	r3, #3
 80096ce:	e08c      	b.n	80097ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b02      	cmp	r3, #2
 80096da:	d002      	beq.n	80096e2 <USBD_SetConfig+0x3e>
 80096dc:	2b03      	cmp	r3, #3
 80096de:	d029      	beq.n	8009734 <USBD_SetConfig+0x90>
 80096e0:	e075      	b.n	80097ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80096e2:	4b44      	ldr	r3, [pc, #272]	@ (80097f4 <USBD_SetConfig+0x150>)
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d020      	beq.n	800972c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80096ea:	4b42      	ldr	r3, [pc, #264]	@ (80097f4 <USBD_SetConfig+0x150>)
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096f4:	4b3f      	ldr	r3, [pc, #252]	@ (80097f4 <USBD_SetConfig+0x150>)
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	4619      	mov	r1, r3
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7fe ffe3 	bl	80086c6 <USBD_SetClassConfig>
 8009700:	4603      	mov	r3, r0
 8009702:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009704:	7bfb      	ldrb	r3, [r7, #15]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d008      	beq.n	800971c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f962 	bl	80099d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2202      	movs	r2, #2
 8009716:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800971a:	e065      	b.n	80097e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fa31 	bl	8009b84 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2203      	movs	r2, #3
 8009726:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800972a:	e05d      	b.n	80097e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fa29 	bl	8009b84 <USBD_CtlSendStatus>
      break;
 8009732:	e059      	b.n	80097e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009734:	4b2f      	ldr	r3, [pc, #188]	@ (80097f4 <USBD_SetConfig+0x150>)
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d112      	bne.n	8009762 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2202      	movs	r2, #2
 8009740:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009744:	4b2b      	ldr	r3, [pc, #172]	@ (80097f4 <USBD_SetConfig+0x150>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	461a      	mov	r2, r3
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800974e:	4b29      	ldr	r3, [pc, #164]	@ (80097f4 <USBD_SetConfig+0x150>)
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	4619      	mov	r1, r3
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f7fe ffd2 	bl	80086fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fa12 	bl	8009b84 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009760:	e042      	b.n	80097e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009762:	4b24      	ldr	r3, [pc, #144]	@ (80097f4 <USBD_SetConfig+0x150>)
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	461a      	mov	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	429a      	cmp	r2, r3
 800976e:	d02a      	beq.n	80097c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	b2db      	uxtb	r3, r3
 8009776:	4619      	mov	r1, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7fe ffc0 	bl	80086fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800977e:	4b1d      	ldr	r3, [pc, #116]	@ (80097f4 <USBD_SetConfig+0x150>)
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	461a      	mov	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009788:	4b1a      	ldr	r3, [pc, #104]	@ (80097f4 <USBD_SetConfig+0x150>)
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7fe ff99 	bl	80086c6 <USBD_SetClassConfig>
 8009794:	4603      	mov	r3, r0
 8009796:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009798:	7bfb      	ldrb	r3, [r7, #15]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00f      	beq.n	80097be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 f918 	bl	80099d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7fe ffa5 	bl	80086fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2202      	movs	r2, #2
 80097b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80097bc:	e014      	b.n	80097e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f9e0 	bl	8009b84 <USBD_CtlSendStatus>
      break;
 80097c4:	e010      	b.n	80097e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f9dc 	bl	8009b84 <USBD_CtlSendStatus>
      break;
 80097cc:	e00c      	b.n	80097e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 f900 	bl	80099d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80097d6:	4b07      	ldr	r3, [pc, #28]	@ (80097f4 <USBD_SetConfig+0x150>)
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7fe ff8e 	bl	80086fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80097e2:	2303      	movs	r3, #3
 80097e4:	73fb      	strb	r3, [r7, #15]
      break;
 80097e6:	bf00      	nop
  }

  return ret;
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	200003b4 	.word	0x200003b4

080097f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	88db      	ldrh	r3, [r3, #6]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d004      	beq.n	8009814 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800980a:	6839      	ldr	r1, [r7, #0]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f8e2 	bl	80099d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009812:	e023      	b.n	800985c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800981a:	b2db      	uxtb	r3, r3
 800981c:	2b02      	cmp	r3, #2
 800981e:	dc02      	bgt.n	8009826 <USBD_GetConfig+0x2e>
 8009820:	2b00      	cmp	r3, #0
 8009822:	dc03      	bgt.n	800982c <USBD_GetConfig+0x34>
 8009824:	e015      	b.n	8009852 <USBD_GetConfig+0x5a>
 8009826:	2b03      	cmp	r3, #3
 8009828:	d00b      	beq.n	8009842 <USBD_GetConfig+0x4a>
 800982a:	e012      	b.n	8009852 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	3308      	adds	r3, #8
 8009836:	2201      	movs	r2, #1
 8009838:	4619      	mov	r1, r3
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f948 	bl	8009ad0 <USBD_CtlSendData>
        break;
 8009840:	e00c      	b.n	800985c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	3304      	adds	r3, #4
 8009846:	2201      	movs	r2, #1
 8009848:	4619      	mov	r1, r3
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f940 	bl	8009ad0 <USBD_CtlSendData>
        break;
 8009850:	e004      	b.n	800985c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009852:	6839      	ldr	r1, [r7, #0]
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 f8be 	bl	80099d6 <USBD_CtlError>
        break;
 800985a:	bf00      	nop
}
 800985c:	bf00      	nop
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009874:	b2db      	uxtb	r3, r3
 8009876:	3b01      	subs	r3, #1
 8009878:	2b02      	cmp	r3, #2
 800987a:	d81e      	bhi.n	80098ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	88db      	ldrh	r3, [r3, #6]
 8009880:	2b02      	cmp	r3, #2
 8009882:	d004      	beq.n	800988e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f8a5 	bl	80099d6 <USBD_CtlError>
        break;
 800988c:	e01a      	b.n	80098c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800989a:	2b00      	cmp	r3, #0
 800989c:	d005      	beq.n	80098aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	f043 0202 	orr.w	r2, r3, #2
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	330c      	adds	r3, #12
 80098ae:	2202      	movs	r2, #2
 80098b0:	4619      	mov	r1, r3
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f90c 	bl	8009ad0 <USBD_CtlSendData>
      break;
 80098b8:	e004      	b.n	80098c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80098ba:	6839      	ldr	r1, [r7, #0]
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 f88a 	bl	80099d6 <USBD_CtlError>
      break;
 80098c2:	bf00      	nop
  }
}
 80098c4:	bf00      	nop
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	885b      	ldrh	r3, [r3, #2]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d107      	bne.n	80098ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f94c 	bl	8009b84 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80098ec:	e013      	b.n	8009916 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	885b      	ldrh	r3, [r3, #2]
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d10b      	bne.n	800990e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	889b      	ldrh	r3, [r3, #4]
 80098fa:	0a1b      	lsrs	r3, r3, #8
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 f93c 	bl	8009b84 <USBD_CtlSendStatus>
}
 800990c:	e003      	b.n	8009916 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800990e:	6839      	ldr	r1, [r7, #0]
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f860 	bl	80099d6 <USBD_CtlError>
}
 8009916:	bf00      	nop
 8009918:	3708      	adds	r7, #8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b082      	sub	sp, #8
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800992e:	b2db      	uxtb	r3, r3
 8009930:	3b01      	subs	r3, #1
 8009932:	2b02      	cmp	r3, #2
 8009934:	d80b      	bhi.n	800994e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	885b      	ldrh	r3, [r3, #2]
 800993a:	2b01      	cmp	r3, #1
 800993c:	d10c      	bne.n	8009958 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f91c 	bl	8009b84 <USBD_CtlSendStatus>
      }
      break;
 800994c:	e004      	b.n	8009958 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f840 	bl	80099d6 <USBD_CtlError>
      break;
 8009956:	e000      	b.n	800995a <USBD_ClrFeature+0x3c>
      break;
 8009958:	bf00      	nop
  }
}
 800995a:	bf00      	nop
 800995c:	3708      	adds	r7, #8
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b084      	sub	sp, #16
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	781a      	ldrb	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	3301      	adds	r3, #1
 800997c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	781a      	ldrb	r2, [r3, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	3301      	adds	r3, #1
 800998a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f7ff fa40 	bl	8008e12 <SWAPBYTE>
 8009992:	4603      	mov	r3, r0
 8009994:	461a      	mov	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	3301      	adds	r3, #1
 800999e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	3301      	adds	r3, #1
 80099a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f7ff fa33 	bl	8008e12 <SWAPBYTE>
 80099ac:	4603      	mov	r3, r0
 80099ae:	461a      	mov	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	3301      	adds	r3, #1
 80099b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	3301      	adds	r3, #1
 80099be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f7ff fa26 	bl	8008e12 <SWAPBYTE>
 80099c6:	4603      	mov	r3, r0
 80099c8:	461a      	mov	r2, r3
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	80da      	strh	r2, [r3, #6]
}
 80099ce:	bf00      	nop
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b082      	sub	sp, #8
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80099e0:	2180      	movs	r1, #128	@ 0x80
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fcfa 	bl	800a3dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80099e8:	2100      	movs	r1, #0
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fcf6 	bl	800a3dc <USBD_LL_StallEP>
}
 80099f0:	bf00      	nop
 80099f2:	3708      	adds	r7, #8
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b086      	sub	sp, #24
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009a04:	2300      	movs	r3, #0
 8009a06:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d042      	beq.n	8009a94 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009a12:	6938      	ldr	r0, [r7, #16]
 8009a14:	f000 f842 	bl	8009a9c <USBD_GetLen>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	005b      	lsls	r3, r3, #1
 8009a1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a22:	d808      	bhi.n	8009a36 <USBD_GetString+0x3e>
 8009a24:	6938      	ldr	r0, [r7, #16]
 8009a26:	f000 f839 	bl	8009a9c <USBD_GetLen>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	005b      	lsls	r3, r3, #1
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	e001      	b.n	8009a3a <USBD_GetString+0x42>
 8009a36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009a3e:	7dfb      	ldrb	r3, [r7, #23]
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	4413      	add	r3, r2
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	7812      	ldrb	r2, [r2, #0]
 8009a48:	701a      	strb	r2, [r3, #0]
  idx++;
 8009a4a:	7dfb      	ldrb	r3, [r7, #23]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009a50:	7dfb      	ldrb	r3, [r7, #23]
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	4413      	add	r3, r2
 8009a56:	2203      	movs	r2, #3
 8009a58:	701a      	strb	r2, [r3, #0]
  idx++;
 8009a5a:	7dfb      	ldrb	r3, [r7, #23]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009a60:	e013      	b.n	8009a8a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009a62:	7dfb      	ldrb	r3, [r7, #23]
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	4413      	add	r3, r2
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	7812      	ldrb	r2, [r2, #0]
 8009a6c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	3301      	adds	r3, #1
 8009a72:	613b      	str	r3, [r7, #16]
    idx++;
 8009a74:	7dfb      	ldrb	r3, [r7, #23]
 8009a76:	3301      	adds	r3, #1
 8009a78:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009a7a:	7dfb      	ldrb	r3, [r7, #23]
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	4413      	add	r3, r2
 8009a80:	2200      	movs	r2, #0
 8009a82:	701a      	strb	r2, [r3, #0]
    idx++;
 8009a84:	7dfb      	ldrb	r3, [r7, #23]
 8009a86:	3301      	adds	r3, #1
 8009a88:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1e7      	bne.n	8009a62 <USBD_GetString+0x6a>
 8009a92:	e000      	b.n	8009a96 <USBD_GetString+0x9e>
    return;
 8009a94:	bf00      	nop
  }
}
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009aac:	e005      	b.n	8009aba <USBD_GetLen+0x1e>
  {
    len++;
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1f5      	bne.n	8009aae <USBD_GetLen+0x12>
  }

  return len;
 8009ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3714      	adds	r7, #20
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2202      	movs	r2, #2
 8009ae0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	68ba      	ldr	r2, [r7, #8]
 8009af4:	2100      	movs	r1, #0
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	f000 fcf9 	bl	800a4ee <USBD_LL_Transmit>

  return USBD_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b084      	sub	sp, #16
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	60f8      	str	r0, [r7, #12]
 8009b0e:	60b9      	str	r1, [r7, #8]
 8009b10:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	2100      	movs	r1, #0
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	f000 fce8 	bl	800a4ee <USBD_LL_Transmit>

  return USBD_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2203      	movs	r2, #3
 8009b38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	68ba      	ldr	r2, [r7, #8]
 8009b50:	2100      	movs	r1, #0
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f000 fcec 	bl	800a530 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	60f8      	str	r0, [r7, #12]
 8009b6a:	60b9      	str	r1, [r7, #8]
 8009b6c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	2100      	movs	r1, #0
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f000 fcdb 	bl	800a530 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2204      	movs	r2, #4
 8009b90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b94:	2300      	movs	r3, #0
 8009b96:	2200      	movs	r2, #0
 8009b98:	2100      	movs	r1, #0
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 fca7 	bl	800a4ee <USBD_LL_Transmit>

  return USBD_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b082      	sub	sp, #8
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2205      	movs	r2, #5
 8009bb6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bba:	2300      	movs	r3, #0
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	2100      	movs	r1, #0
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fcb5 	bl	800a530 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	4912      	ldr	r1, [pc, #72]	@ (8009c20 <MX_USB_DEVICE_Init+0x50>)
 8009bd8:	4812      	ldr	r0, [pc, #72]	@ (8009c24 <MX_USB_DEVICE_Init+0x54>)
 8009bda:	f7fe fcf7 	bl	80085cc <USBD_Init>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d001      	beq.n	8009be8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009be4:	f7f7 fb7c 	bl	80012e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009be8:	490f      	ldr	r1, [pc, #60]	@ (8009c28 <MX_USB_DEVICE_Init+0x58>)
 8009bea:	480e      	ldr	r0, [pc, #56]	@ (8009c24 <MX_USB_DEVICE_Init+0x54>)
 8009bec:	f7fe fd1e 	bl	800862c <USBD_RegisterClass>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009bf6:	f7f7 fb73 	bl	80012e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009bfa:	490c      	ldr	r1, [pc, #48]	@ (8009c2c <MX_USB_DEVICE_Init+0x5c>)
 8009bfc:	4809      	ldr	r0, [pc, #36]	@ (8009c24 <MX_USB_DEVICE_Init+0x54>)
 8009bfe:	f7fe fc15 	bl	800842c <USBD_CDC_RegisterInterface>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d001      	beq.n	8009c0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009c08:	f7f7 fb6a 	bl	80012e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009c0c:	4805      	ldr	r0, [pc, #20]	@ (8009c24 <MX_USB_DEVICE_Init+0x54>)
 8009c0e:	f7fe fd43 	bl	8008698 <USBD_Start>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d001      	beq.n	8009c1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009c18:	f7f7 fb62 	bl	80012e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009c1c:	bf00      	nop
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	200000ac 	.word	0x200000ac
 8009c24:	200003b8 	.word	0x200003b8
 8009c28:	20000018 	.word	0x20000018
 8009c2c:	20000098 	.word	0x20000098

08009c30 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009c34:	2200      	movs	r2, #0
 8009c36:	4905      	ldr	r1, [pc, #20]	@ (8009c4c <CDC_Init_FS+0x1c>)
 8009c38:	4805      	ldr	r0, [pc, #20]	@ (8009c50 <CDC_Init_FS+0x20>)
 8009c3a:	f7fe fc11 	bl	8008460 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009c3e:	4905      	ldr	r1, [pc, #20]	@ (8009c54 <CDC_Init_FS+0x24>)
 8009c40:	4803      	ldr	r0, [pc, #12]	@ (8009c50 <CDC_Init_FS+0x20>)
 8009c42:	f7fe fc2f 	bl	80084a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009c46:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	20000e94 	.word	0x20000e94
 8009c50:	200003b8 	.word	0x200003b8
 8009c54:	20000694 	.word	0x20000694

08009c58 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009c5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	4603      	mov	r3, r0
 8009c70:	6039      	str	r1, [r7, #0]
 8009c72:	71fb      	strb	r3, [r7, #7]
 8009c74:	4613      	mov	r3, r2
 8009c76:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009c78:	79fb      	ldrb	r3, [r7, #7]
 8009c7a:	2b23      	cmp	r3, #35	@ 0x23
 8009c7c:	d84a      	bhi.n	8009d14 <CDC_Control_FS+0xac>
 8009c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c84 <CDC_Control_FS+0x1c>)
 8009c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c84:	08009d15 	.word	0x08009d15
 8009c88:	08009d15 	.word	0x08009d15
 8009c8c:	08009d15 	.word	0x08009d15
 8009c90:	08009d15 	.word	0x08009d15
 8009c94:	08009d15 	.word	0x08009d15
 8009c98:	08009d15 	.word	0x08009d15
 8009c9c:	08009d15 	.word	0x08009d15
 8009ca0:	08009d15 	.word	0x08009d15
 8009ca4:	08009d15 	.word	0x08009d15
 8009ca8:	08009d15 	.word	0x08009d15
 8009cac:	08009d15 	.word	0x08009d15
 8009cb0:	08009d15 	.word	0x08009d15
 8009cb4:	08009d15 	.word	0x08009d15
 8009cb8:	08009d15 	.word	0x08009d15
 8009cbc:	08009d15 	.word	0x08009d15
 8009cc0:	08009d15 	.word	0x08009d15
 8009cc4:	08009d15 	.word	0x08009d15
 8009cc8:	08009d15 	.word	0x08009d15
 8009ccc:	08009d15 	.word	0x08009d15
 8009cd0:	08009d15 	.word	0x08009d15
 8009cd4:	08009d15 	.word	0x08009d15
 8009cd8:	08009d15 	.word	0x08009d15
 8009cdc:	08009d15 	.word	0x08009d15
 8009ce0:	08009d15 	.word	0x08009d15
 8009ce4:	08009d15 	.word	0x08009d15
 8009ce8:	08009d15 	.word	0x08009d15
 8009cec:	08009d15 	.word	0x08009d15
 8009cf0:	08009d15 	.word	0x08009d15
 8009cf4:	08009d15 	.word	0x08009d15
 8009cf8:	08009d15 	.word	0x08009d15
 8009cfc:	08009d15 	.word	0x08009d15
 8009d00:	08009d15 	.word	0x08009d15
 8009d04:	08009d15 	.word	0x08009d15
 8009d08:	08009d15 	.word	0x08009d15
 8009d0c:	08009d15 	.word	0x08009d15
 8009d10:	08009d15 	.word	0x08009d15
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009d14:	bf00      	nop
  }

  return (USBD_OK);
 8009d16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009d2e:	6879      	ldr	r1, [r7, #4]
 8009d30:	4805      	ldr	r0, [pc, #20]	@ (8009d48 <CDC_Receive_FS+0x24>)
 8009d32:	f7fe fbb7 	bl	80084a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009d36:	4804      	ldr	r0, [pc, #16]	@ (8009d48 <CDC_Receive_FS+0x24>)
 8009d38:	f7fe fc12 	bl	8008560 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009d3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3708      	adds	r7, #8
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	200003b8 	.word	0x200003b8

08009d4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d94 <CDC_Transmit_FS+0x48>)
 8009d5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d62:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d001      	beq.n	8009d72 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e00b      	b.n	8009d8a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009d72:	887b      	ldrh	r3, [r7, #2]
 8009d74:	461a      	mov	r2, r3
 8009d76:	6879      	ldr	r1, [r7, #4]
 8009d78:	4806      	ldr	r0, [pc, #24]	@ (8009d94 <CDC_Transmit_FS+0x48>)
 8009d7a:	f7fe fb71 	bl	8008460 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009d7e:	4805      	ldr	r0, [pc, #20]	@ (8009d94 <CDC_Transmit_FS+0x48>)
 8009d80:	f7fe fbae 	bl	80084e0 <USBD_CDC_TransmitPacket>
 8009d84:	4603      	mov	r3, r0
 8009d86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	200003b8 	.word	0x200003b8

08009d98 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b087      	sub	sp, #28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	4613      	mov	r3, r2
 8009da4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009da6:	2300      	movs	r3, #0
 8009da8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009daa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	371c      	adds	r7, #28
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
	...

08009dbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	6039      	str	r1, [r7, #0]
 8009dc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	2212      	movs	r2, #18
 8009dcc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009dce:	4b03      	ldr	r3, [pc, #12]	@ (8009ddc <USBD_FS_DeviceDescriptor+0x20>)
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr
 8009ddc:	200000c8 	.word	0x200000c8

08009de0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	4603      	mov	r3, r0
 8009de8:	6039      	str	r1, [r7, #0]
 8009dea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	2204      	movs	r2, #4
 8009df0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009df2:	4b03      	ldr	r3, [pc, #12]	@ (8009e00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr
 8009e00:	200000dc 	.word	0x200000dc

08009e04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	6039      	str	r1, [r7, #0]
 8009e0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e10:	79fb      	ldrb	r3, [r7, #7]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d105      	bne.n	8009e22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e16:	683a      	ldr	r2, [r7, #0]
 8009e18:	4907      	ldr	r1, [pc, #28]	@ (8009e38 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e1a:	4808      	ldr	r0, [pc, #32]	@ (8009e3c <USBD_FS_ProductStrDescriptor+0x38>)
 8009e1c:	f7ff fdec 	bl	80099f8 <USBD_GetString>
 8009e20:	e004      	b.n	8009e2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e22:	683a      	ldr	r2, [r7, #0]
 8009e24:	4904      	ldr	r1, [pc, #16]	@ (8009e38 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e26:	4805      	ldr	r0, [pc, #20]	@ (8009e3c <USBD_FS_ProductStrDescriptor+0x38>)
 8009e28:	f7ff fde6 	bl	80099f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e2c:	4b02      	ldr	r3, [pc, #8]	@ (8009e38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3708      	adds	r7, #8
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	20001694 	.word	0x20001694
 8009e3c:	0800afa4 	.word	0x0800afa4

08009e40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	4603      	mov	r3, r0
 8009e48:	6039      	str	r1, [r7, #0]
 8009e4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e4c:	683a      	ldr	r2, [r7, #0]
 8009e4e:	4904      	ldr	r1, [pc, #16]	@ (8009e60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009e50:	4804      	ldr	r0, [pc, #16]	@ (8009e64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009e52:	f7ff fdd1 	bl	80099f8 <USBD_GetString>
  return USBD_StrDesc;
 8009e56:	4b02      	ldr	r3, [pc, #8]	@ (8009e60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	20001694 	.word	0x20001694
 8009e64:	0800afbc 	.word	0x0800afbc

08009e68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	4603      	mov	r3, r0
 8009e70:	6039      	str	r1, [r7, #0]
 8009e72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	221a      	movs	r2, #26
 8009e78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e7a:	f000 f843 	bl	8009f04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009e7e:	4b02      	ldr	r3, [pc, #8]	@ (8009e88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	200000e0 	.word	0x200000e0

08009e8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	4603      	mov	r3, r0
 8009e94:	6039      	str	r1, [r7, #0]
 8009e96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e98:	79fb      	ldrb	r3, [r7, #7]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d105      	bne.n	8009eaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e9e:	683a      	ldr	r2, [r7, #0]
 8009ea0:	4907      	ldr	r1, [pc, #28]	@ (8009ec0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ea2:	4808      	ldr	r0, [pc, #32]	@ (8009ec4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ea4:	f7ff fda8 	bl	80099f8 <USBD_GetString>
 8009ea8:	e004      	b.n	8009eb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009eaa:	683a      	ldr	r2, [r7, #0]
 8009eac:	4904      	ldr	r1, [pc, #16]	@ (8009ec0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009eae:	4805      	ldr	r0, [pc, #20]	@ (8009ec4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009eb0:	f7ff fda2 	bl	80099f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009eb4:	4b02      	ldr	r3, [pc, #8]	@ (8009ec0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20001694 	.word	0x20001694
 8009ec4:	0800afd0 	.word	0x0800afd0

08009ec8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	4603      	mov	r3, r0
 8009ed0:	6039      	str	r1, [r7, #0]
 8009ed2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ed4:	79fb      	ldrb	r3, [r7, #7]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d105      	bne.n	8009ee6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	4907      	ldr	r1, [pc, #28]	@ (8009efc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ede:	4808      	ldr	r0, [pc, #32]	@ (8009f00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ee0:	f7ff fd8a 	bl	80099f8 <USBD_GetString>
 8009ee4:	e004      	b.n	8009ef0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	4904      	ldr	r1, [pc, #16]	@ (8009efc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009eea:	4805      	ldr	r0, [pc, #20]	@ (8009f00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009eec:	f7ff fd84 	bl	80099f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ef0:	4b02      	ldr	r3, [pc, #8]	@ (8009efc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	20001694 	.word	0x20001694
 8009f00:	0800afdc 	.word	0x0800afdc

08009f04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8009f48 <Get_SerialNum+0x44>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009f10:	4b0e      	ldr	r3, [pc, #56]	@ (8009f4c <Get_SerialNum+0x48>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009f16:	4b0e      	ldr	r3, [pc, #56]	@ (8009f50 <Get_SerialNum+0x4c>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4413      	add	r3, r2
 8009f22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d009      	beq.n	8009f3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f2a:	2208      	movs	r2, #8
 8009f2c:	4909      	ldr	r1, [pc, #36]	@ (8009f54 <Get_SerialNum+0x50>)
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f000 f814 	bl	8009f5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f34:	2204      	movs	r2, #4
 8009f36:	4908      	ldr	r1, [pc, #32]	@ (8009f58 <Get_SerialNum+0x54>)
 8009f38:	68b8      	ldr	r0, [r7, #8]
 8009f3a:	f000 f80f 	bl	8009f5c <IntToUnicode>
  }
}
 8009f3e:	bf00      	nop
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	1fff7a10 	.word	0x1fff7a10
 8009f4c:	1fff7a14 	.word	0x1fff7a14
 8009f50:	1fff7a18 	.word	0x1fff7a18
 8009f54:	200000e2 	.word	0x200000e2
 8009f58:	200000f2 	.word	0x200000f2

08009f5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b087      	sub	sp, #28
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	4613      	mov	r3, r2
 8009f68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f6e:	2300      	movs	r3, #0
 8009f70:	75fb      	strb	r3, [r7, #23]
 8009f72:	e027      	b.n	8009fc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	0f1b      	lsrs	r3, r3, #28
 8009f78:	2b09      	cmp	r3, #9
 8009f7a:	d80b      	bhi.n	8009f94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	0f1b      	lsrs	r3, r3, #28
 8009f80:	b2da      	uxtb	r2, r3
 8009f82:	7dfb      	ldrb	r3, [r7, #23]
 8009f84:	005b      	lsls	r3, r3, #1
 8009f86:	4619      	mov	r1, r3
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	440b      	add	r3, r1
 8009f8c:	3230      	adds	r2, #48	@ 0x30
 8009f8e:	b2d2      	uxtb	r2, r2
 8009f90:	701a      	strb	r2, [r3, #0]
 8009f92:	e00a      	b.n	8009faa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	0f1b      	lsrs	r3, r3, #28
 8009f98:	b2da      	uxtb	r2, r3
 8009f9a:	7dfb      	ldrb	r3, [r7, #23]
 8009f9c:	005b      	lsls	r3, r3, #1
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	440b      	add	r3, r1
 8009fa4:	3237      	adds	r2, #55	@ 0x37
 8009fa6:	b2d2      	uxtb	r2, r2
 8009fa8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	011b      	lsls	r3, r3, #4
 8009fae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009fb0:	7dfb      	ldrb	r3, [r7, #23]
 8009fb2:	005b      	lsls	r3, r3, #1
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	68ba      	ldr	r2, [r7, #8]
 8009fb8:	4413      	add	r3, r2
 8009fba:	2200      	movs	r2, #0
 8009fbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009fbe:	7dfb      	ldrb	r3, [r7, #23]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	75fb      	strb	r3, [r7, #23]
 8009fc4:	7dfa      	ldrb	r2, [r7, #23]
 8009fc6:	79fb      	ldrb	r3, [r7, #7]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d3d3      	bcc.n	8009f74 <IntToUnicode+0x18>
  }
}
 8009fcc:	bf00      	nop
 8009fce:	bf00      	nop
 8009fd0:	371c      	adds	r7, #28
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
	...

08009fdc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08a      	sub	sp, #40	@ 0x28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fe4:	f107 0314 	add.w	r3, r7, #20
 8009fe8:	2200      	movs	r2, #0
 8009fea:	601a      	str	r2, [r3, #0]
 8009fec:	605a      	str	r2, [r3, #4]
 8009fee:	609a      	str	r2, [r3, #8]
 8009ff0:	60da      	str	r2, [r3, #12]
 8009ff2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ffc:	d147      	bne.n	800a08e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ffe:	2300      	movs	r3, #0
 800a000:	613b      	str	r3, [r7, #16]
 800a002:	4b25      	ldr	r3, [pc, #148]	@ (800a098 <HAL_PCD_MspInit+0xbc>)
 800a004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a006:	4a24      	ldr	r2, [pc, #144]	@ (800a098 <HAL_PCD_MspInit+0xbc>)
 800a008:	f043 0301 	orr.w	r3, r3, #1
 800a00c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a00e:	4b22      	ldr	r3, [pc, #136]	@ (800a098 <HAL_PCD_MspInit+0xbc>)
 800a010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a012:	f003 0301 	and.w	r3, r3, #1
 800a016:	613b      	str	r3, [r7, #16]
 800a018:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a01a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a01e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a020:	2300      	movs	r3, #0
 800a022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a024:	2300      	movs	r3, #0
 800a026:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a028:	f107 0314 	add.w	r3, r7, #20
 800a02c:	4619      	mov	r1, r3
 800a02e:	481b      	ldr	r0, [pc, #108]	@ (800a09c <HAL_PCD_MspInit+0xc0>)
 800a030:	f7f8 fed0 	bl	8002dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a034:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a03a:	2302      	movs	r3, #2
 800a03c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a03e:	2300      	movs	r3, #0
 800a040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a042:	2303      	movs	r3, #3
 800a044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a046:	230a      	movs	r3, #10
 800a048:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a04a:	f107 0314 	add.w	r3, r7, #20
 800a04e:	4619      	mov	r1, r3
 800a050:	4812      	ldr	r0, [pc, #72]	@ (800a09c <HAL_PCD_MspInit+0xc0>)
 800a052:	f7f8 febf 	bl	8002dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a056:	4b10      	ldr	r3, [pc, #64]	@ (800a098 <HAL_PCD_MspInit+0xbc>)
 800a058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a05a:	4a0f      	ldr	r2, [pc, #60]	@ (800a098 <HAL_PCD_MspInit+0xbc>)
 800a05c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a060:	6353      	str	r3, [r2, #52]	@ 0x34
 800a062:	2300      	movs	r3, #0
 800a064:	60fb      	str	r3, [r7, #12]
 800a066:	4b0c      	ldr	r3, [pc, #48]	@ (800a098 <HAL_PCD_MspInit+0xbc>)
 800a068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a06a:	4a0b      	ldr	r2, [pc, #44]	@ (800a098 <HAL_PCD_MspInit+0xbc>)
 800a06c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a070:	6453      	str	r3, [r2, #68]	@ 0x44
 800a072:	4b09      	ldr	r3, [pc, #36]	@ (800a098 <HAL_PCD_MspInit+0xbc>)
 800a074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a07a:	60fb      	str	r3, [r7, #12]
 800a07c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a07e:	2200      	movs	r2, #0
 800a080:	2100      	movs	r1, #0
 800a082:	2043      	movs	r0, #67	@ 0x43
 800a084:	f7f8 f901 	bl	800228a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a088:	2043      	movs	r0, #67	@ 0x43
 800a08a:	f7f8 f91a 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a08e:	bf00      	nop
 800a090:	3728      	adds	r7, #40	@ 0x28
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	40023800 	.word	0x40023800
 800a09c:	40020000 	.word	0x40020000

0800a0a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	4610      	mov	r0, r2
 800a0b8:	f7fe fb3b 	bl	8008732 <USBD_LL_SetupStage>
}
 800a0bc:	bf00      	nop
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a0d6:	78fa      	ldrb	r2, [r7, #3]
 800a0d8:	6879      	ldr	r1, [r7, #4]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	00db      	lsls	r3, r3, #3
 800a0de:	4413      	add	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	440b      	add	r3, r1
 800a0e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	78fb      	ldrb	r3, [r7, #3]
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	f7fe fb75 	bl	80087dc <USBD_LL_DataOutStage>
}
 800a0f2:	bf00      	nop
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b082      	sub	sp, #8
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
 800a102:	460b      	mov	r3, r1
 800a104:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a10c:	78fa      	ldrb	r2, [r7, #3]
 800a10e:	6879      	ldr	r1, [r7, #4]
 800a110:	4613      	mov	r3, r2
 800a112:	00db      	lsls	r3, r3, #3
 800a114:	4413      	add	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	440b      	add	r3, r1
 800a11a:	3320      	adds	r3, #32
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	78fb      	ldrb	r3, [r7, #3]
 800a120:	4619      	mov	r1, r3
 800a122:	f7fe fc0e 	bl	8008942 <USBD_LL_DataInStage>
}
 800a126:	bf00      	nop
 800a128:	3708      	adds	r7, #8
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b082      	sub	sp, #8
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7fe fd48 	bl	8008bd2 <USBD_LL_SOF>
}
 800a142:	bf00      	nop
 800a144:	3708      	adds	r7, #8
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b084      	sub	sp, #16
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a152:	2301      	movs	r3, #1
 800a154:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	79db      	ldrb	r3, [r3, #7]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d102      	bne.n	800a164 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a15e:	2300      	movs	r3, #0
 800a160:	73fb      	strb	r3, [r7, #15]
 800a162:	e008      	b.n	800a176 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	79db      	ldrb	r3, [r3, #7]
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d102      	bne.n	800a172 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a16c:	2301      	movs	r3, #1
 800a16e:	73fb      	strb	r3, [r7, #15]
 800a170:	e001      	b.n	800a176 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a172:	f7f7 f8b5 	bl	80012e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a17c:	7bfa      	ldrb	r2, [r7, #15]
 800a17e:	4611      	mov	r1, r2
 800a180:	4618      	mov	r0, r3
 800a182:	f7fe fce2 	bl	8008b4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fe fc8a 	bl	8008aa6 <USBD_LL_Reset>
}
 800a192:	bf00      	nop
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
	...

0800a19c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fe fcdd 	bl	8008b6a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	6812      	ldr	r2, [r2, #0]
 800a1be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a1c2:	f043 0301 	orr.w	r3, r3, #1
 800a1c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	7adb      	ldrb	r3, [r3, #11]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d005      	beq.n	800a1dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1d0:	4b04      	ldr	r3, [pc, #16]	@ (800a1e4 <HAL_PCD_SuspendCallback+0x48>)
 800a1d2:	691b      	ldr	r3, [r3, #16]
 800a1d4:	4a03      	ldr	r2, [pc, #12]	@ (800a1e4 <HAL_PCD_SuspendCallback+0x48>)
 800a1d6:	f043 0306 	orr.w	r3, r3, #6
 800a1da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a1dc:	bf00      	nop
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	e000ed00 	.word	0xe000ed00

0800a1e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fe fcd3 	bl	8008ba2 <USBD_LL_Resume>
}
 800a1fc:	bf00      	nop
 800a1fe:	3708      	adds	r7, #8
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	460b      	mov	r3, r1
 800a20e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a216:	78fa      	ldrb	r2, [r7, #3]
 800a218:	4611      	mov	r1, r2
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7fe fd2b 	bl	8008c76 <USBD_LL_IsoOUTIncomplete>
}
 800a220:	bf00      	nop
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	460b      	mov	r3, r1
 800a232:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a23a:	78fa      	ldrb	r2, [r7, #3]
 800a23c:	4611      	mov	r1, r2
 800a23e:	4618      	mov	r0, r3
 800a240:	f7fe fce7 	bl	8008c12 <USBD_LL_IsoINIncomplete>
}
 800a244:	bf00      	nop
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7fe fd3d 	bl	8008cda <USBD_LL_DevConnected>
}
 800a260:	bf00      	nop
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe fd3a 	bl	8008cf0 <USBD_LL_DevDisconnected>
}
 800a27c:	bf00      	nop
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d13c      	bne.n	800a30e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a294:	4a20      	ldr	r2, [pc, #128]	@ (800a318 <USBD_LL_Init+0x94>)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a1e      	ldr	r2, [pc, #120]	@ (800a318 <USBD_LL_Init+0x94>)
 800a2a0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a2a4:	4b1c      	ldr	r3, [pc, #112]	@ (800a318 <USBD_LL_Init+0x94>)
 800a2a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a2aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a2ac:	4b1a      	ldr	r3, [pc, #104]	@ (800a318 <USBD_LL_Init+0x94>)
 800a2ae:	2204      	movs	r2, #4
 800a2b0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a2b2:	4b19      	ldr	r3, [pc, #100]	@ (800a318 <USBD_LL_Init+0x94>)
 800a2b4:	2202      	movs	r2, #2
 800a2b6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a2b8:	4b17      	ldr	r3, [pc, #92]	@ (800a318 <USBD_LL_Init+0x94>)
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a2be:	4b16      	ldr	r3, [pc, #88]	@ (800a318 <USBD_LL_Init+0x94>)
 800a2c0:	2202      	movs	r2, #2
 800a2c2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a2c4:	4b14      	ldr	r3, [pc, #80]	@ (800a318 <USBD_LL_Init+0x94>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a2ca:	4b13      	ldr	r3, [pc, #76]	@ (800a318 <USBD_LL_Init+0x94>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a2d0:	4b11      	ldr	r3, [pc, #68]	@ (800a318 <USBD_LL_Init+0x94>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a2d6:	4b10      	ldr	r3, [pc, #64]	@ (800a318 <USBD_LL_Init+0x94>)
 800a2d8:	2201      	movs	r2, #1
 800a2da:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a2dc:	4b0e      	ldr	r3, [pc, #56]	@ (800a318 <USBD_LL_Init+0x94>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a2e2:	480d      	ldr	r0, [pc, #52]	@ (800a318 <USBD_LL_Init+0x94>)
 800a2e4:	f7f9 f8a0 	bl	8003428 <HAL_PCD_Init>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d001      	beq.n	800a2f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a2ee:	f7f6 fff7 	bl	80012e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a2f2:	2180      	movs	r1, #128	@ 0x80
 800a2f4:	4808      	ldr	r0, [pc, #32]	@ (800a318 <USBD_LL_Init+0x94>)
 800a2f6:	f7fa facc 	bl	8004892 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a2fa:	2240      	movs	r2, #64	@ 0x40
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	4806      	ldr	r0, [pc, #24]	@ (800a318 <USBD_LL_Init+0x94>)
 800a300:	f7fa fa80 	bl	8004804 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a304:	2280      	movs	r2, #128	@ 0x80
 800a306:	2101      	movs	r1, #1
 800a308:	4803      	ldr	r0, [pc, #12]	@ (800a318 <USBD_LL_Init+0x94>)
 800a30a:	f7fa fa7b 	bl	8004804 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	20001894 	.word	0x20001894

0800a31c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a324:	2300      	movs	r3, #0
 800a326:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a332:	4618      	mov	r0, r3
 800a334:	f7f9 f987 	bl	8003646 <HAL_PCD_Start>
 800a338:	4603      	mov	r3, r0
 800a33a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a33c:	7bfb      	ldrb	r3, [r7, #15]
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 f942 	bl	800a5c8 <USBD_Get_USB_Status>
 800a344:	4603      	mov	r3, r0
 800a346:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a348:	7bbb      	ldrb	r3, [r7, #14]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b084      	sub	sp, #16
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	4608      	mov	r0, r1
 800a35c:	4611      	mov	r1, r2
 800a35e:	461a      	mov	r2, r3
 800a360:	4603      	mov	r3, r0
 800a362:	70fb      	strb	r3, [r7, #3]
 800a364:	460b      	mov	r3, r1
 800a366:	70bb      	strb	r3, [r7, #2]
 800a368:	4613      	mov	r3, r2
 800a36a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a370:	2300      	movs	r3, #0
 800a372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a37a:	78bb      	ldrb	r3, [r7, #2]
 800a37c:	883a      	ldrh	r2, [r7, #0]
 800a37e:	78f9      	ldrb	r1, [r7, #3]
 800a380:	f7f9 fe5b 	bl	800403a <HAL_PCD_EP_Open>
 800a384:	4603      	mov	r3, r0
 800a386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a388:	7bfb      	ldrb	r3, [r7, #15]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 f91c 	bl	800a5c8 <USBD_Get_USB_Status>
 800a390:	4603      	mov	r3, r0
 800a392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a394:	7bbb      	ldrb	r3, [r7, #14]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b084      	sub	sp, #16
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a3b8:	78fa      	ldrb	r2, [r7, #3]
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7f9 fea6 	bl	800410e <HAL_PCD_EP_Close>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3c6:	7bfb      	ldrb	r3, [r7, #15]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f000 f8fd 	bl	800a5c8 <USBD_Get_USB_Status>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a3f6:	78fa      	ldrb	r2, [r7, #3]
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7f9 ff5e 	bl	80042bc <HAL_PCD_EP_SetStall>
 800a400:	4603      	mov	r3, r0
 800a402:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a404:	7bfb      	ldrb	r3, [r7, #15]
 800a406:	4618      	mov	r0, r3
 800a408:	f000 f8de 	bl	800a5c8 <USBD_Get_USB_Status>
 800a40c:	4603      	mov	r3, r0
 800a40e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a410:	7bbb      	ldrb	r3, [r7, #14]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b084      	sub	sp, #16
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	460b      	mov	r3, r1
 800a424:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a426:	2300      	movs	r3, #0
 800a428:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a434:	78fa      	ldrb	r2, [r7, #3]
 800a436:	4611      	mov	r1, r2
 800a438:	4618      	mov	r0, r3
 800a43a:	f7f9 ffa2 	bl	8004382 <HAL_PCD_EP_ClrStall>
 800a43e:	4603      	mov	r3, r0
 800a440:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a442:	7bfb      	ldrb	r3, [r7, #15]
 800a444:	4618      	mov	r0, r3
 800a446:	f000 f8bf 	bl	800a5c8 <USBD_Get_USB_Status>
 800a44a:	4603      	mov	r3, r0
 800a44c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a44e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	460b      	mov	r3, r1
 800a462:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a46a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a46c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a470:	2b00      	cmp	r3, #0
 800a472:	da0b      	bge.n	800a48c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a474:	78fb      	ldrb	r3, [r7, #3]
 800a476:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a47a:	68f9      	ldr	r1, [r7, #12]
 800a47c:	4613      	mov	r3, r2
 800a47e:	00db      	lsls	r3, r3, #3
 800a480:	4413      	add	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	440b      	add	r3, r1
 800a486:	3316      	adds	r3, #22
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	e00b      	b.n	800a4a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a48c:	78fb      	ldrb	r3, [r7, #3]
 800a48e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a492:	68f9      	ldr	r1, [r7, #12]
 800a494:	4613      	mov	r3, r2
 800a496:	00db      	lsls	r3, r3, #3
 800a498:	4413      	add	r3, r2
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	440b      	add	r3, r1
 800a49e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a4a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3714      	adds	r7, #20
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a4ca:	78fa      	ldrb	r2, [r7, #3]
 800a4cc:	4611      	mov	r1, r2
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7f9 fd8f 	bl	8003ff2 <HAL_PCD_SetAddress>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4d8:	7bfb      	ldrb	r3, [r7, #15]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 f874 	bl	800a5c8 <USBD_Get_USB_Status>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b086      	sub	sp, #24
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	60f8      	str	r0, [r7, #12]
 800a4f6:	607a      	str	r2, [r7, #4]
 800a4f8:	603b      	str	r3, [r7, #0]
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a502:	2300      	movs	r3, #0
 800a504:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a50c:	7af9      	ldrb	r1, [r7, #11]
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	f7f9 fe99 	bl	8004248 <HAL_PCD_EP_Transmit>
 800a516:	4603      	mov	r3, r0
 800a518:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a51a:	7dfb      	ldrb	r3, [r7, #23]
 800a51c:	4618      	mov	r0, r3
 800a51e:	f000 f853 	bl	800a5c8 <USBD_Get_USB_Status>
 800a522:	4603      	mov	r3, r0
 800a524:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a526:	7dbb      	ldrb	r3, [r7, #22]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3718      	adds	r7, #24
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	607a      	str	r2, [r7, #4]
 800a53a:	603b      	str	r3, [r7, #0]
 800a53c:	460b      	mov	r3, r1
 800a53e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a540:	2300      	movs	r3, #0
 800a542:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a54e:	7af9      	ldrb	r1, [r7, #11]
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	f7f9 fe25 	bl	80041a2 <HAL_PCD_EP_Receive>
 800a558:	4603      	mov	r3, r0
 800a55a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a55c:	7dfb      	ldrb	r3, [r7, #23]
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 f832 	bl	800a5c8 <USBD_Get_USB_Status>
 800a564:	4603      	mov	r3, r0
 800a566:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a568:	7dbb      	ldrb	r3, [r7, #22]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3718      	adds	r7, #24
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b082      	sub	sp, #8
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	460b      	mov	r3, r1
 800a57c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a584:	78fa      	ldrb	r2, [r7, #3]
 800a586:	4611      	mov	r1, r2
 800a588:	4618      	mov	r0, r3
 800a58a:	f7f9 fe45 	bl	8004218 <HAL_PCD_EP_GetRxCount>
 800a58e:	4603      	mov	r3, r0
}
 800a590:	4618      	mov	r0, r3
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a598:	b480      	push	{r7}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a5a0:	4b03      	ldr	r3, [pc, #12]	@ (800a5b0 <USBD_static_malloc+0x18>)
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	370c      	adds	r7, #12
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	20001d78 	.word	0x20001d78

0800a5b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]

}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a5d6:	79fb      	ldrb	r3, [r7, #7]
 800a5d8:	2b03      	cmp	r3, #3
 800a5da:	d817      	bhi.n	800a60c <USBD_Get_USB_Status+0x44>
 800a5dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a5e4 <USBD_Get_USB_Status+0x1c>)
 800a5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e2:	bf00      	nop
 800a5e4:	0800a5f5 	.word	0x0800a5f5
 800a5e8:	0800a5fb 	.word	0x0800a5fb
 800a5ec:	0800a601 	.word	0x0800a601
 800a5f0:	0800a607 	.word	0x0800a607
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a5f8:	e00b      	b.n	800a612 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a5fa:	2303      	movs	r3, #3
 800a5fc:	73fb      	strb	r3, [r7, #15]
    break;
 800a5fe:	e008      	b.n	800a612 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a600:	2301      	movs	r3, #1
 800a602:	73fb      	strb	r3, [r7, #15]
    break;
 800a604:	e005      	b.n	800a612 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a606:	2303      	movs	r3, #3
 800a608:	73fb      	strb	r3, [r7, #15]
    break;
 800a60a:	e002      	b.n	800a612 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a60c:	2303      	movs	r3, #3
 800a60e:	73fb      	strb	r3, [r7, #15]
    break;
 800a610:	bf00      	nop
  }
  return usb_status;
 800a612:	7bfb      	ldrb	r3, [r7, #15]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3714      	adds	r7, #20
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <sniprintf>:
 800a620:	b40c      	push	{r2, r3}
 800a622:	b530      	push	{r4, r5, lr}
 800a624:	4b17      	ldr	r3, [pc, #92]	@ (800a684 <sniprintf+0x64>)
 800a626:	1e0c      	subs	r4, r1, #0
 800a628:	681d      	ldr	r5, [r3, #0]
 800a62a:	b09d      	sub	sp, #116	@ 0x74
 800a62c:	da08      	bge.n	800a640 <sniprintf+0x20>
 800a62e:	238b      	movs	r3, #139	@ 0x8b
 800a630:	602b      	str	r3, [r5, #0]
 800a632:	f04f 30ff 	mov.w	r0, #4294967295
 800a636:	b01d      	add	sp, #116	@ 0x74
 800a638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a63c:	b002      	add	sp, #8
 800a63e:	4770      	bx	lr
 800a640:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a644:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a648:	bf14      	ite	ne
 800a64a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a64e:	4623      	moveq	r3, r4
 800a650:	9304      	str	r3, [sp, #16]
 800a652:	9307      	str	r3, [sp, #28]
 800a654:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a658:	9002      	str	r0, [sp, #8]
 800a65a:	9006      	str	r0, [sp, #24]
 800a65c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a660:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a662:	ab21      	add	r3, sp, #132	@ 0x84
 800a664:	a902      	add	r1, sp, #8
 800a666:	4628      	mov	r0, r5
 800a668:	9301      	str	r3, [sp, #4]
 800a66a:	f000 f9a3 	bl	800a9b4 <_svfiprintf_r>
 800a66e:	1c43      	adds	r3, r0, #1
 800a670:	bfbc      	itt	lt
 800a672:	238b      	movlt	r3, #139	@ 0x8b
 800a674:	602b      	strlt	r3, [r5, #0]
 800a676:	2c00      	cmp	r4, #0
 800a678:	d0dd      	beq.n	800a636 <sniprintf+0x16>
 800a67a:	9b02      	ldr	r3, [sp, #8]
 800a67c:	2200      	movs	r2, #0
 800a67e:	701a      	strb	r2, [r3, #0]
 800a680:	e7d9      	b.n	800a636 <sniprintf+0x16>
 800a682:	bf00      	nop
 800a684:	200000fc 	.word	0x200000fc

0800a688 <memset>:
 800a688:	4402      	add	r2, r0
 800a68a:	4603      	mov	r3, r0
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d100      	bne.n	800a692 <memset+0xa>
 800a690:	4770      	bx	lr
 800a692:	f803 1b01 	strb.w	r1, [r3], #1
 800a696:	e7f9      	b.n	800a68c <memset+0x4>

0800a698 <__errno>:
 800a698:	4b01      	ldr	r3, [pc, #4]	@ (800a6a0 <__errno+0x8>)
 800a69a:	6818      	ldr	r0, [r3, #0]
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	200000fc 	.word	0x200000fc

0800a6a4 <__libc_init_array>:
 800a6a4:	b570      	push	{r4, r5, r6, lr}
 800a6a6:	4d0d      	ldr	r5, [pc, #52]	@ (800a6dc <__libc_init_array+0x38>)
 800a6a8:	4c0d      	ldr	r4, [pc, #52]	@ (800a6e0 <__libc_init_array+0x3c>)
 800a6aa:	1b64      	subs	r4, r4, r5
 800a6ac:	10a4      	asrs	r4, r4, #2
 800a6ae:	2600      	movs	r6, #0
 800a6b0:	42a6      	cmp	r6, r4
 800a6b2:	d109      	bne.n	800a6c8 <__libc_init_array+0x24>
 800a6b4:	4d0b      	ldr	r5, [pc, #44]	@ (800a6e4 <__libc_init_array+0x40>)
 800a6b6:	4c0c      	ldr	r4, [pc, #48]	@ (800a6e8 <__libc_init_array+0x44>)
 800a6b8:	f000 fc66 	bl	800af88 <_init>
 800a6bc:	1b64      	subs	r4, r4, r5
 800a6be:	10a4      	asrs	r4, r4, #2
 800a6c0:	2600      	movs	r6, #0
 800a6c2:	42a6      	cmp	r6, r4
 800a6c4:	d105      	bne.n	800a6d2 <__libc_init_array+0x2e>
 800a6c6:	bd70      	pop	{r4, r5, r6, pc}
 800a6c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6cc:	4798      	blx	r3
 800a6ce:	3601      	adds	r6, #1
 800a6d0:	e7ee      	b.n	800a6b0 <__libc_init_array+0xc>
 800a6d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6d6:	4798      	blx	r3
 800a6d8:	3601      	adds	r6, #1
 800a6da:	e7f2      	b.n	800a6c2 <__libc_init_array+0x1e>
 800a6dc:	0800b048 	.word	0x0800b048
 800a6e0:	0800b048 	.word	0x0800b048
 800a6e4:	0800b048 	.word	0x0800b048
 800a6e8:	0800b04c 	.word	0x0800b04c

0800a6ec <__retarget_lock_acquire_recursive>:
 800a6ec:	4770      	bx	lr

0800a6ee <__retarget_lock_release_recursive>:
 800a6ee:	4770      	bx	lr

0800a6f0 <memcpy>:
 800a6f0:	440a      	add	r2, r1
 800a6f2:	4291      	cmp	r1, r2
 800a6f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6f8:	d100      	bne.n	800a6fc <memcpy+0xc>
 800a6fa:	4770      	bx	lr
 800a6fc:	b510      	push	{r4, lr}
 800a6fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a702:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a706:	4291      	cmp	r1, r2
 800a708:	d1f9      	bne.n	800a6fe <memcpy+0xe>
 800a70a:	bd10      	pop	{r4, pc}

0800a70c <_free_r>:
 800a70c:	b538      	push	{r3, r4, r5, lr}
 800a70e:	4605      	mov	r5, r0
 800a710:	2900      	cmp	r1, #0
 800a712:	d041      	beq.n	800a798 <_free_r+0x8c>
 800a714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a718:	1f0c      	subs	r4, r1, #4
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	bfb8      	it	lt
 800a71e:	18e4      	addlt	r4, r4, r3
 800a720:	f000 f8e0 	bl	800a8e4 <__malloc_lock>
 800a724:	4a1d      	ldr	r2, [pc, #116]	@ (800a79c <_free_r+0x90>)
 800a726:	6813      	ldr	r3, [r2, #0]
 800a728:	b933      	cbnz	r3, 800a738 <_free_r+0x2c>
 800a72a:	6063      	str	r3, [r4, #4]
 800a72c:	6014      	str	r4, [r2, #0]
 800a72e:	4628      	mov	r0, r5
 800a730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a734:	f000 b8dc 	b.w	800a8f0 <__malloc_unlock>
 800a738:	42a3      	cmp	r3, r4
 800a73a:	d908      	bls.n	800a74e <_free_r+0x42>
 800a73c:	6820      	ldr	r0, [r4, #0]
 800a73e:	1821      	adds	r1, r4, r0
 800a740:	428b      	cmp	r3, r1
 800a742:	bf01      	itttt	eq
 800a744:	6819      	ldreq	r1, [r3, #0]
 800a746:	685b      	ldreq	r3, [r3, #4]
 800a748:	1809      	addeq	r1, r1, r0
 800a74a:	6021      	streq	r1, [r4, #0]
 800a74c:	e7ed      	b.n	800a72a <_free_r+0x1e>
 800a74e:	461a      	mov	r2, r3
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	b10b      	cbz	r3, 800a758 <_free_r+0x4c>
 800a754:	42a3      	cmp	r3, r4
 800a756:	d9fa      	bls.n	800a74e <_free_r+0x42>
 800a758:	6811      	ldr	r1, [r2, #0]
 800a75a:	1850      	adds	r0, r2, r1
 800a75c:	42a0      	cmp	r0, r4
 800a75e:	d10b      	bne.n	800a778 <_free_r+0x6c>
 800a760:	6820      	ldr	r0, [r4, #0]
 800a762:	4401      	add	r1, r0
 800a764:	1850      	adds	r0, r2, r1
 800a766:	4283      	cmp	r3, r0
 800a768:	6011      	str	r1, [r2, #0]
 800a76a:	d1e0      	bne.n	800a72e <_free_r+0x22>
 800a76c:	6818      	ldr	r0, [r3, #0]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	6053      	str	r3, [r2, #4]
 800a772:	4408      	add	r0, r1
 800a774:	6010      	str	r0, [r2, #0]
 800a776:	e7da      	b.n	800a72e <_free_r+0x22>
 800a778:	d902      	bls.n	800a780 <_free_r+0x74>
 800a77a:	230c      	movs	r3, #12
 800a77c:	602b      	str	r3, [r5, #0]
 800a77e:	e7d6      	b.n	800a72e <_free_r+0x22>
 800a780:	6820      	ldr	r0, [r4, #0]
 800a782:	1821      	adds	r1, r4, r0
 800a784:	428b      	cmp	r3, r1
 800a786:	bf04      	itt	eq
 800a788:	6819      	ldreq	r1, [r3, #0]
 800a78a:	685b      	ldreq	r3, [r3, #4]
 800a78c:	6063      	str	r3, [r4, #4]
 800a78e:	bf04      	itt	eq
 800a790:	1809      	addeq	r1, r1, r0
 800a792:	6021      	streq	r1, [r4, #0]
 800a794:	6054      	str	r4, [r2, #4]
 800a796:	e7ca      	b.n	800a72e <_free_r+0x22>
 800a798:	bd38      	pop	{r3, r4, r5, pc}
 800a79a:	bf00      	nop
 800a79c:	200020dc 	.word	0x200020dc

0800a7a0 <sbrk_aligned>:
 800a7a0:	b570      	push	{r4, r5, r6, lr}
 800a7a2:	4e0f      	ldr	r6, [pc, #60]	@ (800a7e0 <sbrk_aligned+0x40>)
 800a7a4:	460c      	mov	r4, r1
 800a7a6:	6831      	ldr	r1, [r6, #0]
 800a7a8:	4605      	mov	r5, r0
 800a7aa:	b911      	cbnz	r1, 800a7b2 <sbrk_aligned+0x12>
 800a7ac:	f000 fba6 	bl	800aefc <_sbrk_r>
 800a7b0:	6030      	str	r0, [r6, #0]
 800a7b2:	4621      	mov	r1, r4
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	f000 fba1 	bl	800aefc <_sbrk_r>
 800a7ba:	1c43      	adds	r3, r0, #1
 800a7bc:	d103      	bne.n	800a7c6 <sbrk_aligned+0x26>
 800a7be:	f04f 34ff 	mov.w	r4, #4294967295
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	bd70      	pop	{r4, r5, r6, pc}
 800a7c6:	1cc4      	adds	r4, r0, #3
 800a7c8:	f024 0403 	bic.w	r4, r4, #3
 800a7cc:	42a0      	cmp	r0, r4
 800a7ce:	d0f8      	beq.n	800a7c2 <sbrk_aligned+0x22>
 800a7d0:	1a21      	subs	r1, r4, r0
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	f000 fb92 	bl	800aefc <_sbrk_r>
 800a7d8:	3001      	adds	r0, #1
 800a7da:	d1f2      	bne.n	800a7c2 <sbrk_aligned+0x22>
 800a7dc:	e7ef      	b.n	800a7be <sbrk_aligned+0x1e>
 800a7de:	bf00      	nop
 800a7e0:	200020d8 	.word	0x200020d8

0800a7e4 <_malloc_r>:
 800a7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7e8:	1ccd      	adds	r5, r1, #3
 800a7ea:	f025 0503 	bic.w	r5, r5, #3
 800a7ee:	3508      	adds	r5, #8
 800a7f0:	2d0c      	cmp	r5, #12
 800a7f2:	bf38      	it	cc
 800a7f4:	250c      	movcc	r5, #12
 800a7f6:	2d00      	cmp	r5, #0
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	db01      	blt.n	800a800 <_malloc_r+0x1c>
 800a7fc:	42a9      	cmp	r1, r5
 800a7fe:	d904      	bls.n	800a80a <_malloc_r+0x26>
 800a800:	230c      	movs	r3, #12
 800a802:	6033      	str	r3, [r6, #0]
 800a804:	2000      	movs	r0, #0
 800a806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a80a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8e0 <_malloc_r+0xfc>
 800a80e:	f000 f869 	bl	800a8e4 <__malloc_lock>
 800a812:	f8d8 3000 	ldr.w	r3, [r8]
 800a816:	461c      	mov	r4, r3
 800a818:	bb44      	cbnz	r4, 800a86c <_malloc_r+0x88>
 800a81a:	4629      	mov	r1, r5
 800a81c:	4630      	mov	r0, r6
 800a81e:	f7ff ffbf 	bl	800a7a0 <sbrk_aligned>
 800a822:	1c43      	adds	r3, r0, #1
 800a824:	4604      	mov	r4, r0
 800a826:	d158      	bne.n	800a8da <_malloc_r+0xf6>
 800a828:	f8d8 4000 	ldr.w	r4, [r8]
 800a82c:	4627      	mov	r7, r4
 800a82e:	2f00      	cmp	r7, #0
 800a830:	d143      	bne.n	800a8ba <_malloc_r+0xd6>
 800a832:	2c00      	cmp	r4, #0
 800a834:	d04b      	beq.n	800a8ce <_malloc_r+0xea>
 800a836:	6823      	ldr	r3, [r4, #0]
 800a838:	4639      	mov	r1, r7
 800a83a:	4630      	mov	r0, r6
 800a83c:	eb04 0903 	add.w	r9, r4, r3
 800a840:	f000 fb5c 	bl	800aefc <_sbrk_r>
 800a844:	4581      	cmp	r9, r0
 800a846:	d142      	bne.n	800a8ce <_malloc_r+0xea>
 800a848:	6821      	ldr	r1, [r4, #0]
 800a84a:	1a6d      	subs	r5, r5, r1
 800a84c:	4629      	mov	r1, r5
 800a84e:	4630      	mov	r0, r6
 800a850:	f7ff ffa6 	bl	800a7a0 <sbrk_aligned>
 800a854:	3001      	adds	r0, #1
 800a856:	d03a      	beq.n	800a8ce <_malloc_r+0xea>
 800a858:	6823      	ldr	r3, [r4, #0]
 800a85a:	442b      	add	r3, r5
 800a85c:	6023      	str	r3, [r4, #0]
 800a85e:	f8d8 3000 	ldr.w	r3, [r8]
 800a862:	685a      	ldr	r2, [r3, #4]
 800a864:	bb62      	cbnz	r2, 800a8c0 <_malloc_r+0xdc>
 800a866:	f8c8 7000 	str.w	r7, [r8]
 800a86a:	e00f      	b.n	800a88c <_malloc_r+0xa8>
 800a86c:	6822      	ldr	r2, [r4, #0]
 800a86e:	1b52      	subs	r2, r2, r5
 800a870:	d420      	bmi.n	800a8b4 <_malloc_r+0xd0>
 800a872:	2a0b      	cmp	r2, #11
 800a874:	d917      	bls.n	800a8a6 <_malloc_r+0xc2>
 800a876:	1961      	adds	r1, r4, r5
 800a878:	42a3      	cmp	r3, r4
 800a87a:	6025      	str	r5, [r4, #0]
 800a87c:	bf18      	it	ne
 800a87e:	6059      	strne	r1, [r3, #4]
 800a880:	6863      	ldr	r3, [r4, #4]
 800a882:	bf08      	it	eq
 800a884:	f8c8 1000 	streq.w	r1, [r8]
 800a888:	5162      	str	r2, [r4, r5]
 800a88a:	604b      	str	r3, [r1, #4]
 800a88c:	4630      	mov	r0, r6
 800a88e:	f000 f82f 	bl	800a8f0 <__malloc_unlock>
 800a892:	f104 000b 	add.w	r0, r4, #11
 800a896:	1d23      	adds	r3, r4, #4
 800a898:	f020 0007 	bic.w	r0, r0, #7
 800a89c:	1ac2      	subs	r2, r0, r3
 800a89e:	bf1c      	itt	ne
 800a8a0:	1a1b      	subne	r3, r3, r0
 800a8a2:	50a3      	strne	r3, [r4, r2]
 800a8a4:	e7af      	b.n	800a806 <_malloc_r+0x22>
 800a8a6:	6862      	ldr	r2, [r4, #4]
 800a8a8:	42a3      	cmp	r3, r4
 800a8aa:	bf0c      	ite	eq
 800a8ac:	f8c8 2000 	streq.w	r2, [r8]
 800a8b0:	605a      	strne	r2, [r3, #4]
 800a8b2:	e7eb      	b.n	800a88c <_malloc_r+0xa8>
 800a8b4:	4623      	mov	r3, r4
 800a8b6:	6864      	ldr	r4, [r4, #4]
 800a8b8:	e7ae      	b.n	800a818 <_malloc_r+0x34>
 800a8ba:	463c      	mov	r4, r7
 800a8bc:	687f      	ldr	r7, [r7, #4]
 800a8be:	e7b6      	b.n	800a82e <_malloc_r+0x4a>
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	42a3      	cmp	r3, r4
 800a8c6:	d1fb      	bne.n	800a8c0 <_malloc_r+0xdc>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	6053      	str	r3, [r2, #4]
 800a8cc:	e7de      	b.n	800a88c <_malloc_r+0xa8>
 800a8ce:	230c      	movs	r3, #12
 800a8d0:	6033      	str	r3, [r6, #0]
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	f000 f80c 	bl	800a8f0 <__malloc_unlock>
 800a8d8:	e794      	b.n	800a804 <_malloc_r+0x20>
 800a8da:	6005      	str	r5, [r0, #0]
 800a8dc:	e7d6      	b.n	800a88c <_malloc_r+0xa8>
 800a8de:	bf00      	nop
 800a8e0:	200020dc 	.word	0x200020dc

0800a8e4 <__malloc_lock>:
 800a8e4:	4801      	ldr	r0, [pc, #4]	@ (800a8ec <__malloc_lock+0x8>)
 800a8e6:	f7ff bf01 	b.w	800a6ec <__retarget_lock_acquire_recursive>
 800a8ea:	bf00      	nop
 800a8ec:	200020d4 	.word	0x200020d4

0800a8f0 <__malloc_unlock>:
 800a8f0:	4801      	ldr	r0, [pc, #4]	@ (800a8f8 <__malloc_unlock+0x8>)
 800a8f2:	f7ff befc 	b.w	800a6ee <__retarget_lock_release_recursive>
 800a8f6:	bf00      	nop
 800a8f8:	200020d4 	.word	0x200020d4

0800a8fc <__ssputs_r>:
 800a8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a900:	688e      	ldr	r6, [r1, #8]
 800a902:	461f      	mov	r7, r3
 800a904:	42be      	cmp	r6, r7
 800a906:	680b      	ldr	r3, [r1, #0]
 800a908:	4682      	mov	sl, r0
 800a90a:	460c      	mov	r4, r1
 800a90c:	4690      	mov	r8, r2
 800a90e:	d82d      	bhi.n	800a96c <__ssputs_r+0x70>
 800a910:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a914:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a918:	d026      	beq.n	800a968 <__ssputs_r+0x6c>
 800a91a:	6965      	ldr	r5, [r4, #20]
 800a91c:	6909      	ldr	r1, [r1, #16]
 800a91e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a922:	eba3 0901 	sub.w	r9, r3, r1
 800a926:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a92a:	1c7b      	adds	r3, r7, #1
 800a92c:	444b      	add	r3, r9
 800a92e:	106d      	asrs	r5, r5, #1
 800a930:	429d      	cmp	r5, r3
 800a932:	bf38      	it	cc
 800a934:	461d      	movcc	r5, r3
 800a936:	0553      	lsls	r3, r2, #21
 800a938:	d527      	bpl.n	800a98a <__ssputs_r+0x8e>
 800a93a:	4629      	mov	r1, r5
 800a93c:	f7ff ff52 	bl	800a7e4 <_malloc_r>
 800a940:	4606      	mov	r6, r0
 800a942:	b360      	cbz	r0, 800a99e <__ssputs_r+0xa2>
 800a944:	6921      	ldr	r1, [r4, #16]
 800a946:	464a      	mov	r2, r9
 800a948:	f7ff fed2 	bl	800a6f0 <memcpy>
 800a94c:	89a3      	ldrh	r3, [r4, #12]
 800a94e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a956:	81a3      	strh	r3, [r4, #12]
 800a958:	6126      	str	r6, [r4, #16]
 800a95a:	6165      	str	r5, [r4, #20]
 800a95c:	444e      	add	r6, r9
 800a95e:	eba5 0509 	sub.w	r5, r5, r9
 800a962:	6026      	str	r6, [r4, #0]
 800a964:	60a5      	str	r5, [r4, #8]
 800a966:	463e      	mov	r6, r7
 800a968:	42be      	cmp	r6, r7
 800a96a:	d900      	bls.n	800a96e <__ssputs_r+0x72>
 800a96c:	463e      	mov	r6, r7
 800a96e:	6820      	ldr	r0, [r4, #0]
 800a970:	4632      	mov	r2, r6
 800a972:	4641      	mov	r1, r8
 800a974:	f000 faa8 	bl	800aec8 <memmove>
 800a978:	68a3      	ldr	r3, [r4, #8]
 800a97a:	1b9b      	subs	r3, r3, r6
 800a97c:	60a3      	str	r3, [r4, #8]
 800a97e:	6823      	ldr	r3, [r4, #0]
 800a980:	4433      	add	r3, r6
 800a982:	6023      	str	r3, [r4, #0]
 800a984:	2000      	movs	r0, #0
 800a986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a98a:	462a      	mov	r2, r5
 800a98c:	f000 fac6 	bl	800af1c <_realloc_r>
 800a990:	4606      	mov	r6, r0
 800a992:	2800      	cmp	r0, #0
 800a994:	d1e0      	bne.n	800a958 <__ssputs_r+0x5c>
 800a996:	6921      	ldr	r1, [r4, #16]
 800a998:	4650      	mov	r0, sl
 800a99a:	f7ff feb7 	bl	800a70c <_free_r>
 800a99e:	230c      	movs	r3, #12
 800a9a0:	f8ca 3000 	str.w	r3, [sl]
 800a9a4:	89a3      	ldrh	r3, [r4, #12]
 800a9a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9aa:	81a3      	strh	r3, [r4, #12]
 800a9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b0:	e7e9      	b.n	800a986 <__ssputs_r+0x8a>
	...

0800a9b4 <_svfiprintf_r>:
 800a9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b8:	4698      	mov	r8, r3
 800a9ba:	898b      	ldrh	r3, [r1, #12]
 800a9bc:	061b      	lsls	r3, r3, #24
 800a9be:	b09d      	sub	sp, #116	@ 0x74
 800a9c0:	4607      	mov	r7, r0
 800a9c2:	460d      	mov	r5, r1
 800a9c4:	4614      	mov	r4, r2
 800a9c6:	d510      	bpl.n	800a9ea <_svfiprintf_r+0x36>
 800a9c8:	690b      	ldr	r3, [r1, #16]
 800a9ca:	b973      	cbnz	r3, 800a9ea <_svfiprintf_r+0x36>
 800a9cc:	2140      	movs	r1, #64	@ 0x40
 800a9ce:	f7ff ff09 	bl	800a7e4 <_malloc_r>
 800a9d2:	6028      	str	r0, [r5, #0]
 800a9d4:	6128      	str	r0, [r5, #16]
 800a9d6:	b930      	cbnz	r0, 800a9e6 <_svfiprintf_r+0x32>
 800a9d8:	230c      	movs	r3, #12
 800a9da:	603b      	str	r3, [r7, #0]
 800a9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e0:	b01d      	add	sp, #116	@ 0x74
 800a9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e6:	2340      	movs	r3, #64	@ 0x40
 800a9e8:	616b      	str	r3, [r5, #20]
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9ee:	2320      	movs	r3, #32
 800a9f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9f8:	2330      	movs	r3, #48	@ 0x30
 800a9fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ab98 <_svfiprintf_r+0x1e4>
 800a9fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa02:	f04f 0901 	mov.w	r9, #1
 800aa06:	4623      	mov	r3, r4
 800aa08:	469a      	mov	sl, r3
 800aa0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa0e:	b10a      	cbz	r2, 800aa14 <_svfiprintf_r+0x60>
 800aa10:	2a25      	cmp	r2, #37	@ 0x25
 800aa12:	d1f9      	bne.n	800aa08 <_svfiprintf_r+0x54>
 800aa14:	ebba 0b04 	subs.w	fp, sl, r4
 800aa18:	d00b      	beq.n	800aa32 <_svfiprintf_r+0x7e>
 800aa1a:	465b      	mov	r3, fp
 800aa1c:	4622      	mov	r2, r4
 800aa1e:	4629      	mov	r1, r5
 800aa20:	4638      	mov	r0, r7
 800aa22:	f7ff ff6b 	bl	800a8fc <__ssputs_r>
 800aa26:	3001      	adds	r0, #1
 800aa28:	f000 80a7 	beq.w	800ab7a <_svfiprintf_r+0x1c6>
 800aa2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa2e:	445a      	add	r2, fp
 800aa30:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa32:	f89a 3000 	ldrb.w	r3, [sl]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f000 809f 	beq.w	800ab7a <_svfiprintf_r+0x1c6>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa46:	f10a 0a01 	add.w	sl, sl, #1
 800aa4a:	9304      	str	r3, [sp, #16]
 800aa4c:	9307      	str	r3, [sp, #28]
 800aa4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa52:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa54:	4654      	mov	r4, sl
 800aa56:	2205      	movs	r2, #5
 800aa58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa5c:	484e      	ldr	r0, [pc, #312]	@ (800ab98 <_svfiprintf_r+0x1e4>)
 800aa5e:	f7f5 fbbf 	bl	80001e0 <memchr>
 800aa62:	9a04      	ldr	r2, [sp, #16]
 800aa64:	b9d8      	cbnz	r0, 800aa9e <_svfiprintf_r+0xea>
 800aa66:	06d0      	lsls	r0, r2, #27
 800aa68:	bf44      	itt	mi
 800aa6a:	2320      	movmi	r3, #32
 800aa6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa70:	0711      	lsls	r1, r2, #28
 800aa72:	bf44      	itt	mi
 800aa74:	232b      	movmi	r3, #43	@ 0x2b
 800aa76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa7a:	f89a 3000 	ldrb.w	r3, [sl]
 800aa7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa80:	d015      	beq.n	800aaae <_svfiprintf_r+0xfa>
 800aa82:	9a07      	ldr	r2, [sp, #28]
 800aa84:	4654      	mov	r4, sl
 800aa86:	2000      	movs	r0, #0
 800aa88:	f04f 0c0a 	mov.w	ip, #10
 800aa8c:	4621      	mov	r1, r4
 800aa8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa92:	3b30      	subs	r3, #48	@ 0x30
 800aa94:	2b09      	cmp	r3, #9
 800aa96:	d94b      	bls.n	800ab30 <_svfiprintf_r+0x17c>
 800aa98:	b1b0      	cbz	r0, 800aac8 <_svfiprintf_r+0x114>
 800aa9a:	9207      	str	r2, [sp, #28]
 800aa9c:	e014      	b.n	800aac8 <_svfiprintf_r+0x114>
 800aa9e:	eba0 0308 	sub.w	r3, r0, r8
 800aaa2:	fa09 f303 	lsl.w	r3, r9, r3
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	9304      	str	r3, [sp, #16]
 800aaaa:	46a2      	mov	sl, r4
 800aaac:	e7d2      	b.n	800aa54 <_svfiprintf_r+0xa0>
 800aaae:	9b03      	ldr	r3, [sp, #12]
 800aab0:	1d19      	adds	r1, r3, #4
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	9103      	str	r1, [sp, #12]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	bfbb      	ittet	lt
 800aaba:	425b      	neglt	r3, r3
 800aabc:	f042 0202 	orrlt.w	r2, r2, #2
 800aac0:	9307      	strge	r3, [sp, #28]
 800aac2:	9307      	strlt	r3, [sp, #28]
 800aac4:	bfb8      	it	lt
 800aac6:	9204      	strlt	r2, [sp, #16]
 800aac8:	7823      	ldrb	r3, [r4, #0]
 800aaca:	2b2e      	cmp	r3, #46	@ 0x2e
 800aacc:	d10a      	bne.n	800aae4 <_svfiprintf_r+0x130>
 800aace:	7863      	ldrb	r3, [r4, #1]
 800aad0:	2b2a      	cmp	r3, #42	@ 0x2a
 800aad2:	d132      	bne.n	800ab3a <_svfiprintf_r+0x186>
 800aad4:	9b03      	ldr	r3, [sp, #12]
 800aad6:	1d1a      	adds	r2, r3, #4
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	9203      	str	r2, [sp, #12]
 800aadc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aae0:	3402      	adds	r4, #2
 800aae2:	9305      	str	r3, [sp, #20]
 800aae4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aba8 <_svfiprintf_r+0x1f4>
 800aae8:	7821      	ldrb	r1, [r4, #0]
 800aaea:	2203      	movs	r2, #3
 800aaec:	4650      	mov	r0, sl
 800aaee:	f7f5 fb77 	bl	80001e0 <memchr>
 800aaf2:	b138      	cbz	r0, 800ab04 <_svfiprintf_r+0x150>
 800aaf4:	9b04      	ldr	r3, [sp, #16]
 800aaf6:	eba0 000a 	sub.w	r0, r0, sl
 800aafa:	2240      	movs	r2, #64	@ 0x40
 800aafc:	4082      	lsls	r2, r0
 800aafe:	4313      	orrs	r3, r2
 800ab00:	3401      	adds	r4, #1
 800ab02:	9304      	str	r3, [sp, #16]
 800ab04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab08:	4824      	ldr	r0, [pc, #144]	@ (800ab9c <_svfiprintf_r+0x1e8>)
 800ab0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab0e:	2206      	movs	r2, #6
 800ab10:	f7f5 fb66 	bl	80001e0 <memchr>
 800ab14:	2800      	cmp	r0, #0
 800ab16:	d036      	beq.n	800ab86 <_svfiprintf_r+0x1d2>
 800ab18:	4b21      	ldr	r3, [pc, #132]	@ (800aba0 <_svfiprintf_r+0x1ec>)
 800ab1a:	bb1b      	cbnz	r3, 800ab64 <_svfiprintf_r+0x1b0>
 800ab1c:	9b03      	ldr	r3, [sp, #12]
 800ab1e:	3307      	adds	r3, #7
 800ab20:	f023 0307 	bic.w	r3, r3, #7
 800ab24:	3308      	adds	r3, #8
 800ab26:	9303      	str	r3, [sp, #12]
 800ab28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab2a:	4433      	add	r3, r6
 800ab2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab2e:	e76a      	b.n	800aa06 <_svfiprintf_r+0x52>
 800ab30:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab34:	460c      	mov	r4, r1
 800ab36:	2001      	movs	r0, #1
 800ab38:	e7a8      	b.n	800aa8c <_svfiprintf_r+0xd8>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	3401      	adds	r4, #1
 800ab3e:	9305      	str	r3, [sp, #20]
 800ab40:	4619      	mov	r1, r3
 800ab42:	f04f 0c0a 	mov.w	ip, #10
 800ab46:	4620      	mov	r0, r4
 800ab48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab4c:	3a30      	subs	r2, #48	@ 0x30
 800ab4e:	2a09      	cmp	r2, #9
 800ab50:	d903      	bls.n	800ab5a <_svfiprintf_r+0x1a6>
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d0c6      	beq.n	800aae4 <_svfiprintf_r+0x130>
 800ab56:	9105      	str	r1, [sp, #20]
 800ab58:	e7c4      	b.n	800aae4 <_svfiprintf_r+0x130>
 800ab5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab5e:	4604      	mov	r4, r0
 800ab60:	2301      	movs	r3, #1
 800ab62:	e7f0      	b.n	800ab46 <_svfiprintf_r+0x192>
 800ab64:	ab03      	add	r3, sp, #12
 800ab66:	9300      	str	r3, [sp, #0]
 800ab68:	462a      	mov	r2, r5
 800ab6a:	4b0e      	ldr	r3, [pc, #56]	@ (800aba4 <_svfiprintf_r+0x1f0>)
 800ab6c:	a904      	add	r1, sp, #16
 800ab6e:	4638      	mov	r0, r7
 800ab70:	f3af 8000 	nop.w
 800ab74:	1c42      	adds	r2, r0, #1
 800ab76:	4606      	mov	r6, r0
 800ab78:	d1d6      	bne.n	800ab28 <_svfiprintf_r+0x174>
 800ab7a:	89ab      	ldrh	r3, [r5, #12]
 800ab7c:	065b      	lsls	r3, r3, #25
 800ab7e:	f53f af2d 	bmi.w	800a9dc <_svfiprintf_r+0x28>
 800ab82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab84:	e72c      	b.n	800a9e0 <_svfiprintf_r+0x2c>
 800ab86:	ab03      	add	r3, sp, #12
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	462a      	mov	r2, r5
 800ab8c:	4b05      	ldr	r3, [pc, #20]	@ (800aba4 <_svfiprintf_r+0x1f0>)
 800ab8e:	a904      	add	r1, sp, #16
 800ab90:	4638      	mov	r0, r7
 800ab92:	f000 f879 	bl	800ac88 <_printf_i>
 800ab96:	e7ed      	b.n	800ab74 <_svfiprintf_r+0x1c0>
 800ab98:	0800b00c 	.word	0x0800b00c
 800ab9c:	0800b016 	.word	0x0800b016
 800aba0:	00000000 	.word	0x00000000
 800aba4:	0800a8fd 	.word	0x0800a8fd
 800aba8:	0800b012 	.word	0x0800b012

0800abac <_printf_common>:
 800abac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abb0:	4616      	mov	r6, r2
 800abb2:	4698      	mov	r8, r3
 800abb4:	688a      	ldr	r2, [r1, #8]
 800abb6:	690b      	ldr	r3, [r1, #16]
 800abb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800abbc:	4293      	cmp	r3, r2
 800abbe:	bfb8      	it	lt
 800abc0:	4613      	movlt	r3, r2
 800abc2:	6033      	str	r3, [r6, #0]
 800abc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800abc8:	4607      	mov	r7, r0
 800abca:	460c      	mov	r4, r1
 800abcc:	b10a      	cbz	r2, 800abd2 <_printf_common+0x26>
 800abce:	3301      	adds	r3, #1
 800abd0:	6033      	str	r3, [r6, #0]
 800abd2:	6823      	ldr	r3, [r4, #0]
 800abd4:	0699      	lsls	r1, r3, #26
 800abd6:	bf42      	ittt	mi
 800abd8:	6833      	ldrmi	r3, [r6, #0]
 800abda:	3302      	addmi	r3, #2
 800abdc:	6033      	strmi	r3, [r6, #0]
 800abde:	6825      	ldr	r5, [r4, #0]
 800abe0:	f015 0506 	ands.w	r5, r5, #6
 800abe4:	d106      	bne.n	800abf4 <_printf_common+0x48>
 800abe6:	f104 0a19 	add.w	sl, r4, #25
 800abea:	68e3      	ldr	r3, [r4, #12]
 800abec:	6832      	ldr	r2, [r6, #0]
 800abee:	1a9b      	subs	r3, r3, r2
 800abf0:	42ab      	cmp	r3, r5
 800abf2:	dc26      	bgt.n	800ac42 <_printf_common+0x96>
 800abf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800abf8:	6822      	ldr	r2, [r4, #0]
 800abfa:	3b00      	subs	r3, #0
 800abfc:	bf18      	it	ne
 800abfe:	2301      	movne	r3, #1
 800ac00:	0692      	lsls	r2, r2, #26
 800ac02:	d42b      	bmi.n	800ac5c <_printf_common+0xb0>
 800ac04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac08:	4641      	mov	r1, r8
 800ac0a:	4638      	mov	r0, r7
 800ac0c:	47c8      	blx	r9
 800ac0e:	3001      	adds	r0, #1
 800ac10:	d01e      	beq.n	800ac50 <_printf_common+0xa4>
 800ac12:	6823      	ldr	r3, [r4, #0]
 800ac14:	6922      	ldr	r2, [r4, #16]
 800ac16:	f003 0306 	and.w	r3, r3, #6
 800ac1a:	2b04      	cmp	r3, #4
 800ac1c:	bf02      	ittt	eq
 800ac1e:	68e5      	ldreq	r5, [r4, #12]
 800ac20:	6833      	ldreq	r3, [r6, #0]
 800ac22:	1aed      	subeq	r5, r5, r3
 800ac24:	68a3      	ldr	r3, [r4, #8]
 800ac26:	bf0c      	ite	eq
 800ac28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac2c:	2500      	movne	r5, #0
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	bfc4      	itt	gt
 800ac32:	1a9b      	subgt	r3, r3, r2
 800ac34:	18ed      	addgt	r5, r5, r3
 800ac36:	2600      	movs	r6, #0
 800ac38:	341a      	adds	r4, #26
 800ac3a:	42b5      	cmp	r5, r6
 800ac3c:	d11a      	bne.n	800ac74 <_printf_common+0xc8>
 800ac3e:	2000      	movs	r0, #0
 800ac40:	e008      	b.n	800ac54 <_printf_common+0xa8>
 800ac42:	2301      	movs	r3, #1
 800ac44:	4652      	mov	r2, sl
 800ac46:	4641      	mov	r1, r8
 800ac48:	4638      	mov	r0, r7
 800ac4a:	47c8      	blx	r9
 800ac4c:	3001      	adds	r0, #1
 800ac4e:	d103      	bne.n	800ac58 <_printf_common+0xac>
 800ac50:	f04f 30ff 	mov.w	r0, #4294967295
 800ac54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac58:	3501      	adds	r5, #1
 800ac5a:	e7c6      	b.n	800abea <_printf_common+0x3e>
 800ac5c:	18e1      	adds	r1, r4, r3
 800ac5e:	1c5a      	adds	r2, r3, #1
 800ac60:	2030      	movs	r0, #48	@ 0x30
 800ac62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac66:	4422      	add	r2, r4
 800ac68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac70:	3302      	adds	r3, #2
 800ac72:	e7c7      	b.n	800ac04 <_printf_common+0x58>
 800ac74:	2301      	movs	r3, #1
 800ac76:	4622      	mov	r2, r4
 800ac78:	4641      	mov	r1, r8
 800ac7a:	4638      	mov	r0, r7
 800ac7c:	47c8      	blx	r9
 800ac7e:	3001      	adds	r0, #1
 800ac80:	d0e6      	beq.n	800ac50 <_printf_common+0xa4>
 800ac82:	3601      	adds	r6, #1
 800ac84:	e7d9      	b.n	800ac3a <_printf_common+0x8e>
	...

0800ac88 <_printf_i>:
 800ac88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac8c:	7e0f      	ldrb	r7, [r1, #24]
 800ac8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac90:	2f78      	cmp	r7, #120	@ 0x78
 800ac92:	4691      	mov	r9, r2
 800ac94:	4680      	mov	r8, r0
 800ac96:	460c      	mov	r4, r1
 800ac98:	469a      	mov	sl, r3
 800ac9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac9e:	d807      	bhi.n	800acb0 <_printf_i+0x28>
 800aca0:	2f62      	cmp	r7, #98	@ 0x62
 800aca2:	d80a      	bhi.n	800acba <_printf_i+0x32>
 800aca4:	2f00      	cmp	r7, #0
 800aca6:	f000 80d2 	beq.w	800ae4e <_printf_i+0x1c6>
 800acaa:	2f58      	cmp	r7, #88	@ 0x58
 800acac:	f000 80b9 	beq.w	800ae22 <_printf_i+0x19a>
 800acb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800acb8:	e03a      	b.n	800ad30 <_printf_i+0xa8>
 800acba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800acbe:	2b15      	cmp	r3, #21
 800acc0:	d8f6      	bhi.n	800acb0 <_printf_i+0x28>
 800acc2:	a101      	add	r1, pc, #4	@ (adr r1, 800acc8 <_printf_i+0x40>)
 800acc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acc8:	0800ad21 	.word	0x0800ad21
 800accc:	0800ad35 	.word	0x0800ad35
 800acd0:	0800acb1 	.word	0x0800acb1
 800acd4:	0800acb1 	.word	0x0800acb1
 800acd8:	0800acb1 	.word	0x0800acb1
 800acdc:	0800acb1 	.word	0x0800acb1
 800ace0:	0800ad35 	.word	0x0800ad35
 800ace4:	0800acb1 	.word	0x0800acb1
 800ace8:	0800acb1 	.word	0x0800acb1
 800acec:	0800acb1 	.word	0x0800acb1
 800acf0:	0800acb1 	.word	0x0800acb1
 800acf4:	0800ae35 	.word	0x0800ae35
 800acf8:	0800ad5f 	.word	0x0800ad5f
 800acfc:	0800adef 	.word	0x0800adef
 800ad00:	0800acb1 	.word	0x0800acb1
 800ad04:	0800acb1 	.word	0x0800acb1
 800ad08:	0800ae57 	.word	0x0800ae57
 800ad0c:	0800acb1 	.word	0x0800acb1
 800ad10:	0800ad5f 	.word	0x0800ad5f
 800ad14:	0800acb1 	.word	0x0800acb1
 800ad18:	0800acb1 	.word	0x0800acb1
 800ad1c:	0800adf7 	.word	0x0800adf7
 800ad20:	6833      	ldr	r3, [r6, #0]
 800ad22:	1d1a      	adds	r2, r3, #4
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	6032      	str	r2, [r6, #0]
 800ad28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad30:	2301      	movs	r3, #1
 800ad32:	e09d      	b.n	800ae70 <_printf_i+0x1e8>
 800ad34:	6833      	ldr	r3, [r6, #0]
 800ad36:	6820      	ldr	r0, [r4, #0]
 800ad38:	1d19      	adds	r1, r3, #4
 800ad3a:	6031      	str	r1, [r6, #0]
 800ad3c:	0606      	lsls	r6, r0, #24
 800ad3e:	d501      	bpl.n	800ad44 <_printf_i+0xbc>
 800ad40:	681d      	ldr	r5, [r3, #0]
 800ad42:	e003      	b.n	800ad4c <_printf_i+0xc4>
 800ad44:	0645      	lsls	r5, r0, #25
 800ad46:	d5fb      	bpl.n	800ad40 <_printf_i+0xb8>
 800ad48:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad4c:	2d00      	cmp	r5, #0
 800ad4e:	da03      	bge.n	800ad58 <_printf_i+0xd0>
 800ad50:	232d      	movs	r3, #45	@ 0x2d
 800ad52:	426d      	negs	r5, r5
 800ad54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad58:	4859      	ldr	r0, [pc, #356]	@ (800aec0 <_printf_i+0x238>)
 800ad5a:	230a      	movs	r3, #10
 800ad5c:	e011      	b.n	800ad82 <_printf_i+0xfa>
 800ad5e:	6821      	ldr	r1, [r4, #0]
 800ad60:	6833      	ldr	r3, [r6, #0]
 800ad62:	0608      	lsls	r0, r1, #24
 800ad64:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad68:	d402      	bmi.n	800ad70 <_printf_i+0xe8>
 800ad6a:	0649      	lsls	r1, r1, #25
 800ad6c:	bf48      	it	mi
 800ad6e:	b2ad      	uxthmi	r5, r5
 800ad70:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad72:	4853      	ldr	r0, [pc, #332]	@ (800aec0 <_printf_i+0x238>)
 800ad74:	6033      	str	r3, [r6, #0]
 800ad76:	bf14      	ite	ne
 800ad78:	230a      	movne	r3, #10
 800ad7a:	2308      	moveq	r3, #8
 800ad7c:	2100      	movs	r1, #0
 800ad7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad82:	6866      	ldr	r6, [r4, #4]
 800ad84:	60a6      	str	r6, [r4, #8]
 800ad86:	2e00      	cmp	r6, #0
 800ad88:	bfa2      	ittt	ge
 800ad8a:	6821      	ldrge	r1, [r4, #0]
 800ad8c:	f021 0104 	bicge.w	r1, r1, #4
 800ad90:	6021      	strge	r1, [r4, #0]
 800ad92:	b90d      	cbnz	r5, 800ad98 <_printf_i+0x110>
 800ad94:	2e00      	cmp	r6, #0
 800ad96:	d04b      	beq.n	800ae30 <_printf_i+0x1a8>
 800ad98:	4616      	mov	r6, r2
 800ad9a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad9e:	fb03 5711 	mls	r7, r3, r1, r5
 800ada2:	5dc7      	ldrb	r7, [r0, r7]
 800ada4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ada8:	462f      	mov	r7, r5
 800adaa:	42bb      	cmp	r3, r7
 800adac:	460d      	mov	r5, r1
 800adae:	d9f4      	bls.n	800ad9a <_printf_i+0x112>
 800adb0:	2b08      	cmp	r3, #8
 800adb2:	d10b      	bne.n	800adcc <_printf_i+0x144>
 800adb4:	6823      	ldr	r3, [r4, #0]
 800adb6:	07df      	lsls	r7, r3, #31
 800adb8:	d508      	bpl.n	800adcc <_printf_i+0x144>
 800adba:	6923      	ldr	r3, [r4, #16]
 800adbc:	6861      	ldr	r1, [r4, #4]
 800adbe:	4299      	cmp	r1, r3
 800adc0:	bfde      	ittt	le
 800adc2:	2330      	movle	r3, #48	@ 0x30
 800adc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800adc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800adcc:	1b92      	subs	r2, r2, r6
 800adce:	6122      	str	r2, [r4, #16]
 800add0:	f8cd a000 	str.w	sl, [sp]
 800add4:	464b      	mov	r3, r9
 800add6:	aa03      	add	r2, sp, #12
 800add8:	4621      	mov	r1, r4
 800adda:	4640      	mov	r0, r8
 800addc:	f7ff fee6 	bl	800abac <_printf_common>
 800ade0:	3001      	adds	r0, #1
 800ade2:	d14a      	bne.n	800ae7a <_printf_i+0x1f2>
 800ade4:	f04f 30ff 	mov.w	r0, #4294967295
 800ade8:	b004      	add	sp, #16
 800adea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adee:	6823      	ldr	r3, [r4, #0]
 800adf0:	f043 0320 	orr.w	r3, r3, #32
 800adf4:	6023      	str	r3, [r4, #0]
 800adf6:	4833      	ldr	r0, [pc, #204]	@ (800aec4 <_printf_i+0x23c>)
 800adf8:	2778      	movs	r7, #120	@ 0x78
 800adfa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800adfe:	6823      	ldr	r3, [r4, #0]
 800ae00:	6831      	ldr	r1, [r6, #0]
 800ae02:	061f      	lsls	r7, r3, #24
 800ae04:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae08:	d402      	bmi.n	800ae10 <_printf_i+0x188>
 800ae0a:	065f      	lsls	r7, r3, #25
 800ae0c:	bf48      	it	mi
 800ae0e:	b2ad      	uxthmi	r5, r5
 800ae10:	6031      	str	r1, [r6, #0]
 800ae12:	07d9      	lsls	r1, r3, #31
 800ae14:	bf44      	itt	mi
 800ae16:	f043 0320 	orrmi.w	r3, r3, #32
 800ae1a:	6023      	strmi	r3, [r4, #0]
 800ae1c:	b11d      	cbz	r5, 800ae26 <_printf_i+0x19e>
 800ae1e:	2310      	movs	r3, #16
 800ae20:	e7ac      	b.n	800ad7c <_printf_i+0xf4>
 800ae22:	4827      	ldr	r0, [pc, #156]	@ (800aec0 <_printf_i+0x238>)
 800ae24:	e7e9      	b.n	800adfa <_printf_i+0x172>
 800ae26:	6823      	ldr	r3, [r4, #0]
 800ae28:	f023 0320 	bic.w	r3, r3, #32
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	e7f6      	b.n	800ae1e <_printf_i+0x196>
 800ae30:	4616      	mov	r6, r2
 800ae32:	e7bd      	b.n	800adb0 <_printf_i+0x128>
 800ae34:	6833      	ldr	r3, [r6, #0]
 800ae36:	6825      	ldr	r5, [r4, #0]
 800ae38:	6961      	ldr	r1, [r4, #20]
 800ae3a:	1d18      	adds	r0, r3, #4
 800ae3c:	6030      	str	r0, [r6, #0]
 800ae3e:	062e      	lsls	r6, r5, #24
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	d501      	bpl.n	800ae48 <_printf_i+0x1c0>
 800ae44:	6019      	str	r1, [r3, #0]
 800ae46:	e002      	b.n	800ae4e <_printf_i+0x1c6>
 800ae48:	0668      	lsls	r0, r5, #25
 800ae4a:	d5fb      	bpl.n	800ae44 <_printf_i+0x1bc>
 800ae4c:	8019      	strh	r1, [r3, #0]
 800ae4e:	2300      	movs	r3, #0
 800ae50:	6123      	str	r3, [r4, #16]
 800ae52:	4616      	mov	r6, r2
 800ae54:	e7bc      	b.n	800add0 <_printf_i+0x148>
 800ae56:	6833      	ldr	r3, [r6, #0]
 800ae58:	1d1a      	adds	r2, r3, #4
 800ae5a:	6032      	str	r2, [r6, #0]
 800ae5c:	681e      	ldr	r6, [r3, #0]
 800ae5e:	6862      	ldr	r2, [r4, #4]
 800ae60:	2100      	movs	r1, #0
 800ae62:	4630      	mov	r0, r6
 800ae64:	f7f5 f9bc 	bl	80001e0 <memchr>
 800ae68:	b108      	cbz	r0, 800ae6e <_printf_i+0x1e6>
 800ae6a:	1b80      	subs	r0, r0, r6
 800ae6c:	6060      	str	r0, [r4, #4]
 800ae6e:	6863      	ldr	r3, [r4, #4]
 800ae70:	6123      	str	r3, [r4, #16]
 800ae72:	2300      	movs	r3, #0
 800ae74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae78:	e7aa      	b.n	800add0 <_printf_i+0x148>
 800ae7a:	6923      	ldr	r3, [r4, #16]
 800ae7c:	4632      	mov	r2, r6
 800ae7e:	4649      	mov	r1, r9
 800ae80:	4640      	mov	r0, r8
 800ae82:	47d0      	blx	sl
 800ae84:	3001      	adds	r0, #1
 800ae86:	d0ad      	beq.n	800ade4 <_printf_i+0x15c>
 800ae88:	6823      	ldr	r3, [r4, #0]
 800ae8a:	079b      	lsls	r3, r3, #30
 800ae8c:	d413      	bmi.n	800aeb6 <_printf_i+0x22e>
 800ae8e:	68e0      	ldr	r0, [r4, #12]
 800ae90:	9b03      	ldr	r3, [sp, #12]
 800ae92:	4298      	cmp	r0, r3
 800ae94:	bfb8      	it	lt
 800ae96:	4618      	movlt	r0, r3
 800ae98:	e7a6      	b.n	800ade8 <_printf_i+0x160>
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	4632      	mov	r2, r6
 800ae9e:	4649      	mov	r1, r9
 800aea0:	4640      	mov	r0, r8
 800aea2:	47d0      	blx	sl
 800aea4:	3001      	adds	r0, #1
 800aea6:	d09d      	beq.n	800ade4 <_printf_i+0x15c>
 800aea8:	3501      	adds	r5, #1
 800aeaa:	68e3      	ldr	r3, [r4, #12]
 800aeac:	9903      	ldr	r1, [sp, #12]
 800aeae:	1a5b      	subs	r3, r3, r1
 800aeb0:	42ab      	cmp	r3, r5
 800aeb2:	dcf2      	bgt.n	800ae9a <_printf_i+0x212>
 800aeb4:	e7eb      	b.n	800ae8e <_printf_i+0x206>
 800aeb6:	2500      	movs	r5, #0
 800aeb8:	f104 0619 	add.w	r6, r4, #25
 800aebc:	e7f5      	b.n	800aeaa <_printf_i+0x222>
 800aebe:	bf00      	nop
 800aec0:	0800b01d 	.word	0x0800b01d
 800aec4:	0800b02e 	.word	0x0800b02e

0800aec8 <memmove>:
 800aec8:	4288      	cmp	r0, r1
 800aeca:	b510      	push	{r4, lr}
 800aecc:	eb01 0402 	add.w	r4, r1, r2
 800aed0:	d902      	bls.n	800aed8 <memmove+0x10>
 800aed2:	4284      	cmp	r4, r0
 800aed4:	4623      	mov	r3, r4
 800aed6:	d807      	bhi.n	800aee8 <memmove+0x20>
 800aed8:	1e43      	subs	r3, r0, #1
 800aeda:	42a1      	cmp	r1, r4
 800aedc:	d008      	beq.n	800aef0 <memmove+0x28>
 800aede:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aee2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aee6:	e7f8      	b.n	800aeda <memmove+0x12>
 800aee8:	4402      	add	r2, r0
 800aeea:	4601      	mov	r1, r0
 800aeec:	428a      	cmp	r2, r1
 800aeee:	d100      	bne.n	800aef2 <memmove+0x2a>
 800aef0:	bd10      	pop	{r4, pc}
 800aef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aef6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aefa:	e7f7      	b.n	800aeec <memmove+0x24>

0800aefc <_sbrk_r>:
 800aefc:	b538      	push	{r3, r4, r5, lr}
 800aefe:	4d06      	ldr	r5, [pc, #24]	@ (800af18 <_sbrk_r+0x1c>)
 800af00:	2300      	movs	r3, #0
 800af02:	4604      	mov	r4, r0
 800af04:	4608      	mov	r0, r1
 800af06:	602b      	str	r3, [r5, #0]
 800af08:	f7f6 fbca 	bl	80016a0 <_sbrk>
 800af0c:	1c43      	adds	r3, r0, #1
 800af0e:	d102      	bne.n	800af16 <_sbrk_r+0x1a>
 800af10:	682b      	ldr	r3, [r5, #0]
 800af12:	b103      	cbz	r3, 800af16 <_sbrk_r+0x1a>
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	bd38      	pop	{r3, r4, r5, pc}
 800af18:	200020d0 	.word	0x200020d0

0800af1c <_realloc_r>:
 800af1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af20:	4680      	mov	r8, r0
 800af22:	4615      	mov	r5, r2
 800af24:	460c      	mov	r4, r1
 800af26:	b921      	cbnz	r1, 800af32 <_realloc_r+0x16>
 800af28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af2c:	4611      	mov	r1, r2
 800af2e:	f7ff bc59 	b.w	800a7e4 <_malloc_r>
 800af32:	b92a      	cbnz	r2, 800af40 <_realloc_r+0x24>
 800af34:	f7ff fbea 	bl	800a70c <_free_r>
 800af38:	2400      	movs	r4, #0
 800af3a:	4620      	mov	r0, r4
 800af3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af40:	f000 f81a 	bl	800af78 <_malloc_usable_size_r>
 800af44:	4285      	cmp	r5, r0
 800af46:	4606      	mov	r6, r0
 800af48:	d802      	bhi.n	800af50 <_realloc_r+0x34>
 800af4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800af4e:	d8f4      	bhi.n	800af3a <_realloc_r+0x1e>
 800af50:	4629      	mov	r1, r5
 800af52:	4640      	mov	r0, r8
 800af54:	f7ff fc46 	bl	800a7e4 <_malloc_r>
 800af58:	4607      	mov	r7, r0
 800af5a:	2800      	cmp	r0, #0
 800af5c:	d0ec      	beq.n	800af38 <_realloc_r+0x1c>
 800af5e:	42b5      	cmp	r5, r6
 800af60:	462a      	mov	r2, r5
 800af62:	4621      	mov	r1, r4
 800af64:	bf28      	it	cs
 800af66:	4632      	movcs	r2, r6
 800af68:	f7ff fbc2 	bl	800a6f0 <memcpy>
 800af6c:	4621      	mov	r1, r4
 800af6e:	4640      	mov	r0, r8
 800af70:	f7ff fbcc 	bl	800a70c <_free_r>
 800af74:	463c      	mov	r4, r7
 800af76:	e7e0      	b.n	800af3a <_realloc_r+0x1e>

0800af78 <_malloc_usable_size_r>:
 800af78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af7c:	1f18      	subs	r0, r3, #4
 800af7e:	2b00      	cmp	r3, #0
 800af80:	bfbc      	itt	lt
 800af82:	580b      	ldrlt	r3, [r1, r0]
 800af84:	18c0      	addlt	r0, r0, r3
 800af86:	4770      	bx	lr

0800af88 <_init>:
 800af88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8a:	bf00      	nop
 800af8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af8e:	bc08      	pop	{r3}
 800af90:	469e      	mov	lr, r3
 800af92:	4770      	bx	lr

0800af94 <_fini>:
 800af94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af96:	bf00      	nop
 800af98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af9a:	bc08      	pop	{r3}
 800af9c:	469e      	mov	lr, r3
 800af9e:	4770      	bx	lr
